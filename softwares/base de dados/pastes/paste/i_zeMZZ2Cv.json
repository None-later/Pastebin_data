{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "lg_en"
 ],
 "key": "zeMZZ2Cv",
 "pasteDate": "Feb 20, 2018, 7:06:07 PM",
 "relevancy": 3.0,
 "relevant": false,
 "text": "import android.content.Context;\nimport android.support.annotation.Nullable;\nimport android.support.v4.view.PagerAdapter;\nimport android.support.v4.view.ViewPager;\nimport android.util.AttributeSet;\nimport android.view.View;\nimport android.view.ViewGroup;\n\n/**\n * {@link ViewPager} that wraps current page's height\n *\n * @author Leo\n */\npublic class WrapContentViewPager extends ViewPager {\n    private Adapter mAdapter;\n\n    public WrapContentViewPager(Context context) {\n        this(context, null);\n    }\n\n    public WrapContentViewPager(Context context, AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    @Override\n    public void setAdapter(PagerAdapter adapter) {\n        if (!(adapter instanceof Adapter))\n            throw new IllegalArgumentException(\"Adapter of WrapContentViewPager has to implement WrapContentViewPager.Adapter\");\n        mAdapter = (Adapter) adapter;\n        super.setAdapter(adapter);\n    }\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        int height = 0;\n\n        View child = mAdapter == null ? null : mAdapter.getCurrentPageView(getCurrentItem());\n        if (child != null) {\n            child.measure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED));\n            int h = child.getMeasuredHeight();\n            if (h > height) height = h;\n        } else if (getAdapter() != null && getAdapter().getCount() > 0) {\n            post(this::requestLayout); // recur until we can get reference to the current page view\n        }\n\n        if (height != 0) {\n            height += getPaddingTop() + getPaddingBottom(); // take padding into account\n            heightMeasureSpec = MeasureSpec.makeMeasureSpec(height, MeasureSpec.EXACTLY);\n        }\n\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n    }\n\n    public interface Adapter {\n        /**\n         * <p>Get view for currently selected page of the ViewPager.\n         * <p>Since this method is only called to get the View of current page, so implementation of this method should\n         * NOT keep references to ALL pages of the ViewPager, but utilize\n         * {@link PagerAdapter#destroyItem(ViewGroup, int, Object)} to remove unnecessary references instead.\n         * <p>Or you can override {@link PagerAdapter#setPrimaryItem(ViewGroup, int, Object)} to grab reference to\n         * current view.\n         *\n         * @param currentPosition current page of the ViewPager\n         * @return {@link View} instance of the current page\n         */\n        @Nullable\n        View getCurrentPageView(int currentPosition);\n    }\n}",
 "title": ""
}