{
 "espireDate": "2W",
 "format": "python",
 "jSonReasons": [
  "kw_error",
  "kw_pass",
  "lg_en"
 ],
 "key": "Ezk5yF9k",
 "pasteDate": "Feb 17, 2018, 5:57:15 PM",
 "relevancy": 1.0,
 "relevant": false,
 "text": "import socket\nimport time\n\n\nclass ClientError(Exception):\n    \"\"\"   \"\"\"\n    pass\n\n\nclass ClientSocketError(ClientError):\n    \"\"\",     \"\"\"\n    pass\n\n\nclass ClientProtocolError(ClientError):\n    \"\"\",     \"\"\"\n    pass\n\n\nclass Client:\n    def __init__(self, host, port, timeout=None):\n        #    \n        #   ,   socke.socket  self \n        self.host = host\n        self.port = port\n        try:\n            self.connection = socket.create_connection((host, port), timeout)\n        except socket.error as err:\n            raise ClientSocketError(\"error create connection\", err)\n\n    def _read(self):\n        \"\"\"    \"\"\"\n        data = b\"\"\n        #  ,    \"\\n\\n\"   \n        while not data.endswith(b\"\\n\\n\"):\n            try:\n                data += self.connection.recv(1024)\n            except socket.error as err:\n                raise ClientSocketError(\"error recv data\", err)\n\n        #       str   \n        decoded_data = data.decode()\n\n        status, payload = decoded_data.split(\"\\n\", 1)\n        payload = payload.strip()\n\n        #    -   ClientError\n        if status == \"error\":\n            raise ClientProtocolError(payload)\n\n        return payload\n\n    def put(self, key, value, timestamp=None):\n        timestamp = timestamp or int(time.time())\n\n        #    put\n        try:\n            self.connection.sendall(\n                f\"put {key} {value} {timestamp}\\n\".encode()\n            )\n        except socket.error as err:\n            raise ClientSocketError(\"error send data\", err)\n\n        #  \n        self._read()\n\n    def get(self, key):\n        #      get\n        try:\n            self.connection.sendall(\n                f\"get {key}\\n\".encode()\n            )\n        except socket.error as err:\n            raise ClientSocketError(\"error send data\", err)\n\n        #  \n        payload = self._read()\n\n        data = {}\n        if payload == \"\":\n            return data\n\n        #     get\n        for row in payload.split(\"\\n\"):\n            key, value, timestamp = row.split()\n            if key not in data:\n                data[key] = []\n            data[key].append((int(timestamp), float(value)))\n\n        return data\n\n    def close(self):\n        try:\n            self.connection.close()\n        except socket.error as err:\n            raise ClientSocketError(\"error close connection\", err)\n\n\ndef _main():\n    #   \n    client = Client(\"127.0.0.1\", 8888, timeout=5)\n    client.put(\"test\", 0.5, timestamp=1)\n    client.put(\"test\", 2.0, timestamp=2)\n    client.put(\"test\", 0.5, timestamp=3)\n    client.put(\"load\", 3, timestamp=4)\n    client.put(\"load\", 4, timestamp=5)\n    print(client.get(\"*\"))\n    \n    client.close()\n\n\nif __name__ == \"__main__\":\n    _main()",
 "title": ""
}