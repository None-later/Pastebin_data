{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "kw_down",
  "kw_target",
  "lg_en"
 ],
 "key": "mp8kxVMP",
 "pasteDate": "Feb 8, 2018, 1:28:23 PM",
 "relevancy": 2.0,
 "relevant": false,
 "text": "using System;\nusing System.IO;\nusing System.Diagnostics;\n\n#if !(UNITY_STANDALONE || UNITY_EDITOR)\nusing System.Numerics;\n#endif\n\n\nclass Testing\n{\n    string logFile;\n    int sampleCount;\n\n    public Testing(string logFile, int sampleCount)\n    {\n        this.logFile = logFile;\n        this.sampleCount = sampleCount;\n    }\n\n    /// <summary>\n    /// Complete copy of Unity3D Vector3 struct\n    /// </summary>\n    public void TestVector3UnityCustom()\n    {\n        GC.Collect();\n        GC.WaitForPendingFinalizers();\n\n        Stopwatch watch = new Stopwatch();\n        float x = 2;\n\n        //Results\n        long msPlusEqualProp = -1;\n        long msManualAdd = -1;\n        long msPlusEqualVar = -1;\n        long msManualAddNonProp = -1;\n        long msMulVar = -1;\n        long msMulConst = -1;\n\n\n        Vector3Unity res = Vector3Unity.one;\n        watch.Reset();\n        watch.Start();\n        for (int i = 0; i < sampleCount; i++)\n        {\n            res += Vector3Unity.one;\n        }\n        watch.Stop();\n        msPlusEqualProp = watch.ElapsedMilliseconds;\n\n        res = Vector3Unity.one;\n        watch.Reset();\n        watch.Start();\n        for (int i = 0; i < sampleCount; i++)\n        {\n            res.x += Vector3Unity.one.x;\n            res.y += Vector3Unity.one.y;\n            res.z += Vector3Unity.one.z;\n        }\n        watch.Stop();\n        msManualAdd = watch.ElapsedMilliseconds;\n\n        res = Vector3Unity.one;\n        watch.Reset();\n        watch.Start();\n        Vector3Unity toAdd = Vector3Unity.one;\n        for (int i = 0; i < sampleCount; i++)\n        {\n            res += toAdd;\n        }\n        watch.Stop();\n        msPlusEqualVar = watch.ElapsedMilliseconds;\n\n        res = Vector3Unity.one;\n        watch.Reset();\n        watch.Start();\n        toAdd = Vector3Unity.one;\n        for (int i = 0; i < sampleCount; i++)\n        {\n            res.x += toAdd.x;\n            res.y += toAdd.y;\n            res.z += toAdd.z;\n        }\n        watch.Stop();\n        msManualAddNonProp = watch.ElapsedMilliseconds;\n\n        res = Vector3Unity.one;\n        watch.Reset();\n        watch.Start();\n        for (int i = 0; i < sampleCount; i++)\n        {\n            res *= x;\n        }\n        watch.Stop();\n        msMulVar = watch.ElapsedMilliseconds;\n\n        res = Vector3Unity.one;\n        watch.Reset();\n        watch.Start();\n        for (int i = 0; i < sampleCount; i++)\n        {\n            res *= 2;\n        }\n        watch.Stop();\n        msMulConst = watch.ElapsedMilliseconds;\n\n        File.AppendAllText(logFile, \"-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= UnityEngine.Vector3 COPY =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\\r\\n\");\n        File.AppendAllText(logFile, \"Test: res += Vector3.one: \" + msPlusEqualProp + \" ms\\r\\n\");\n        File.AppendAllText(logFile, \"Test: Manual Add: \" + msManualAdd + \" ms\\r\\n\");\n        File.AppendAllText(logFile, \"Test: res += res: \" + msPlusEqualVar + \" ms\\r\\n\");\n        File.AppendAllText(logFile, \"Test: Manual Add (non-property): \" + msManualAddNonProp + \" ms\\r\\n\");\n        File.AppendAllText(logFile, \"Test: Vector3 => res *= x: \" + msMulVar + \" ms\\r\\n\");\n        File.AppendAllText(logFile, \"Test: Vector3 => res *= const: \" + msMulVar + \" ms\\r\\n\");\n\n        File.AppendAllText(logFile, \"\\r\\n\");\n    }\n\n    public void TestVector3Numerics()\n    {\n#if !(UNITY_STANDALONE || UNITY_EDITOR)\n        GC.Collect();\n        GC.WaitForPendingFinalizers();\n\n        //Results\n        long msPlusEqualProp = -1;\n        long msManualAdd = -1;\n        long msPlusEqualVar = -1;\n        long msManualAddNonProp = -1;\n        long msMulVar = -1;\n        long msMulConst = -1;\n\n        Stopwatch watch = new Stopwatch();\n        float x = 2;\n\n        Vector3 res = Vector3.One;\n        watch.Reset();\n        watch.Start();\n        for (int i = 0; i < sampleCount; i++)\n        {\n            res += Vector3.One;\n        }\n        watch.Stop();\n        msPlusEqualProp = watch.ElapsedMilliseconds;\n\n        res = Vector3.One;\n        watch.Reset();\n        watch.Start();\n        for (int i = 0; i < sampleCount; i++)\n        {\n            res.X += Vector3.One.X;\n            res.Y += Vector3.One.Y;\n            res.Z += Vector3.One.Z;\n        }\n        watch.Stop();\n        msManualAdd = watch.ElapsedMilliseconds;\n\n        res = Vector3.One;\n        watch.Reset();\n        watch.Start();\n        Vector3 toAdd = Vector3.One;\n        for (int i = 0; i < sampleCount; i++)\n        {\n            res += toAdd;\n        }\n        watch.Stop();\n        msPlusEqualVar = watch.ElapsedMilliseconds;\n\n        res = Vector3.One;\n        watch.Reset();\n        watch.Start();\n        toAdd = Vector3.One;\n        for (int i = 0; i < sampleCount; i++)\n        {\n            res.X += toAdd.X;\n            res.Y += toAdd.Y;\n            res.Z += toAdd.Z;\n        }\n        watch.Stop();\n        msManualAddNonProp = watch.ElapsedMilliseconds;\n\n        res = Vector3.One;\n        watch.Reset();\n        watch.Start();\n        for (int i = 0; i < sampleCount; i++)\n        {\n            res *= x;\n        }\n        watch.Stop();\n        msMulVar = watch.ElapsedMilliseconds;\n\n        res = Vector3.One;\n        watch.Reset();\n        watch.Start();\n        for (int i = 0; i < sampleCount; i++)\n        {\n            res *= 2;\n        }\n        watch.Stop();\n        msMulConst = watch.ElapsedMilliseconds;\n\n        File.AppendAllText(logFile, \"-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= System.Numerics.Vector3 =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\\r\\n\");\n\n        File.AppendAllText(logFile, \"res => res += Vector3.One: \" + msPlusEqualProp + \" ms\\r\\n\");\n        File.AppendAllText(logFile, \"Test: res => Manual Add: \" + msManualAdd + \" ms\\r\\n\");\n        File.AppendAllText(logFile, \"Test: vec += vec \" + msPlusEqualVar + \" ms\\r\\n\");\n        File.AppendAllText(logFile, \"Test: Vector3 => Manual Add (non-property) \" + msManualAddNonProp + \" ms\\r\\n\");\n        File.AppendAllText(logFile, \"Test: res *= x: \" + msMulVar + \" ms\\r\\n\");\n        File.AppendAllText(logFile, \"Test: res *= const: \" + msMulConst + \" ms\\r\\n\");\n\n        File.AppendAllText(logFile, \"\\r\\n\");\n#else\n        File.AppendAllText(logFile, \"-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= System.Numerics.Vector3 =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\\r\\n\");\n\n        File.AppendAllText(logFile, \"System.Numerics not available in Unity3D\\r\\n\");\n        File.AppendAllText(logFile, \"\\r\\n\");\n#endif\n    }\n\n    public void TestVector3Unity()\n    {\n#if UNITY_STANDALONE || UNTY_EDITOR\n        GC.Collect();\n        GC.WaitForPendingFinalizers();\n\n        //Results\n        long msPlusEqualProp = -1;\n        long msManualAdd = -1;\n        long msPlusEqualVar = -1;\n        long msManualAddNonProp = -1;\n        long msMulVar = -1;\n        long msMulConst = -1;\n\n        Stopwatch watch = new Stopwatch();\n        float x = 2;\n\n        UnityEngine.Vector3 res = UnityEngine.Vector3.one;\n        watch.Reset();\n        watch.Start();\n        for (int i = 0; i < sampleCount; i++)\n        {\n            res += UnityEngine.Vector3.one;\n        }\n        watch.Stop();\n        msPlusEqualProp = watch.ElapsedMilliseconds;\n\n        res = UnityEngine.Vector3.one;\n        watch.Reset();\n        watch.Start();\n        for (int i = 0; i < sampleCount; i++)\n        {\n            res.x += UnityEngine.Vector3.one.x;\n            res.y += UnityEngine.Vector3.one.y;\n            res.z += UnityEngine.Vector3.one.z;\n        }\n        watch.Stop();\n        msManualAdd = watch.ElapsedMilliseconds;\n\n        res = UnityEngine.Vector3.one;\n        watch.Reset();\n        watch.Start();\n        UnityEngine.Vector3 toAdd = UnityEngine.Vector3.one;\n        for (int i = 0; i < sampleCount; i++)\n        {\n            res += toAdd;\n        }\n        watch.Stop();\n        msPlusEqualVar = watch.ElapsedMilliseconds;\n\n        res = UnityEngine.Vector3.one;\n        watch.Reset();\n        watch.Start();\n        toAdd = UnityEngine.Vector3.one;\n        for (int i = 0; i < sampleCount; i++)\n        {\n            res.x += toAdd.x;\n            res.y += toAdd.y;\n            res.z += toAdd.z;\n        }\n        watch.Stop();\n        msManualAddNonProp = watch.ElapsedMilliseconds;\n\n        res = UnityEngine.Vector3.one;\n        watch.Reset();\n        watch.Start();\n        for (int i = 0; i < sampleCount; i++)\n        {\n            res *= x;\n        }\n        watch.Stop();\n        msMulVar = watch.ElapsedMilliseconds;\n\n        res = UnityEngine.Vector3.one;\n        watch.Reset();\n        watch.Start();\n        for (int i = 0; i < sampleCount; i++)\n        {\n            res *= 2;\n        }\n        watch.Stop();\n        msMulConst = watch.ElapsedMilliseconds;\n\n        File.AppendAllText(logFile, \"-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= System.Numerics.UnityEngine.Vector3 =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\\r\\n\");\n\n        File.AppendAllText(logFile, \"res => res += UnityEngine.Vector3.one: \" + msPlusEqualProp + \" ms\\r\\n\");\n        File.AppendAllText(logFile, \"Test: res => Manual Add: \" + msManualAdd + \" ms\\r\\n\");\n        File.AppendAllText(logFile, \"Test: vec += vec \" + msPlusEqualVar + \" ms\\r\\n\");\n        File.AppendAllText(logFile, \"Test: UnityEngine.Vector3 => Manual Add (non-property) \" + msManualAddNonProp + \" ms\\r\\n\");\n        File.AppendAllText(logFile, \"Test: res *= x: \" + msMulVar + \" ms\\r\\n\");\n        File.AppendAllText(logFile, \"Test: res *= const: \" + msMulConst + \" ms\\r\\n\");\n\n        File.AppendAllText(logFile, \"\\r\\n\");\n#else\n        File.AppendAllText(logFile, \"-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= UnityEngine.Vector3 =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\\r\\n\");\n\n        File.AppendAllText(logFile, \"Unity3D Not found...\\r\\n\");\n        File.AppendAllText(logFile, \"\\r\\n\");\n#endif\n    }\n\n    public void TestAll()\n    {\n        File.WriteAllText(logFile, \"Samples: \" + sampleCount + \"\\r\\n\");\n        File.AppendAllText(logFile, \"CLR Version: \" + Environment.Version + \"\\r\\n\");\n        File.AppendAllText(logFile, \"Runtime Version: \" + (typeof(string).Assembly.ImageRuntimeVersion) + \"\\r\\n\");\n        File.AppendAllText(logFile, \"Is Mono: \" + (Type.GetType(\"Mono.Runtime\") != null) + \"\\r\\n\");\n        File.AppendAllText(logFile, \"Is Unity3D: \" + this.IsUnity() + \"\\r\\n\");\n        File.AppendAllText(logFile, \"Is Unity3D Editor: \" + this.IsUnityEditor() + \"\\r\\n\");\n\n        TestVector3UnityCustom();\n        TestVector3Numerics();\n        TestVector3Unity();\n    }\n\n    private bool IsUnity()\n    {\n#if UNITY_STANDALONE || UNITY_EDITOR\n        return true;\n#else\n        return false;\n#endif\n    }\n\n    private bool IsUnityEditor()\n    {\n#if UNITY_EDITOR\n        return true;\n#else\n        return false;\n#endif\n    }\n}\n\npublic struct Vector3Unity\n{\n    private static readonly Vector3Unity zeroVector = new Vector3Unity(0.0f, 0.0f, 0.0f);\n    private static readonly Vector3Unity oneVector = new Vector3Unity(1f, 1f, 1f);\n    private static readonly Vector3Unity upVector = new Vector3Unity(0.0f, 1f, 0.0f);\n    private static readonly Vector3Unity downVector = new Vector3Unity(0.0f, -1f, 0.0f);\n    private static readonly Vector3Unity leftVector = new Vector3Unity(-1f, 0.0f, 0.0f);\n    private static readonly Vector3Unity rightVector = new Vector3Unity(1f, 0.0f, 0.0f);\n    private static readonly Vector3Unity forwardVector = new Vector3Unity(0.0f, 0.0f, 1f);\n    private static readonly Vector3Unity backVector = new Vector3Unity(0.0f, 0.0f, -1f);\n    private static readonly Vector3Unity positiveInfinityVector = new Vector3Unity(float.PositiveInfinity, float.PositiveInfinity, float.PositiveInfinity);\n    private static readonly Vector3Unity negativeInfinityVector = new Vector3Unity(float.NegativeInfinity, float.NegativeInfinity, float.NegativeInfinity);\n    public const float kEpsilon = 1E-05f;\n    /// <summary>\n    ///   <para>X component of the vector.</para>\n    /// </summary>\n    public float x;\n    /// <summary>\n    ///   <para>Y component of the vector.</para>\n    /// </summary>\n    public float y;\n    /// <summary>\n    ///   <para>Z component of the vector.</para>\n    /// </summary>\n    public float z;\n\n    public float this[int index]\n    {\n        get\n        {\n            switch (index)\n            {\n                case 0:\n                    return this.x;\n                case 1:\n                    return this.y;\n                case 2:\n                    return this.z;\n                default:\n                    throw new IndexOutOfRangeException(\"Invalid Vector3 index!\");\n            }\n        }\n        set\n        {\n            switch (index)\n            {\n                case 0:\n                    this.x = value;\n                    break;\n                case 1:\n                    this.y = value;\n                    break;\n                case 2:\n                    this.z = value;\n                    break;\n                default:\n                    throw new IndexOutOfRangeException(\"Invalid Vector3 index!\");\n            }\n        }\n    }\n\n    /// <summary>\n    ///   <para>Returns this vector with a magnitude of 1 (Read Only).</para>\n    /// </summary>\n    public Vector3Unity normalized\n    {\n        get\n        {\n            return Vector3Unity.Normalize(this);\n        }\n    }\n\n    /// <summary>\n    ///   <para>Returns the length of this vector (Read Only).</para>\n    /// </summary>\n    public float magnitude\n    {\n        get\n        {\n            return (float)Math.Sqrt(x * x + y * y + z * z);\n        }\n    }\n\n    /// <summary>\n    ///   <para>Returns the squared length of this vector (Read Only).</para>\n    /// </summary>\n    public float sqrMagnitude\n    {\n        get\n        {\n            return x * x + y * y + z * z;\n        }\n    }\n\n    /// <summary>\n    ///   <para>Shorthand for writing Vector3(0, 0, 0).</para>\n    /// </summary>\n    public static Vector3Unity zero\n    {\n        get\n        {\n            return Vector3Unity.zeroVector;\n        }\n    }\n\n    /// <summary>\n    ///   <para>Shorthand for writing Vector3(1, 1, 1).</para>\n    /// </summary>\n    public static Vector3Unity one\n    {\n        get\n        {\n            return Vector3Unity.oneVector;\n        }\n    }\n\n    /// <summary>\n    ///   <para>Shorthand for writing Vector3(0, 0, 1).</para>\n    /// </summary>\n    public static Vector3Unity forward\n    {\n        get\n        {\n            return Vector3Unity.forwardVector;\n        }\n    }\n\n    /// <summary>\n    ///   <para>Shorthand for writing Vector3(0, 0, -1).</para>\n    /// </summary>\n    public static Vector3Unity back\n    {\n        get\n        {\n            return Vector3Unity.backVector;\n        }\n    }\n\n    /// <summary>\n    ///   <para>Shorthand for writing Vector3(0, 1, 0).</para>\n    /// </summary>\n    public static Vector3Unity up\n    {\n        get\n        {\n            return Vector3Unity.upVector;\n        }\n    }\n\n    /// <summary>\n    ///   <para>Shorthand for writing Vector3(0, -1, 0).</para>\n    /// </summary>\n    public static Vector3Unity down\n    {\n        get\n        {\n            return Vector3Unity.downVector;\n        }\n    }\n\n    /// <summary>\n    ///   <para>Shorthand for writing Vector3(-1, 0, 0).</para>\n    /// </summary>\n    public static Vector3Unity left\n    {\n        get\n        {\n            return Vector3Unity.leftVector;\n        }\n    }\n\n    /// <summary>\n    ///   <para>Shorthand for writing Vector3(1, 0, 0).</para>\n    /// </summary>\n    public static Vector3Unity right\n    {\n        get\n        {\n            return Vector3Unity.rightVector;\n        }\n    }\n\n    /// <summary>\n    ///   <para>Shorthand for writing Vector3(float.PositiveInfinity, float.PositiveInfinity, float.PositiveInfinity).</para>\n    /// </summary>\n    public static Vector3Unity positiveInfinity\n    {\n        get\n        {\n            return Vector3Unity.positiveInfinityVector;\n        }\n    }\n\n    /// <summary>\n    ///   <para>Shorthand for writing Vector3(float.NegativeInfinity, float.NegativeInfinity, float.NegativeInfinity).</para>\n    /// </summary>\n    public static Vector3Unity negativeInfinity\n    {\n        get\n        {\n            return Vector3Unity.negativeInfinityVector;\n        }\n    }\n\n    [Obsolete(\"Use Vector3.forward instead.\")]\n    public static Vector3Unity fwd\n    {\n        get\n        {\n            return new Vector3Unity(0.0f, 0.0f, 1f);\n        }\n    }\n\n    /// <summary>\n    ///   <para>Creates a new vector with given x, y, z components.</para>\n    /// </summary>\n    /// <param name=\"x\"></param>\n    /// <param name=\"y\"></param>\n    /// <param name=\"z\"></param>\n    public Vector3Unity(float x, float y, float z)\n    {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    /// <summary>\n    ///   <para>Creates a new vector with given x, y components and sets z to zero.</para>\n    /// </summary>\n    /// <param name=\"x\"></param>\n    /// <param name=\"y\"></param>\n    public Vector3Unity(float x, float y)\n    {\n        this.x = x;\n        this.y = y;\n        this.z = 0.0f;\n    }\n\n    public static Vector3Unity operator +(Vector3Unity a, Vector3Unity b)\n    {\n        return new Vector3Unity(a.x + b.x, a.y + b.y, a.z + b.z);\n    }\n\n    public static Vector3Unity operator -(Vector3Unity a, Vector3Unity b)\n    {\n        return new Vector3Unity(a.x - b.x, a.y - b.y, a.z - b.z);\n    }\n\n    public static Vector3Unity operator -(Vector3Unity a)\n    {\n        return new Vector3Unity(-a.x, -a.y, -a.z);\n    }\n\n    public static Vector3Unity operator *(Vector3Unity a, float d)\n    {\n        return new Vector3Unity(a.x * d, a.y * d, a.z * d);\n    }\n\n    public static Vector3Unity operator *(float d, Vector3Unity a)\n    {\n        return new Vector3Unity(a.x * d, a.y * d, a.z * d);\n    }\n\n    public static Vector3Unity operator /(Vector3Unity a, float d)\n    {\n        return new Vector3Unity(a.x / d, a.y / d, a.z / d);\n    }\n\n    public static bool operator ==(Vector3Unity lhs, Vector3Unity rhs)\n    {\n        return (double)Vector3Unity.SqrMagnitude(lhs - rhs) < 9.99999943962493E-11;\n    }\n\n    public static bool operator !=(Vector3Unity lhs, Vector3Unity rhs)\n    {\n        return !(lhs == rhs);\n    }\n\n    /// <summary>\n    ///   <para>Spherically interpolates between two vectors.</para>\n    /// </summary>\n    /// <param name=\"a\">Dear Unity... EXPLANATON??????</param>\n    /// <param name=\"b\">Dear Unity... EXPLANATON??????</param>\n    /// <param name=\"t\">Dear Unity... EXPLANATON??????</param>\n    public static Vector3Unity Lerp(Vector3Unity a, Vector3Unity b, float t)\n    {\n        t = (t > 1 ? 1 : t < 0 ? 0 : t); //Clamp T. Use ternary operator, faster than IF-ELSE\n        return new Vector3Unity(a.x + (b.x - a.x) * t, a.y + (b.y - a.y) * t, a.z + (b.z - a.z) * t);\n    }\n\n    /// <summary>\n    ///   <para>Spherically interpolates between two vectors.</para>\n    /// </summary>\n    /// <param name=\"a\"></param>\n    /// <param name=\"b\"></param>\n    /// <param name=\"t\"></param>\n    public static Vector3Unity LerpUnclamped(Vector3Unity a, Vector3Unity b, float t)\n    {\n        return new Vector3Unity(a.x + (b.x - a.x) * t, a.y + (b.y - a.y) * t, a.z + (b.z - a.z) * t);\n    }\n\n    /// <summary>\n    ///   <para>Moves a point current in a straight line towards a target point.</para>\n    /// </summary>\n    /// <param name=\"current\"></param>\n    /// <param name=\"target\"></param>\n    /// <param name=\"maxDistanceDelta\"></param>\n    public static Vector3Unity MoveTowards(Vector3Unity current, Vector3Unity target, float maxDistanceDelta)\n    {\n        Vector3Unity vector3 = target - current;\n        float magnitude = vector3.magnitude;\n        if (magnitude <= maxDistanceDelta || magnitude < 1.40129846432482E-45) return target;\n        return current + vector3 / magnitude * maxDistanceDelta;\n    }\n\n    /// <summary>\n    ///   <para>Set x, y and z components of an existing Vector3.</para>\n    /// </summary>\n    /// <param name=\"newX\"></param>\n    /// <param name=\"newY\"></param>\n    /// <param name=\"newZ\"></param>\n    public void Set(float newX, float newY, float newZ)\n    {\n        this.x = newX;\n        this.y = newY;\n        this.z = newZ;\n    }\n\n    /// <summary>\n    ///   <para>Multiplies two vectors component-wise.</para>\n    /// </summary>\n    /// <param name=\"a\"></param>\n    /// <param name=\"b\"></param>\n    public static Vector3Unity Scale(Vector3Unity a, Vector3Unity b)\n    {\n        return new Vector3Unity(a.x * b.x, a.y * b.y, a.z * b.z);\n    }\n\n    /// <summary>\n    ///   <para>Multiplies every component of this vector by the same component of scale.</para>\n    /// </summary>\n    /// <param name=\"scale\"></param>\n    public void Scale(Vector3Unity scale)\n    {\n        this.x *= scale.x;\n        this.y *= scale.y;\n        this.z *= scale.z;\n    }\n\n    /// <summary>\n    ///   <para>Cross Product of two vectors.</para>\n    /// </summary>\n    /// <param name=\"lhs\"></param>\n    /// <param name=\"rhs\"></param>\n    public static Vector3Unity Cross(Vector3Unity lhs, Vector3Unity rhs)\n    {\n        return new Vector3Unity((float)((double)lhs.y * (double)rhs.z - (double)lhs.z * (double)rhs.y), (float)((double)lhs.z * (double)rhs.x - (double)lhs.x * (double)rhs.z), (float)((double)lhs.x * (double)rhs.y - (double)lhs.y * (double)rhs.x));\n    }\n\n    public override int GetHashCode()\n    {\n        return this.x.GetHashCode() ^ this.y.GetHashCode() << 2 ^ this.z.GetHashCode() >> 2;\n    }\n\n    /// <summary>\n    ///   <para>Returns true if the given vector is exactly equal to this vector.</para>\n    /// </summary>\n    /// <param name=\"other\"></param>\n    public override bool Equals(object other)\n    {\n        if (!(other is Vector3Unity))\n            return false;\n        Vector3Unity vector3 = (Vector3Unity)other;\n        return this.x.Equals(vector3.x) && this.y.Equals(vector3.y) && this.z.Equals(vector3.z);\n    }\n\n    /// <summary>\n    ///   <para>Reflects a vector off the plane defined by a normal.</para>\n    /// </summary>\n    /// <param name=\"inDirection\"></param>\n    /// <param name=\"inNormal\"></param>\n    public static Vector3Unity Reflect(Vector3Unity inDirection, Vector3Unity inNormal)\n    {\n        return -2f * Vector3Unity.Dot(inNormal, inDirection) * inNormal + inDirection;\n    }\n\n    /// <summary>\n    ///   <para>Makes this vector have a magnitude of 1.</para>\n    /// </summary>\n    /// <param name=\"value\"></param>\n    public static Vector3Unity Normalize(Vector3Unity value)\n    {\n        float num = Vector3Unity.Magnitude(value);\n        if ((double)num > 9.99999974737875E-06)\n            return value / num;\n        return Vector3Unity.zero;\n    }\n\n    public void Normalize()\n    {\n        float num = Vector3Unity.Magnitude(this);\n        if ((double)num > 9.99999974737875E-06)\n            this = this / num;\n        else\n            this = Vector3Unity.zero;\n    }\n\n    /// <summary>\n    ///   <para>Dot Product of two vectors.</para>\n    /// </summary>\n    /// <param name=\"lhs\"></param>\n    /// <param name=\"rhs\"></param>\n    public static float Dot(Vector3Unity lhs, Vector3Unity rhs)\n    {\n        return (float)((double)lhs.x * (double)rhs.x + (double)lhs.y * (double)rhs.y + (double)lhs.z * (double)rhs.z);\n    }\n\n\n    public static float Magnitude(Vector3Unity vector)\n    {\n        return vector.magnitude;\n    }\n\n    public static float SqrMagnitude(Vector3Unity vector)\n    {\n        return vector.sqrMagnitude;\n    }\n}",
 "title": ""
}