{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "lg_en"
 ],
 "key": "WC7cLiKZ",
 "pasteDate": "Feb 28, 2018, 6:57:22 AM",
 "relevancy": 1.0,
 "relevant": false,
 "text": "package moviemanager.data;\n\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.Before;\nimport org.junit.rules.ExpectedException;\n\npublic class TagTest {\n\tpublic final ExpectedException exception = ExpectedException.none();\n\n\tprivate Movie m1;\n\tprivate Movie m2;\n\tprivate Movie m3;\n\tprivate Movie m4;\n\tprivate Tag t1;\n\tprivate Tag t2;\n\tprivate Tag t3;\n\n\tprivate Performer p1;\n\tprivate Performer p2;\n\tprivate Performer p3;\n\n\t@Before\n\tpublic void setUp() {\n\t\tm1 = new Movie();\n\n\t\tm2 = new Movie();\n\n\t\tm3 = new Movie();\n\n\t\tm4 = new Movie();\n\n\t\tp1 = new Performer();\n\n\t\tp2 = new Performer();\n\n\t\tp3 = new Performer();\n\n\t\tt1 = new Tag();\n\t\t\n\t\tt2 = new Tag();\n\t\t\n\t\tt3 = new Tag();\n\t\tp1.linkMovie(m1);\n\t\tp1.linkMovie(m4);\n\t\tm2.linkTagMovie(t1);\n\t\tp2.linkTagPerformer(t2);\n\t\t\n\t\tpublic void testLinkPerformerWithTagAlreadyInList() {\n\t\t\tint numLinkTag = p2.getTags().size();\n\t\t\tp2.linkTag(t2);\n\t\t\tassertTrue(p2.getTags().size() == numLinkTag);\n\t\t}\n\t\t\n\t\tpublic void testLinkPerformerWithUnitializedTag() {\n\t\t\tint numLinkedTag = p2.getTags().size();\n\t\t\t// This should throw an IAE\n\t\t\texception.expect(IllegalArgumentException.class);\n\t\t\tp2.unlinkTag(null);\n\n\t\t\tassertTrue(p2.getTags().size() == numLinkedMovies);\n\t\t}\n\t\t\n\t\tpublic void testUnlinkPerformerWithTagNotInList() {\n\t\t\tint numUnLinkTag = p2.getTags().size();\n\t\t\t\n\t\t\tp2.unlinkPerformerTag(t1);\n\t\t\tassertTrue(p2.getTags().size() == numUnlinkTag);\n\t\t}\n\t\t\n\t\tpublic void testUnlinkPerformerWithTagInList() {\n\t\t\tint numUnLinkTag = p2.getTags().size();\n\t\t\t\n\t\t\tp2.unlinkPerformerTag(t2);\n\t\t\tassertTrue(p2.getTags().size() == numUnlinkTag -1);\n\t\t}\n\t\t\n\t\t\n\t\tpublic void testLinkMovieWithTagAlreadyInList() {\n\t\t\tint numLinkTag = m2.getTags().size();\n\t\t\tm2.linkTag(t1);\n\t\t\tassertTrue(m2.getTags().size() == numLinkTag);\n\t\t}\n\t\t\n\t\tpublic void testLinkMovieWithUnitializedTag() {\n\t\t\tint numLinkedTag = m2.getTags().size();\n\t\t\t// This should throw an IAE\n\t\t\texception.expect(IllegalArgumentException.class);\n\t\t\tm2.unlinkTag(null);\n\n\t\t\tassertTrue(m2.getTags().size() == numLinkedMovies);\n\t\t}\n\t\t\n\t\tpublic void testUnlinkMovieWithTagNNotInList() {\n\t\t\tint numUnLinkTag = m2.getTags().size();\n\t\t\t\n\t\t\tm2.unlinkMovieTag(t1);\n\t\t\tassertTrue(m2.getTags().size() == numUnlinkTag);\n\t\t}\n\t\t\n\t\tpublic void testUnlinkMovieWithTagInList() {\n\t\t\tint numUnLinkTag = m2.getTags().size();\n\t\t\t\n\t\t\tm2.unlinkMovieTag(t1);\n\t\t\tassertTrue(m2.getTags().size() == numUnlinkTag -1);\n\t\t}\n\t\t\n\t\t\n\t\t\n\t}\n}",
 "title": ""
}