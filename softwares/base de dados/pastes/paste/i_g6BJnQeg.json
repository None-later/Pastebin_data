{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "lg_en"
 ],
 "key": "g6BJnQeg",
 "pasteDate": "Feb 28, 2018, 10:25:06 AM",
 "relevancy": 0.0,
 "relevant": false,
 "text": "public class TrieDictionaryWildCard     \n    public static class TrieNode {\n        public boolean end = false;\n        public final Map<Character, TrieNode> children = new HashMap<>();\n    } \n\n    public static class TrieFinder {\n\n        private final char wildcard;\n\n        TrieFinder(char wildcard) {\n            this.wildcard = wildcard;\n        }\n\n        List<String> find(String prefix, String suffix, TrieNode trie) {\n            List<String> results = new ArrayList<>();\n            if (trie.end) {\n                results.add(prefix);\n                return results;\n            }\n            Character c = suffix.length() == 0 ? null : suffix.charAt(0);\n            if (c == null || c == wildcard) {\n                for(Map.Entry<Character, TrieNode> entry : trie.children.entrySet()) {\n                    results.addAll(\n                        find(prefix + entry.getKey(), c == null ? \"\" : suffix.substring(1), entry.getValue())\n                    );\n                }\n            } else if (trie.children.get(c) != null) {\n                results.addAll(find(prefix + c, suffix.substring(1), trie.children.get(c)));\n            }\n\n            return results;\n        }\n    }\n\n\n    public static class TrieBuilder {\n        public TrieNode createTrie(List<String> words) {\n            TrieNode trie = new TrieNode();\n            for (String word: words) {\n                placeNodes(word, trie);\n            }\n\n            return trie;\n        }\n\n        private void placeNodes(String word, TrieNode node) {\n            if (word.length() == 0) {\n                node.end = true;\n            } else {\n                char c = word.charAt(0);\n                TrieNode next = node.children.get(c);\n                if (next == null) {\n                    next = new TrieNode();\n                    node.children.put(c, next);\n                }\n                placeNodes(word.substring(1), node.children.get(c));\n            }\n        }\n    }\n\n\n\n\n    public static void main(String[] args) {\n        List<String> dict = Arrays.asList(\"all\", \"also\", \"always\", \"book\", \"bold\", \"bounce\", \"bouldering\", \"car\", \"cat\", \"cattle\", \"cafe\", \"caf\");\n        TrieBuilder builder = new TrieBuilder();\n        TrieNode trie = builder.createTrie(dict);\n        System.out.println(trie.children.size());\n        TrieFinder finder = new TrieFinder('*');\n        List<String> a = finder.find(\"\", \"a\", trie);\n        List<String> al = finder.find(\"\", \"al\", trie);\n        List<String> b = finder.find(\"\", \"b\", trie);\n        List<String> bo = finder.find(\"\", \"bo\", trie);\n        List<String> b_ = finder.find(\"\", \"b*\", trie);\n        List<String> bou_ = finder.find(\"\", \"bou*\", trie);\n        List<String> b__l = finder.find(\"\", \"b**l\", trie);\n        List<String> b___ = finder.find(\"\", \"b***\", trie);\n      }\n\n\n}",
 "title": ""
}