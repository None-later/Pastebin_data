{
 "espireDate": "N",
 "format": "cpp",
 "jSonReasons": [
  "lg_en"
 ],
 "key": "yWX8FxG1",
 "pasteDate": "Feb 11, 2018, 7:39:01 PM",
 "relevancy": 2.0,
 "relevant": false,
 "text": "//\n//  test.cpp\n//  SFML1\n//\n//  Created by Sander Berntsen on 19.01.2018.\n//  Copyright  2018 BernInc. All rights reserved.\n\n\n#include <SFML/Graphics.hpp>\n\n#include <ctime>\n#include <cmath>\n#include <iostream>\n\nsf::RenderWindow window(sf::VideoMode(1000, 1000), \"Task 1\");\nconst clock_t begin_time = clock();\n\nclass Planet\n{\nprivate:\n    \n    int x, y, OD;\n    float velocity;\n    \n    sf::CircleShape shape;\n    \npublic:\n    \n    Planet(int radius, int OD, sf::Color color) {\n        \n        this->OD = OD;\n        this->velocity = 1;\n        this->shape.setRadius(radius);\n        this->shape.setOrigin(radius, radius);\n        this->shape.setFillColor(color);\n        \n    }\n    \n    int getX() const { return x; }\n    int getY() const { return y; }\n    int getOD(Planet planet) const { return planet.getShape().getRadius() + OD; }\n    float getVelocity() const { return velocity; }\n    sf::CircleShape getShape() const { return shape; }\n    \n    void setX(int x) { this->x = x; }\n    void setY(int y) { this->y = y; }\n    void setOD(int OD) { this->OD = OD; }\n    void setVelocity(float velocity) { this->velocity = velocity; }\n    \n    void draw() {\n        \n        this->shape.setPosition(x, y);\n        window.draw(this->shape);\n        \n    }\n};\n\nint main()\n{\n    sf::Event event;\n    \n    Planet\n    yellow = Planet(150, 0, sf::Color::Yellow),\n    blue = Planet(50, 150, sf::Color::Blue),\n    white = Planet(15, 50, sf::Color::White);\n    \n    yellow.setX(500);\n    yellow.setY(500);\n    \n    white.setVelocity(-2);\n    \n    while (window.isOpen())\n    {\n        \n        float time = float(clock() - begin_time) / CLOCKS_PER_SEC;\n        \n        while (window.pollEvent(event)) {\n            \n            switch (event.type) {\n                    \n                case sf::Event::Closed: {\n                    window.close();\n                } break;\n                    \n                case sf::Event::MouseButtonPressed: {\n                    if (yellow.getShape().getGlobalBounds().contains(event.mouseButton.x, event.mouseButton.y)) {\n                        yellow.setVelocity(yellow.getVelocity() * -1);\n                    }\n                    \n                    if (blue.getShape().getGlobalBounds().contains(event.mouseButton.x, event.mouseButton.y)) {\n                        blue.setVelocity(blue.getVelocity() * -1);\n                    }\n                    \n                    if (white.getShape().getGlobalBounds().contains(event.mouseButton.x, event.mouseButton.y)) {\n                        white.setVelocity(white.getVelocity() * -1);\n                    }\n                } break;\n                    \n                default: {\n                    // Nothing.\n                } break;\n                    \n            }\n            \n        }\n        \n        \n        blue.setX(blue.getOD(yellow) * cosl(time * blue.getVelocity()) + yellow.getX());\n        blue.setY(blue.getOD(yellow) * sinl(time * blue.getVelocity()) + yellow.getY());\n        \n        white.setX(white.getOD(blue) * cosl(time * white.getVelocity()) + blue.getX());\n        white.setY(white.getOD(blue) * sinl(time * white.getVelocity()) + blue.getY());\n        \n        window.clear();\n        yellow.draw();\n        blue.draw();\n        white.draw();\n        window.display();\n      \n    }\n    \n    return 0;\n}",
 "title": ""
}