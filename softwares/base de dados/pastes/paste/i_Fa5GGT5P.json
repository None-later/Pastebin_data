{
 "espireDate": "N",
 "format": "csharp",
 "jSonReasons": [
  "lg_en"
 ],
 "key": "Fa5GGT5P",
 "pasteDate": "Feb 20, 2018, 7:32:12 PM",
 "relevancy": 1.0,
 "relevant": false,
 "text": "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\n\nusing IdentityModel;\nusing IdentityServer4.Events;\nusing IdentityServer4.Extensions;\nusing IdentityServer4.Models;\nusing IdentityServer4.Services;\nusing IdentityServer4.Stores;\nusing IdentityServer4.Validation;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace IdentityServer4.ResponseHandling\n{\n    public class AuthorizeResponseGenerator : IAuthorizeResponseGenerator\n    {\n        private readonly ILogger<AuthorizeResponseGenerator> _logger;\n        private readonly ITokenService _tokenService;\n        private readonly IAuthorizationCodeStore _authorizationCodeStore;\n        private readonly IEventService _events;\n\n        public AuthorizeResponseGenerator(ILogger<AuthorizeResponseGenerator> logger, ITokenService tokenService, IAuthorizationCodeStore authorizationCodeStore, IEventService events)\n        {\n            _logger = logger;\n            _tokenService = tokenService;\n            _authorizationCodeStore = authorizationCodeStore;\n            _events = events;\n        }\n\n        public async Task<AuthorizeResponse> CreateResponseAsync(ValidatedAuthorizeRequest request)\n        {\n            if (request.GrantType == GrantType.AuthorizationCode)\n            {\n                return await CreateCodeFlowResponseAsync(request);\n            }\n            if (request.GrantType == GrantType.Implicit)\n            {\n                return await CreateImplicitFlowResponseAsync(request);\n            }\n            if (request.GrantType == GrantType.Hybrid)\n            {\n                return await CreateHybridFlowResponseAsync(request);\n            }\n\n            _logger.LogError(\"Unsupported grant type: \" + request.GrantType);\n            throw new InvalidOperationException(\"invalid grant type: \" + request.GrantType);\n        }\n\n        private async Task<AuthorizeResponse> CreateHybridFlowResponseAsync(ValidatedAuthorizeRequest request)\n        {\n            _logger.LogDebug(\"Creating Hybrid Flow response.\");\n\n            var code = await CreateCodeAsync(request);\n            var response = await CreateImplicitFlowResponseAsync(request, code);\n            response.Code = code;\n\n            return response;\n        }\n\n        public async Task<AuthorizeResponse> CreateCodeFlowResponseAsync(ValidatedAuthorizeRequest request)\n        {\n            _logger.LogDebug(\"Creating Authorization Code Flow response.\");\n\n            var code = await CreateCodeAsync(request);\n\n            var response = new AuthorizeResponse\n            {\n                Request = request,\n                Code = code,\n                SessionState = request.GenerateSessionStateValue()\n            };\n\n            return response;\n        }\n\n        private async Task<string> CreateCodeAsync(ValidatedAuthorizeRequest request)\n        {\n            var code = new AuthorizationCode\n            {\n                ClientId = request.Client.ClientId,\n                Lifetime = request.Client.AuthorizationCodeLifetime,\n                Subject = request.Subject,\n                SessionId = request.SessionId,\n                CodeChallenge = request.CodeChallenge.Sha256(),\n                CodeChallengeMethod = request.CodeChallengeMethod,\n\n                IsOpenId = request.IsOpenIdRequest,\n                RequestedScopes = request.ValidatedScopes.GrantedResources.ToScopeNames(),\n                RedirectUri = request.RedirectUri,\n                Nonce = request.Nonce,\n\n                WasConsentShown = request.WasConsentShown,\n            };\n\n            // store id token and access token and return authorization code\n            var id = await _authorizationCodeStore.StoreAuthorizationCodeAsync(code);\n\n            await RaiseCodeIssuedEventAsync(id, code);\n\n            return id;\n        }\n\n        public async Task<AuthorizeResponse> CreateImplicitFlowResponseAsync(ValidatedAuthorizeRequest request, string authorizationCode = null)\n        {\n            _logger.LogDebug(\"Creating Implicit Flow response.\");\n\n            string accessTokenValue = null;\n            int accessTokenLifetime = 0;\n\n            var responseTypes = request.ResponseType.FromSpaceSeparatedString();\n\n            if (responseTypes.Contains(OidcConstants.ResponseTypes.Token))\n            {\n                var tokenRequest = new TokenCreationRequest\n                {\n                    Subject = request.Subject,\n                    Client = request.Client,\n                    Resources = request.ValidatedScopes.GrantedResources,\n\n                    ValidatedRequest = request\n                };\n\n                var accessToken = await _tokenService.CreateAccessTokenAsync(tokenRequest);\n                accessTokenLifetime = accessToken.Lifetime;\n\n                accessTokenValue = await _tokenService.CreateSecurityTokenAsync(accessToken);\n            }\n\n            string jwt = null;\n            if (responseTypes.Contains(OidcConstants.ResponseTypes.IdToken))\n            {\n                var tokenRequest = new TokenCreationRequest\n                {\n                    ValidatedRequest = request,\n                    Subject = request.Subject,\n                    Client = request.Client,\n                    Resources = request.ValidatedScopes.GrantedResources,\n\n                    Nonce = request.Raw.Get(OidcConstants.AuthorizeRequest.Nonce),\n                    // if no access token is requested, then we need to include all the claims in the id token\n                    IncludeAllIdentityClaims = !request.AccessTokenRequested,\n                    AccessTokenToHash = accessTokenValue,\n                    AuthorizationCodeToHash = authorizationCode\n                };\n\n                var idToken = await _tokenService.CreateIdentityTokenAsync(tokenRequest);\n                jwt = await _tokenService.CreateSecurityTokenAsync(idToken);\n            }\n\n            var response = new AuthorizeResponse\n            {\n                Request = request,\n                AccessToken = accessTokenValue,\n                AccessTokenLifetime = accessTokenLifetime,\n                IdentityToken = jwt,\n                SessionState = request.GenerateSessionStateValue()\n            };\n\n            return response;\n        }\n\n        private async Task RaiseCodeIssuedEventAsync(string id, AuthorizationCode code)\n        {\n            await _events.RaiseAuthorizationCodeIssuedEventAsync(id, code);\n        }\n    }\n}",
 "title": ""
}