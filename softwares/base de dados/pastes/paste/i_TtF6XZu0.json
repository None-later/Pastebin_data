{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "kw_target",
  "lg_en",
  "re_ast1"
 ],
 "key": "TtF6XZu0",
 "pasteDate": "Feb 17, 2018, 12:24:28 PM",
 "relevancy": -1.0,
 "relevant": false,
 "text": "javascript:\n\n  var gd = game_data;\n/* CONFIG: ustawi na 0.00 na wiatach bez ograniczonego fejkowania */\nvar perc = 0.01;\nvar v = gd.village;\nvar u = {\n  \"spear\": 1,\n  \"sword\": 1,\n  \"axe\": 1,\n  \"archer\": 1,\n  \"spy\": 2,\n  \"light\": 4,\n  \"marcher\": 5,\n  \"heavy\": 6,\n  \"ram\": 5,\n  \"catapult\": 8,\n  \"knight\": 10,\n  \"snob\": 100\n}\nvar left;\ntry {\n  if (document.URL.indexOf('try=confirm') != -1 && document.URL.indexOf('target=') == -1);\n  else if (document.URL.indexOf('screen=place') == -1 || (document.URL.indexOf('mode') != -1 && document.URL.indexOf('mode=command') == -1)) {\n    location = gd.link_base_pure + \"place&mode=command\";\n  } else {\n    if ($('.jump_link')[0] !== undefined) {\n      location = $('#village_switch_right')[0].href;\n    } else {\n      var ul = $('.unit_link');\n      for (var i = 0; i < ul.length; i++)\n        $('#unit_input_' + $(ul[i]).attr('data-unit'))[0].value = \"\";\n      /* CONFIG: wpisz koordynaty do losowania */\n      var coords = \"482|636 460|629 462|630 464|629 475|620 463|629 485|614 484|630 506|621 502|619 504|622 509|625 507|625 507|626 503|634 511|632 499|634 501|633 500|636 499|636 511|634 502|634 504|635 500|639 504|632 505|634 505|635 509|639 508|638 500|644 509|636 502|635 506|641 507|640 506|636 510|639 503|639 509|637 503|638 501|637 499|638 507|641 501|641 505|640 505|641 503|641 508|642 500|645 501|646 504|643 499|645 506|635 511|633 488|634 490|635 495|636 488|635 493|635 496|635 491|634 493|638 489|635 495|635 492|639 493|640 492|640 491|636 488|636 494|638 496|641 495|639 495|637 490|638 488|638 493|643 490|641 492|644 493|641 492|641 492|643 498|642 489|640 488|643 491|645 493|644 495|643 496|643 481|627 475|622 494|630 482|630 495|622 494|622 487|623 497|624 479|622 498|624 486|622 493|628 490|623 473|664 477|682 476|681 477|680 478|680 474|680 473|654 470|655 470|656 488|673 487|672 487|673 486|672 486|671 484|672 485|674 472|659 483|670 481|669 478|668 482|670 476|662 476|661 483|669 479|674 484|669 476|671 478|674 482|673 483|667 478|670 483|665 481|667 480|668 484|668 479|676 479|677 479|672 480|674 479|675 481|674 485|667 477|668 479|671 480|671 477|671 475|673 477|670 472|676 473|670 478|667 476|665 474|671 476|663 467|683 470|681 461|685 466|686 464|683 463|684 462|685 476|664 488|663 493|666 489|664 485|662 486|665 490|664 488|668 489|665 490|666 470|679 459|678 459|679 462|678 465|679 461|681 476|679 464|685 460|679 467|686 460|681 464|682 468|683 466|684 460|680 458|688 459|687 459|689 473|679 476|680 465|681 456|677 457|676 457|677 454|676 454|674 455|674 458|681 457|682 463|676 460|673 474|687 476|686 477|685 471|672 472|673 473|675 469|674 473|676 474|676 473|678 471|675 472|678 469|681 472|674 474|674 477|686 459|674 458|682 432|670 430|672 470|662 472|660 467|661 469|663 469|662 465|666 430|676 430|673 429|671 427|673 425|674 424|674 427|679 425|672 431|678 430|671 432|671 426|679 424|679 427|680 425|678 425|680 474|647 472|651 473|650 473|653 474|650 476|647 476|650 475|651 475|654 475|655 475|658 476|658 476|657 476|656 476|655 476|654 477|648 477|646 478|647 478|650 477|655 477|656 478|659 478|657 479|658 479|657 479|656 479|655 479|653 479|649 480|650 480|651 480|652 481|652 480|655 480|657 480|659 481|659 481|655 481|650 482|650 482|657 483|658 484|657 485|660 485|659 487|658 485|657 472|519 467|565 470|515 436|435 470|519 465|569 472|566 472|561 470|517 434|433 473|566 471|520 469|410 471|564 470|568 466|567 434|435 437|429 471|515 471|563 445|421 436|429 437|432 471|561 474|566 470|566 467|402 442|420 434|429 468|517 468|406 470|404 432|438 441|421 434|422 441|420 431|429 463|404 469|404 457|404 447|386 455|405 437|420 459|403 458|403 468|399 435|421 473|397 430|420 456|402 468|400 459|402 433|420 460|403 467|396 488|377 455|399 457|397 456|399 457|401 459|396 456|400 455|392 457|399 434|406 452|385 430|408 435|434 432|421 454|395 457|394 467|392 431|395 435|404 465|390 466|393 454|392 439|403 434|405 428|399 436|404 433|404 457|391 432|404 457|390 489|381 455|391 436|405 438|404 466|392 436|403 453|393 432|406 433|401 491|382 433|382 450|391 451|390 453|388 483|379 455|546 455|545 452|545 456|545 458|506 457|502 457|500 458|499 459|501 461|501 459|502 461|497 460|507 455|518 460|505 458|504 456|509 460|508 461|505 459|511 461|506 457|505 459|508 458|508 460|494 456|479 457|506 456|510 462|508 463|508 465|506 464|506 461|500 456|504 461|502 460|495 467|497 449|489 464|502 471|499 470|499 469|500 471|500 419|461 424|458 418|456 426|464 422|465 423|460 427|463 422|454 425|458 431|451 430|450 430|452 419|452 414|461 415|458 410|462 410|459 411|459 432|450 420|454 422|453 411|456 408|458 409|458 410|463 424|456 407|458 410|457 428|460 425|466 420|458 411|460 419|460 425|463 422|464 421|465 424|463 422|463 423|464 424|462 424|464 422|462 418|466 426|472 425|472 426|473 427|472 425|473 427|476 429|472 472|493 473|492 471|495 473|493 475|493 474|494 472|497 366|317 363|317 362|323 358|316 357|319 361|328 357|327 359|324 370|318 373|312 371|311 367|313 366|310 373|308 376|304 357|306 358|313 368|313 359|330 372|302 343|322 351|319 347|322 346|323 343|327 352|317 357|326 342|337 355|322 339|334 341|336 347|327 366|320 345|334 358|312 343|334 356|317 353|315 360|328 360|326 348|322 371|320 337|332 364|313 348|331 367|314 375|330 354|335 372|318 365|314 376|302 374|306 369|309 362|330 362|318 374|300 374|307 363|313 355|303 356|312 360|306 338|346 340|341 339|342 339|341 338|342 339|343 335|338 356|279 353|280 361|300 362|300 354|280 335|351 374|325 375|327 372|325 342|343 339|355 378|328 310|372 309|377 309|370 315|368 313|368 294|378 311|373 336|343 335|335 327|344 379|316 377|323 381|325 365|330 367|328 374|323 399|373 376|328 380|324 367|336 463|505 454|486 456|480 460|499 460|479 457|477 461|482 456|486 447|476 458|484 454|481 455|482 447|474 459|498 453|499 436|532 466|489 433|533 437|530 457|495 444|505 445|499 445|505 445|500 445|503 443|504 462|494 444|506 443|501 445|504 444|500 445|497 457|491 446|506 447|505 447|507 440|534 446|483 466|488 441|480 449|480 449|479 451|480 448|476 444|482 442|482 444|480 444|481 449|481 446|477 446|475 448|477 456|494 460|483 461|483 435|534 456|491 454|487 442|531 458|486 461|488 461|487 458|488 457|490 437|529 440|529 441|531 456|498 436|530 459|487 467|490 467|487 447|477 447|479 446|479 459|478 436|531 455|489 474|510 473|510 475|513 475|515 438|531 441|497 445|496 445|501 448|481 461|496 448|484 450|483 457|496 460|502 450|486 462|499 464|504 463|499 449|485 462|496 456|497 459|496\".split(\" \"); \n      \n\n      var selected = [];\n      for (var i = 0; i < coords.length; ++i)\n        if (isSelected(coords[i]))\n          selected.push(coords[i]);\n\n      if (selected.length != 0) {\n        left = Math.floor(v.points * perc);\n        var index = Math.round(Math.random() * (selected.length - 1));\n        $(\".target-input-field\")[0].value = selected[index];\n        /* CONFIG: wybr wojsk */\n\n        units(\"spy\", 1);\n        units(\"ram\", 1) || units(\"catapult\", 1);\n        fill(\"spy,heavy,spear\");\n\n        if (left > 0)\n          UI.ErrorMessage('Za maa pula wojsk, aby atak skada si z ' + perc * 100 + '% ludnoci\\r\\nbrakuje ' + left + ' mieszkacw', 5000);\n      } else {\n        UI.ErrorMessage('Nie mona wybra wioski, aby atak wchodzi w podanych ramach czasowych', 5000);\n      }\n    }\n  }\n} catch (err) {\n  var message = \"Wystpi nieoczekiwany bd. Sprawd czy skrypt jest poprawnie skonfigurowany!\";\n  console.log(err.message);\n  UI.ErrorMessage(message, 5000);\n}\n\nfunction isSelected(coords) {\n  /* CONFIG: ustaw ramy czasowe, ktre ci odpowiadaj */\n  var days = [\"1-31\"];\n  var intervals = [\"8:00-23:00\"];\n  var distance = Math.hypot(coords.split(\"|\")[0] - v.x, coords.split(\"|\")[1] - v.y);\n  var destination = new Date(distance * 1800000 + gd.time_generated);\n\n  var isInInterval = (intervals, value, predicate) => {\n    for (var i = 0; i < intervals.length; i++)\n      if (predicate(value, intervals[i]))\n        return true;\n    return false;\n  };\n  if (!isInInterval(days, destination, (v, i) => {\n      v = v.getDate();\n      i = i.split('-');\n      return parseInt(i[0]) <= v && v <= parseInt(i[1]);\n    })) return false;\n  if (isInInterval(intervals, destination, (v, i) => {\n      var parseTimer = timer => parseInt(timer[0]) * 60 + parseInt(timer[1]);\n      v = parseTimer([v.getHours(), v.getMinutes()]);\n      i = i.split(\"-\");\n      return parseTimer(i[0].split(':')) <= v && v <= parseTimer(i[1].split(':'));\n    })) return true;\n  return false;\n}\n\nfunction tryUnits(name, value) {\n  var mv = $('a#units_entry_all_' + name)[0].innerText.match(/\\d+/)[0];\n  var sv = $('#unit_input_' + name)[0].value;\n  return mv - sv - value >= 0;\n}\n\nfunction units(name, value) {\n  var mv = $('a#units_entry_all_' + name)[0].innerText.match(/\\d+/)[0];\n  var sv = $('#unit_input_' + name)[0].value;\n  sv = sv == \"\" ? 0 : parseInt(sv);\n  mv -= sv;\n  if (value > mv)\n    value = mv;\n  left -= u[name] * value;\n  $('#unit_input_' + name)[0].value = sv + value;\n  return value > 0;\n}\n\nfunction fill(names) {\n  if (left <= 0) return;\n  names = names.split(',');\n  var name, quantity;\n  for (var i = 0; i < names.length; ++i) {\n    name = names[i];\n    quantity = NaN;\n    if (name.indexOf(':') != -1) {\n      quantity = parseInt(name.split(':')[1]);\n      name = name.split(':')[0];\n    }\n    units(name, Math.ceil((isNaN(quantity) ? left : (quantity * u[name] >= left ? left : quantity * u[name])) / u[name]));\n    if (left <= 0) return;\n  }\n}",
 "title": ""
}