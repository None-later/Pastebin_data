{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "lg_en"
 ],
 "key": "PFkvV0gH",
 "pasteDate": "Feb 17, 2018, 4:10:07 PM",
 "relevancy": 7.0,
 "relevant": false,
 "text": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Problem statement  \\n\",\n    \"Design a blunt system which counts how many ones were there in the input of size 2\\n\",\n    \"\\n\",\n    \"#### Input:  \\n\",\n    \"Size : 2 nodes   \\n\",\n    \"Values : 0 or 1  \\n\",\n    \"\\n\",\n    \"#### Output:\\n\",\n    \"Size : 3 nodes  \\n\",\n    \"Values : 0 or 1  \\n\",\n    \"- Node 1 is selected for no Ones  \\n\",\n    \"- Node 2 for 1 Ones  \\n\",\n    \"- Node 3 for 2 Ones  \"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Solution  \\n\",\n    \"First thing is to import the required modules\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import torch\\n\",\n    \"from torch import nn\\n\",\n    \"from torch.autograd import Variable\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Next step is to define the model class\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 10,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"class SimpleModel(nn.Module):\\n\",\n    \"    def __init__(self):\\n\",\n    \"        super(SimpleModel,self).__init__()\\n\",\n    \"        self.fc1 = nn.Linear(2,3)\\n\",\n    \"        self.fc2 = nn.Linear(3,3)\\n\",\n    \"    def forward(self,x):\\n\",\n    \"        z1 = self.fc1(x)\\n\",\n    \"        a1 = torch.tanh(z1)\\n\",\n    \"        z2 = self.fc2(a1)\\n\",\n    \"        a2 = torch.sigmoid(z2)\\n\",\n    \"        return a2\\n\",\n    \"        \"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Now, the input and output can be processed\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def generate_input():\\n\",\n    \"    x = torch.Tensor(1, 2).uniform_(0, 1)\\n\",\n    \"    return torch.bernoulli(x)   \\n\",\n    \"\\n\",\n    \"\\n\",\n    \"def generate_output(x):\\n\",\n    \"    y = torch.zeros(1,3)\\n\",\n    \"    sum_x = x.sum()\\n\",\n    \"    if sum_x == 0:\\n\",\n    \"        y[0,0] = 1\\n\",\n    \"    elif sum_x == 1:\\n\",\n    \"        y[0,1] = 1\\n\",\n    \"    else:\\n\",\n    \"        y[0,2] = 1\\n\",\n    \"    return y\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Just a check whether the input and output is fine\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"\\n\",\n      \" 0  1\\n\",\n      \"[torch.FloatTensor of size 1x2]\\n\",\n      \"\\n\",\n      \"\\n\",\n      \" 0  1  0\\n\",\n      \"[torch.FloatTensor of size 1x3]\\n\",\n      \"\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"a = generate_input()\\n\",\n    \"print(a)\\n\",\n    \"b = generate_output(a)\\n\",\n    \"print(b)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Everything is ready, can create the model instance, an optimizer and loop to learn the model\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 39,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Loss on iteration 0 is 0.4865916669368744\\n\",\n      \"Loss on iteration 100 is 0.2068905383348465\\n\",\n      \"Loss on iteration 200 is 0.10168895125389099\\n\",\n      \"Loss on iteration 300 is 0.12561121582984924\\n\",\n      \"Loss on iteration 400 is 0.048275481909513474\\n\",\n      \"Loss on iteration 500 is 0.0448077954351902\\n\",\n      \"Loss on iteration 600 is 0.004153769463300705\\n\",\n      \"Loss on iteration 700 is 0.002344121690839529\\n\",\n      \"Loss on iteration 800 is 0.0010068188421428204\\n\",\n      \"Loss on iteration 900 is 0.0005072578205727041\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"nn_model = SimpleModel()\\n\",\n    \"criterion = nn.BCELoss() #Binary Cross Entropy Loss\\n\",\n    \"optimizer = torch.optim.Adam(nn_model.parameters(),lr = 0.01)\\n\",\n    \"\\n\",\n    \"for i in range(1000):\\n\",\n    \"    x = generate_input()\\n\",\n    \"    y = generate_output(x)\\n\",\n    \"    x = Variable(x)\\n\",\n    \"    y = Variable(y)\\n\",\n    \"    y_hat = nn_model(x)\\n\",\n    \"    loss = criterion(y_hat,y)\\n\",\n    \"    loss.backward()        \\n\",\n    \"    optimizer.step()\\n\",\n    \"    if i % 100 == 0:\\n\",\n    \"        print(\\\"Loss on iteration {} is {}\\\".format(i,loss.data[0]))    \"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Check what is the output value\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 64,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"All done\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"def check_model():\\n\",\n    \"    x = Variable(torch.FloatTensor([0,0]))\\n\",\n    \"    y = nn_model(x).round().int()\\n\",\n    \"    assert y.data[0] == 1 and y.data.sum() == 1\\n\",\n    \"\\n\",\n    \"    x = Variable(torch.FloatTensor([0,1]))\\n\",\n    \"    y = nn_model(x).round().int()\\n\",\n    \"    assert y.data[1] == 1 and y.data.sum() == 1\\n\",\n    \"\\n\",\n    \"    x = Variable(torch.FloatTensor([1,0]))\\n\",\n    \"    y = nn_model(x).round().int()\\n\",\n    \"    assert y.data[1] == 1 and y.data.sum() == 1\\n\",\n    \"\\n\",\n    \"    x = Variable(torch.FloatTensor([1,1]))\\n\",\n    \"    y = nn_model(x).round().int()\\n\",\n    \"    assert y.data[2] == 1 and y.data.sum() == 1\\n\",\n    \"\\n\",\n    \"check_model()\\n\",\n    \"print(\\\"All done\\\")\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.6.3\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}",
 "title": ""
}