{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "kw_scanner",
  "re_java",
  "re_url",
  "lg_en",
  "re_ast1"
 ],
 "key": "AMsxn5Af",
 "pasteDate": "Feb 12, 2018, 6:55:14 AM",
 "relevancy": -4.0,
 "relevant": false,
 "text": "dog\nsheep\ncat\nhorse\ncat\ntiger\ncat\ncat\ntiger\n\t\ndog 1\nsheep 1\ncat 4\nhorse 1\ntiger 2\n\t\nAnimal name: count\ncat          4\ntiger        2\ndog          1\nsheep        1\nhorse        1\n\t\nString line = reader.readLine();\n        while (line != null) {\n            switch (line) {\n                case \"cat\":\n                catCounter++;\n                break;\n                case \"dog\":\n                dogCounter++;\n                break;\n                case \"horse\":\n                horseCounter++;\n                break;\n                case \"tiger\":\n                tigerCounter++;\n                break;\n                case \"sheep\":\n                sheepCounter++;\n                break;\n                default:\n                break;\n            }\n        }\n\t\nHashMap map=new HashMap();\nHashSet set=new HashSet();\nFileInputStream fis=new FileInputStream(file);\nStreamTokenizer st=new StreamTokenizer(fis);\nwhile(st.nextToken()!=StreamTokenizer.TT_EOF){\n\n     Integer count=1;\n     String s;\n     switch(st.ttype)\n     {\n          case StreamTokenizer.TT_WORD:\n          s=st.sval;\n          if(map.containsKey(s))\n          {\n               count=(Integer)map.get(s);\n               count++;\n               map.put(s,count);\n               set.add(s);\n          }\n          else\n          {\n               map.put(s,count);\n               set.add(s);\n          }\n          break;\n     }\n}\n//now you have a collection of words with their frequency.it will automatically sort numeric values\nSystem.out.println(\"frequency of each word in file\");\nIterator iter=set.iterator();//get all the keys from the HashSet\n\n//display them with help of Iterator interface\nwhile(iter.hasNext())\n{\n     String s=(String)iter.next();\n     Integer count=(Integer)map.get(s);\n     System.out.println(\"frequency of \"+s+\" : \"+count);\n}\n\t\nMap<String, Integer> frequency = new HashMap<>();\n\ntry (Scanner scanner = new Scanner(new File(\"path/to/file\"), \"UTF-8\")) {\n    while (scanner.hasNext()) {\n        String temp = scanner.nextLine();\n        if(frequency.containsKey(temp)) {\n            Integer count = frequency.get(temp);\n            frequency.put(temp, Integer.sum(count, 1));\n        } else {\n            frequency.put(temp, 1);\n        }\n    }\n}\n\t\npackage com.test;\n\nimport java.io.IOException;\nimport java.net.URISyntaxException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Map;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\nimport javax.swing.JTable;\n\npublic class TestCount {\n\n    public static void main(String args[]) throws URISyntaxException, IOException {\n        // for absolute path use: Paths.get(\"/path/to/animals.txt\")\n        try (Stream<String> stream = Files.lines(Paths.get(TestCount.class.getClassLoader().getResource(\"animals\").toURI()))) {\n\n            Object[][] data = stream\n                    .collect(Collectors.groupingBy(Function.identity(), Collectors.counting())).entrySet().stream()\n                    .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n                    .map((entry) -> new Object[] { entry.getKey(), entry.getValue() })\n                    .toArray(Object[][]::new);\n\n            // print the data\n            for (Object[] row : data) {\n                System.out.println(Arrays.toString(row));\n            }\n\n            // create the JTable\n            new JTable(data, new String[] { \"animal\", \"count\" });\n        }\n    }\n}\n\t\nObject[][] data = m1.entrySet().stream()\n        .map((entry) -> new Object[] { entry.getKey(), entry.getValue() })\n        .toArray(Object[][]::new);",
 "title": ""
}