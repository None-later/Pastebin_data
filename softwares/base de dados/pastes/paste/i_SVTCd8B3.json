{
 "espireDate": "N",
 "format": "cpp",
 "jSonReasons": [
  "lg_en"
 ],
 "key": "SVTCd8B3",
 "pasteDate": "Feb 28, 2018, 1:34:09 PM",
 "relevancy": 1.0,
 "relevant": false,
 "text": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <string>\n#include <cmath>\nusing namespace std;\n\nbool parseData(vector<vector<double>> &datasets, string line);\n\nint main()\n{\n   ifstream fin;\n   string filename;\n   vector<double> variables;\n   do{\n\t   cout << \"Enter gads data file name: \";\n\t   cin >> filename;\n\t   fin.open(filename.c_str());\n   }while(!fin.is_open());\n   \n   int numlines = 0;\n   string lastLine = \"\";\n   string line;\n   ofstream fout((filename+\".log\").c_str());//.substr(filename.find(\".\")+1)+\".log\").c_str());\n   string data_line[2];\n   vector <vector<double>> datasets(2, vector<double>(17));\n\n   while(getline(fin, line))\n   {\n      numlines++;\n\t  if(isalpha(line[0]))\n\t  {\n\t\t  fout << line << endl;\n\t\t  datasets[0][0] = 0;\n\t\t  datasets[1][0] = 0;\n\t\t  data_line[0] = \"\";\n\t\t  data_line[1] = \"\";\n\t  }\n\t  else\n\t  {\n\t\t  // Break data from the string into the vector\n\t\t  bool isComplete = parseData(datasets, line);\n\t\t  if(isComplete)\n\t\t  {\n\t\t\t  \n\t\t\t  if(datasets[1][0] > 0)\n\t\t\t  {\n\t\t\t\t  double currentInMinutes = datasets[0][2]*360 + datasets[0][3]*60 + datasets[0][4];\n\t\t\t\t  double lastInMinutes = datasets[1][2]*360 + datasets[1][3]*60 + datasets[1][4];\n\t\t\t\t  double diff = currentInMinutes- lastInMinutes;\n\t\t\t\t  if(diff > 7*60){\n\t\t\t\t\t  int hours = diff/360;\n\t\t\t\t\t  diff-=hours*360;\n\t\t\t\t\t  int minutes = diff/60;\n\t\t\t\t\t  diff -= minutes*60;\n\t\t\t\t\t  int seconds = diff;\n\t\t\t\t\t  fout << \"Lines \" << numlines-1 << \",\"<< numlines << \": time gap \";\n\t\t\t\t\t  if(hours>0)\n\t\t\t\t\t\t  fout << hours << \" hours \";\n\t\t\t\t\t  if(minutes>0)\n\t\t\t\t\t\t  fout << minutes << \" minutes \";\n\t\t\t\t\t  if(seconds>0)\n\t\t\t\t\t\t  fout << seconds << \" seconds \";\n\t\t\t\t\t  fout << endl;\n\t\t\t\t  }\n\t\t\t\t  // Continuity Check\n\t\t\t\t  double latitude2 = datasets[0][8];\n\t\t\t\t  double latitude1 = datasets[1][8];\n\t\t\t\t  double longitude2 = datasets[0][9];\n\t\t\t\t  double longitude1 = datasets[1][9];\n\t\t\t\t  double continuity = sqrt((pow((longitude1-longitude2),2)+pow((latitude1-latitude2), 2)));\n\t\t\t\t  if(continuity >= 3)\n\t\t\t\t\t  fout << \"Lines \" << numlines-1 << \",\" << numlines << \": data continuity check failed\" << endl;\n\t\t\t  }\n\t\t\t  datasets[1] = datasets[0];\n\t\t  }\n\t      else{\n\t\t\t  fout << \"Line \" << numlines << \": missing data fields.\" << endl;\n\t\t  }\n\t  }\n   }\n   fin.close();\n   fout.close();\n   system(\"pause\");\n   return 0;\n}\nbool parseData(vector<vector<double>> &datasets, string line)\n{\n\tdatasets[0].clear();\n\tint numFields = 0;\n\tstring buffer = \"\";\n\tint index = 0;\n\twhile(index < line.length())\n\t{\n\t\twhile(index<line.length() && line[index] != ' ')\n\t\t{\n\t\t\tbuffer+=line[index];\n\t\t\tindex++;\n\t\t}\n\t\tif(buffer.length()>=1){\n\t\t\tif(numFields == 2){\n\t\t\t\t// hours\n\t\t\t\tdatasets[0].push_back(atof(buffer.substr(0,2).c_str()));\n//\t\t\t\tdatasets[0][numFields] = atof(buffer.substr(0,2).c_str());\n\t\t\t\tnumFields++;\n\t\t\t\t// minutes\n\t\t\t\tdatasets[0].push_back(atof(buffer.substr(2,2).c_str()));\n//\t\t\t\tdatasets[0][numFields] = atof(buffer.substr(2,2).c_str());\n\t\t\t\tnumFields++;\n\t\t\t\t// seconds\n\t\t\t\tdatasets[0].push_back(atof(buffer.substr(4,2).c_str()));\n//\t\t\t\tdatasets[0][numFields] = atof(buffer.substr(4,2).c_str());\n\t\t\t\tnumFields++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tdatasets[0].push_back(atof(buffer.c_str()));\n//\t\t\t\tdatasets[0][numFields] = atof(buffer.c_str());\n\t\t\t\tbuffer = \"\";\n\t\t\t\tnumFields++;\n\t\t\t}\n\t\t}\n\t\tindex++;\n\t}\n\tif(numFields < 17)\n\t\treturn false;\n\telse \n\t\treturn true;\n}",
 "title": ""
}