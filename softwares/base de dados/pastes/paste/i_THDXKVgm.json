{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "lg_en"
 ],
 "key": "THDXKVgm",
 "pasteDate": "Feb 20, 2018, 3:32:02 PM",
 "relevancy": 1.0,
 "relevant": false,
 "text": "//Package and imports...\n\npublic class TrackingJob extends JobService{\n\n    // Some variables...\n\n    private static final long UPDATE_INTERVAL_IN_MILLISECONDS = 5000;\n\n    private static final long FASTEST_UPDATE_INTERVAL_IN_MILLISECONDS = UPDATE_INTERVAL_IN_MILLISECONDS / 2;\n\n    private LocationCallback mLocationCallback;\n    private Location mLastLocation;\n    private LocationRequest mLocationRequest;\n    private LocationSettingsRequest mLocationSettingsRequest;\n    private FusedLocationProviderClient mFusedLocationProviderClient;\n\n    @Override\n    public boolean onStartJob(JobParameters jobParameters) {\n\n        createLocationCallback(jobParameters);\n        createLocationRequest();\n        buildLocationSettingsRequest();\n        startLocationServices();\n\n        return true; // Async stuff will be done, so true is returned\n    }\n\n    @Override\n    public boolean onStopJob(JobParameters jobParameters) { return false; }\n\n    private void createLocationRequest() {\n        mLocationRequest = new LocationRequest();\n        mLocationRequest.setInterval(UPDATE_INTERVAL_IN_MILLISECONDS);\n        mLocationRequest.setFastestInterval(FASTEST_UPDATE_INTERVAL_IN_MILLISECONDS);\n        mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);\n    }\n\n    private void createLocationCallback(final JobParameters jobParameters) {\n        mLocationCallback = new LocationCallback() {\n            @Override\n            public void onLocationResult(LocationResult locationResult) {\n                super.onLocationResult(locationResult);\n                mLastLocation = locationResult.getLastLocation();\n\n                // Save data locally, and then, upload it to server\n                saveLocalData(jobParameters.getExtras(), true);\n                syncData(jobParameters);\n\n                // We stop locationProvider here, because we got a location already\n                mFusedLocationProviderClient.removeLocationUpdates(mLocationCallback);\n            }\n        };\n    }\n\n    private void buildLocationSettingsRequest(){\n        LocationSettingsRequest.Builder builder = new LocationSettingsRequest.Builder();\n        builder.addLocationRequest(mLocationRequest);\n        mLocationSettingsRequest = builder.build();\n    }\n\n    @SuppressLint(\"MissingPermission\") // Permissions WILL BE accepted before the job is called\n    private void startLocationServices() {\n        SettingsClient mSettingsClient = LocationServices.getSettingsClient(this);\n\n        mSettingsClient.checkLocationSettings(mLocationSettingsRequest)\n                .addOnSuccessListener(new OnSuccessListener<LocationSettingsResponse>() {\n                    @Override\n                    public void onSuccess(LocationSettingsResponse locationSettingsResponse) {\n                        mFusedLocationProviderClient =\n                                LocationServices.getFusedLocationProviderClient(TrackingJob.this);\n\n                        // We ask for location updates\n                        mFusedLocationProviderClient.requestLocationUpdates(\n                                mLocationRequest,\n                                mLocationCallback,\n                                Looper.myLooper()\n                        );\n                    }\n                })\n                .addOnFailureListener(new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        // If problem can be solved by user, we send a push noty\n                    }\n                });\n\n\n    }\n\n    private void saveLocalData(PersistableBundle bundle, boolean gps){\n        // We save data to REALM\n    }\n\n    private void syncData(final JobParameters jobParameters){\n        // We get data to sync from REALM\n        // If data was succesfully synced, we delete it from REALM\n\n        // We stop the job\n        jobFinished(jobParameters, false);\n    }\n}",
 "title": ""
}