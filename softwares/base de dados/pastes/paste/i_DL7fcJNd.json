{
 "espireDate": "N",
 "format": "java",
 "jSonReasons": [
  "re_java",
  "kw_error",
  "lg_en"
 ],
 "key": "DL7fcJNd",
 "pasteDate": "Feb 18, 2018, 4:17:05 PM",
 "relevancy": -2.0,
 "relevant": false,
 "text": "package me.creepinson.modelz.util.converter.model;\n\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.ObjectOutputStream;\nimport java.io.UnsupportedEncodingException;\n\nimport javax.imageio.ImageIO;\n\nimport com.google.gson.Gson;\nimport com.google.gson.JsonIOException;\nimport com.google.gson.JsonSyntaxException;\n\nimport me.creepinson.modelz.Modelz;\nimport net.minecraft.client.Minecraft;\nimport net.minecraft.client.model.ModelRenderer;\nimport net.minecraft.client.renderer.block.model.BlockPart;\nimport net.minecraft.client.renderer.block.model.ModelBlock;\nimport net.minecraft.util.ResourceLocation;\n\npublic class Converters {\n\n\tpublic static Gson getGson() {\n\t\treturn gson;\n\t}\n\n\tprivate static Gson gson = new Gson();\n\n\tpublic static class JSONToJava {\n\t\tprivate File jsonModel;\n\n\t\tpublic JSONToJava(File jsonModel) {\n\t\t\tif (jsonModel != null && jsonModel.exists()) {\n\t\t\t\tthis.jsonModel = jsonModel;\n\t\t\t} else {\n\t\t\t\tModelz.getLogger().error(\"JSON model file being imported is null or does not exist!\");\n\n\t\t\t}\n\t\t}\n\n\t\tpublic File getJsonModel() {\n\t\t\treturn jsonModel;\n\t\t}\n\n\t\tpublic File convert(String exportedFileName, int texWidth, int texHeight) {\n\t\t\tFile javaFile = null;\n\t\t\tif (this.jsonModel != null && this.jsonModel.exists()) {\n\t\t\t\t/*\n\t\t\t\t * try { int numberPart = 1; ModelBlock model =\n\t\t\t\t * ModelBlock.deserialize(new FileReader(this.jsonModel));\n\t\t\t\t * javaFile = new File(Modelz.getDataFolder(),\n\t\t\t\t * exportedFileName+\".java\");\n\t\t\t\t * \n\t\t\t\t * PrintWriter writer = new PrintWriter(javaFile, \"UTF-8\");\n\t\t\t\t * writer.println(\"import net.minecraft.client.model.ModelBase\"\n\t\t\t\t * ); writer.\n\t\t\t\t * println(\"import net.minecraft.client.model.ModelRenderer\");\n\t\t\t\t * for(BlockPart bp : model.getElements()){ for(int f = 0; f <\n\t\t\t\t * bp.mapFaces.size(); f++){ BlockPartFace bfp =\n\t\t\t\t * bp.mapFaces.get(f);\n\t\t\t\t * \n\t\t\t\t * }\n\t\t\t\t * \n\t\t\t\t * writer.println(\"        ModelRenderer modelPart\" +\n\t\t\t\t * numberPart); numberPart++; } writer.println(\"public class \" +\n\t\t\t\t * exportedFileName + \" extends ModelBase\");\n\t\t\t\t * writer.println(\"{\"); writer.println(\"    public Model()\");\n\t\t\t\t * writer.println(\"    {\"); writer.println(\"    }\");\n\t\t\t\t * writer.println(\"}\"); writer.close(); } catch\n\t\t\t\t * (FileNotFoundException e) { e.printStackTrace(); } catch\n\t\t\t\t * (UnsupportedEncodingException e) { e.printStackTrace(); }\n\t\t\t\t */\n\n\t\t\t\ttry {\n\t\t\t\t\tjavaFile = new File(Modelz.getDataFolder(), exportedFileName);\n\t\t\t\t\ttry {\n\t\t\t\t\t\tjavaFile.createNewFile();\n\t\t\t\t\t} catch (IOException e1) {\n\t\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\t\te1.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t\tModelBlock newModel = ModelBlock.deserialize(new FileReader(this.jsonModel));\n\t\t\t\t\ttry {\n\t\t\t\t\t\tBufferedImage image = ImageIO.read(Minecraft.getMinecraft().getResourceManager()\n\t\t\t\t\t\t\t\t.getResource(new ResourceLocation(newModel.textures.get(0))).getInputStream());\n\n\t\t\t\t\t\tJavaModel temp = new JavaModel(image.getHeight(), image.getWidth());\n\t\t\t\t\t\tfor (BlockPart bp : newModel.getElements()) {\n\t\t\t\t\t\t\tJavaModelRenderer tempRenderer = new JavaModelRenderer(temp);\n\t\t\t\t\t\t\ttemp.boxList.add(tempRenderer);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tFileOutputStream f = new FileOutputStream(javaFile);\n\t\t\t\t\t\tObjectOutputStream o;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\to = new ObjectOutputStream(f);\n\n\t\t\t\t\t\t\to.writeObject(temp);\n\n\t\t\t\t\t\t\to.close();\n\t\t\t\t\t\t\tf.close();\n\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\tModelz.getLogger().error(\"Error converting Json!\");\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} catch (UnsupportedEncodingException e1) {\n\t\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\t\te1.printStackTrace();\n\t\t\t\t\t} catch (IOException e1) {\n\t\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\t\te1.printStackTrace();\n\t\t\t\t\t}\n\n\t\t\t\t} catch (JsonSyntaxException | JsonIOException | FileNotFoundException e) {\n\t\t\t\t\tModelz.getLogger().error(\"Error converting Json!\");\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\n\t\t\t\treturn javaFile;\n\t\t\t}\n\n\t\t\treturn javaFile;\n\t\t}\n\n\t}\n}",
 "title": ""
}