{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "lg_en"
 ],
 "key": "dMYTCKcr",
 "pasteDate": "Feb 18, 2018, 5:37:09 PM",
 "relevancy": 1.0,
 "relevant": false,
 "text": "public enum QuantityType\n{\n    Height, Width, Weight, Power\n}\n\npublic class Quantity\n{\n    public Quantity() { }\n    public int Id { get; set; }\n    public QuantityType Type { get; set; }\n    public int Value { get; set; }\n}\n\npublic class Engine\n{\n    public Engine() { }\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public int Price { get; set; }\n    public ICollection<Quantity> CurrentQuantities { get; set; }\n}\n\n\npublic class MyContext : DbContext\n{\n    public MyContext() : base(\"name=MyContext\")\n    {\n        Console.WriteLine(\"   ...\");\n        Database.CreateIfNotExists();\n    }\n    protected override void OnModelCreating(DbModelBuilder modelBuilder)\n    {\n        //   \n        modelBuilder.Entity<Engine>().HasMany(e => e.CurrentQuantities).WithOptional().Map(map=>map.MapKey(\"EngineId\"));\n    }\n\n    public virtual DbSet<Engine> Engines { get; set; }\n}\n\n\nclass Program\n{\n    static MyContext db = new MyContext();\n\n    static void Main(string[] args)\n    {\n        //\n        db.Database.ExecuteSqlCommand(\"DELETE FROM dbo.Engines\");\n        db.Database.ExecuteSqlCommand(\"DELETE FROM dbo.Quantities\");\n\n        // \n        var GoodQuantity = new List<Quantity>() { new Quantity() { Type = QuantityType.Power, Value = 80 } };\n        var BadQuantity = new List<Quantity>() { new Quantity() { Type = QuantityType.Power, Value = 120 } };\n        var AnotherQuantity = new List<Quantity>() { new Quantity() { Type = QuantityType.Power, Value = 150 } };\n\n        Engine gx160 = new Engine() { Name = \"GX160\", Price = 10000,CurrentQuantities=GoodQuantity };\n        Engine gx120 = new Engine() { Name = \"GX120\", Price = 8000, CurrentQuantities = BadQuantity };\n        Engine gx200 = new Engine() { Name = \"GX200\", Price = 15000, CurrentQuantities = AnotherQuantity };\n\n        db.Engines.Add(gx120);\n        db.Engines.Add(gx160);\n        db.Engines.Add(gx200);\n        db.SaveChanges();\n\n        /*\n        Console.WriteLine(\"    \");\n        foreach(var q in gx120.CurrentQuantities) Console.WriteLine(q.Type + \": \" + q.Value);\n        foreach (var q in gx120.CurrentQuantities) Console.WriteLine(q.Type + \": \" + q.Value);\n        foreach (var q in gx120.CurrentQuantities) Console.WriteLine(q.Type + \": \" + q.Value);\n        Console.WriteLine(\" ,    ...\");\n        */\n\n        //  \n        var RequaredQuantities = db.Set<Quantity>().Where(q => q.Type == QuantityType.Power && q.Value == 80);\n        foreach(var item in RequaredQuantities)\n        {\n            Console.WriteLine(item.Type+\": \"+item.Value);\n        }\n\n        //      ...\n        var RequaredEngines = ...\n\n        Console.ReadLine();\n    }",
 "title": ""
}