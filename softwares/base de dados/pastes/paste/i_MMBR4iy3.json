{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "re_url",
  "lg_en",
  "re_ast1"
 ],
 "key": "MMBR4iy3",
 "pasteDate": "Feb 11, 2018, 8:36:18 PM",
 "relevancy": -1.0,
 "relevant": false,
 "text": "// @desc Creates a list of domains with custom TLDs using a pattern string with fixed length with option for keywords\n// @param   {String}        pattern\n// @param   {Array|String}  tlds\n// @returns {Array}         domainList\n//\n//\n// Pattern string is defined by:\n// - keywords         lowercase\n// - any letter       uppercase A\n// - consonants       uppercase C\n// - vowels           uppercase V\n\nfunction domainListGenerator (pattern, tlds) {\n  const _pattern = pattern.match(/[ACV]|[a-z]+/g);\n\n  const alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n\n  let domainList = [];\n\n  function iterator (lastIndex, word = '', tld = '.com') {\n    const index = lastIndex + 1;\n    if (index > _pattern.length - 1) {\n      let _tld = tld.slice(0, 1) === '.' ? tld : '.' + tld;\n      let domain = word + _tld;\n      domainList.push(domain.toLowerCase());\n    } else if (_pattern[index] === 'A') {\n      alphabet.map(letter =>\n        iterator(index, word + letter, tld)\n      );\n    } else if (_pattern[index] === 'C') {\n      consonants.map(consonant =>\n        iterator(index, word + consonant, tld)\n      );\n    } else if (_pattern[index] === 'V') {\n      vowels.map(vowel =>\n        iterator(index, word + vowel, tld)\n      );\n    } else {\n      iterator(index, word + _pattern[index], tld);\n    }\n  }\n\n  if (Array.isArray(tlds)) {\n    tlds.map(tld => iterator(-1, '', tld));\n  } else if (typeof tlds === 'string') {\n    iterator(-1, '', tlds);\n  } else if (!tlds) {\n    iterator(-1);\n  }\n\n  return domainList;\n}\n\n// ..... EXAMPLES .....\ndomainListGenerator('CVVC')                      // ['baab.com', 'baac.com', ...]\ndomainListGenerator('CVVC', '.io')               // ['baab.io', 'baeb.io', ...]\ndomainListGenerator('Vsocial', '.io')            // ['asocial.io', 'esocial.io', ...]\ndomainListGenerator('educationVC', '.org')       // ['educationab.org', 'educationac.org', ...]\ndomainListGenerator('coinCVC', ['.net', '.io'])   // ['coinbab.net', 'coinbac.net', ..., 'coinbab.io', 'coinbac.io', ...]\n\n// @desc Returns a random domain with custom TLD using a pattern string with fixed length with option for keywords\n// @param   {String}        pattern\n// @param   {String}        tld\n// @returns {String}        domain\n//\n//\n// Pattern string is defined by:\n// - keywords         lowercase\n// - any letter       uppercase A\n// - consonants       uppercase C\n// - vowels           uppercase V\n\nfunction domainNameGenerator (pattern, tld) {\n  const domainList = domainListGenerator(pattern, tld);\n  const index = Math.floor(Math.random() * domainList.length);\n  const domain = domainList[index];\n  return domain;\n}\n\n// ..... EXAMPLES .....\ndomainNameGenerator('CVVC')                      // biex.com\ndomainNameGenerator('CVVC', '.io')               // tual.io\ndomainNameGenerator('Vsocial', '.io')            // zsocial.io\ndomainNameGenerator('educationVC', '.org')       // educational.org\ndomainNameGenerator('coinCVC', '.net')           // coinrev.net",
 "title": ""
}