{
 "espireDate": "1W",
 "format": "cpp",
 "jSonReasons": [
  "re_url",
  "lg_en"
 ],
 "key": "LkztL9i2",
 "pasteDate": "Feb 12, 2018, 6:41:33 AM",
 "relevancy": 2.0,
 "relevant": false,
 "text": "/*\n\n created 29 Dec. 2018\n by Alcwyn Parker\n\n This example code is in the public domain.\n\n */\n\n// These constants won't change.  They're used to give names\n// to the pins used:\nconst int leftPaddle = A0;  // Analog input pin that the potentiometer is attached to\nconst int rightPaddle = A1;  // Analog input pin that the potentiometer is attached to\n\nint leftValue = 0;        // value read from the pot\nint rightValue = 0;        // value output to the PWM (analog out)\n\nint incomingByte;      // a variable to read incoming serial data into\n\n\n\nint leftCurrent = 10;\nint rightCurrent = 5;\n \n\nvoid setup() {\n  // initialize serial communications at 9600 bps:\n  Serial.begin(115200);\n\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(5, OUTPUT);\n  pinMode(6, OUTPUT);\n  pinMode(7, OUTPUT);\n  pinMode(8, OUTPUT);\n  pinMode(9, OUTPUT);\n  pinMode(10, OUTPUT);\n}\n\nvoid loop() {\n\n  // see if there's incoming serial data:\n  if (Serial.available() > 0) {\n    // read the oldest byte in the serial buffer:\n    incomingByte = Serial.read();\n    // if it's a capital H (ASCII 72), turn on the LED:\n    if (incomingByte == 'L') {\n      progressLeft();\n    }\n   \n    // if it's an L (ASCII 76) turn off the LED:\n    if (incomingByte == 'R') {\n      progressRight();\n    }\n\n    if (incomingByte == 'P'){\n      sendPositions();\n    }\n    \n  }\n  \n  \n  \n  // wait 2 milliseconds before the next loop\n  // for the analog-to-digital converter to settle\n  // after the last reading:\n  delay(2);\n}\n\nvoid progressLeft(){\n\n  if (leftCurrent == 7){\n\n    leftCurrent = 11;\n    for (int i = 8; i <= 10; i++){\n      digitalWrite(i, LOW);\n    }\n  }\n  \n  digitalWrite(leftCurrent, HIGH);\n  \n\n  leftCurrent--;\n}\n\n\nvoid progressRight(){\n  if (rightCurrent == 8){\n\n    rightCurrent = 4;\n    for (int i = 5; i <= 7; i++){\n      digitalWrite(i, LOW);\n    }\n  }\n  \n  digitalWrite(rightCurrent, HIGH);\n  \n\n  rightCurrent++;\n\n}\n\nvoid sendPositions(){\n  // read the analog in value:\n  leftValue = analogRead(leftPaddle);\n  rightValue = analogRead(rightPaddle);\n  // map it to the range of the analog out:\n  //outputValue = map(sensorValue, 0, 1023, 0, 255);\n  // change the analog out value:\n  \n\n  // print the results to the serial monitor:\n  Serial.print(getPadded(leftValue));\n  Serial.print(\"-\");\n  Serial.println(getPadded(rightValue));\n}\n\n//https://gist.github.com/mmansion/6056124\nString getPadded(int num) {\n  char buff[5];\n  char padded[6];\n  \n  //sprintf function will convert the long to a string\n  sprintf(buff, \"%.4u\", num); // buff will be \"01238\"\n\n  padded[0] = buff[0];\n  padded[1] = buff[1];\n  padded[2] = buff[2];\n  padded[3] = buff[3];\n  padded[4] = buff[4];\n  padded[5] = '\\0'; // The terminating NULL\n\n  return String(padded);\n}",
 "title": ""
}