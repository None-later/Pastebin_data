{
 "espireDate": "N",
 "format": "javascript",
 "jSonReasons": [
  "lg_en",
  "kw_tunnel",
  "re_ast1",
  "kw_illegal",
  "re_url"
 ],
 "key": "BqjGXNfA",
 "pasteDate": "Feb 28, 2018, 7:43:30 AM",
 "relevancy": 3.0,
 "relevant": false,
 "text": "var rateTable_150M = new Array(\n\t\"1Mbps\",\t1,\n    \"2Mbps\",\t1,\n    \"5.5Mbps\", \t1,\n    \"6Mbps\", \t6,\n    \"9Mbps\", \t6,\n    \"11Mbps\", \t1,\n    \"12Mbps\", \t6,\n    \"13Mbps\", \t8,\n    \"15Mbps\", \t16,\n    \"18Mbps\", \t6,\n    \"19Mbps\", \t6,\n    \"24Mbps\", \t6,\n    \"26Mbps\", \t8,\n    \"30Mbps\", \t16,\n    \"36Mbps\", \t6,\n    \"39Mbps\", \t8,\n    \"45Mbps\", \t16,\n    \"48Mbps\", \t6,\n    \"52Mbps\", \t8,\n    \"54Mbps\", \t6,\n    \"58Mbps\", \t16,\n    \"60Mbps\", \t16,\n    \"65Mbps\", \t8,\n    \"90Mbps\", \t16,\n    \"120Mbps\", \t16,\n    \"135Mbps\", \t16,\n    \"150Mbps\", \t16,\n\t0,0\n);\n\nvar rateTable_300M = new Array(\n\t\"1Mbps\",\t\t1,\n\t\"2Mbps\",\t\t1,\n\t\"5.5Mbps\",\t1,\n\t\"6Mbps\",\t\t6,\n\t\"7Mbps\",\t\t8,\n\t\"9Mbps\",\t\t6,\n\t\"11Mbps\",\t\t1,\n\t\"12Mbps\",\t\t6,\n\t\"13Mbps\",\t\t8,\n\t\"15Mbps\",\t\t16,\n\t\"18Mbps\",\t\t6,\n\t\"21Mbps\",\t\t8,\n\t\"24Mbps\",\t\t6,\n\t\"26Mbps\",\t\t8,\n\t\"30Mbps\",\t\t16,\n\t\"36Mbps\",\t\t6,\n\t\"39Mbps\",\t\t8,\n\t\"45Mbps\",\t\t16,\n\t\"48Mbps\",\t\t6,\n\t\"52Mbps\",\t\t8,\n\t\"54Mbps\",\t\t6,\n\t\"60Mbps\",\t\t16,\n\t\"65Mbps\",\t\t8,\n\t\"72Mbps\",\t\t8,\n\t\"78Mbps\",\t\t8,\n\t\"90Mbps\",\t\t16,\n\t\"104Mbps\",\t8,\n\t\"117Mbps\",\t8,\n\t\"120Mbps\",\t16,\n\t\"130Mbps\",\t8,\n\t\"135Mbps\",\t16,\n\t\"150Mbps\",\t16,\n\t\"180Mbps\",\t16,\n\t\"240Mbps\",\t16,\n\t\"270Mbps\",\t16,\n\t\"300Mbps\",\t16, \n\t0,0 );\n\nvar rateTable_450M = new Array(\t\t\n\t\"1Mbps\",\t\t5,\n\t\"2Mbps\",\t\t5,\n\t\"5.5Mbps\", \t1,\n\t\"6Mbps\",\t\t6,\n\t\"9Mbps\",\t\t6,\n\t\"11Mbps\",\t\t1,\n\t\"12Mbps\",\t\t6,\n\t\"18Mbps\",\t\t6,\n\t\"19.5Mbps\",\t8,\n\t\"21.7Mbps\",\t8,\n\t\"24Mbps\",\t\t6,\n\t\"36Mbps\",\t\t6,\n\t\"39Mbps\",\t\t8,\n\t\"40.5Mbps\",\t16,\n\t\"43.3Mbps\",\t8,\n\t\"45Mbps\",\t\t16,\n\t\"48Mbps\",\t\t6,\n\t\"54Mbps\",\t\t6,\n\t\"58.5Mbps\",\t8,\n\t\"65Mbps\",\t\t8,\n\t\"78Mbps\",\t\t8,\n\t\"81Mbps\",\t\t16,\n\t\"86.7Mbps\",\t8,\n\t\"90Mbps\",\t\t16,\n\t\"117Mbps\", \t8,\n\t\"121.5Mbps\",\t16,\n\t\"130Mbps\", \t8,\n\t\"135Mbps\", \t16,\n\t\"156Mbps\", \t8,\n\t\"162Mbps\", \t16,\n\t\"173.3Mbps\",\t8,\n\t\"175.5Mbps\",\t8,\n\t\"180Mbps\", \t16,\n\t\"195Mbps\", \t8,\n\t\"216.7Mbps\",\t8,\n\t\"243Mbps\", \t16,\n\t\"270Mbps\", \t16,\n\t\"324Mbps\", \t16,\n\t\"360Mbps\", \t16,\n\t\"364.5Mbps\",\t16,\n\t\"405Mbps\", \t16,\n\t\"450Mbps\", \t16,\n\t0,0 );\n\t\nvar operModeNum = 9;\nvar minOperMode = 0;\nvar maxOperMode = operModeNum;\nvar operModeList = new Array(\n//value\tenabled\tname\n\t0,\t\t1,\t\t\t\"Access Point\",\n\t1,\t\t1,\t\t\t\"Multi-SSID\",\n\t2,\t\t0,\t\t\t\"Multi-Bss Plus VLAN\",\n\t3,\t\t1,\t\t\t\"Client\",\n\t4,\t\t1,\t\t\t\"WDS Repeater\",\n\t5,\t\t1,\t\t\t\"Universal Repeater\",\n\t6,\t\t1,\t\t\t\"Bridge with AP\",\t//(wds)\n\t7,\t\t0,\t\t\t\"Bridge with AP\",//(nawds)\n\t8,\t\t0,\t\t\t\"Debug\"\n);\nfunction getOperModeName(modeIdx)\n{\n\tif(modeIdx<minOperMode || modeIdx>maxOperMode)\n\t{\n\t\treturn null;\n\t}\n\tif(operModeList[modeIdx*3+1]==0)\n\t{\n\t\treturn null;\n\t}\n\telse\n\t{\n\t\treturn operModeList[modeIdx*3+2];\n\t}\n}\n\nfunction operModeEnable(modeIdx)\n{\n\tif(modeIdx<minOperMode || modeIdx>maxOperMode)\n\t{\n\t\treturn null;\n\t}\n\tif(operModeList[modeIdx*3+1]==0)\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\treturn true;\n\t}\n}\n\nfunction getOperModeValue(modeIdx)\n{\n\tif(modeIdx<minOperMode || modeIdx>maxOperMode)\n\t{\n\t\treturn null;\n\t}\n\tif(operModeList[modeIdx*3+1]==0)\n\t{\n\t\treturn null;\n\t}\n\telse\n\t{\n\t\treturn operModeList[modeIdx*3];\n\t}\n}\nfunction getOperModeIdxByValue(modeValue)\n{\n\tfor(var i=0; i<operModeNum; i++)\n\t{\n\t\tif(operModeList[i*3] == modeValue)\n\t\t\treturn i;\n\t}\n\treturn null;\n}\n\nfunction disableTag(obj, tag, type)\n{\n\ttry\n\t{\n\t\tvar items = obj.getElementsByTagName(tag);\n\t}\n\tcatch(e)\n\t{\n\t\treturn;\n\t}\n\tif (type == undefined)\n\t{\n\t\tfor (var i = 0; i < items.length; i++)\n\t\t{\n\t\t\titems[i].disabled = true;\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (var i = 0; i < items.length; i++)\n\t\t{\n\t\t\tif (items[i].type == type)\n\t\t\t\titems[i].disabled = true;\n\t\t}\t\t\n\t}\n}\n\n//setTagStr(document,'ntw_common_js')\nvar str_pages = parent.pages_js;\nvar str_main = parent.str_main;\n\nfunction setTagStr(obj,page)\n{\n\tvar e, ee;\n\tvar i, n;\n\tvar items;\n\tif( (undefined==str_pages) || (undefined == str_main) )\n\t{\n\t\treturn;\n\t}\n\tif( (undefined == obj) || (undefined == page) )\n\t{\n\t\treturn;\n\t}\n\tfor ( tag in str_pages[page] )\n\t{\n\t\ttry\n\t\t{\n\t\t\tif(!window.ActiveXObject)\n\t\t\t{\n\t\t\t\titems = obj.getElementsByName(tag);\n\t\t\t\tif(items.length > 0)\n\t\t\t\t{\n\t\t\t\t\tfor(i = 0; i < items.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\titems[i].innerHTML = str_pages[page][tag];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tobj.getElementById(tag).innerHTML = str_pages[page][tag];\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\titems = obj.all[tag];\n\t\t\t\tif(undefined != items.length && items.length > 0)\n\t\t\t\t{\n\t\t\t\t\tfor(i = 0; i < items.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\titems[i].innerHTML = str_pages[page][tag];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\titems.innerHTML = str_pages[page][tag];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch(e)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t}\n\n\tfor ( btn in str_main.btn )\n\t{\n\t\ttry\n\t\t{\n\t\t\t\t\t\tif(!window.ActiveXObject)\n\t\t\t{\n\t\t\t\titems = obj.getElementsByName(btn);\n\t\t\t\tif(items.length > 0)\n\t\t\t\t{\n\t\t\t\t\tfor(i = 0; i < items.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\titems[i].value = str_main.btn[btn];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tobj.getElementById(btn).value = str_main.btn[btn];\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\titems = obj.all[btn];\n\t\t\t\t//Name or TagName\n\t\t\t\tif(undefined != items.length && items.length > 0)\n\t\t\t\t{\n\t\t\t\t\tfor(i = 0; i < items.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\titems[i].value = str_main.btn[btn];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{//Id\n\t\t\t\t\titems.value = str_main.btn[btn];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch(e)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t}\n}\n\nfunction GetMinWidth()\n{\n\tvar i=Math.ceil((window.screen.width - 182)*0.55) - 6;\n    return i;\n}\n\nfunction LoadHelp(helpFileName) \n{\n       if(window.parent != window)\n\t   {\n\t\t   \tif (window.parent.topFrame.hl != helpFileName)\n\t\t\t{\n\t\t        window.parent.topFrame.hl = helpFileName;\n\t\t\t\twindow.parent.helpFrame.location.href = \"/help/\" + helpFileName;\n\t\t\t}\n\t   }\n       return true;   \n\t   }\n\nfunction resize(obj)\n{\nvar minWidth = GetMinWidth();\nif (window.document.body.offsetWidth > minWidth)\n    {\n        obj.document.getElementById('autoWidth').style.width = \"100%\";\n    }\n else\n    {\n        obj.document.getElementById('autoWidth').style.width = minWidth;\n    }\n        return true; \n}\n\nfunction resizeHelp(obj)\n{\nif (window.document.body.offsetWidth > 290)\n    {\n        obj.document.getElementById('autoWidth').style.width = \"100%\";\n    }\n else\n    {\n        obj.document.getElementById('autoWidth').style.width = 290;\n    }\n    return true; \n}\n\nfunction elementDisplay(obj, tag, disStr)\n{\n    \ttry\n        {\t\t\n    \t\tif(!window.ActiveXObject)\n            {\n\t\t\t\titems = obj.getElementsByName(tag);\n\t\t\t\tif(items.length > 0)\n\t\t\t\t{\n\t\t\t\t\tfor(i = 0; i < items.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\titems[i].style.display = disStr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tobj.getElementById(tag).style.display = disStr;\n\t\t\t\t}\t\t\t\t\n    \t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\titems = obj.all[tag];\n\t\t\t\tif(undefined != items.length && items.length > 0)\n\t\t\t\t{\n\t\t\t\t\tfor(i = 0; i < items.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\titems[i].style.display = disStr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch(e)\n\t\t{\n    \t\treturn;\n\t\t}\n}\n\nfunction enableTag(obj, tag, type)\n{\n\ttry\n\t{\n\t\tvar items = obj.getElementsByTagName(tag);\n\t}\n\tcatch(e)\n\t{\n\t\treturn;\n\t}\n\tif (type == undefined)\n\t{\n\t\tfor (var i = 0; i < items.length; i++)\n\t\t{\n\t\t\titems[i].disabled = false;\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (var i = 0; i < items.length; i++)\n\t\t{\n\t\t\tif (items[i].type == type)\n\t\t\t\titems[i].disabled = false;\n\t\t}\t\t\n\t}\n}\n\nfunction LoadNext(FileName)\n{\nif(window.parent != window)\n\twindow.parent.mainFrame.location.href = FileName;\n    return true; \n}\n\nfunction lastipverify(lastip,nMin,nMax)\n{\n\tvar c;\n\tvar n = 0;\n\tvar ch = \"0123456789\";\n\tif(lastip.length == 0)\n\t\treturn false;\n\tfor (var i = 0; i < lastip.length; i++)\n    {\n        c = lastip.charAt(i);\n        if (ch.indexOf(c) == -1)\n            return false;\n    }\n\tif (parseInt(lastip,10) < nMin || parseInt(lastip,10) > nMax)\n\t\treturn false; \t\t\n\treturn true;\t\n}\n\nfunction is_lastip(lastip_string,nMin,nMax)\n{\n\tif(lastip_string.length == 0)\n    {\n        alert(js_input_ip=\"Please input an IP address(1-254)!\");\n        return false;\n    }\n\tif (!lastipverify(lastip_string,nMin,nMax))\n    {\n        alert(js_bad_ip=\"The IP address is invalid, please input another one(1-254)!\");\n\t\treturn false;\n\t}\t\n\treturn true;\n}\n\nfunction maskipverify(ip_string)\n{\n\tvar c;\n\tvar n = 0;\n\tvar ch = \".0123456789\";\n\tif (ip_string.length < 7 || ip_string.length > 15)\n\t\treturn false;\n\tfor (var i = 0; i < ip_string.length; i++)\n    {\n\t\tc = ip_string.charAt(i);\n\t\tif (ch.indexOf(c) == -1)\n\t\t\treturn false;\n\t\telse\n        {\n\t\t\tif (c == '.')\n            {\n\t\t\t\tif(ip_string.charAt(i+1) != '.')\n\t\t\t\t\tn++;\n\t\t\t\telse\n\t\t\t\t\treturn false;\n\t\t\t}\t\t\n\t\t}\n\t}\n\tif (n != 3)\n\t\treturn false;\n   \n\tif (ip_string.indexOf('.') == 0 || ip_string.lastIndexOf('.') == (ip_string.length - 1))\n\t\treturn false; \n\t\t\n\tszarray = [0,0,0,0];\n\tvar remain;\n\tvar i;\n\tfor(i = 0; i < 3; i++)\n    {\n\t\tvar n = ip_string.indexOf('.');\n\t\tszarray[i] = ip_string.substring(0,n);\n\t\tremain = ip_string.substring(n+1);\n\t\tip_string = remain;\n\t}\n\tszarray[3] = ip_string;\n\t\n\tvar correct_range={128:1, 192:1, 224:1, 240:1, 248:1, 252:1, 254:1, 255:1, 0:1};\n\tfor(i = 0; i < 4; i++)\n\t{\n\t\tif(!(szarray[i] in correct_range))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\tif((szarray[0]==0) || (szarray[0]!=255&&szarray[1]!=0) || (szarray[1]!=255&&szarray[2]!=0) || (szarray[2]!=255&&szarray[3]!=0))\n\t{\n\t\treturn false;\n\t}\t\t\n\treturn true;\t\n}\n\nfunction ipverify(ip_string)\n{    \n\tvar c;\n\tvar n = 0;\n\tvar ch = \".0123456789\";\n\tif(ip_string.charAt(0) == '0')\n\t\treturn false;\n\tif (ip_string.length < 7 || ip_string.length > 15)\n\t\treturn false;     \n\tfor (var i = 0; i < ip_string.length; i++)\n    {\n        c = ip_string.charAt(i);\n        if (ch.indexOf(c) == -1)\n            return false;\n        else\n        {\n            if (c == '.')\n            {\n                if(ip_string.charAt(i+1) != '.')\n                n++;\n                else\n                return false;\n            }\t\t\n        }\n    }\n\tif (n != 3) \n\t\treturn false;\n\tif (ip_string.indexOf('.') == 0 || ip_string.lastIndexOf('.') == (ip_string.length - 1))\n\t\treturn false;\n\tszarray = [0,0,0,0];\n\tvar remain;\n\tvar i;\n    for(i = 0; i < 3; i++)\n    {\n        var n = ip_string.indexOf('.');\n        szarray[i] = ip_string.substring(0,n);\n        remain = ip_string.substring(n+1);\n        ip_string = remain;\n    }\n\tszarray[3] = remain;\n\tfor(i = 0; i < 4; i++)\n\t{\n\t\tif (szarray[i] < 0 || szarray[i] > 255)\n\t\t{\n            return false;\n\t\t}\n\t}\t\t\n    if(szarray[0]==127)\n    {\n        return false;\n    }\n    if(szarray[0] >= 224 && szarray[0] <=239)\n    {\n        return false;\n    }\t\n\treturn true;\t\n}\n\nfunction is_ipaddr(ip_string)\n{\n\tif(ip_string.length == 0)\n\t{\n        alert(js_input_ip_2=\"Please input an IP address!\");\n\t\treturn false;\n\t}  \n\tif (!ipverify(ip_string))\n\t{  \n        alert(js_bad_ip_2=\"The IP address is invalid, please input another one!\");\n\t\treturn false;\n\t}\t\n\treturn true;\n}\nfunction is_gatewayaddr(gateway_string)\n{\n\tif(gateway_string.length == 0)\n\t{ \n        alert(js_input_gateway=\"Please input the Gateway!\");\n\t\treturn false;\n\t}\n\tif (!ipverify(gateway_string))\n\t{\n        alert(js_bad_gateway=\"The gateway is invalid, please input another one!\");\n\t\treturn false;\n\t}\t\n\treturn true;\n}\nfunction is_dnsaddr(dns_string)\n{\n\tif(dns_string.length == 0)\n    {\n        alert(js_input_dns=\"Please input the DNS server address!\");\n        return false;\n    }\n\tif (maskipverify(dns_string))\n\t{\n\t\talert(js_bad_dns=\"The DNS server address is invalid, please input another one!\");\n\t\treturn false;\n\t}\n\tif (!ipverify(dns_string))\n    {\n        alert(js_bad_dns=\"The DNS server address is invalid, please input another one!\");\n\t\treturn false;\n\t}\t\n\treturn true;\n}\nfunction is_domain(domain_string)\n{\n\tvar c;\n\tvar ch = \"-.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\tfor (var i = 0; i < domain_string.length; i++)\n    {\n        c = domain_string.charAt(i);\n        if (ch.indexOf(c) == -1)\n        {\n            alert(js_illegal_input=\"The input value contains illegal characters, please input another one!\");\n            return false;\n        }\n    }\t\t\n\t\treturn true;\n}\n\nfunction is_digit(digit_string)\n{\n\tvar c;\n\tvar ch = \"0123456789\";\n\tfor (var i = 0; i < digit_string.length; i++)\n\t{\n        c = digit_string.charAt(i);\n        \n        if(c == \" \" && i ==1)\n        {\n            continue;\n        }\n        \n        if(i > 0)\n        {\n             if(digit_string.charAt(i-1) == \" \" && c == \" \")\n             {\n                continue;\n             }\n            \n            if(digit_string.charAt(i-1) != \" \" && c == \" \")\n            {\n                alert(js_illegal_input=\"The input value contains illegal characters, please input another one!\");\n                return false;\n            }\n        }\n        \n\t\tif(ch.indexOf(c) == -1 )\n\t\t{\n           if(c !=\" \")\n           {\n                alert(js_illegal_input=\"The input value contains illegal characters, please input another one!\");\n    \t\t\treturn false;\n           }\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction portverify(port_string)\n{\n\tvar c;\n\tvar ch = \"0123456789\";\n\tif(port_string.length == 0)\n\t\treturn false;\n\tfor (var i = 0; i < port_string.length; i++)\n    {\n\t\tc = port_string.charAt(i);\n\t\tif (ch.indexOf(c) == -1)\n\t\t\treturn false;\n\t}\n\tif (parseInt(port_string,10) <= 0 || parseInt(port_string,10) > 65535)\n    {\n\t\treturn false;\n    }\n\treturn true;\n}\n\nfunction is_port(port_string)\n{\n\tif(port_string.length == 0)\n    {\n        alert(js_input_port=\"Please input the port number (1-65535)!\");\n\t\treturn false;\n\t}\n\tif (!portverify(port_string))\n    {\n        alert(js_bad_port=\"The port number is invalid, please input another one(1-65535)!\");\n\t\treturn false;\n\t}\t\n\treturn true;\n}\n\nfunction is_number(num_string,nMin,nMax)\n{\n\tvar c;\n\tvar ch = \"0123456789\";\n\t\n\tif (num_string.length == 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (var i = 0; i < num_string.length; i++)\n    {\n\t\tc = num_string.charAt(i);\n\t\tif (ch.indexOf(c) == -1)\n        {\n            return false;\n        }\n\t}\n\tif(parseInt(num_string,10) < nMin || parseInt(num_string,10) > nMax)\n    {\n\t\treturn false;\n    }\n\treturn true;\n}\n\nfunction is_maskaddr(mask_string)\n{\n\tif(mask_string.length == 0)\n    {\n        alert(js_input_mask=\"Please input the Subnet Mask (for example: 255.255.255.0)!\");\n\t\treturn false;\n\t}\n\tif (!maskipverify(mask_string))\n    {\n        alert(js_bad_mask=\"The Subnet Mask is invalid, please input another one (for example: 255.255.255.0)!\");\n\t\treturn false;\n\t}\t\n\treturn true;\n}\n\nfunction macverify(mac_string)\n{\n\tvar c;\n\tvar ch = \"0123456789abcdef\";\n\tvar lcMac = mac_string.toLowerCase();\n\t\n\tif (lcMac == \"ff-ff-ff-ff-ff-ff\")\n\t{\n\t\talert(js_broadcast_mac=\"The MAC address is a broadcast MAC address, please input again!\");\n\t\treturn false;\n\t}\n\t\n\tif (lcMac == \"00-00-00-00-00-00\")\n\t{\n\t\t alert(js_invalid_mac=\"Invalid MAC address, please input another one!\");\n\t\treturn false;\n\t}\n\t\n\tif (mac_string.length != 17)\n\t{\n        alert(js_bad_mac_format=\"The MAC address format is invalid! The valid format is 'XX-XX-XX-XX-XX-XX'.\");\n\t\treturn false;\n\t}\n\tfor (var i = 0; i < lcMac.length; i++)\n    {\n\t\tc = lcMac.charAt(i);\n\t\tif (i % 3 == 2)\n\t\t{\n\t\t\tif(c != '-')\n\t\t\t{\n\t\t\t\talert(js_bad_mac_format=\"The MAC address format is invalid! The valid format is 'XX-XX-XX-XX-XX-XX'.\");\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if (ch.indexOf(c) == -1)\n        {\n            alert(js_invalid_mac=\"Invalid MAC address, please input another one!\");\n\t\t\treturn false;\n        }\n\t}\n\tc = lcMac.charAt(1);\n\tif (ch.indexOf(c) % 2 == 1)\n\t{\n\t\talert(js_multi_mac=\"The MAC address is a multicast MAC address, please input again!\");\n\t\treturn false;\n\t}\t\n\treturn true;\t\n}\n\nfunction is_macaddr(mac_string)\n{\n    if(mac_string.length == 0)\n    {\n        alert(js_input_mac=\"Please input the MAC address!\");\n\t\treturn false;\n\t}\n\tif (!macverify(mac_string))\n\t{\n\t\treturn false;\n\t}\n\treturn true;\t\n}\n\nfunction charCompare(szname,limit)\n{\n\tvar c;\n\tvar l=0;\n\tvar ch = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@^-_.><,[]{}?/+=|\\\\'\\\":;~!#$%()` & \";\n\tif(szname.length > limit)\n\t\treturn false;\n\tfor (var i = 0; i < szname.length; i++)\n    {\n\t\tc = szname.charAt(i);\n\t\tif (ch.indexOf(c) == -1)\n        {\n\t\t\tl += 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl += 1;\n\t\t}\n\t\tif ( l > limit)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction is_hostname(name_string,limit)\n{\n    if(!charCompare(name_string,limit))\n    {\n        alert(js_input_msg=\"You can input up to 30 characters, please input again!\");\n        return false;\n    }\n    else\n    return true;\n}\n\n\nfunction is_port_range(port_value)\n{\n\n\tif(port_value < 0 || port_value > 65535)\n\t{\n        alert(js_bad_port=\"Invalid port value! The port must be between 1~65535, please input another one!\");\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\treturn true;\n\t}\n}\n\n\nvar tipMsgArray = new Array(\n\"Start\",\t\t\t\t\t\t\"Working Mode\",\t\t\t\t\"Internet Access\",\t\t\"WAN / 3G/4G\",\n\"WAN Connection Type\",\t\t\t\"3G/4G\",\t\t\t\t\t\"Wireless operMode\",\t\"Dual Band Selection\",\n\"Wireless&nbsp;&nbsp;2.4G\",\t\t\"Wireless&nbsp;&nbsp;5G\",\t\"Wireless\",\t\t\t\t\"Network Settings\",\n\"Finish\"\n);\n\nvar startIdx = 0;\nvar sysModeIdx = 1;\nvar netInIdx = 2;\nvar wanOr3gIdx= 3;\nvar wanTypeIdx= 4;\nvar net3gIdx= 5;\nvar wlanModeIdx= 6;\nvar wlanBandIdx= 7;\nvar wlan2gIdx = 8;\nvar wlan5gIdx = 9;\nvar wlanIdx = 10;\nvar wiredIdx = 11;\nvar endIdx = 12;\n\nvar startStep = 0;\nvar sysModeStep = 1;\nvar netInStep = 2;\nvar wanOr3gStep= 3;\nvar wanTypeStep= 4;\nvar net3gStep= 5;\nvar wlanModeStep= 6;\nvar wlanBandStep= 7;\nvar wlan2gStep = 8;\nvar wlan5gStep = 9;\nvar wlanStep = 10;\nvar netWorkStep = 11;\nvar endStep = 12;\n\nvar standardRouterMode = 1;/**/\nvar normal3gMode = 2;/*3G*/\nvar apcMode = 4;/*AP Client*/\nvar apMode = 8;/*AP*/\nvar pure3gMode = 16;/*3G*/\n\nvar type3gFirst = 0;\nvar type3gOnly = 1;\nvar typeWanFirst = 2;\nvar typeWanOnly = 3;\n\n/*\n >>  >> WAN >> 3G >>  >> \n\nisMultiSysMode\nsysMode\naccessType:3G3G\nisDualBand:\nlabelIdHTM\nstepId\n*/\nfunction showTipMsg(isMultiSysMode, sysMode, accessType, isDualBand, labelId, stepId)\n{\n\tvar tipMsg = \"<B>\";\n\tvar i = 0;\n\tvar nextLoop = 0;\n\tfor (i = startIdx; i <= endIdx; i++)\n\t{\n\t\tnextLoop = 0;\n\t\tswitch (i)\n\t\t{\n\t\tcase sysModeIdx:/**/\n\t\t\tif (isMultiSysMode != 1)\n\t\t\t{\n\t\t\t\tnextLoop = 1;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase netInIdx:/*3G*/\n\t\t\tif (sysMode != normal3gMode)\n\t\t\t{\n\t\t\t\tnextLoop = 1;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase wanOr3gIdx:/*3G*/\n\t\t\tif (sysMode != normal3gMode || stepId > i)\n\t\t\t{\n\t\t\t\tnextLoop = 1;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase wanTypeIdx:\n\t\t\tif (sysMode != standardRouterMode /*AP3G*/\n\t\t\t\t&& sysMode != normal3gMode\n\t\t\t\t&& sysMode != apcMode)\n\t\t\t{\n\t\t\t\tnextLoop = 1;\n\t\t\t}\n\t\t\tif (sysMode == normal3gMode && /*3G only*/\n\t\t\t\t(stepId <= netInIdx || accessType == type3gOnly))\n\t\t\t{\n\t\t\t\tnextLoop = 1;\n\t\t\t}\n\t\t\t\n\t\t\tbreak;\n\t\tcase net3gIdx:/**/\n\t\t\tif (sysMode != normal3gMode/*AP3G*/\n\t\t\t\t&& sysMode != pure3gMode)\n\t\t\t{\n\t\t\t\tnextLoop = 1;\n\t\t\t}\n\t\t\t/*WAN only*/\n\t\t\tif (sysMode == normal3gMode && accessType == typeWanOnly)\n\t\t\t{\n\t\t\t\tnextLoop = 1;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase wlanModeIdx:/*AP*/\n\t\t\tif (sysMode != apMode)\n\t\t\t{\n\t\t\t\tnextLoop = 1;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase wlanBandIdx:/**/\n\t\tcase wlan2gIdx:\n\t\tcase wlan5gIdx:\n\t\t\tif (isDualBand != 1)\n\t\t\t{\n\t\t\t\tnextLoop = 1;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase wlanIdx:/**/\n\t\t\tif (isDualBand == 1)\n\t\t\t{\n\t\t\t\tnextLoop = 1;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase wiredIdx:/*AP*/\n\t\t\tif (sysMode != apMode)\n\t\t\t{\n\t\t\t\tnextLoop = 1;\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t\tif (nextLoop)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tif (i != 0)\n\t\t{\n\t\t\ttipMsg += \" &gt;&gt; \";\n\t\t}\n\t\tif (stepId == i)\n\t\t{\n\t\t\ttipMsg += \"<span class=\\\"STYLE1\\\">\" + tipMsgArray[i] + \"</span>\"\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttipMsg += tipMsgArray[i];\n\t\t}\n\t}\n\ttipMsg += \"</B>\";\n\tdocument.getElementById(labelId).innerHTML = tipMsg;\n}\n\n//#########FOR IPV6############//\n/*added by ZQQ, 2011.12.24*/\nfunction checkIpAddressFormat(address) { \n   var i = 0, num = 0;\n   var blankNum = 0;\t/* the number of  \"::\" symbol */\n\n   var patten = /[^a-fA-F0-9:]/ig;\n\n\tif (address[address.length - 1] == ':')\n\t{\n\t\treturn false;\n\t}\n   if (address.match(patten) != null)\n\t{\n\t  return false;\n\t}\n\n\tif (address.indexOf(\":::\") != -1)\n\t{\n\t\treturn false;\n\t}\n\n   addrParts = address.split(':');\n   \t\n   if (addrParts.length < 3 || addrParts.length > 8)\n      return false;\n\n   for (i = 0; i < addrParts.length; i++) \n   {\n   \t  if (addrParts[i].length > 4)\t/* the length of each part can be 0~4, that is both \"::\" and \":234:\" is OK. */\n\t  \t return false;\n      if (addrParts[i] != \"\")\n      {\n         if (i == 8)\n\t\t \treturn false;\n      }\n\t  else \n\t  {\n\t     if (i != 0 & i != addrParts.length - 1)\t/* only one \"::\" symbol is allow. */\n\t  \t    blankNum += 1;\n\t  \t \n\t  \t if (blankNum > 1)\n\t  \t {\t\n\t  \t \treturn false;\n\t  \t }\n\t  }\n   }\n\n   if (blankNum == 0)\t/* if the address dost't contain \"::\" symbol to decrease the length, 8 parts are need to write. */\n   {\n      if (addrParts.length != 8)\n\t     return false;\n   }\n   else\n   {\n      if (addrParts.length > 9)\t/* if the address contain \"::\" symbol, the number of parts need to be no more than 9. */\n\t\t return false;\n   }\n   \n   return true;\n}\n\n\nfunction isValidIPv6Prefix(prefix)\n{\n\tvar addrparts;\n\tvar num;\n\tvar patten = /[^a-fA-F0-9:]/ig;\n\tvar val = 0;\n\tvar i = 0;\n\t\n\tif(prefix.length == 0)\n\t{\n\t\talert(\"Blank prefix, please input an IPv6 address prefix.\");\n\t\treturn false;\n\t}\n\tif (prefix.indexOf(\":::\") != -1)\n\t{\n\t\talert(\"\\\"\" + prefix + \"\\\"\" + \" is an invalid IPv6 address prefix format, please check it.\");\n\t\treturn false;\n\t}\n\t\n\tif (prefix.match(patten) != null)\n\t{\n\t\talert(\"\\\"\" + prefix + \"\\\"\" + \" has invalid characters, please check it.\");\n\t\treturn false;\n\t}\n\n\tif (prefix.charAt(prefix.length - 1) != \":\" || prefix.charAt(prefix.length - 2) != \":\")\n\t{\n\t\talert(\"\\\"\" + prefix + \"\\\"\" + \" is an invalid IPv6 address prefix format, please check it.\");\n\t\treturn false;\n\t}\n\taddrParts = prefix.split('::');\n\n\tif (addrParts.length >=3)\n\t{\n\t\talert(\"\\\"\" + prefix + \"\\\"\" + \" should not have more than two \\\"::\\\", please check it.\");\n\t\treturn false;\n\t}\n\t\n   addrParts = prefix.split(':');\n   if(addrParts.length >= 7 || addrParts.length < 3)\n   {\n\t\talert(\"\\\"\" + prefix + \"\\\"\" + \" is an invalid IPv6 address prefix format, please check it.\");\n\t\treturn false;\n   }\n \n   if (addrParts[0] == \"2002\")\n   {\n      alert(\"Prefix starting with \\\"2002\\\" is reserved for using in 6to4 network, please check it.\");\n      return false;\n   }\n  \n\tfor(i = 0; i <addrParts.length; i++)\n\t{\n\t\tif(addrParts[i].length > 4)\n\t\t{\n\t\t\talert(\"\\\"\" + prefix + \"\\\"\" + \" has an invalid section \"+ addrParts[i] + \", please check it.\");\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tval = parseInt(addrParts[0], 16);\n\t\n\tif (val >> 13 != 0x001)\n   {\n\t\talert(\"\\\"\" + prefix + \"\\\"\" + \" is not an IPv6 address prefix, please check it.\");\n\t\treturn false;\n   }\n\t\n\t/*\n\tif (addrParts.length > 1)\n\t{\n\t\tif (0x2001 == val && 0x0db8 == parseInt(addrParts[1], 16))\n   {\n\t\t\talert(\"\\\"\" + prefix + \"\\\"\" + \" is a reserved public IPv6 address prefix, please fill up a valid address.\");\n\t\treturn false;\n   }\n\t}\n\t*/\n\t\n\tif (0x2D00 == val || 0x2E00 == val || 0x3000 == val)\n\t{\n\t\talert(\"\\\"\" + prefix + \"\\\"\" + \" is a reserved public IPv6 address prefix, please fill up a valid address.\");\n\t\treturn false;\n\t}\n\t\n\t/*\n\tif (0x3ffe == val)\n\t{\n\t\talert(\"\\\"\" + prefix + \"\\\"\" + \" is an unused public IPv6 address prefix, please fill up a valid address.\");\n\t\treturn false;\n\t}\n\t*/\n\t\n\treturn true;\n}\n\nfunction isGlobalUnicastAddressesPrefix(address)\n{\n\tvar addrparts;\n\tvar num;\n\tvar val = 0;\n\taddrParts = address.split(':');\n\tval = parseInt(addrParts[0], 16) >> 13;\n\n\tif (val != 0x001)\n\t\treturn false;\n\telse\n\t\treturn true;\n}\n\nfunction isValidPart(val)\n{\n\tvar patten = /[^a-fA-F0-9:]/ig;\n\t\n\tif (0 == parseInt(val, 16) || 0xFFFF == parseInt(val, 16))\n\t\treturn false;\n\tif (val.match(patten) != null)\n\t\treturn false;\n\telse\n\t\treturn true;\n}\n\nfunction isPubIPv6Addr(address){\n\tvar addrparts;\n\tvar num;\n\tvar patten = /[^a-fA-F0-9:]/ig;\n\tvar val = 0;\n\t\n   addrParts = address.split(':');\n\n\t/* check ::1/128 ::/128 ::/0 */\n\tif (addrParts[0] == \"\" & addrParts[1] == \"\")\n\t{\t\n\t\tif (addrParts.length == 2)\n\t\t{\n\t\t\treturn false;\t\t\t\t\t\t\t/* ::/128 ::/0 */\n\t\t}\n\t\t\n\t\tif (parseInt(addrParts[2],16) == 1)\n\t\t{\n\t\t\treturn false;\t\t\t\t\t\t\t/* ::1/128 */\n\t\t}\n\t\t\t\n\t\tif (parseInt(addrParts[2], 16) == 0xFFFF)\n\t\t{\n\t\t\treturn false;\n\t}\n\t}\n\t\n\tif (addrParts[addrParts.length - 1] == \"\" && addrParts[addrParts.length - 2] ==\"\")\n   {\n\t\treturn false;\n   }\n\t\n\tval = parseInt(addrParts[0], 16);\n\tif (val == 0x0100 || val == 0x0200 || val == 0x0400 || val ==0x0800 || val == 0x1000 || (val >= 0x4000 && val <= 0xC000) || val == 0xE000\n\t|| val == 0xF000 || val == 0xf800 || val == 0xFC00 || val == 0xFE00 || val == 0xFE80 || val == 0xFEC0 || val == 0xFF00)\n\t{\n\t\treturn false;\n\t}\n\t\n\tif ((parseInt(addrParts[0], 16) >> 6) == 0x5f00)\n\t{\n\t\treturn false;\n\t}\n\t\t\n\t/*\n\tif ((parseInt(addrParts[0], 16) >> 6) == 0x3ffe)\n\t{\n\t\treturn false;\n\t}\n\t*/\n\t\n\t/* check fe80::/10 */\n\tif ((parseInt(addrParts[0], 16) >> 6) == 0x3fa)\n\t{\n\t\treturn false;\n\t}\n\t\n\t/* check fc00::/7 */\n\tif ((parseInt(addrParts[0], 16) >> 9) == 0x7e )\n\t{\n\t\treturn false;\n\t}\n\t\n\t/* check 2001:db8::/32 */\n\t//if (parseInt(addrParts[0], 16) == 0x2001 & parseInt(addrParts[1], 16) == 0xdb8 )\n\t//\treturn false;\n\t\n\t/* check 2001:10::/28 */\n\t//if (parseInt(addrParts[0], 16) == 0x2001 & (parseInt(addrParts[1], 16) >> 4) == 1 )\n\t//\treturn false;\n\t\t\n\t/* check ff00::/8 */\n\tif ((parseInt(addrParts[0], 16) >> 8) == 0xff)\n\t{\n\t\treturn false;\n\t}\n\t\t\n\t/* check 64:ff9b::/96  \n\t * three condition 64:ff9b::xxxx/96 64:ff9b::xxxx:xxxx/96 64:ff9b::/96*/\n\tif (parseInt(addrParts[0], 16) == 0x64 & parseInt(addrParts[1], 16) == 0xff9b & addrParts[2] == \"\")\n\t{\n\t\tif (addrParts.length <= 5)\n\t\t{\n\t\t\treturn false;\n\t}\n\t}\n\t\t \n\treturn true;\n}\n\nfunction isReservedIpAddress(address)\n{\n\t/*check the IP is reserverd ip address*/\n\tvar addrparts;\n\tvar num;\n\tvar val = 0;\n\taddrParts = address.split(':');\n\t\n\t/*http://www.iana.org/assignments/ipv6-unicast-address-assignments/ipv6-unicast-address-assignments.xml*/\n\t/*2001:db8/32 documentation-only prefix  in the IPv6*/\n\t/* IPv6 Ready Logo is need this address\n\tval = parseInt(addrParts[0], 16);\n\tif (0x2001 == val && 0x0db8 == parseInt(addrParts[1], 16))\n\t{\n\t\treturn true;\n\t}\n\t*/\n\tval = parseInt(addrParts[0], 16);\n\tif (0x2D00 == val || 0x2E00 == val || 0x3000 == val)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\n \nfunction isUnusedIpAddress(address)\n{\n\tvar addrparts;\n\tvar num;\n\tvar val = 0;\n\taddrParts = address.split(':');\n\tval = parseInt(addrParts[0], 16);\n\t/* ipv6 logo test need this ip\n\tif (0x3ffe == val)\n\t{\n\t\treturn true;\n\t}\n\t*/\n\treturn false;\n}\n\nfunction isGlobalIPv6Addr(address)\n{\n\tvar addrParts;\n\taddrParts = address.split(':');\n\t\n\tif (addrParts[0] == \"2002\")\n\t{\n\t\talert(\"\\\"\" + address + \"\\\"\" + \" is a 6to4 tunnel address, it can not be configured manually, please fill up another address.\");\n\t\treturn false;\n\t}\n\t\n\tif (false == checkIpAddressFormat(address))\n\t{\n\t\talert(\"\\\"\" + address + \"\\\"\" + \" is not an IPv6 address, please fill up a valid address.\");\n\t\treturn false;\n\t}\n\telse if (false == isPubIPv6Addr(address))\n\t{\n\t\talert(\"\\\"\" + address + \"\\\"\" + \" is not a public IPv6 address, please fill up a valid address.\");\n\t\treturn false;\n\t}\n\telse if (false == isGlobalUnicastAddressesPrefix(address))\n\t{\n\t\talert(\"\\\"\" + address + \"\\\"\" + \" is not a public IPv6 address, please fill up a valid address.\");\n\t\treturn false;\n\t}\n\telse if (true == isReservedIpAddress(address))\n\t{\n\t\talert(\"\\\"\" + address + \"\\\"\" + \" is a reserved public IPv6 address, please fill up a valid address.\");\n\t\treturn false;\n\t}\n\telse if (true == isUnusedIpAddress(address)) \n\t{\n\t\talert(\"\\\"\" + address + \"\\\"\" + \" is an unused IPv6 address, please fill up a valid address.\");\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}\n\nvar transMatrixHTML = new Array(\n\t/&/g, \"&amp;\",\n\t/\\\\/g, \"&#92;\",\n\t/'/g, \"&#39;\",\n\t/\"/g, \"&quot;\",\n\t/</g, \"&lt;\",\n\t/>/g, \"&gt;\",\n\t/ /g, \"&nbsp;\"\n);\nfunction escapeHtml(str)\n{\n    var r = str.toString();\n\tfor (var i = 0; i < transMatrixHTML.length; i+=2)\n\t{\n\t\tr = r.replace(transMatrixHTML[i], transMatrixHTML[i+1]);\n\t}\n\treturn r;\n}",
 "title": ""
}