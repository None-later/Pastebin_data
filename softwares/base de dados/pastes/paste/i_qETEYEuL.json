{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "lg_en",
  "kw_pass"
 ],
 "key": "qETEYEuL",
 "pasteDate": "Feb 28, 2018, 9:26:00 AM",
 "relevancy": 0.0,
 "relevant": false,
 "text": "   .data\t\nmsg1:   .asciiz \"Please enter the degree of Polynomial:\"\nmsg2:   .asciiz \"Please enter left bound.\"\nmsg3:   .asciiz \"Please enter right bound.\"\nmsg4:   .asciiz \" Please enter coefficient until N-1 is complete.\"\noffset:\t.float  .0001 #where the bounds are going to be stored\n   .text\n\nMain:\n\tli \t$v0,4 \n\tla \t$a0, msg1\n\tsyscall\n\tli  \t$v0, 5 \n\tsyscall\n\tmove \t$a0,$v0\n\tli \t$v0,1\n\tsyscall\t\t\t#checks print degree\n\tmove \t$s1,$a0 #-------------------------------$s1 holds degree for entire project\n\t\t\n\tli \t$v0,4 \n\tla \t$a0, msg2\n\tsyscall\n\tli  \t$v0, 5 \n\tsyscall\n\tmove \t$a0,$v0\n\tli \t$v0,1\n\tsyscall\t\t\t#checks print left bound\n\tmove \t$s0,$a0  #--------------------------------$s0 holds left bound\n\n\n\tli \t$v0,4 \n\tla \t$a0, msg3\n\tsyscall\n\tli  \t$v0, 5 \n\tsyscall\n\tmove \t$a0,$v0\n\tli \t$v0,1\n\tsyscall\t\t\t#checks print right bound\n\tmove \t$s2,$a0  #---------------------------------$s2 holds right bound\n\t\n\t#Allocate memory in the stack\n\tli\t$s3, 4\t\t# size of integer 4 bytes\n\tadd\t$s1, $s1, 1\t# add one more spot for constant \n\tmul\t$s3, $s3, $s1 \t# compute the size of the array of coefficients\n\taddi\t$s3, $s3, 12  \t# create 2 more additional places in memory\n\tsub\t$sp, $sp, $s3\t# make room on stack for coefficients\n\tsw\t$ra, 0($sp)\n\tsw\t$s4, 4($sp)\n\nFillcoef:\n\t# This for loop will be called from main and fill and array of coefficients \n\tadd\t$t0, $t0, $zero\n\tslt\t$t2,$t0,$s1\n\tbeq\t$t2,$zero,start\n\tli \t$v0,4 \n\tla \t$a0, msg4\n\tsyscall\n\tl.s  \t$f0,6\n\tsyscall\n\tswc1\t$f0, 8($sp)\t#store the coefficient\n\taddi \t$sp, $sp, 4 \t#increment stack pointer\n\taddi \t$t0,$t0,1 \t#increment counter\n\tb\tFillcoef\n\nstart:\n\t# This will compute the slope and out the coordinates of the minimum\n\tl.s\t$f0, -1\t\t# This is dydx or derivative\n\tadd\t$t0, $zero, $s0\t# add left bound\n\tsw\t$t0, 4($sp)\n\tlwc1\t$f1, 4($sp)\n\tcvt.s.w\t$f1,$f1  \t# x0 will start at the left bound limit\n\tl.s\t$f29, 0\t\t# variable to pass as parameter for doEquation\n\tl.s\t$f31, 0\t\t# a zero value to check for negative slope\n\ncomputeSlope:\t\n\tc.lt.s  $f0, $f31\t# Check to see if slope is negative\n\tbc1f \tend \t\t# continue loop if slope is negative\n\tmov.s \t$f29, $f1\n\tjal\tdoEquation  \t# find temporary y value\n\t# make sure doEquation places y into $f3 \n\tmov.s  \t$f10, $f3\t#f10 will hold our temporary Y variable\n\tl.s\t$f30,offset\t#loads .0001 in to float register from label\n\tsub.s\t$f4, $f1,$f30  \t# xOne  X0 - .0001\n\tadd.s\t$f5, $f1, $f30 \t# xTwo  x0 + .0001\n\tmov.s\t$f29, $f4\t# place xOne \n\tjal\tdoEquation \t# find yOne using xOne as x0\n\tmov.s\t$f6, $f3\t# move return value to $f6\n\tmov.s\t$f29, $f5\t# place xTwo\n\tjal\tdoEquation \t# find yTwo using xTwo as x0\n\tmov.s\t$f7, $f3\t# move return value to $f7\n\t# calculate derivative  yTwo-Yone/x2-x1\n\tsub.d\t$f6, $f7, $f6\n\tsub.d\t$f4, $f5, $f4\n\tdiv.d\t$f0, $f6, $f4  #derivative has changed\n\t# solve for x where x = x0 - y value/dydx\n\tdiv.d\t$f4, $f10, $f0\n\tsub.s\t$f4, $f1, $f4\n\t# make x0 = x\n\tmov.s \t$f1, $f4\n\tb \tcomputeSlope\n\t\ndoEquation:\n\t# Return value is stored in $f3 and $f29 is value of x0\n\tadd\t$t1 \n\tl.s\t$f3, 0\t\t#create a return value register\n\tadd\t$t0, $t0, $zero\t# an iterator for loop\n\tl.s\t$f4, 1\nloop:\tblt\t$t0, $s1, findY\n\tjr\t$ra\nfindY:\t\n\tadd\t$f3, $f3,\n\t\t\n\t\n\t\nresetSP:\n\t#sub\t&sp, &sp, $s1   #move the stack pointer to the beginging of the array\nend:\n\t#print out the coordinates\n\tjal\tdoEquation  #find last y-coordinate\n\tmov.s\t$f3, $f4\n\t#Print out \"the coordinates are ($f1, $f4)\"\n\t\n\t\n\tli\t$s3, 4\t\t# size of integer 4 bytes\n\tadd\t$s1, $s1, 1\t# add one more spot for constant coefficient\n\tmul\t$s3, $s3, $s1 \t# compute the size of the array of coefficients\n\taddi\t$s3, $s3, 12  \t# create 2 more additional places in memory\n\tadd\t$sp, $sp, $s3\t#clear off coeficients\n\tlw\t$ra, 0($sp) #restore $ra\n\tlw\t$s4, 4($sp)\n\taddi\t$sp, $sp, 4 #shrink stack\n\tjr\t$ra",
 "title": ""
}