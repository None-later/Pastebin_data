{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "re_sql",
  "kw_op",
  "kw_password",
  "kw_owned",
  "kw_encrypted",
  "kw_pass",
  "kw_offline",
  "re_email",
  "kw_scan",
  "kw_error",
  "re_ast1",
  "kw_patch",
  "kw_encrypt",
  "kw_target",
  "lg_en",
  "kw_dropping",
  "kw_dos",
  "kw_sec",
  "kw_down",
  "kw_vulnerable",
  "kw_scans",
  "kw_security",
  "kw_bug",
  "re_url",
  "kw_encryption"
 ],
 "key": "2GwC8bEg",
 "pasteDate": "Feb 23, 2018, 10:53:50 AM",
 "relevancy": 10.0,
 "relevant": false,
 "text": "IF OBJECT_ID('dbo.sp_Blitz') IS NULL\n  EXEC ('CREATE PROCEDURE dbo.sp_Blitz AS RETURN 0;');\nGO\n\nALTER PROCEDURE [dbo].[sp_Blitz]\n    @Help TINYINT = 0 ,\n    @CheckUserDatabaseObjects TINYINT = 1 ,\n    @CheckProcedureCache TINYINT = 0 ,\n    @OutputType VARCHAR(20) = 'TABLE' ,\n    @OutputProcedureCache TINYINT = 0 ,\n    @CheckProcedureCacheFilter VARCHAR(10) = NULL ,\n    @CheckServerInfo TINYINT = 0 ,\n    @SkipChecksServer NVARCHAR(256) = NULL ,\n    @SkipChecksDatabase NVARCHAR(256) = NULL ,\n    @SkipChecksSchema NVARCHAR(256) = NULL ,\n    @SkipChecksTable NVARCHAR(256) = NULL ,\n    @IgnorePrioritiesBelow INT = NULL ,\n    @IgnorePrioritiesAbove INT = NULL ,\n    @OutputServerName NVARCHAR(256) = NULL ,\n    @OutputDatabaseName NVARCHAR(256) = NULL ,\n    @OutputSchemaName NVARCHAR(256) = NULL ,\n    @OutputTableName NVARCHAR(256) = NULL ,\n    @OutputXMLasNVARCHAR TINYINT = 0 ,\n    @EmailRecipients VARCHAR(MAX) = NULL ,\n    @EmailProfile sysname = NULL ,\n    @SummaryMode TINYINT = 0 ,\n    @BringThePain TINYINT = 0 ,\n\t@Debug TINYINT  = 0,\n    @VersionDate DATETIME = NULL OUTPUT\nWITH RECOMPILE\nAS\n    SET NOCOUNT ON;\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\n\tDECLARE @Version VARCHAR(30);\n\tSET @Version = '6.2';\n\tSET @VersionDate = '20180201';\n\tSET @OutputType = UPPER(@OutputType);\n\n\tIF @Help = 1 PRINT '\n\t/*\n\tsp_Blitz from http://FirstResponderKit.org\n\t\n\tThis script checks the health of your SQL Server and gives you a prioritized\n\tto-do list of the most urgent things you should consider fixing.\n\n\tTo learn more, visit http://FirstResponderKit.org where you can download new\n\tversions for free, watch training videos on how it works, get more info on\n\tthe findings, contribute your own code, and more.\n\n\tKnown limitations of this version:\n\t - Only Microsoft-supported versions of SQL Server. Sorry, 2005 and 2000.\n\t - If a database name has a question mark in it, some tests will fail. Gotta\n\t   love that unsupported sp_MSforeachdb.\n\t - If you have offline databases, sp_Blitz fails the first time you run it,\n\t   but does work the second time. (Hoo, boy, this will be fun to debug.)\n      - @OutputServerName will output QueryPlans as NVARCHAR(MAX) since Microsoft\n\t    has refused to support XML columns in Linked Server queries. The bug is now\n\t\t16 years old! *~ \\o/ ~*\n\n\tUnknown limitations of this version:\n\t - None.  (If we knew them, they would be known. Duh.)\n\n     Changes - for the full list of improvements and fixes in this version, see:\n     https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/\n\n\n\tParameter explanations:\n\n\t@CheckUserDatabaseObjects\t1=review user databases for triggers, heaps, etc. Takes more time for more databases and objects.\n\t@CheckServerInfo\t\t\t1=show server info like CPUs, memory, virtualization\n\t@CheckProcedureCache\t\t1=top 20-50 resource-intensive cache plans and analyze them for common performance issues.\n\t@OutputProcedureCache\t\t1=output the top 20-50 resource-intensive plans even if they did not trigger an alarm\n\t@CheckProcedureCacheFilter\t''CPU'' | ''Reads'' | ''Duration'' | ''ExecCount''\n\t@OutputType\t\t\t\t\t''TABLE''=table | ''COUNT''=row with number found | ''MARKDOWN''=bulleted list | ''SCHEMA''=version and field list | ''NONE'' = none\n\t@IgnorePrioritiesBelow\t\t50=ignore priorities below 50\n\t@IgnorePrioritiesAbove\t\t50=ignore priorities above 50\n\tFor the rest of the parameters, see https://www.BrentOzar.com/blitz/documentation for details.\n\n\n\n    MIT License\n\t\n\tCopyright for portions of sp_Blitz are held by Microsoft as part of project \n\ttigertoolbox and are provided under the MIT license:\n\thttps://github.com/Microsoft/tigertoolbox\n\t   \n\tAll other copyright for sp_Blitz are held by Brent Ozar Unlimited, 2017.\n\n\tCopyright (c) 2017 Brent Ozar Unlimited\n\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\tof this software and associated documentation files (the \"Software\"), to deal\n\tin the Software without restriction, including without limitation the rights\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\tcopies of the Software, and to permit persons to whom the Software is\n\tfurnished to do so, subject to the following conditions:\n\n\tThe above copyright notice and this permission notice shall be included in all\n\tcopies or substantial portions of the Software.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\tSOFTWARE.\n\n\n\n\n\t*/';\n\tELSE IF @OutputType = 'SCHEMA'\n\tBEGIN\n\t\tSELECT FieldList = '[Priority] TINYINT, [FindingsGroup] VARCHAR(50), [Finding] VARCHAR(200), [DatabaseName] NVARCHAR(128), [URL] VARCHAR(200), [Details] NVARCHAR(4000), [QueryPlan] NVARCHAR(MAX), [QueryPlanFiltered] NVARCHAR(MAX), [CheckID] INT';\n\n\tEND;\n\tELSE /* IF @OutputType = 'SCHEMA' */\n\tBEGIN\n\n\t\tDECLARE @StringToExecute NVARCHAR(4000)\n\t\t\t,@curr_tracefilename NVARCHAR(500)\n\t\t\t,@base_tracefilename NVARCHAR(500)\n\t\t\t,@indx int\n\t\t\t,@query_result_separator CHAR(1)\n\t\t\t,@EmailSubject NVARCHAR(255)\n\t\t\t,@EmailBody NVARCHAR(MAX)\n\t\t\t,@EmailAttachmentFilename NVARCHAR(255)\n\t\t\t,@ProductVersion NVARCHAR(128)\n\t\t\t,@ProductVersionMajor DECIMAL(10,2)\n\t\t\t,@ProductVersionMinor DECIMAL(10,2)\n\t\t\t,@CurrentName NVARCHAR(128)\n\t\t\t,@CurrentDefaultValue NVARCHAR(200)\n\t\t\t,@CurrentCheckID INT\n\t\t\t,@CurrentPriority INT\n\t\t\t,@CurrentFinding VARCHAR(200)\n\t\t\t,@CurrentURL VARCHAR(200)\n\t\t\t,@CurrentDetails NVARCHAR(4000)\n\t\t\t,@MsSinceWaitsCleared DECIMAL(38,0)\n\t\t\t,@CpuMsSinceWaitsCleared DECIMAL(38,0)\n\t\t\t,@ResultText NVARCHAR(MAX)\n\t\t\t,@crlf NVARCHAR(2)\n\t\t\t,@Processors int\n\t\t\t,@NUMANodes int\n\t\t\t,@MinServerMemory bigint\n\t\t\t,@MaxServerMemory bigint\n\t\t\t,@ColumnStoreIndexesInUse bit\n\t\t\t,@TraceFileIssue bit\n\t\t\t-- Flag for Windows OS to help with Linux support\n\t\t\t,@IsWindowsOperatingSystem BIT;\n\n\n\t\tSET @crlf = NCHAR(13) + NCHAR(10);\n\t\tSET @ResultText = 'sp_Blitz Results: ' + @crlf;\n\t\t\n\t\t/*\n\t\t--TOURSTOP01--\n\t\tSee https://www.BrentOzar.com/go/blitztour for a guided tour.\n\n\t\tWe start by creating #BlitzResults. It's a temp table that will store all of\n\t\tthe results from our checks. Throughout the rest of this stored procedure,\n\t\twe're running a series of checks looking for dangerous things inside the SQL\n\t\tServer. When we find a problem, we insert rows into #BlitzResults. At the\n\t\tend, we return these results to the end user.\n\n\t\t#BlitzResults has a CheckID field, but there's no Check table. As we do\n\t\tchecks, we insert data into this table, and we manually put in the CheckID.\n\t\tFor a list of checks, visit http://FirstResponderKit.org.\n\t\t*/\n\t\tIF OBJECT_ID('tempdb..#BlitzResults') IS NOT NULL\n\t\t\tDROP TABLE #BlitzResults;\n\t\tCREATE TABLE #BlitzResults\n\t\t\t(\n\t\t\t  ID INT IDENTITY(1, 1) ,\n\t\t\t  CheckID INT ,\n\t\t\t  DatabaseName NVARCHAR(128) ,\n\t\t\t  Priority TINYINT ,\n\t\t\t  FindingsGroup VARCHAR(50) ,\n\t\t\t  Finding VARCHAR(200) ,\n\t\t\t  URL VARCHAR(200) ,\n\t\t\t  Details NVARCHAR(4000) ,\n\t\t\t  QueryPlan [XML] NULL ,\n\t\t\t  QueryPlanFiltered [NVARCHAR](MAX) NULL\n\t\t\t);\n\n\t\tIF OBJECT_ID('tempdb..#TemporaryDatabaseResults') IS NOT NULL\n\t\t\tDROP TABLE #TemporaryDatabaseResults;\n\t\tCREATE TABLE #TemporaryDatabaseResults\n\t\t\t(\n\t\t\t  DatabaseName NVARCHAR(128) ,\n\t\t\t  Finding NVARCHAR(128)\n\t\t\t);\n\n\t\t/*\n\t\tYou can build your own table with a list of checks to skip. For example, you\n\t\tmight have some databases that you don't care about, or some checks you don't\n\t\twant to run. Then, when you run sp_Blitz, you can specify these parameters:\n\t\t@SkipChecksDatabase = 'DBAtools',\n\t\t@SkipChecksSchema = 'dbo',\n\t\t@SkipChecksTable = 'BlitzChecksToSkip'\n\t\tPass in the database, schema, and table that contains the list of checks you\n\t\twant to skip. This part of the code checks those parameters, gets the list,\n\t\tand then saves those in a temp table. As we run each check, we'll see if we\n\t\tneed to skip it.\n\n\t\tReally anal-retentive users will note that the @SkipChecksServer parameter is\n\t\tnot used. YET. We added that parameter in so that we could avoid changing the\n\t\tstored proc's surface area (interface) later.\n\t\t*/\n\t\t/* --TOURSTOP07-- */\n\t\tIF OBJECT_ID('tempdb..#SkipChecks') IS NOT NULL\n\t\t\tDROP TABLE #SkipChecks;\n\t\tCREATE TABLE #SkipChecks\n\t\t\t(\n\t\t\t  DatabaseName NVARCHAR(128) ,\n\t\t\t  CheckID INT ,\n\t\t\t  ServerName NVARCHAR(128)\n\t\t\t);\n\t\tCREATE CLUSTERED INDEX IX_CheckID_DatabaseName ON #SkipChecks(CheckID, DatabaseName);\n\n\t\tIF @SkipChecksTable IS NOT NULL\n\t\t\tAND @SkipChecksSchema IS NOT NULL\n\t\t\tAND @SkipChecksDatabase IS NOT NULL\n\t\t\tBEGIN\n\t\t\t\t\n\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Inserting SkipChecks', 0, 1) WITH NOWAIT;\n\t\t\t\t\n\t\t\t\tSET @StringToExecute = 'INSERT INTO #SkipChecks(DatabaseName, CheckID, ServerName )\n\t\t\t\tSELECT DISTINCT DatabaseName, CheckID, ServerName\n\t\t\t\tFROM ' + QUOTENAME(@SkipChecksDatabase) + '.' + QUOTENAME(@SkipChecksSchema) + '.' + QUOTENAME(@SkipChecksTable)\n\t\t\t\t\t+ ' WHERE ServerName IS NULL OR ServerName = SERVERPROPERTY(''ServerName'') OPTION (RECOMPILE);';\n\t\t\t\tEXEC(@StringToExecute);\n\t\t\tEND;\n\n\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 106 )\n\t\t\t\t\t\t\tAND (select convert(int,value_in_use) from sys.configurations where name = 'default trace enabled' ) = 1\n\t\t\tBEGIN\n\t\t\t\t-- Flag for Windows OS to help with Linux support\n\t\t\t\tIF EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    sys.all_objects\n\t\t\t\t\t\t\t\tWHERE   name = 'dm_os_host_info' )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tSELECT @IsWindowsOperatingSystem = CASE WHEN host_platform = 'Windows' THEN 1 ELSE 0 END FROM sys.dm_os_host_info ;\n\t\t\t\t\tEND;\n\t\t\t\t\tELSE\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tSELECT @IsWindowsOperatingSystem = 1 ;\n\t\t\t\t\tEND;\n\n\t\t\t\t\tselect @curr_tracefilename = [path] from sys.traces where is_default = 1 ;\n\t\t\t\t\tset @curr_tracefilename = reverse(@curr_tracefilename);\n\n\t\t\t\t\t-- Set the trace file path separator based on underlying OS\n\t\t\t\t\tIF (@IsWindowsOperatingSystem = 1)\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tselect @indx = patindex('%\\%', @curr_tracefilename) ;\n\t\t\t\t\t\tset @curr_tracefilename = reverse(@curr_tracefilename) ;\n\t\t\t\t\t\tset @base_tracefilename = left( @curr_tracefilename,len(@curr_tracefilename) - @indx) + '\\log.trc' ;\n\t\t\t\t\tEND;\n\t\t\t\t\tELSE\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tselect @indx = patindex('%/%', @curr_tracefilename) ;\n\t\t\t\t\t\tset @curr_tracefilename = reverse(@curr_tracefilename) ;\n\t\t\t\t\t\tset @base_tracefilename = left( @curr_tracefilename,len(@curr_tracefilename) - @indx) + '/log.trc' ;\n\t\t\t\t\tEND;\n\n\t\t\tEND;\n\n\t\t/* If the server has any databases on Antiques Roadshow, skip the checks that would break due to CTEs. */\n\t\tIF @CheckUserDatabaseObjects = 1 AND EXISTS(SELECT * FROM sys.databases WHERE compatibility_level < 90)\n\t\tBEGIN\n\t\t\tSET @CheckUserDatabaseObjects = 0;\n\t\t\tPRINT 'Databases with compatibility level < 90 found, so setting @CheckUserDatabaseObjects = 0.';\n\t\t\tPRINT 'The database-level checks rely on CTEs, which are not supported in SQL 2000 compat level databases.';\n\t\t\tPRINT 'Get with the cool kids and switch to a current compatibility level, Grandpa. To find the problems, run:';\n\t\t\tPRINT 'SELECT * FROM sys.databases WHERE compatibility_level < 90;';\n\t\t\tINSERT  INTO #BlitzResults\n\t\t\t( CheckID ,\n\t\t\t\tPriority ,\n\t\t\t\tFindingsGroup ,\n\t\t\t\tFinding ,\n\t\t\t\tURL ,\n\t\t\t\tDetails\n\t\t\t)\n\t\t\tSELECT 204 AS CheckID ,\n\t\t\t\t\t0 AS Priority ,\n\t\t\t\t\t'Informational' AS FindingsGroup ,\n\t\t\t\t\t'@CheckUserDatabaseObjects Disabled' AS Finding ,\n\t\t\t\t\t'https://www.BrentOzar.com/blitz/' AS URL ,\n\t\t\t\t\t'Since you have databases with compatibility_level < 90, we can''t run @CheckUserDatabaseObjects = 1. To find them: SELECT * FROM sys.databases WHERE compatibility_level < 90' AS Details;\n\t\tEND;\n\n\n\t\t/* --TOURSTOP08-- */\n\t\t/* If the server is Amazon RDS, skip checks that it doesn't allow */\n\t\tIF LEFT(CAST(SERVERPROPERTY('ComputerNamePhysicalNetBIOS') AS VARCHAR(8000)), 8) = 'EC2AMAZ-'\n\t\t   AND LEFT(CAST(SERVERPROPERTY('MachineName') AS VARCHAR(8000)), 8) = 'EC2AMAZ-'\n\t\t   AND LEFT(CAST(SERVERPROPERTY('ServerName') AS VARCHAR(8000)), 8) = 'EC2AMAZ-'\n\t\t\tBEGIN\n\t\t\t\t\t\tINSERT INTO #SkipChecks (CheckID) VALUES (6);\n\t\t\t\t\t\tINSERT INTO #SkipChecks (CheckID) VALUES (29);\n\t\t\t\t\t\tINSERT INTO #SkipChecks (CheckID) VALUES (30);\n\t\t\t\t\t\tINSERT INTO #SkipChecks (CheckID) VALUES (31);\n\t\t\t\t\t\tINSERT INTO #SkipChecks (CheckID) VALUES (40); /* TempDB only has one data file */\n\t\t\t\t\t\tINSERT INTO #SkipChecks (CheckID) VALUES (57);\n\t\t\t\t\t\tINSERT INTO #SkipChecks (CheckID) VALUES (59);\n\t\t\t\t\t\tINSERT INTO #SkipChecks (CheckID) VALUES (61);\n\t\t\t\t\t\tINSERT INTO #SkipChecks (CheckID) VALUES (62);\n\t\t\t\t\t\tINSERT INTO #SkipChecks (CheckID) VALUES (68);\n\t\t\t\t\t\tINSERT INTO #SkipChecks (CheckID) VALUES (69);\n\t\t\t\t\t\tINSERT INTO #SkipChecks (CheckID) VALUES (73);\n\t\t\t\t\t\tINSERT INTO #SkipChecks (CheckID) VALUES (79);\n\t\t\t\t\t\tINSERT INTO #SkipChecks (CheckID) VALUES (92);\n\t\t\t\t\t\tINSERT INTO #SkipChecks (CheckID) VALUES (94);\n\t\t\t\t\t\tINSERT INTO #SkipChecks (CheckID) VALUES (96);\n\t\t\t\t\t\tINSERT INTO #SkipChecks (CheckID) VALUES (98);\n\t\t\t\t\t\tINSERT INTO #SkipChecks (CheckID) VALUES (100); /* Remote DAC disabled */\n\t\t\t\t\t\tINSERT INTO #SkipChecks (CheckID) VALUES (123);\n\t\t\t\t\t\tINSERT INTO #SkipChecks (CheckID) VALUES (177);\n\t\t\t\t\t\tINSERT INTO #SkipChecks (CheckID) VALUES (180); /* 180/181 are maintenance plans */\n\t\t\t\t\t\tINSERT INTO #SkipChecks (CheckID) VALUES (181);\n\t\t\tEND; /* Amazon RDS skipped checks */\n\n\t\t/* If the server is ExpressEdition, skip checks that it doesn't allow */\n\t\tIF CAST(SERVERPROPERTY('Edition') AS NVARCHAR(1000)) LIKE N'%Express%'\n\t\t\tBEGIN\n\t\t\t\t\t\tINSERT INTO #SkipChecks (CheckID) VALUES (30); /* Alerts not configured */\n\t\t\t\t\t\tINSERT INTO #SkipChecks (CheckID) VALUES (31); /* Operators not configured */\n\t\t\t\t\t\tINSERT INTO #SkipChecks (CheckID) VALUES (61); /* Agent alerts 19-25 */\n\t\t\t\t\t\tINSERT INTO #SkipChecks (CheckID) VALUES (73); /* Failsafe operator */\n\t\t\t\t\t\tINSERT INTO #SkipChecks (CheckID) VALUES (96); /* Agent alerts for corruption */\n\t\t\tEND; /* Express Edition skipped checks */\n\n\n\t\t/*\n\t\tThat's the end of the SkipChecks stuff.\n\t\tThe next several tables are used by various checks later.\n\t\t*/\n\t\tIF OBJECT_ID('tempdb..#ConfigurationDefaults') IS NOT NULL\n\t\t\tDROP TABLE #ConfigurationDefaults;\n\t\tCREATE TABLE #ConfigurationDefaults\n\t\t\t(\n\t\t\t  name NVARCHAR(128) ,\n\t\t\t  DefaultValue BIGINT,\n\t\t\t  CheckID INT\n\t\t\t);\n\n        IF OBJECT_ID ('tempdb..#Recompile') IS NOT NULL \n            DROP TABLE #Recompile; \n        CREATE TABLE #Recompile( \n            DBName varchar(200), \n            ProcName varchar(300), \n            RecompileFlag varchar(1),\n            SPSchema varchar(50)\n        );\n\n\t\tIF OBJECT_ID('tempdb..#DatabaseDefaults') IS NOT NULL\n\t\t\tDROP TABLE #DatabaseDefaults;\n\t\tCREATE TABLE #DatabaseDefaults\n\t\t\t(\n\t\t\t\tname NVARCHAR(128) ,\n\t\t\t\tDefaultValue NVARCHAR(200),\n\t\t\t\tCheckID INT,\n\t\t        Priority INT,\n\t\t        Finding VARCHAR(200),\n\t\t        URL VARCHAR(200),\n\t\t        Details NVARCHAR(4000)\n\t\t\t);\n\n\t\tIF OBJECT_ID('tempdb..#DatabaseScopedConfigurationDefaults') IS NOT NULL\n\t\t\tDROP TABLE #DatabaseScopedConfigurationDefaults;\n\t\tCREATE TABLE #DatabaseScopedConfigurationDefaults\n\t\t\t(ID INT IDENTITY(1,1), configuration_id INT, [name] NVARCHAR(60), default_value sql_variant, default_value_for_secondary sql_variant, CheckID INT, );\n\n\n\n\t\tIF OBJECT_ID('tempdb..#DBCCs') IS NOT NULL\n\t\t\tDROP TABLE #DBCCs;\n\t\tCREATE TABLE #DBCCs\n\t\t\t(\n\t\t\t  ID INT IDENTITY(1, 1)\n\t\t\t\t\t PRIMARY KEY ,\n\t\t\t  ParentObject VARCHAR(255) ,\n\t\t\t  Object VARCHAR(255) ,\n\t\t\t  Field VARCHAR(255) ,\n\t\t\t  Value VARCHAR(255) ,\n\t\t\t  DbName NVARCHAR(128) NULL\n\t\t\t);\n\n\n\t\tIF OBJECT_ID('tempdb..#LogInfo2012') IS NOT NULL\n\t\t\tDROP TABLE #LogInfo2012;\n\t\tCREATE TABLE #LogInfo2012\n\t\t\t(\n\t\t\t  recoveryunitid INT ,\n\t\t\t  FileID SMALLINT ,\n\t\t\t  FileSize BIGINT ,\n\t\t\t  StartOffset BIGINT ,\n\t\t\t  FSeqNo BIGINT ,\n\t\t\t  [Status] TINYINT ,\n\t\t\t  Parity TINYINT ,\n\t\t\t  CreateLSN NUMERIC(38)\n\t\t\t);\n\n\t\tIF OBJECT_ID('tempdb..#LogInfo') IS NOT NULL\n\t\t\tDROP TABLE #LogInfo;\n\t\tCREATE TABLE #LogInfo\n\t\t\t(\n\t\t\t  FileID SMALLINT ,\n\t\t\t  FileSize BIGINT ,\n\t\t\t  StartOffset BIGINT ,\n\t\t\t  FSeqNo BIGINT ,\n\t\t\t  [Status] TINYINT ,\n\t\t\t  Parity TINYINT ,\n\t\t\t  CreateLSN NUMERIC(38)\n\t\t\t);\n\n\t\tIF OBJECT_ID('tempdb..#partdb') IS NOT NULL\n\t\t\tDROP TABLE #partdb;\n\t\tCREATE TABLE #partdb\n\t\t\t(\n\t\t\t  dbname NVARCHAR(128) ,\n\t\t\t  objectname NVARCHAR(200) ,\n\t\t\t  type_desc NVARCHAR(128)\n\t\t\t);\n\n\t\tIF OBJECT_ID('tempdb..#TraceStatus') IS NOT NULL\n\t\t\tDROP TABLE #TraceStatus;\n\t\tCREATE TABLE #TraceStatus\n\t\t\t(\n\t\t\t  TraceFlag VARCHAR(10) ,\n\t\t\t  status BIT ,\n\t\t\t  Global BIT ,\n\t\t\t  Session BIT\n\t\t\t);\n\n\t\tIF OBJECT_ID('tempdb..#driveInfo') IS NOT NULL\n\t\t\tDROP TABLE #driveInfo;\n\t\tCREATE TABLE #driveInfo\n\t\t\t(\n\t\t\t  drive NVARCHAR ,\n\t\t\t  SIZE DECIMAL(18, 2)\n\t\t\t);\n\n\n\t\tIF OBJECT_ID('tempdb..#dm_exec_query_stats') IS NOT NULL\n\t\t\tDROP TABLE #dm_exec_query_stats;\n\t\tCREATE TABLE #dm_exec_query_stats\n\t\t\t(\n\t\t\t  [id] [int] NOT NULL\n\t\t\t\t\t\t IDENTITY(1, 1) ,\n\t\t\t  [sql_handle] [varbinary](64) NOT NULL ,\n\t\t\t  [statement_start_offset] [int] NOT NULL ,\n\t\t\t  [statement_end_offset] [int] NOT NULL ,\n\t\t\t  [plan_generation_num] [bigint] NOT NULL ,\n\t\t\t  [plan_handle] [varbinary](64) NOT NULL ,\n\t\t\t  [creation_time] [datetime] NOT NULL ,\n\t\t\t  [last_execution_time] [datetime] NOT NULL ,\n\t\t\t  [execution_count] [bigint] NOT NULL ,\n\t\t\t  [total_worker_time] [bigint] NOT NULL ,\n\t\t\t  [last_worker_time] [bigint] NOT NULL ,\n\t\t\t  [min_worker_time] [bigint] NOT NULL ,\n\t\t\t  [max_worker_time] [bigint] NOT NULL ,\n\t\t\t  [total_physical_reads] [bigint] NOT NULL ,\n\t\t\t  [last_physical_reads] [bigint] NOT NULL ,\n\t\t\t  [min_physical_reads] [bigint] NOT NULL ,\n\t\t\t  [max_physical_reads] [bigint] NOT NULL ,\n\t\t\t  [total_logical_writes] [bigint] NOT NULL ,\n\t\t\t  [last_logical_writes] [bigint] NOT NULL ,\n\t\t\t  [min_logical_writes] [bigint] NOT NULL ,\n\t\t\t  [max_logical_writes] [bigint] NOT NULL ,\n\t\t\t  [total_logical_reads] [bigint] NOT NULL ,\n\t\t\t  [last_logical_reads] [bigint] NOT NULL ,\n\t\t\t  [min_logical_reads] [bigint] NOT NULL ,\n\t\t\t  [max_logical_reads] [bigint] NOT NULL ,\n\t\t\t  [total_clr_time] [bigint] NOT NULL ,\n\t\t\t  [last_clr_time] [bigint] NOT NULL ,\n\t\t\t  [min_clr_time] [bigint] NOT NULL ,\n\t\t\t  [max_clr_time] [bigint] NOT NULL ,\n\t\t\t  [total_elapsed_time] [bigint] NOT NULL ,\n\t\t\t  [last_elapsed_time] [bigint] NOT NULL ,\n\t\t\t  [min_elapsed_time] [bigint] NOT NULL ,\n\t\t\t  [max_elapsed_time] [bigint] NOT NULL ,\n\t\t\t  [query_hash] [binary](8) NULL ,\n\t\t\t  [query_plan_hash] [binary](8) NULL ,\n\t\t\t  [query_plan] [xml] NULL ,\n\t\t\t  [query_plan_filtered] [nvarchar](MAX) NULL ,\n\t\t\t  [text] [nvarchar](MAX) COLLATE SQL_Latin1_General_CP1_CI_AS\n\t\t\t\t\t\t\t\t\t NULL ,\n\t\t\t  [text_filtered] [nvarchar](MAX) COLLATE SQL_Latin1_General_CP1_CI_AS\n\t\t\t\t\t\t\t\t\t\t\t  NULL\n\t\t\t);\n\n\t\tIF OBJECT_ID('tempdb..#ErrorLog') IS NOT NULL\n\t\t\tDROP TABLE #ErrorLog;\n\t\tCREATE TABLE #ErrorLog\n\t\t\t(\n\t\t\t  LogDate DATETIME ,\n\t\t\t  ProcessInfo NVARCHAR(20) ,\n\t\t\t  [Text] NVARCHAR(1000) \n\t\t\t);\n\n\t\tIF OBJECT_ID('tempdb..#fnTraceGettable') IS NOT NULL\n\t\t\tDROP TABLE #fnTraceGettable;\n\t\tCREATE TABLE #fnTraceGettable\n\t\t\t(\n\t\t\t  TextData NVARCHAR(4000) ,\n\t\t\t  DatabaseName NVARCHAR(256) ,\n\t\t\t  EventClass INT ,\n\t\t\t  Severity INT ,\n\t\t\t  StartTime DATETIME ,\n\t\t\t  EndTime DATETIME ,\n\t\t\t  Duration BIGINT ,\n\t\t\t  NTUserName NVARCHAR(256) ,\n\t\t\t  NTDomainName NVARCHAR(256) ,\n\t\t\t  HostName NVARCHAR(256) ,\n\t\t\t  ApplicationName NVARCHAR(256) ,\n\t\t\t  LoginName NVARCHAR(256) ,\n\t\t\t  DBUserName NVARCHAR(256)\n\t\t\t );\n        \n        \n\t\tIF OBJECT_ID('tempdb..#Instances') IS NOT NULL\n\t\t\tDROP TABLE #Instances;\n\t\tCREATE TABLE #Instances\n            (\n              Instance_Number NVARCHAR(MAX) ,\n              Instance_Name NVARCHAR(MAX) ,\n              Data_Field NVARCHAR(MAX)\n            );\n\n\t\tIF OBJECT_ID('tempdb..#IgnorableWaits') IS NOT NULL\n\t\t\tDROP TABLE #IgnorableWaits;\n\t\tCREATE TABLE #IgnorableWaits (wait_type NVARCHAR(60));\n\t\tINSERT INTO #IgnorableWaits VALUES ('BROKER_EVENTHANDLER');\n\t\tINSERT INTO #IgnorableWaits VALUES ('BROKER_RECEIVE_WAITFOR');\n\t\tINSERT INTO #IgnorableWaits VALUES ('BROKER_TASK_STOP');\n\t\tINSERT INTO #IgnorableWaits VALUES ('BROKER_TO_FLUSH');\n\t\tINSERT INTO #IgnorableWaits VALUES ('BROKER_TRANSMITTER');\n\t\tINSERT INTO #IgnorableWaits VALUES ('CHECKPOINT_QUEUE');\n\t\tINSERT INTO #IgnorableWaits VALUES ('CLR_AUTO_EVENT');\n\t\tINSERT INTO #IgnorableWaits VALUES ('CLR_MANUAL_EVENT');\n\t\tINSERT INTO #IgnorableWaits VALUES ('CLR_SEMAPHORE');\n\t\tINSERT INTO #IgnorableWaits VALUES ('DBMIRROR_DBM_EVENT');\n\t\tINSERT INTO #IgnorableWaits VALUES ('DBMIRROR_DBM_MUTEX');\n\t\tINSERT INTO #IgnorableWaits VALUES ('DBMIRROR_EVENTS_QUEUE');\n\t\tINSERT INTO #IgnorableWaits VALUES ('DBMIRROR_WORKER_QUEUE');\n\t\tINSERT INTO #IgnorableWaits VALUES ('DBMIRRORING_CMD');\n\t\tINSERT INTO #IgnorableWaits VALUES ('DIRTY_PAGE_POLL');\n\t\tINSERT INTO #IgnorableWaits VALUES ('DISPATCHER_QUEUE_SEMAPHORE');\n\t\tINSERT INTO #IgnorableWaits VALUES ('FT_IFTS_SCHEDULER_IDLE_WAIT');\n\t\tINSERT INTO #IgnorableWaits VALUES ('FT_IFTSHC_MUTEX');\n\t\tINSERT INTO #IgnorableWaits VALUES ('HADR_CLUSAPI_CALL');\n\t\tINSERT INTO #IgnorableWaits VALUES ('HADR_FILESTREAM_IOMGR_IOCOMPLETION');\n\t\tINSERT INTO #IgnorableWaits VALUES ('HADR_LOGCAPTURE_WAIT');\n\t\tINSERT INTO #IgnorableWaits VALUES ('HADR_NOTIFICATION_DEQUEUE');\n\t\tINSERT INTO #IgnorableWaits VALUES ('HADR_TIMER_TASK');\n\t\tINSERT INTO #IgnorableWaits VALUES ('HADR_WORK_QUEUE');\n\t\tINSERT INTO #IgnorableWaits VALUES ('LAZYWRITER_SLEEP');\n\t\tINSERT INTO #IgnorableWaits VALUES ('LOGMGR_QUEUE');\n\t\tINSERT INTO #IgnorableWaits VALUES ('ONDEMAND_TASK_QUEUE');\n\t\tINSERT INTO #IgnorableWaits VALUES ('PREEMPTIVE_HADR_LEASE_MECHANISM');\n\t\tINSERT INTO #IgnorableWaits VALUES ('PREEMPTIVE_SP_SERVER_DIAGNOSTICS');\n\t\tINSERT INTO #IgnorableWaits VALUES ('QDS_ASYNC_QUEUE');\n\t\tINSERT INTO #IgnorableWaits VALUES ('QDS_CLEANUP_STALE_QUERIES_TASK_MAIN_LOOP_SLEEP');\n\t\tINSERT INTO #IgnorableWaits VALUES ('QDS_PERSIST_TASK_MAIN_LOOP_SLEEP');\n\t\tINSERT INTO #IgnorableWaits VALUES ('QDS_SHUTDOWN_QUEUE');\n\t\tINSERT INTO #IgnorableWaits VALUES ('REDO_THREAD_PENDING_WORK');\n\t\tINSERT INTO #IgnorableWaits VALUES ('REQUEST_FOR_DEADLOCK_SEARCH');\n\t\tINSERT INTO #IgnorableWaits VALUES ('SLEEP_SYSTEMTASK');\n\t\tINSERT INTO #IgnorableWaits VALUES ('SLEEP_TASK');\n\t\tINSERT INTO #IgnorableWaits VALUES ('SP_SERVER_DIAGNOSTICS_SLEEP');\n\t\tINSERT INTO #IgnorableWaits VALUES ('SQLTRACE_BUFFER_FLUSH');\n\t\tINSERT INTO #IgnorableWaits VALUES ('SQLTRACE_INCREMENTAL_FLUSH_SLEEP');\n\t\tINSERT INTO #IgnorableWaits VALUES ('UCS_SESSION_REGISTRATION');\n\t\tINSERT INTO #IgnorableWaits VALUES ('WAIT_XTP_OFFLINE_CKPT_NEW_LOG');\n\t\tINSERT INTO #IgnorableWaits VALUES ('WAITFOR');\n\t\tINSERT INTO #IgnorableWaits VALUES ('XE_DISPATCHER_WAIT');\n\t\tINSERT INTO #IgnorableWaits VALUES ('XE_LIVE_TARGET_TVF');\n\t\tINSERT INTO #IgnorableWaits VALUES ('XE_TIMER_EVENT');\n        \n\t\tIF @Debug IN (1, 2) RAISERROR('Setting @MsSinceWaitsCleared', 0, 1) WITH NOWAIT;\n\n        SELECT @MsSinceWaitsCleared = DATEDIFF(MINUTE, create_date, CURRENT_TIMESTAMP) * 60000.0\n            FROM    sys.databases\n            WHERE   name = 'tempdb';\n\n\t\t/* Have they cleared wait stats? Using a 10% fudge factor */\n\t\tIF @MsSinceWaitsCleared * .9 > (SELECT MAX(wait_time_ms) FROM sys.dm_os_wait_stats WHERE wait_type IN ('SP_SERVER_DIAGNOSTICS_SLEEP', 'QDS_PERSIST_TASK_MAIN_LOOP_SLEEP', 'REQUEST_FOR_DEADLOCK_SEARCH', 'HADR_FILESTREAM_IOMGR_IOCOMPLETION', 'LAZYWRITER_SLEEP', 'SQLTRACE_INCREMENTAL_FLUSH_SLEEP', 'DIRTY_PAGE_POLL', 'LOGMGR_QUEUE'))\n\t\t\tBEGIN\n\t\t\t\t\n\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 185) WITH NOWAIT;\n\n\t\t\t\tSET @MsSinceWaitsCleared = (SELECT MAX(wait_time_ms) FROM sys.dm_os_wait_stats WHERE wait_type IN ('SP_SERVER_DIAGNOSTICS_SLEEP', 'QDS_PERSIST_TASK_MAIN_LOOP_SLEEP', 'REQUEST_FOR_DEADLOCK_SEARCH', 'HADR_FILESTREAM_IOMGR_IOCOMPLETION', 'LAZYWRITER_SLEEP', 'SQLTRACE_INCREMENTAL_FLUSH_SLEEP', 'DIRTY_PAGE_POLL', 'LOGMGR_QUEUE'));\n\t\t\t\tIF @MsSinceWaitsCleared = 0 SET @MsSinceWaitsCleared = 1;\n\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t(   CheckID ,\n\t\t\t\t\t\t\tPriority ,\n\t\t\t\t\t\t\tFindingsGroup ,\n\t\t\t\t\t\t\tFinding ,\n\t\t\t\t\t\t\tURL ,\n\t\t\t\t\t\t\tDetails\n\t\t\t\t\t\t)\n\t\t\t\t\tVALUES(\t\t185,\n\t\t\t\t\t\t\t\t240,\n\t\t\t\t\t\t\t\t'Wait Stats',\n\t\t\t\t\t\t\t\t'Wait Stats Have Been Cleared',\n\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/waits',\n\t\t\t\t\t\t\t\t'Someone ran DBCC SQLPERF to clear sys.dm_os_wait_stats at approximately: ' + CONVERT(NVARCHAR(100), DATEADD(ms, (-1 * @MsSinceWaitsCleared), GETDATE()), 120));\n\t\t\tEND;\n\n\t\t/* @CpuMsSinceWaitsCleared is used for waits stats calculations */\n\t\t\n\t\tIF @Debug IN (1, 2) RAISERROR('Setting @CpuMsSinceWaitsCleared', 0, 1) WITH NOWAIT;\n\t\t\n\t\tSELECT @CpuMsSinceWaitsCleared = @MsSinceWaitsCleared * scheduler_count\n\t\t\tFROM sys.dm_os_sys_info;\n\n\n\t\t/* If we're outputting CSV or Markdown, don't bother checking the plan cache because we cannot export plans. */\n\t\tIF @OutputType = 'CSV' OR @OutputType = 'MARKDOWN'\n\t\t\tSET @CheckProcedureCache = 0;\n\n\t\t/* If we're posting a question on Stack, include background info on the server */\n\t\tIF @OutputType = 'MARKDOWN'\n\t\t\tSET @CheckServerInfo = 1;\n\n\n\t\t/* Only run CheckUserDatabaseObjects if there are less than 50 databases. */\n\t\tIF @BringThePain = 0 AND 50 <= (SELECT COUNT(*) FROM sys.databases) AND @CheckUserDatabaseObjects = 1\n\t\t\tBEGIN\n\t\t\tSET @CheckUserDatabaseObjects = 0;\n\t\t\tPRINT 'Running sp_Blitz @CheckUserDatabaseObjects = 1 on a server with 50+ databases may cause temporary insanity for the server and/or user.';\n\t\t\tPRINT 'If you''re sure you want to do this, run again with the parameter @BringThePain = 1.';\n\t\t\tINSERT  INTO #BlitzResults\n\t\t\t( CheckID ,\n\t\t\t\tPriority ,\n\t\t\t\tFindingsGroup ,\n\t\t\t\tFinding ,\n\t\t\t\tURL ,\n\t\t\t\tDetails\n\t\t\t)\n\t\t\tSELECT 201 AS CheckID ,\n\t\t\t\t\t0 AS Priority ,\n\t\t\t\t\t'Informational' AS FindingsGroup ,\n\t\t\t\t\t'@CheckUserDatabaseObjects Disabled' AS Finding ,\n\t\t\t\t\t'https://www.BrentOzar.com/blitz/' AS URL ,\n\t\t\t\t\t'If you want to check 50+ databases, you have to also use @BringThePain = 1.' AS Details;\n\t\t\tEND;\n\n\t\t/* Sanitize our inputs */\n\t\tSELECT\n\t\t\t@OutputServerName = QUOTENAME(@OutputServerName),\n\t\t\t@OutputDatabaseName = QUOTENAME(@OutputDatabaseName),\n\t\t\t@OutputSchemaName = QUOTENAME(@OutputSchemaName),\n\t\t\t@OutputTableName = QUOTENAME(@OutputTableName);\n\n\t\t/* Get the major and minor build numbers */\n\t\t\n\t\tIF @Debug IN (1, 2) RAISERROR('Getting version information.', 0, 1) WITH NOWAIT;\n\t\t\n\t\tSET @ProductVersion = CAST(SERVERPROPERTY('ProductVersion') AS NVARCHAR(128));\n\t\tSELECT @ProductVersionMajor = SUBSTRING(@ProductVersion, 1,CHARINDEX('.', @ProductVersion) + 1 ),\n\t\t\t@ProductVersionMinor = PARSENAME(CONVERT(varchar(32), @ProductVersion), 2);\n\t\t\n\t\t/*\n\t\tWhew! we're finally done with the setup, and we can start doing checks.\n\t\tFirst, let's make sure we're actually supposed to do checks on this server.\n\t\tThe user could have passed in a SkipChecks table that specified to skip ALL\n\t\tchecks on this server, so let's check for that:\n\t\t*/\n\t\tIF ( ( SERVERPROPERTY('ServerName') NOT IN ( SELECT ServerName\n\t\t\t\t\t\t\t\t\t\t\t\t\t FROM   #SkipChecks\n\t\t\t\t\t\t\t\t\t\t\t\t\t WHERE  DatabaseName IS NULL\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND CheckID IS NULL ) )\n\t\t\t OR ( @SkipChecksTable IS NULL )\n\t\t   )\n\t\t\tBEGIN\n\n\t\t\t\t/*\n\t\t\t\tOur very first check! We'll put more comments in this one just to\n\t\t\t\texplain exactly how it works. First, we check to see if we're\n\t\t\t\tsupposed to skip CheckID 1 (that's the check we're working on.)\n\t\t\t\t*/\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 1 )\n\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\t/*\n\t\t\t\t\t\tBelow, we check master.sys.databases looking for databases\n\t\t\t\t\t\tthat haven't had a backup in the last week. If we find any,\n\t\t\t\t\t\twe insert them into #BlitzResults, the temp table that\n\t\t\t\t\t\ttracks our server's problems. Note that if the check does\n\t\t\t\t\t\tNOT find any problems, we don't save that. We're only\n\t\t\t\t\t\tsaving the problems, not the successful checks.\n\t\t\t\t\t\t*/\n\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 1) WITH NOWAIT;\n\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  1 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\td.[name] AS DatabaseName ,\n\t\t\t\t\t\t\t\t\t\t1 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Backup' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Backups Not Performed Recently' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/nobak' AS URL ,\n\t\t\t\t\t\t\t\t\t\t'Last backed up: '\n\t\t\t\t\t\t\t\t\t\t+ COALESCE(CAST(MAX(b.backup_finish_date) AS VARCHAR(25)),'never') AS Details\n\t\t\t\t\t\t\t\tFROM    master.sys.databases d\n\t\t\t\t\t\t\t\t\t\tLEFT OUTER JOIN msdb.dbo.backupset b ON d.name COLLATE SQL_Latin1_General_CP1_CI_AS = b.database_name COLLATE SQL_Latin1_General_CP1_CI_AS\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  AND b.type = 'D'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  AND b.server_name = SERVERPROPERTY('ServerName') /*Backupset ran on current server */\n\t\t\t\t\t\t\t\tWHERE   d.database_id <> 2  /* Bonus points if you know what that means */\n\t\t\t\t\t\t\t\t\t\tAND d.state NOT IN(1, 6, 10) /* Not currently offline or restoring, like log shipping databases */\n\t\t\t\t\t\t\t\t\t\tAND d.is_in_standby = 0 /* Not a log shipping target database */\n\t\t\t\t\t\t\t\t\t\tAND d.source_database_id IS NULL /* Excludes database snapshots */\n\t\t\t\t\t\t\t\t\t\tAND d.name NOT IN ( SELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  DatabaseName\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM  #SkipChecks\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHERE CheckID IS NULL OR CheckID = 1)\n\t\t\t\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\t\t\t\tThe above NOT IN filters out the databases we're not supposed to check.\n\t\t\t\t\t\t\t\t\t\t*/\n\t\t\t\t\t\t\t\tGROUP BY d.name\n\t\t\t\t\t\t\t\tHAVING  MAX(b.backup_finish_date) <= DATEADD(dd,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  -7, GETDATE())\n                                        OR MAX(b.backup_finish_date) IS NULL;\n\t\t\t\t\t\t/*\n\t\t\t\t\t\tAnd there you have it. The rest of this stored procedure works the same\n\t\t\t\t\t\tway: it asks:\n\t\t\t\t\t\t- Should I skip this check?\n\t\t\t\t\t\t- If not, do I find problems?\n\t\t\t\t\t\t- Insert the results into #BlitzResults\n\t\t\t\t\t\t*/\n\n\t\t\t\t\tEND;\n\n\t\t\t\t/*\n\t\t\t\tAnd that's the end of CheckID #1.\n\n\t\t\t\tCheckID #2 is a little simpler because it only involves one query, and it's\n\t\t\t\tmore typical for queries that people contribute. But keep reading, because\n\t\t\t\tthe next check gets more complex again.\n\t\t\t\t*/\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 2 )\n\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 2) WITH NOWAIT;\n\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\tSELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t2 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\td.name AS DatabaseName ,\n\t\t\t\t\t\t\t\t\t\t1 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Backup' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Full Recovery Model w/o Log Backups' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/biglogs' AS URL ,\n\t\t\t\t\t\t\t\t\t\t( 'The ' + CAST(CAST((SELECT ((SUM([mf].[size]) * 8.) / 1024.) FROM sys.[master_files] AS [mf] WHERE [mf].[database_id] = d.[database_id] AND [mf].[type_desc] = 'LOG') AS DECIMAL(18,2)) AS VARCHAR(30)) + 'MB log file has not been backed up in the last week.' ) AS Details\n\t\t\t\t\t\t\t\tFROM    master.sys.databases d\n\t\t\t\t\t\t\t\tWHERE   d.recovery_model IN ( 1, 2 )\n\t\t\t\t\t\t\t\t\t\tAND d.database_id NOT IN ( 2, 3 )\n\t\t\t\t\t\t\t\t\t\tAND d.source_database_id IS NULL\n\t\t\t\t\t\t\t\t\t\tAND d.state NOT IN(1, 6, 10) /* Not currently offline or restoring, like log shipping databases */\n\t\t\t\t\t\t\t\t\t\tAND d.is_in_standby = 0 /* Not a log shipping target database */\n\t\t\t\t\t\t\t\t\t\tAND d.source_database_id IS NULL /* Excludes database snapshots */\n\t\t\t\t\t\t\t\t\t\tAND d.name NOT IN ( SELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  DatabaseName\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM  #SkipChecks\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHERE CheckID IS NULL OR CheckID = 2)\n\t\t\t\t\t\t\t\t\t\tAND NOT EXISTS ( SELECT *\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t FROM   msdb.dbo.backupset b\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t WHERE  d.name COLLATE SQL_Latin1_General_CP1_CI_AS = b.database_name COLLATE SQL_Latin1_General_CP1_CI_AS\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND b.type = 'L'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND b.backup_finish_date >= DATEADD(dd,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  -7, GETDATE()) ); \n\t\t\t\t\tEND;\n\n\n\t\t\t\t/*\n\t\t\t\tNext up, we've got CheckID 8. (These don't have to go in order.) This one\n\t\t\t\twon't work on SQL Server 2005 because it relies on a new DMV that didn't\n\t\t\t\texist prior to SQL Server 2008. This means we have to check the SQL Server\n\t\t\t\tversion first, then build a dynamic string with the query we want to run:\n\t\t\t\t*/\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 8 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tIF @@VERSION NOT LIKE '%Microsoft SQL Server 2000%'\n\t\t\t\t\t\t\tAND @@VERSION NOT LIKE '%Microsoft SQL Server 2005%'\n\t\t\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 8) WITH NOWAIT;\n\n\t\t\t\t\t\t\t\tSET @StringToExecute = 'INSERT INTO #BlitzResults\n\t\t\t\t\t\t\t(CheckID, Priority,\n\t\t\t\t\t\t\tFindingsGroup,\n\t\t\t\t\t\t\tFinding, URL,\n\t\t\t\t\t\t\tDetails)\n\t\t\t\t\t  SELECT 8 AS CheckID,\n\t\t\t\t\t  230 AS Priority,\n\t\t\t\t\t  ''Security'' AS FindingsGroup,\n\t\t\t\t\t  ''Server Audits Running'' AS Finding,\n\t\t\t\t\t  ''https://BrentOzar.com/go/audits'' AS URL,\n\t\t\t\t\t  (''SQL Server built-in audit functionality is being used by server audit: '' + [name]) AS Details FROM sys.dm_server_audit_status  OPTION (RECOMPILE);';\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\t\tEND;\n\t\t\t\t\tEND;\n\n\t\t\t\t/*\n\t\t\t\tBut what if you need to run a query in every individual database?\n\t\t\t\tHop down to the @CheckUserDatabaseObjects section.\n                \n\t\t\t\tAnd that's the basic idea! You can read through the rest of the\n\t\t\t\tchecks if you like - some more exciting stuff happens closer to the\n\t\t\t\tend of the stored proc, where we start doing things like checking\n\t\t\t\tthe plan cache, but those aren't as cleanly commented.\n\n\t\t\t\tIf you'd like to contribute your own check, use one of the check\n\t\t\t\tformats shown above and email it to Help@BrentOzar.com. You don't\n\t\t\t\thave to pick a CheckID or a link - we'll take care of that when we\n\t\t\t\ttest and publish the code. Thanks!\n\t\t\t\t*/\n\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 93 )\n\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 93) WITH NOWAIT;\n\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t\t\t\t\t93 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t1 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Backup' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Backing Up to Same Drive Where Databases Reside' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/backup' AS URL ,\n\t\t\t\t\t\t\t\t\t\tCAST(COUNT(1) AS VARCHAR(50)) + ' backups done on drive '\n\t\t\t\t\t\t\t\t\t\t+ UPPER(LEFT(bmf.physical_device_name, 3))\n\t\t\t\t\t\t\t\t\t\t+ ' in the last two weeks, where database files also live. This represents a serious risk if that array fails.' Details\n\t\t\t\t\t\t\t\tFROM    msdb.dbo.backupmediafamily AS bmf\n\t\t\t\t\t\t\t\t\t\tINNER JOIN msdb.dbo.backupset AS bs ON bmf.media_set_id = bs.media_set_id\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  AND bs.backup_start_date >= ( DATEADD(dd,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  -14, GETDATE()) )\n\t\t\t\t\t\t\t\t\t\t/* Filter out databases that were recently restored: */\n\t\t\t\t\t\t\t\t\t\tLEFT OUTER JOIN msdb.dbo.restorehistory rh ON bs.database_name = rh.destination_database_name AND rh.restore_date > DATEADD(dd, -14, GETDATE())\n\t\t\t\t\t\t\t\tWHERE   UPPER(LEFT(bmf.physical_device_name COLLATE SQL_Latin1_General_CP1_CI_AS, 3)) IN (\n\t\t\t\t\t\t\t\t\t\tSELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t\t\tUPPER(LEFT(mf.physical_name COLLATE SQL_Latin1_General_CP1_CI_AS, 3))\n\t\t\t\t\t\t\t\t\t\tFROM    sys.master_files AS mf )\n\t\t\t\t\t\t\t\t\t\tAND rh.destination_database_name IS NULL\n\t\t\t\t\t\t\t\tGROUP BY UPPER(LEFT(bmf.physical_device_name, 3));\n\t\t\t\t\tEND;\n\n\n\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 119 )\n\t\t\t\t\t\tAND EXISTS ( SELECT *\n\t\t\t\t\t\t\t\t\t FROM   sys.all_objects o\n\t\t\t\t\t\t\t\t\t WHERE  o.name = 'dm_database_encryption_keys' )\n\t\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 119) WITH NOWAIT;\n\n\t\t\t\t\t\t\tSET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, DatabaseName, URL, Details)\n\t\t\t\t\t\t\t\tSELECT 119 AS CheckID,\n\t\t\t\t\t\t\t\t1 AS Priority,\n\t\t\t\t\t\t\t\t''Backup'' AS FindingsGroup,\n\t\t\t\t\t\t\t\t''TDE Certificate Not Backed Up Recently'' AS Finding,\n\t\t\t\t\t\t\t\tdb_name(dek.database_id) AS DatabaseName,\n\t\t\t\t\t\t\t\t''https://BrentOzar.com/go/tde'' AS URL,\n\t\t\t\t\t\t\t\t''The certificate '' + c.name + '' is used to encrypt database '' + db_name(dek.database_id) + ''. Last backup date: '' + COALESCE(CAST(c.pvt_key_last_backup_date AS VARCHAR(100)), ''Never'') AS Details\n\t\t\t\t\t\t\t\tFROM sys.certificates c INNER JOIN sys.dm_database_encryption_keys dek ON c.thumbprint = dek.encryptor_thumbprint\n\t\t\t\t\t\t\t\tWHERE pvt_key_last_backup_date IS NULL OR pvt_key_last_backup_date <= DATEADD(dd, -30, GETDATE())  OPTION (RECOMPILE);';\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\tEND;\n\n                     IF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 202 )\n\t\t\t\t\t\tAND EXISTS ( SELECT *\n\t\t\t\t\t\t\t\t\t FROM   sys.all_columns c\n\t\t\t\t\t\t\t\t\t WHERE  c.name = 'pvt_key_last_backup_date' )\n\t\t\t\t\t\tAND EXISTS ( SELECT *\n\t\t\t\t\t\t\t\t\t FROM   msdb.INFORMATION_SCHEMA.COLUMNS c\n\t\t\t\t\t\t\t\t\t WHERE  c.TABLE_NAME = 'backupset' AND c.COLUMN_NAME = 'encryptor_thumbprint' )\n\t\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 202) WITH NOWAIT;\n\n\t\t\t\t\t\t\tSET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)\n\t\t\t\t\t\t\t\tSELECT DISTINCT 202 AS CheckID,\n\t\t\t\t\t\t\t\t1 AS Priority,\n\t\t\t\t\t\t\t\t''Backup'' AS FindingsGroup,\n\t\t\t\t\t\t\t\t''Encryption Certificate Not Backed Up Recently'' AS Finding,\n\t\t\t\t\t\t\t\t''https://BrentOzar.com/go/tde'' AS URL,\n\t\t\t\t\t\t\t\t''The certificate '' + c.name + '' is used to encrypt database backups. Last backup date: '' + COALESCE(CAST(c.pvt_key_last_backup_date AS VARCHAR(100)), ''Never'') AS Details\n\t\t\t\t\t\t\t\tFROM sys.certificates c\n                                INNER JOIN msdb.dbo.backupset bs ON c.thumbprint = bs.encryptor_thumbprint\n                                WHERE pvt_key_last_backup_date IS NULL OR pvt_key_last_backup_date <= DATEADD(dd, -30, GETDATE()) OPTION (RECOMPILE);';\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\tEND;\n\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 3 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tIF DATEADD(dd, -60, GETDATE()) > (SELECT TOP 1 backup_start_date FROM msdb.dbo.backupset ORDER BY 1)\n\n\t\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 3) WITH NOWAIT;\n\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT TOP 1\n\t\t\t\t\t\t\t\t\t\t3 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t'msdb' ,\n\t\t\t\t\t\t\t\t\t\t200 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Backup' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'MSDB Backup History Not Purged' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/history' AS URL ,\n\t\t\t\t\t\t\t\t\t\t( 'Database backup history retained back to '\n\t\t\t\t\t\t\t\t\t\t  + CAST(bs.backup_start_date AS VARCHAR(20)) ) AS Details\n\t\t\t\t\t\t\t\tFROM    msdb.dbo.backupset bs\n\t\t\t\t\t\t\t\tORDER BY backup_set_id ASC;\n\t\t\t\t\t\tEND;\n\t\t\t\t\tEND;\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 186 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tIF DATEADD(dd, -2, GETDATE()) < (SELECT TOP 1 backup_start_date FROM msdb.dbo.backupset ORDER BY 1)\n\n\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 186) WITH NOWAIT;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\tSELECT TOP 1\n\t\t\t\t\t\t\t\t\t\t\t186 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t'msdb' ,\n\t\t\t\t\t\t\t\t\t\t\t200 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t'Backup' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t'MSDB Backup History Purged Too Frequently' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/history' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\t( 'Database backup history only retained back to '\n\t\t\t\t\t\t\t\t\t\t\t  + CAST(bs.backup_start_date AS VARCHAR(20)) ) AS Details\n\t\t\t\t\t\t\t\t\tFROM    msdb.dbo.backupset bs\n\t\t\t\t\t\t\t\t\tORDER BY backup_set_id ASC;\n\t\t\t\t\t\tEND;\n\t\t\t\t\tEND;\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 178 )\n\t\t\t\t\tAND EXISTS (SELECT *\n\t\t\t\t\t\t\t\t\tFROM msdb.dbo.backupset bs\n\t\t\t\t\t\t\t\t\tWHERE bs.type = 'D'\n\t\t\t\t\t\t\t\t\tAND bs.backup_size >= 50000000000 /* At least 50GB */\n\t\t\t\t\t\t\t\t\tAND DATEDIFF(SECOND, bs.backup_start_date, bs.backup_finish_date) <= 60 /* Backup took less than 60 seconds */\n\t\t\t\t\t\t\t\t\tAND bs.backup_finish_date >= DATEADD(DAY, -14, GETDATE()) /* In the last 2 weeks */)\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 178) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT 178 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t200 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Performance' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Snapshot Backups Occurring' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/snaps' AS URL ,\n\t\t\t\t\t\t\t\t\t\t( CAST(COUNT(*) AS VARCHAR(20)) + ' snapshot-looking backups have occurred in the last two weeks, indicating that IO may be freezing up.') AS Details\n\t\t\t\t\t\t\t\tFROM msdb.dbo.backupset bs\n\t\t\t\t\t\t\t\tWHERE bs.type = 'D'\n\t\t\t\t\t\t\t\tAND bs.backup_size >= 50000000000 /* At least 50GB */\n\t\t\t\t\t\t\t\tAND DATEDIFF(SECOND, bs.backup_start_date, bs.backup_finish_date) <= 60 /* Backup took less than 60 seconds */\n\t\t\t\t\t\t\t\tAND bs.backup_finish_date >= DATEADD(DAY, -14, GETDATE()); /* In the last 2 weeks */\n\t\t\t\t\tEND;\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 4 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 4) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  4 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t230 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Security' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Sysadmins' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/sa' AS URL ,\n\t\t\t\t\t\t\t\t\t\t( 'Login [' + l.name\n\t\t\t\t\t\t\t\t\t\t  + '] is a sysadmin - meaning they can do absolutely anything in SQL Server, including dropping databases or hiding their tracks.' ) AS Details\n\t\t\t\t\t\t\t\tFROM    master.sys.syslogins l\n\t\t\t\t\t\t\t\tWHERE   l.sysadmin = 1\n\t\t\t\t\t\t\t\t\t\tAND l.name <> SUSER_SNAME(0x01)\n\t\t\t\t\t\t\t\t\t\tAND l.denylogin = 0\n\t\t\t\t\t\t\t\t\t\tAND l.name NOT LIKE 'NT SERVICE\\%'\n\t\t\t\t\t\t\t\t\t\tAND l.name <> 'l_certSignSmDetach'; /* Added in SQL 2016 */\n\t\t\t\t\tEND;\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 5 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 5) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  5 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t230 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Security' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Security Admins' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/sa' AS URL ,\n\t\t\t\t\t\t\t\t\t\t( 'Login [' + l.name\n\t\t\t\t\t\t\t\t\t\t  + '] is a security admin - meaning they can give themselves permission to do absolutely anything in SQL Server, including dropping databases or hiding their tracks.' ) AS Details\n\t\t\t\t\t\t\t\tFROM    master.sys.syslogins l\n\t\t\t\t\t\t\t\tWHERE   l.securityadmin = 1\n\t\t\t\t\t\t\t\t\t\tAND l.name <> SUSER_SNAME(0x01)\n\t\t\t\t\t\t\t\t\t\tAND l.denylogin = 0;\n\t\t\t\t\tEND;\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 104 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 104) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( [CheckID] ,\n\t\t\t\t\t\t\t\t  [Priority] ,\n\t\t\t\t\t\t\t\t  [FindingsGroup] ,\n\t\t\t\t\t\t\t\t  [Finding] ,\n\t\t\t\t\t\t\t\t  [URL] ,\n\t\t\t\t\t\t\t\t  [Details]\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  104 AS [CheckID] ,\n\t\t\t\t\t\t\t\t\t\t230 AS [Priority] ,\n\t\t\t\t\t\t\t\t\t\t'Security' AS [FindingsGroup] ,\n\t\t\t\t\t\t\t\t\t\t'Login Can Control Server' AS [Finding] ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/sa' AS [URL] ,\n\t\t\t\t\t\t\t\t\t\t'Login [' + pri.[name]\n\t\t\t\t\t\t\t\t\t\t+ '] has the CONTROL SERVER permission - meaning they can do absolutely anything in SQL Server, including dropping databases or hiding their tracks.' AS [Details]\n\t\t\t\t\t\t\t\tFROM    sys.server_principals AS pri\n\t\t\t\t\t\t\t\tWHERE   pri.[principal_id] IN (\n\t\t\t\t\t\t\t\t\t\tSELECT  p.[grantee_principal_id]\n\t\t\t\t\t\t\t\t\t\tFROM    sys.server_permissions AS p\n\t\t\t\t\t\t\t\t\t\tWHERE   p.[state] IN ( 'G', 'W' )\n\t\t\t\t\t\t\t\t\t\t\t\tAND p.[class] = 100\n\t\t\t\t\t\t\t\t\t\t\t\tAND p.[type] = 'CL' )\n\t\t\t\t\t\t\t\t\t\tAND pri.[name] NOT LIKE '##%##';\n\t\t\t\t\tEND;\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 6 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 6) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  6 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t230 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Security' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Jobs Owned By Users' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/owners' AS URL ,\n\t\t\t\t\t\t\t\t\t\t( 'Job [' + j.name + '] is owned by ['\n\t\t\t\t\t\t\t\t\t\t  + SUSER_SNAME(j.owner_sid)\n\t\t\t\t\t\t\t\t\t\t  + '] - meaning if their login is disabled or not available due to Active Directory problems, the job will stop working.' ) AS Details\n\t\t\t\t\t\t\t\tFROM    msdb.dbo.sysjobs j\n\t\t\t\t\t\t\t\tWHERE   j.enabled = 1\n\t\t\t\t\t\t\t\t\t\tAND SUSER_SNAME(j.owner_sid) <> SUSER_SNAME(0x01);\n\t\t\t\t\tEND;\n\n\n\t\t\t\t/* --TOURSTOP06-- */\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 7 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t/* --TOURSTOP02-- */\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 7) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  7 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t230 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Security' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Stored Procedure Runs at Startup' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/startup' AS URL ,\n\t\t\t\t\t\t\t\t\t\t( 'Stored procedure [master].['\n\t\t\t\t\t\t\t\t\t\t  + r.SPECIFIC_SCHEMA + '].['\n\t\t\t\t\t\t\t\t\t\t  + r.SPECIFIC_NAME\n\t\t\t\t\t\t\t\t\t\t  + '] runs automatically when SQL Server starts up.  Make sure you know exactly what this stored procedure is doing, because it could pose a security risk.' ) AS Details\n\t\t\t\t\t\t\t\tFROM    master.INFORMATION_SCHEMA.ROUTINES r\n\t\t\t\t\t\t\t\tWHERE   OBJECTPROPERTY(OBJECT_ID(ROUTINE_NAME),\n\t\t\t\t\t\t\t\t\t\t\t\t\t   'ExecIsStartup') = 1;\n\t\t\t\t\tEND;\n\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 10 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tIF @@VERSION NOT LIKE '%Microsoft SQL Server 2000%'\n\t\t\t\t\t\t\tAND @@VERSION NOT LIKE '%Microsoft SQL Server 2005%'\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 10) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tSET @StringToExecute = 'INSERT INTO #BlitzResults\n\t\t\t\t\t\t\t(CheckID,\n\t\t\t\t\t\t\tPriority,\n\t\t\t\t\t\t\tFindingsGroup,\n\t\t\t\t\t\t\tFinding,\n\t\t\t\t\t\t\tURL,\n\t\t\t\t\t\t\tDetails)\n\t\t\t\t\t  SELECT 10 AS CheckID,\n\t\t\t\t\t  100 AS Priority,\n\t\t\t\t\t  ''Performance'' AS FindingsGroup,\n\t\t\t\t\t  ''Resource Governor Enabled'' AS Finding,\n\t\t\t\t\t  ''https://BrentOzar.com/go/rg'' AS URL,\n\t\t\t\t\t  (''Resource Governor is enabled.  Queries may be throttled.  Make sure you understand how the Classifier Function is configured.'') AS Details FROM sys.resource_governor_configuration WHERE is_enabled = 1 OPTION (RECOMPILE);';\n\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\n\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\t\tEND;\n\t\t\t\t\tEND;\n\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 11 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tIF @@VERSION NOT LIKE '%Microsoft SQL Server 2000%'\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 11) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tSET @StringToExecute = 'INSERT INTO #BlitzResults\n\t\t\t\t\t\t\t(CheckID,\n\t\t\t\t\t\t\tPriority,\n\t\t\t\t\t\t\tFindingsGroup,\n\t\t\t\t\t\t\tFinding,\n\t\t\t\t\t\t\tURL,\n\t\t\t\t\t\t\tDetails)\n\t\t\t\t\t  SELECT 11 AS CheckID,\n\t\t\t\t\t  100 AS Priority,\n\t\t\t\t\t  ''Performance'' AS FindingsGroup,\n\t\t\t\t\t  ''Server Triggers Enabled'' AS Finding,\n\t\t\t\t\t  ''https://BrentOzar.com/go/logontriggers/'' AS URL,\n\t\t\t\t\t  (''Server Trigger ['' + [name] ++ ''] is enabled.  Make sure you understand what that trigger is doing - the less work it does, the better.'') AS Details FROM sys.server_triggers WHERE is_disabled = 0 AND is_ms_shipped = 0  OPTION (RECOMPILE);';\n\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\n\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\t\tEND;\n\t\t\t\t\tEND;\n\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 12 )\n\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 12) WITH NOWAIT;\n\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  12 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t[name] AS DatabaseName ,\n\t\t\t\t\t\t\t\t\t\t10 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Performance' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Auto-Close Enabled' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/autoclose' AS URL ,\n\t\t\t\t\t\t\t\t\t\t( 'Database [' + [name]\n\t\t\t\t\t\t\t\t\t\t  + '] has auto-close enabled.  This setting can dramatically decrease performance.' ) AS Details\n\t\t\t\t\t\t\t\tFROM    sys.databases\n\t\t\t\t\t\t\t\tWHERE   is_auto_close_on = 1\n\t\t\t\t\t\t\t\t\t\tAND name NOT IN ( SELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  DatabaseName\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  FROM    #SkipChecks \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  WHERE CheckID IS NULL OR CheckID = 12);\n\t\t\t\t\tEND;\n\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 13 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 13) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  13 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t[name] AS DatabaseName ,\n\t\t\t\t\t\t\t\t\t\t10 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Performance' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Auto-Shrink Enabled' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/autoshrink' AS URL ,\n\t\t\t\t\t\t\t\t\t\t( 'Database [' + [name]\n\t\t\t\t\t\t\t\t\t\t  + '] has auto-shrink enabled.  This setting can dramatically decrease performance.' ) AS Details\n\t\t\t\t\t\t\t\tFROM    sys.databases\n\t\t\t\t\t\t\t\tWHERE   is_auto_shrink_on = 1\n\t\t\t\t\t\t\t\t\t\tAND name NOT IN ( SELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  DatabaseName\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  FROM    #SkipChecks \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  WHERE CheckID IS NULL OR CheckID = 13);\n\t\t\t\t\tEND;\n\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 14 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tIF @@VERSION NOT LIKE '%Microsoft SQL Server 2000%'\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 14) WITH NOWAIT;\n\n\t\t\t\t\t\t\t\tSET @StringToExecute = 'INSERT INTO #BlitzResults\n\t\t\t\t\t\t\t(CheckID,\n\t\t\t\t\t\t\tDatabaseName,\n\t\t\t\t\t\t\tPriority,\n\t\t\t\t\t\t\tFindingsGroup,\n\t\t\t\t\t\t\tFinding,\n\t\t\t\t\t\t\tURL,\n\t\t\t\t\t\t\tDetails)\n\t\t\t\t\t  SELECT 14 AS CheckID,\n\t\t\t\t\t  [name] as DatabaseName,\n\t\t\t\t\t  50 AS Priority,\n\t\t\t\t\t  ''Reliability'' AS FindingsGroup,\n\t\t\t\t\t  ''Page Verification Not Optimal'' AS Finding,\n\t\t\t\t\t  ''https://BrentOzar.com/go/torn'' AS URL,\n\t\t\t\t\t  (''Database ['' + [name] + ''] has '' + [page_verify_option_desc] + '' for page verification.  SQL Server may have a harder time recognizing and recovering from storage corruption.  Consider using CHECKSUM instead.'') COLLATE database_default AS Details\n\t\t\t\t\t  FROM sys.databases\n\t\t\t\t\t  WHERE page_verify_option < 2\n\t\t\t\t\t  AND name <> ''tempdb''\n\t\t\t\t\t  and name not in (select distinct DatabaseName from #SkipChecks WHERE CheckID IS NULL OR CheckID = 14) OPTION (RECOMPILE);';\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\t\tEND;\n\t\t\t\t\tEND;\n\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 15 )\n\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 15) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  15 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t[name] AS DatabaseName ,\n\t\t\t\t\t\t\t\t\t\t110 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Performance' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Auto-Create Stats Disabled' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/acs' AS URL ,\n\t\t\t\t\t\t\t\t\t\t( 'Database [' + [name]\n\t\t\t\t\t\t\t\t\t\t  + '] has auto-create-stats disabled.  SQL Server uses statistics to build better execution plans, and without the ability to automatically create more, performance may suffer.' ) AS Details\n\t\t\t\t\t\t\t\tFROM    sys.databases\n\t\t\t\t\t\t\t\tWHERE   is_auto_create_stats_on = 0\n\t\t\t\t\t\t\t\t\t\tAND name NOT IN ( SELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  DatabaseName\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  FROM    #SkipChecks \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  WHERE CheckID IS NULL OR CheckID = 15);\n\t\t\t\t\tEND;\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 16 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 16) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  16 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t[name] AS DatabaseName ,\n\t\t\t\t\t\t\t\t\t\t110 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Performance' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Auto-Update Stats Disabled' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/aus' AS URL ,\n\t\t\t\t\t\t\t\t\t\t( 'Database [' + [name]\n\t\t\t\t\t\t\t\t\t\t  + '] has auto-update-stats disabled.  SQL Server uses statistics to build better execution plans, and without the ability to automatically update them, performance may suffer.' ) AS Details\n\t\t\t\t\t\t\t\tFROM    sys.databases\n\t\t\t\t\t\t\t\tWHERE   is_auto_update_stats_on = 0\n\t\t\t\t\t\t\t\t\t\tAND name NOT IN ( SELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  DatabaseName\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  FROM    #SkipChecks \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  WHERE CheckID IS NULL OR CheckID = 16);\n\t\t\t\t\tEND;\n\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 17 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 17) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  17 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t[name] AS DatabaseName ,\n\t\t\t\t\t\t\t\t\t\t150 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Performance' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Stats Updated Asynchronously' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/asyncstats' AS URL ,\n\t\t\t\t\t\t\t\t\t\t( 'Database [' + [name]\n\t\t\t\t\t\t\t\t\t\t  + '] has auto-update-stats-async enabled.  When SQL Server gets a query for a table with out-of-date statistics, it will run the query with the stats it has - while updating stats to make later queries better. The initial run of the query may suffer, though.' ) AS Details\n\t\t\t\t\t\t\t\tFROM    sys.databases\n\t\t\t\t\t\t\t\tWHERE   is_auto_update_stats_async_on = 1\n\t\t\t\t\t\t\t\t\t\tAND name NOT IN ( SELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  DatabaseName\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  FROM    #SkipChecks \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  WHERE CheckID IS NULL OR CheckID = 17);\n\t\t\t\t\tEND;\n\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 18 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 18) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  18 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t[name] AS DatabaseName ,\n\t\t\t\t\t\t\t\t\t\t150 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Performance' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Forced Parameterization On' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/forced' AS URL ,\n\t\t\t\t\t\t\t\t\t\t( 'Database [' + [name]\n\t\t\t\t\t\t\t\t\t\t  + '] has forced parameterization enabled.  SQL Server will aggressively reuse query execution plans even if the applications do not parameterize their queries.  This can be a performance booster with some programming languages, or it may use universally bad execution plans when better alternatives are available for certain parameters.' ) AS Details\n\t\t\t\t\t\t\t\tFROM    sys.databases\n\t\t\t\t\t\t\t\tWHERE   is_parameterization_forced = 1\n\t\t\t\t\t\t\t\t\t\tAND name NOT IN ( SELECT  DatabaseName\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  FROM    #SkipChecks \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  WHERE CheckID IS NULL OR CheckID = 18);\n\t\t\t\t\tEND;\n\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 20 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 20) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  20 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t[name] AS DatabaseName ,\n\t\t\t\t\t\t\t\t\t\t200 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Informational' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Date Correlation On' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/corr' AS URL ,\n\t\t\t\t\t\t\t\t\t\t( 'Database [' + [name]\n\t\t\t\t\t\t\t\t\t\t  + '] has date correlation enabled.  This is not a default setting, and it has some performance overhead.  It tells SQL Server that date fields in two tables are related, and SQL Server maintains statistics showing that relation.' ) AS Details\n\t\t\t\t\t\t\t\tFROM    sys.databases\n\t\t\t\t\t\t\t\tWHERE   is_date_correlation_on = 1\n\t\t\t\t\t\t\t\t\t\tAND name NOT IN ( SELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  DatabaseName\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  FROM    #SkipChecks \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  WHERE CheckID IS NULL OR CheckID = 20);\n\t\t\t\t\tEND;\n\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 21 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t/* --TOURSTOP04-- */\n\t\t\t\t\t\tIF @@VERSION NOT LIKE '%Microsoft SQL Server 2000%'\n\t\t\t\t\t\t\tAND @@VERSION NOT LIKE '%Microsoft SQL Server 2005%'\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 21) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tSET @StringToExecute = 'INSERT INTO #BlitzResults\n\t\t\t\t\t\t\t(CheckID,\n\t\t\t\t\t\t\tDatabaseName,\n\t\t\t\t\t\t\tPriority,\n\t\t\t\t\t\t\tFindingsGroup,\n\t\t\t\t\t\t\tFinding,\n\t\t\t\t\t\t\tURL,\n\t\t\t\t\t\t\tDetails)\n\t\t\t\t\t  SELECT 21 AS CheckID,\n\t\t\t\t\t  [name] as DatabaseName,\n\t\t\t\t\t  200 AS Priority,\n\t\t\t\t\t  ''Informational'' AS FindingsGroup,\n\t\t\t\t\t  ''Database Encrypted'' AS Finding,\n\t\t\t\t\t  ''https://BrentOzar.com/go/tde'' AS URL,\n\t\t\t\t\t  (''Database ['' + [name] + ''] has Transparent Data Encryption enabled.  Make absolutely sure you have backed up the certificate and private key, or else you will not be able to restore this database.'') AS Details\n\t\t\t\t\t  FROM sys.databases\n\t\t\t\t\t  WHERE is_encrypted = 1\n\t\t\t\t\t  and name not in (select distinct DatabaseName from #SkipChecks WHERE CheckID IS NULL OR CheckID = 21) OPTION (RECOMPILE);';\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\t\tEND;\n\t\t\t\t\tEND;\n\n\t\t\t\t/*\n\t\t\t\tBelieve it or not, SQL Server doesn't track the default values\n\t\t\t\tfor sp_configure options! We'll make our own list here.\n\t\t\t\t*/\n\n\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Generating default configuration values', 0, 1) WITH NOWAIT;\n\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'access check cache bucket count', 0, 1001 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'access check cache quota', 0, 1002 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'Ad Hoc Distributed Queries', 0, 1003 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'affinity I/O mask', 0, 1004 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'affinity mask', 0, 1005 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'affinity64 mask', 0, 1066 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'affinity64 I/O mask', 0, 1067 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'Agent XPs', 0, 1071 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'allow updates', 0, 1007 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'awe enabled', 0, 1008 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'backup checksum default', 0, 1070 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'backup compression default', 0, 1073 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'blocked process threshold', 0, 1009 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'blocked process threshold (s)', 0, 1009 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'c2 audit mode', 0, 1010 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'clr enabled', 0, 1011 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'common criteria compliance enabled', 0, 1074 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'contained database authentication', 0, 1068 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'cost threshold for parallelism', 5, 1012 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'cross db ownership chaining', 0, 1013 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'cursor threshold', -1, 1014 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'Database Mail XPs', 0, 1072 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'default full-text language', 1033, 1016 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'default language', 0, 1017 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'default trace enabled', 1, 1018 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'disallow results from triggers', 0, 1019 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'EKM provider enabled', 0, 1075 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'filestream access level', 0, 1076 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'fill factor (%)', 0, 1020 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'ft crawl bandwidth (max)', 100, 1021 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'ft crawl bandwidth (min)', 0, 1022 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'ft notify bandwidth (max)', 100, 1023 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'ft notify bandwidth (min)', 0, 1024 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'index create memory (KB)', 0, 1025 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'in-doubt xact resolution', 0, 1026 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'lightweight pooling', 0, 1027 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'locks', 0, 1028 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'max degree of parallelism', 0, 1029 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'max full-text crawl range', 4, 1030 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'max server memory (MB)', 2147483647, 1031 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'max text repl size (B)', 65536, 1032 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'max worker threads', 0, 1033 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'media retention', 0, 1034 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'min memory per query (KB)', 1024, 1035 );\n\t\t\t\t/* Accepting both 0 and 16 below because both have been seen in the wild as defaults. */\n\t\t\t\tIF EXISTS ( SELECT  *\n\t\t\t\t\t\t\tFROM    sys.configurations\n\t\t\t\t\t\t\tWHERE   name = 'min server memory (MB)'\n\t\t\t\t\t\t\t\t\tAND value_in_use IN ( 0, 16 ) )\n\t\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\t\t\t\tSELECT  'min server memory (MB)' ,\n\t\t\t\t\t\t\t\t\tCAST(value_in_use AS BIGINT), 1036\n\t\t\t\t\t\t\tFROM    sys.configurations\n\t\t\t\t\t\t\tWHERE   name = 'min server memory (MB)';\n\t\t\t\tELSE\n\t\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\t\tVALUES  ( 'min server memory (MB)', 0, 1036 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'nested triggers', 1, 1037 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'network packet size (B)', 4096, 1038 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'Ole Automation Procedures', 0, 1039 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'open objects', 0, 1040 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'optimize for ad hoc workloads', 0, 1041 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'PH timeout (s)', 60, 1042 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'precompute rank', 0, 1043 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'priority boost', 0, 1044 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'query governor cost limit', 0, 1045 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'query wait (s)', -1, 1046 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'recovery interval (min)', 0, 1047 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'remote access', 1, 1048 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'remote admin connections', 0, 1049 );\n\t\t\t\t/* SQL Server 2012 changes a configuration default */\n\t\t\t\tIF @@VERSION LIKE '%Microsoft SQL Server 2005%'\n\t\t\t\t\tOR @@VERSION LIKE '%Microsoft SQL Server 2008%'\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\t\t\tVALUES  ( 'remote login timeout (s)', 20, 1069 );\n\t\t\t\t\tEND;\n\t\t\t\tELSE\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\t\t\tVALUES  ( 'remote login timeout (s)', 10, 1069 );\n\t\t\t\t\tEND;\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'remote proc trans', 0, 1050 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'remote query timeout (s)', 600, 1051 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'Replication XPs', 0, 1052 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'RPC parameter data validation', 0, 1053 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'scan for startup procs', 0, 1054 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'server trigger recursion', 1, 1055 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'set working set size', 0, 1056 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'show advanced options', 0, 1057 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'SMO and DMO XPs', 1, 1058 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'SQL Mail XPs', 0, 1059 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'transform noise words', 0, 1060 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'two digit year cutoff', 2049, 1061 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'user connections', 0, 1062 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'user options', 0, 1063 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'Web Assistant Procedures', 0, 1064 );\n\t\t\t\tINSERT  INTO #ConfigurationDefaults\n\t\t\t\tVALUES  ( 'xp_cmdshell', 0, 1065 );\n\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 22 )\n\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 22) WITH NOWAIT;\n\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  cd.CheckID ,\n\t\t\t\t\t\t\t\t\t\t200 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Non-Default Server Config' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\tcr.name AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/conf' AS URL ,\n\t\t\t\t\t\t\t\t\t\t( 'This sp_configure option has been changed.  Its default value is '\n\t\t\t\t\t\t\t\t\t\t  + COALESCE(CAST(cd.[DefaultValue] AS VARCHAR(100)),\n\t\t\t\t\t\t\t\t\t\t\t\t\t '(unknown)')\n\t\t\t\t\t\t\t\t\t\t  + ' and it has been set to '\n\t\t\t\t\t\t\t\t\t\t  + CAST(cr.value_in_use AS VARCHAR(100))\n\t\t\t\t\t\t\t\t\t\t  + '.' ) AS Details\n\t\t\t\t\t\t\t\tFROM    sys.configurations cr\n\t\t\t\t\t\t\t\t\t\tINNER JOIN #ConfigurationDefaults cd ON cd.name = cr.name\n\t\t\t\t\t\t\t\t\t\tLEFT OUTER JOIN #ConfigurationDefaults cdUsed ON cdUsed.name = cr.name\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  AND cdUsed.DefaultValue = cr.value_in_use\n\t\t\t\t\t\t\t\tWHERE   cdUsed.name IS NULL;\n\t\t\t\t\tEND;\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 190 )\n\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Setting @MinServerMemory and @MaxServerMemory', 0, 1) WITH NOWAIT;\n\n\t\t\t\t\t\tSELECT @MinServerMemory = CAST(value_in_use as BIGINT) FROM sys.configurations WHERE name = 'min server memory (MB)';\n\t\t\t\t\t\tSELECT @MaxServerMemory = CAST(value_in_use as BIGINT) FROM sys.configurations WHERE name = 'max server memory (MB)';\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF (@MinServerMemory = @MaxServerMemory)\n\t\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 190) WITH NOWAIT;\n\n\t\t\t\t\t\tINSERT INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tVALUES  \n\t\t\t\t\t\t\t\t\t(\t190,\n\t\t\t\t\t\t\t\t\t\t200,\n\t\t\t\t\t\t\t\t\t\t'Performance',\n\t\t\t\t\t\t\t\t\t\t'Non-Dynamic Memory',\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/memory',\n\t\t\t\t\t\t\t\t\t\t'Minimum Server Memory setting is the same as the Maximum (both set to ' + CAST(@MinServerMemory AS NVARCHAR(50)) + '). This will not allow dynamic memory. Please revise memory settings'\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\tEND;\n\t\t\t\t\tEND;\n\t\t\t\t\t\n\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 188 )\n\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\t/* Let's set variables so that our query is still SARGable */\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Setting @Processors.', 0, 1) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tSET @Processors = (SELECT cpu_count FROM sys.dm_os_sys_info);\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Setting @NUMANodes', 0, 1) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tSET @NUMANodes = (SELECT COUNT(1)\n\t\t\t\t\t\t\t\t\t\t\tFROM sys.dm_os_performance_counters pc\n\t\t\t\t\t\t\t\t\t\t\tWHERE pc.object_name LIKE '%Buffer Node%'\n\t\t\t\t\t\t\t\t\t\t\t\tAND counter_name = 'Page life expectancy');\n\t\t\t\t\t\t/* If Cost Threshold for Parallelism is default then flag as a potential issue */\n\t\t\t\t\t\t/* If MAXDOP is default and processors > 8 or NUMA nodes > 1 then flag as potential issue */\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 188) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tINSERT INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  188 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t200 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Performance' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\tcr.name AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/cxpacket' AS URL ,\n\t\t\t\t\t\t\t\t\t\t( 'Set to ' + CAST(cr.value_in_use AS NVARCHAR(50)) + ', its default value. Changing this sp_configure setting may reduce CXPACKET waits.')\n\t\t\t\t\t\t\t\tFROM    sys.configurations cr\n\t\t\t\t\t\t\t\t\t\tINNER JOIN #ConfigurationDefaults cd ON cd.name = cr.name\n\t\t\t\t\t\t\t\t\t\t\tAND cr.value_in_use = cd.DefaultValue\n\t\t\t\t\t\t\t\tWHERE   cr.name = 'cost threshold for parallelism'\n\t\t\t\t\t\t\t\t\tOR (cr.name = 'max degree of parallelism' AND (@NUMANodes > 1 OR @Processors > 8));\n\t\t\t\t\tEND;\n\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 24 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 24) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t24 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\tDB_NAME(database_id) AS DatabaseName ,\n\t\t\t\t\t\t\t\t\t\t170 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'File Configuration' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'System Database on C Drive' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/cdrive' AS URL ,\n\t\t\t\t\t\t\t\t\t\t( 'The ' + DB_NAME(database_id)\n\t\t\t\t\t\t\t\t\t\t  + ' database has a file on the C drive.  Putting system databases on the C drive runs the risk of crashing the server when it runs out of space.' ) AS Details\n\t\t\t\t\t\t\t\tFROM    sys.master_files\n\t\t\t\t\t\t\t\tWHERE   UPPER(LEFT(physical_name, 1)) = 'C'\n\t\t\t\t\t\t\t\t\t\tAND DB_NAME(database_id) IN ( 'master',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  'model', 'msdb' );\n\t\t\t\t\tEND;\n\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 25 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 25) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT TOP 1\n\t\t\t\t\t\t\t\t\t\t25 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t'tempdb' ,\n\t\t\t\t\t\t\t\t\t\t20 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'File Configuration' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'TempDB on C Drive' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/cdrive' AS URL ,\n\t\t\t\t\t\t\t\t\t\tCASE WHEN growth > 0\n\t\t\t\t\t\t\t\t\t\t\t THEN ( 'The tempdb database has files on the C drive.  TempDB frequently grows unpredictably, putting your server at risk of running out of C drive space and crashing hard.  C is also often much slower than other drives, so performance may be suffering.' )\n\t\t\t\t\t\t\t\t\t\t\t ELSE ( 'The tempdb database has files on the C drive.  TempDB is not set to Autogrow, hopefully it is big enough.  C is also often much slower than other drives, so performance may be suffering.' )\n\t\t\t\t\t\t\t\t\t\tEND AS Details\n\t\t\t\t\t\t\t\tFROM    sys.master_files\n\t\t\t\t\t\t\t\tWHERE   UPPER(LEFT(physical_name, 1)) = 'C'\n\t\t\t\t\t\t\t\t\t\tAND DB_NAME(database_id) = 'tempdb';\n\t\t\t\t\tEND;\n\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 26 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 26) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t26 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\tDB_NAME(database_id) AS DatabaseName ,\n\t\t\t\t\t\t\t\t\t\t20 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Reliability' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'User Databases on C Drive' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/cdrive' AS URL ,\n\t\t\t\t\t\t\t\t\t\t( 'The ' + DB_NAME(database_id)\n\t\t\t\t\t\t\t\t\t\t  + ' database has a file on the C drive.  Putting databases on the C drive runs the risk of crashing the server when it runs out of space.' ) AS Details\n\t\t\t\t\t\t\t\tFROM    sys.master_files\n\t\t\t\t\t\t\t\tWHERE   UPPER(LEFT(physical_name, 1)) = 'C'\n\t\t\t\t\t\t\t\t\t\tAND DB_NAME(database_id) NOT IN ( 'master',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  'model', 'msdb',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  'tempdb' )\n\t\t\t\t\t\t\t\t\t\tAND DB_NAME(database_id) NOT IN (\n\t\t\t\t\t\t\t\t\t\tSELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t\t\tDatabaseName\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE CheckID IS NULL OR CheckID = 26 );\n\t\t\t\t\tEND;\n\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 27 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 27) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  27 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t'master' AS DatabaseName ,\n\t\t\t\t\t\t\t\t\t\t200 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Informational' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Tables in the Master Database' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/mastuser' AS URL ,\n\t\t\t\t\t\t\t\t\t\t( 'The ' + name\n\t\t\t\t\t\t\t\t\t\t  + ' table in the master database was created by end users on '\n\t\t\t\t\t\t\t\t\t\t  + CAST(create_date AS VARCHAR(20))\n\t\t\t\t\t\t\t\t\t\t  + '. Tables in the master database may not be restored in the event of a disaster.' ) AS Details\n\t\t\t\t\t\t\t\tFROM    master.sys.tables\n\t\t\t\t\t\t\t\tWHERE   is_ms_shipped = 0;\n\t\t\t\t\tEND;\n\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 28 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 28) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  28 AS CheckID ,\n\t\t\t\t\t\t\t\t        'msdb' AS DatabaseName ,\n\t\t\t\t\t\t\t\t\t\t200 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Informational' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Tables in the MSDB Database' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/msdbuser' AS URL ,\n\t\t\t\t\t\t\t\t\t\t( 'The ' + name\n\t\t\t\t\t\t\t\t\t\t  + ' table in the msdb database was created by end users on '\n\t\t\t\t\t\t\t\t\t\t  + CAST(create_date AS VARCHAR(20))\n\t\t\t\t\t\t\t\t\t\t  + '. Tables in the msdb database may not be restored in the event of a disaster.' ) AS Details\n\t\t\t\t\t\t\t\tFROM    msdb.sys.tables\n\t\t\t\t\t\t\t\tWHERE   is_ms_shipped = 0 AND name NOT LIKE '%DTA_%';\n\t\t\t\t\tEND;\n\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 29 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 29) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  29 AS CheckID ,\n\t\t\t\t\t\t\t\t        'msdb' AS DatabaseName ,\n\t\t\t\t\t\t\t\t\t\t200 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Informational' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Tables in the Model Database' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/model' AS URL ,\n\t\t\t\t\t\t\t\t\t\t( 'The ' + name\n\t\t\t\t\t\t\t\t\t\t  + ' table in the model database was created by end users on '\n\t\t\t\t\t\t\t\t\t\t  + CAST(create_date AS VARCHAR(20))\n\t\t\t\t\t\t\t\t\t\t  + '. Tables in the model database are automatically copied into all new databases.' ) AS Details\n\t\t\t\t\t\t\t\tFROM    model.sys.tables\n\t\t\t\t\t\t\t\tWHERE   is_ms_shipped = 0;\n\t\t\t\t\tEND;\n\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 30 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tIF ( SELECT COUNT(*)\n\t\t\t\t\t\t\t FROM   msdb.dbo.sysalerts\n\t\t\t\t\t\t\t WHERE  severity BETWEEN 19 AND 25\n\t\t\t\t\t\t   ) < 7\n\n\t\t\t\t\t\t   BEGIN\n\n\t\t\t\t\t\t   IF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 30) WITH NOWAIT;\n\n\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\tSELECT  30 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t200 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t'Monitoring' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t'Not All Alerts Configured' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/alert' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\t( 'Not all SQL Server Agent alerts have been configured.  This is a free, easy way to get notified of corruption, job failures, or major outages even before monitoring systems pick it up.' ) AS Details;\n\t\t\t\t\t\t\tEND;\n\t\t\t\t\tEND;\n\n\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 59 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tIF EXISTS ( SELECT  *\n\t\t\t\t\t\t\t\t\tFROM    msdb.dbo.sysalerts\n\t\t\t\t\t\t\t\t\tWHERE   enabled = 1\n\t\t\t\t\t\t\t\t\t\t\tAND COALESCE(has_notification, 0) = 0\n\t\t\t\t\t\t\t\t\t\t\tAND (job_id IS NULL OR job_id = 0x))\n\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 59) WITH NOWAIT;\n\n\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\tSELECT  59 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t200 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t'Monitoring' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t'Alerts Configured without Follow Up' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/alert' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\t( 'SQL Server Agent alerts have been configured but they either do not notify anyone or else they do not take any action.  This is a free, easy way to get notified of corruption, job failures, or major outages even before monitoring systems pick it up.' ) AS Details;\n\t\t\t\t\t\n\t\t\t\t\t\t\tEND;\n\t\t\t\t\tEND;\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 96 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  *\n\t\t\t\t\t\t\t\t\t\tFROM    msdb.dbo.sysalerts\n\t\t\t\t\t\t\t\t\t\tWHERE   message_id IN ( 823, 824, 825 ) )\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tBEGIN;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 96) WITH NOWAIT;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\tSELECT  96 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t200 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t'Monitoring' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t'No Alerts for Corruption' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/alert' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\t( 'SQL Server Agent alerts do not exist for errors 823, 824, and 825.  These three errors can give you notification about early hardware failure. Enabling them can prevent you a lot of heartbreak.' ) AS Details;\n\t\t\t\t\t\n\t\t\t\t\t\t\tEND;\n\t\t\t\t\tEND;\n\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 61 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  *\n\t\t\t\t\t\t\t\t\t\tFROM    msdb.dbo.sysalerts\n\t\t\t\t\t\t\t\t\t\tWHERE   severity BETWEEN 19 AND 25 )\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 61) WITH NOWAIT;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\tSELECT  61 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t200 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t'Monitoring' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t'No Alerts for Sev 19-25' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/alert' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\t( 'SQL Server Agent alerts do not exist for severity levels 19 through 25.  These are some very severe SQL Server errors. Knowing that these are happening may let you recover from errors faster.' ) AS Details;\n\t\t\t\t\t\n\t\t\t\t\t\t\tEND;\n\n\t\t\t\t\tEND;\n\n\t\t--check for disabled alerts\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 98 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tIF EXISTS ( SELECT  name\n\t\t\t\t\t\t\t\t\tFROM    msdb.dbo.sysalerts\n\t\t\t\t\t\t\t\t\tWHERE   enabled = 0 )\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 98) WITH NOWAIT;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\tSELECT  98 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t200 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t'Monitoring' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t'Alerts Disabled' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t'https://www.BrentOzar.com/go/alerts/' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\t( 'The following Alert is disabled, please review and enable if desired: '\n\t\t\t\t\t\t\t\t\t\t\t  + name ) AS Details\n\t\t\t\t\t\t\t\t\tFROM    msdb.dbo.sysalerts\n\t\t\t\t\t\t\t\t\tWHERE   enabled = 0;\n\t\t\t\t\t\n\t\t\t\t\t\t\tEND;\n\t\t\t\t\t\n\t\t\t\t\tEND;\n\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 31 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  *\n\t\t\t\t\t\t\t\t\t\tFROM    msdb.dbo.sysoperators\n\t\t\t\t\t\t\t\t\t\tWHERE   enabled = 1 )\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 31) WITH NOWAIT;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\tSELECT  31 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t200 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t'Monitoring' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t'No Operators Configured/Enabled' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/op' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\t( 'No SQL Server Agent operators (emails) have been configured.  This is a free, easy way to get notified of corruption, job failures, or major outages even before monitoring systems pick it up.' ) AS Details;\n\t\t\t\t\t\n\t\t\t\t\t\t\tEND;\n\t\t\t\t\tEND;\n\n\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 34 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tIF EXISTS ( SELECT  *\n\t\t\t\t\t\t\t\t\tFROM    sys.all_objects\n\t\t\t\t\t\t\t\t\tWHERE   name = 'dm_db_mirroring_auto_page_repair' )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 34) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tSET @StringToExecute = 'INSERT INTO #BlitzResults\n\t\t\t\t(CheckID,\n\t\t\t\tDatabaseName,\n\t\t\t\tPriority,\n\t\t\t\tFindingsGroup,\n\t\t\t\tFinding,\n\t\t\t\tURL,\n\t\t\t\tDetails)\n\t\t  SELECT DISTINCT\n\t\t  34 AS CheckID ,\n\t\t  db.name ,\n\t\t  1 AS Priority ,\n\t\t  ''Corruption'' AS FindingsGroup ,\n\t\t  ''Database Corruption Detected'' AS Finding ,\n\t\t  ''https://BrentOzar.com/go/repair'' AS URL ,\n\t\t  ( ''Database mirroring has automatically repaired at least one corrupt page in the last 30 days. For more information, query the DMV sys.dm_db_mirroring_auto_page_repair.'' ) AS Details\n\t\t  FROM (SELECT rp2.database_id, rp2.modification_time \n\t\t\tFROM sys.dm_db_mirroring_auto_page_repair rp2 \n\t\t\tWHERE rp2.[database_id] not in (\n\t\t\tSELECT db2.[database_id] \n\t\t\tFROM sys.databases as db2 \n\t\t\tWHERE db2.[state] = 1\n\t\t\t) ) as rp \n\t\t  INNER JOIN master.sys.databases db ON rp.database_id = db.database_id\n\t\t  WHERE   rp.modification_time >= DATEADD(dd, -30, GETDATE())  OPTION (RECOMPILE);';\n\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\n\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\t\tEND;\n\t\t\t\t\tEND;\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 89 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tIF EXISTS ( SELECT  *\n\t\t\t\t\t\t\t\t\tFROM    sys.all_objects\n\t\t\t\t\t\t\t\t\tWHERE   name = 'dm_hadr_auto_page_repair' )\n\t\t\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 89) WITH NOWAIT;\n\n\t\t\t\t\t\t\t\tSET @StringToExecute = 'INSERT INTO #BlitzResults\n\t\t\t\t(CheckID,\n\t\t\t\tDatabaseName,\n\t\t\t\tPriority,\n\t\t\t\tFindingsGroup,\n\t\t\t\tFinding,\n\t\t\t\tURL,\n\t\t\t\tDetails)\n\t\t  SELECT DISTINCT\n\t\t  89 AS CheckID ,\n\t\t  db.name ,\n\t\t  1 AS Priority ,\n\t\t  ''Corruption'' AS FindingsGroup ,\n\t\t  ''Database Corruption Detected'' AS Finding ,\n\t\t  ''https://BrentOzar.com/go/repair'' AS URL ,\n\t\t  ( ''AlwaysOn has automatically repaired at least one corrupt page in the last 30 days. For more information, query the DMV sys.dm_hadr_auto_page_repair.'' ) AS Details\n\t\t  FROM    sys.dm_hadr_auto_page_repair rp\n\t\t  INNER JOIN master.sys.databases db ON rp.database_id = db.database_id\n\t\t  WHERE   rp.modification_time >= DATEADD(dd, -30, GETDATE()) OPTION (RECOMPILE) ;';\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\t\tEND;\n\t\t\t\t\tEND;\n\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 90 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tIF EXISTS ( SELECT  *\n\t\t\t\t\t\t\t\t\tFROM    msdb.sys.all_objects\n\t\t\t\t\t\t\t\t\tWHERE   name = 'suspect_pages' )\n\t\t\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 90) WITH NOWAIT;\n\n\t\t\t\t\t\t\t\tSET @StringToExecute = 'INSERT INTO #BlitzResults\n\t\t\t\t(CheckID,\n\t\t\t\tDatabaseName,\n\t\t\t\tPriority,\n\t\t\t\tFindingsGroup,\n\t\t\t\tFinding,\n\t\t\t\tURL,\n\t\t\t\tDetails)\n\t\t  SELECT DISTINCT\n\t\t  90 AS CheckID ,\n\t\t  db.name ,\n\t\t  1 AS Priority ,\n\t\t  ''Corruption'' AS FindingsGroup ,\n\t\t  ''Database Corruption Detected'' AS Finding ,\n\t\t  ''https://BrentOzar.com/go/repair'' AS URL ,\n\t\t  ( ''SQL Server has detected at least one corrupt page in the last 30 days. For more information, query the system table msdb.dbo.suspect_pages.'' ) AS Details\n\t\t  FROM    msdb.dbo.suspect_pages sp\n\t\t  INNER JOIN master.sys.databases db ON sp.database_id = db.database_id\n\t\t  WHERE   sp.last_update_date >= DATEADD(dd, -30, GETDATE())  OPTION (RECOMPILE);';\n\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\n\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\t\tEND;\n\t\t\t\t\tEND;\n\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 36 )\n\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 36) WITH NOWAIT;\n\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t36 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t150 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Performance' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Slow Storage Reads on Drive '\n\t\t\t\t\t\t\t\t\t\t+ UPPER(LEFT(mf.physical_name, 1)) AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/slow' AS URL ,\n\t\t\t\t\t\t\t\t\t\t'Reads are averaging longer than 200ms for at least one database on this drive.  For specific database file speeds, run the query from the information link.' AS Details\n\t\t\t\t\t\t\t\tFROM    sys.dm_io_virtual_file_stats(NULL, NULL)\n\t\t\t\t\t\t\t\t\t\tAS fs\n\t\t\t\t\t\t\t\t\t\tINNER JOIN sys.master_files AS mf ON fs.database_id = mf.database_id\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  AND fs.[file_id] = mf.[file_id]\n\t\t\t\t\t\t\t\tWHERE   ( io_stall_read_ms / ( 1.0 + num_of_reads ) ) > 200\n\t\t\t\t\t\t\t\tAND num_of_reads > 100000;\n\t\t\t\t\tEND;\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 37 )\n\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 37) WITH NOWAIT;\n\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t37 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t150 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Performance' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Slow Storage Writes on Drive '\n\t\t\t\t\t\t\t\t\t\t+ UPPER(LEFT(mf.physical_name, 1)) AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/slow' AS URL ,\n\t\t\t\t\t\t\t\t\t\t'Writes are averaging longer than 100ms for at least one database on this drive.  For specific database file speeds, run the query from the information link.' AS Details\n\t\t\t\t\t\t\t\tFROM    sys.dm_io_virtual_file_stats(NULL, NULL)\n\t\t\t\t\t\t\t\t\t\tAS fs\n\t\t\t\t\t\t\t\t\t\tINNER JOIN sys.master_files AS mf ON fs.database_id = mf.database_id\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  AND fs.[file_id] = mf.[file_id]\n\t\t\t\t\t\t\t\tWHERE   ( io_stall_write_ms / ( 1.0\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ num_of_writes ) ) > 100\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND num_of_writes > 100000;\n\t\t\t\t\tEND;\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 40 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tIF ( SELECT COUNT(*)\n\t\t\t\t\t\t\t FROM   tempdb.sys.database_files\n\t\t\t\t\t\t\t WHERE  type_desc = 'ROWS'\n\t\t\t\t\t\t   ) = 1\n\t\t\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 40) WITH NOWAIT;\n\n\t\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tVALUES  ( 40 ,\n\t\t\t\t\t\t\t\t\t\t  'tempdb' ,\n\t\t\t\t\t\t\t\t\t\t  170 ,\n\t\t\t\t\t\t\t\t\t\t  'File Configuration' ,\n\t\t\t\t\t\t\t\t\t\t  'TempDB Only Has 1 Data File' ,\n\t\t\t\t\t\t\t\t\t\t  'https://BrentOzar.com/go/tempdb' ,\n\t\t\t\t\t\t\t\t\t\t  'TempDB is only configured with one data file.  More data files are usually required to alleviate SGAM contention.'\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tEND;\n\t\t\t\t\tEND;\n\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 183 )\n\n\t\t\t\tBEGIN\n\n\t\t\t\t\t\tIF ( SELECT COUNT (distinct [size])\n\t\t\t\t\t\t\tFROM   tempdb.sys.database_files\n\t\t\t\t\t\t\tWHERE  type_desc = 'ROWS'\n\t\t\t\t\t\t\tHAVING MAX((size * 8) / (1024. * 1024)) - MIN((size * 8) / (1024. * 1024)) > 1.\n\t\t\t\t\t\t\t) <> 1\n\t\t\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 183) WITH NOWAIT;\n\n\t\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tVALUES  ( 183 ,\n\t\t\t\t\t\t\t\t\t\t  'tempdb' ,\n\t\t\t\t\t\t\t\t\t\t  170 ,\n\t\t\t\t\t\t\t\t\t\t  'File Configuration' ,\n\t\t\t\t\t\t\t\t\t\t  'TempDB Unevenly Sized Data Files' ,\n\t\t\t\t\t\t\t\t\t\t  'https://BrentOzar.com/go/tempdb' ,\n\t\t\t\t\t\t\t\t\t\t  'TempDB data files are not configured with the same size.  Unevenly sized tempdb data files will result in unevenly sized workloads.'\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tEND;\n\t\t\t\tEND;\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 44 )\n\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 44) WITH NOWAIT;\n\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  44 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t150 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Performance' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Queries Forcing Order Hints' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/hints' AS URL ,\n\t\t\t\t\t\t\t\t\t\tCAST(occurrence AS VARCHAR(10))\n\t\t\t\t\t\t\t\t\t\t+ ' instances of order hinting have been recorded since restart.  This means queries are bossing the SQL Server optimizer around, and if they don''t know what they''re doing, this can cause more harm than good.  This can also explain why DBA tuning efforts aren''t working.' AS Details\n\t\t\t\t\t\t\t\tFROM    sys.dm_exec_query_optimizer_info\n\t\t\t\t\t\t\t\tWHERE   counter = 'order hint'\n\t\t\t\t\t\t\t\t\t\tAND occurrence > 1000;\n\t\t\t\t\tEND;\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 45 )\n\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 45) WITH NOWAIT;\n\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  45 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t150 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Performance' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Queries Forcing Join Hints' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/hints' AS URL ,\n\t\t\t\t\t\t\t\t\t\tCAST(occurrence AS VARCHAR(10))\n\t\t\t\t\t\t\t\t\t\t+ ' instances of join hinting have been recorded since restart.  This means queries are bossing the SQL Server optimizer around, and if they don''t know what they''re doing, this can cause more harm than good.  This can also explain why DBA tuning efforts aren''t working.' AS Details\n\t\t\t\t\t\t\t\tFROM    sys.dm_exec_query_optimizer_info\n\t\t\t\t\t\t\t\tWHERE   counter = 'join hint'\n\t\t\t\t\t\t\t\t\t\tAND occurrence > 1000;\n\t\t\t\t\tEND;\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 49 )\n\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 49) WITH NOWAIT;\n\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t49 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t200 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Informational' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Linked Server Configured' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/link' AS URL ,\n\t\t\t\t\t\t\t\t\t\t+CASE WHEN l.remote_name = 'sa'\n\t\t\t\t\t\t\t\t\t\t\t  THEN s.data_source\n\t\t\t\t\t\t\t\t\t\t\t\t   + ' is configured as a linked server. Check its security configuration as it is connecting with sa, because any user who queries it will get admin-level permissions.'\n\t\t\t\t\t\t\t\t\t\t\t  ELSE s.data_source\n\t\t\t\t\t\t\t\t\t\t\t\t   + ' is configured as a linked server. Check its security configuration to make sure it isn''t connecting with SA or some other bone-headed administrative login, because any user who queries it might get admin-level permissions.'\n\t\t\t\t\t\t\t\t\t\t END AS Details\n\t\t\t\t\t\t\t\tFROM    sys.servers s\n\t\t\t\t\t\t\t\t\t\tINNER JOIN sys.linked_logins l ON s.server_id = l.server_id\n\t\t\t\t\t\t\t\tWHERE   s.is_linked = 1;\n\t\t\t\t\tEND;\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 50 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tIF @@VERSION NOT LIKE '%Microsoft SQL Server 2000%'\n\t\t\t\t\t\t\tAND @@VERSION NOT LIKE '%Microsoft SQL Server 2005%'\n\t\t\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 50) WITH NOWAIT;\n\n\t\t\t\t\t\t\t\tSET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)\n\t\t  SELECT  50 AS CheckID ,\n\t\t  100 AS Priority ,\n\t\t  ''Performance'' AS FindingsGroup ,\n\t\t  ''Max Memory Set Too High'' AS Finding ,\n\t\t  ''https://BrentOzar.com/go/max'' AS URL ,\n\t\t  ''SQL Server max memory is set to ''\n\t\t\t+ CAST(c.value_in_use AS VARCHAR(20))\n\t\t\t+ '' megabytes, but the server only has ''\n\t\t\t+ CAST(( CAST(m.total_physical_memory_kb AS BIGINT) / 1024 ) AS VARCHAR(20))\n\t\t\t+ '' megabytes.  SQL Server may drain the system dry of memory, and under certain conditions, this can cause Windows to swap to disk.'' AS Details\n\t\t  FROM    sys.dm_os_sys_memory m\n\t\t  INNER JOIN sys.configurations c ON c.name = ''max server memory (MB)''\n\t\t  WHERE   CAST(m.total_physical_memory_kb AS BIGINT) < ( CAST(c.value_in_use AS BIGINT) * 1024 ) OPTION (RECOMPILE);';\n\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\n\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\t\tEND;\n\t\t\t\t\tEND;\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 51 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tIF @@VERSION NOT LIKE '%Microsoft SQL Server 2000%'\n\t\t\t\t\t\t\tAND @@VERSION NOT LIKE '%Microsoft SQL Server 2005%'\n\t\t\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 51) WITH NOWAIT\n\n\t\t\t\t\t\t\t\tSET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)\n\t\t  SELECT  51 AS CheckID ,\n\t\t  1 AS Priority ,\n\t\t  ''Performance'' AS FindingsGroup ,\n\t\t  ''Memory Dangerously Low'' AS Finding ,\n\t\t  ''https://BrentOzar.com/go/max'' AS URL ,\n\t\t  ''The server has '' + CAST(( CAST(m.total_physical_memory_kb AS BIGINT) / 1024 ) AS VARCHAR(20)) + '' megabytes of physical memory, but only '' + CAST(( CAST(m.available_physical_memory_kb AS BIGINT) / 1024 ) AS VARCHAR(20))\n\t\t\t+ '' megabytes are available.  As the server runs out of memory, there is danger of swapping to disk, which will kill performance.'' AS Details\n\t\t  FROM    sys.dm_os_sys_memory m\n\t\t  WHERE   CAST(m.available_physical_memory_kb AS BIGINT) < 262144 OPTION (RECOMPILE);';\n\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\n\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\t\tEND;\n\t\t\t\t\tEND;\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 159 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tIF @@VERSION NOT LIKE '%Microsoft SQL Server 2000%'\n\t\t\t\t\t\t\tAND @@VERSION NOT LIKE '%Microsoft SQL Server 2005%'\n\t\t\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 159) WITH NOWAIT;\n\n\t\t\t\t\t\t\t\tSET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)\n\t\t  SELECT DISTINCT 159 AS CheckID ,\n\t\t  1 AS Priority ,\n\t\t  ''Performance'' AS FindingsGroup ,\n\t\t  ''Memory Dangerously Low in NUMA Nodes'' AS Finding ,\n\t\t  ''https://BrentOzar.com/go/max'' AS URL ,\n\t\t  ''At least one NUMA node is reporting THREAD_RESOURCES_LOW in sys.dm_os_nodes and can no longer create threads.'' AS Details\n\t\t  FROM    sys.dm_os_nodes m\n\t\t  WHERE   node_state_desc LIKE ''%THREAD_RESOURCES_LOW%'' OPTION (RECOMPILE);';\n\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\n\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\t\tEND;\n\t\t\t\t\tEND;\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 53 )\n\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 53) WITH NOWAIT;\n\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT TOP 1\n\t\t\t\t\t\t\t\t\t\t53 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t200 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Informational' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Cluster Node' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/node' AS URL ,\n\t\t\t\t\t\t\t\t\t\t'This is a node in a cluster.' AS Details\n\t\t\t\t\t\t\t\tFROM    sys.dm_os_cluster_nodes;\n\t\t\t\t\tEND;\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 55 )\n\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 55) WITH NOWAIT;\n\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  55 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t[name] AS DatabaseName ,\n\t\t\t\t\t\t\t\t\t\t230 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Security' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Database Owner <> SA' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/owndb' AS URL ,\n\t\t\t\t\t\t\t\t\t\t( 'Database name: ' + [name] + '   '\n\t\t\t\t\t\t\t\t\t\t  + 'Owner name: ' + SUSER_SNAME(owner_sid) ) AS Details\n\t\t\t\t\t\t\t\tFROM    sys.databases\n\t\t\t\t\t\t\t\tWHERE   SUSER_SNAME(owner_sid) <> SUSER_SNAME(0x01)\n\t\t\t\t\t\t\t\t\t\tAND name NOT IN ( SELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  DatabaseName\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  FROM    #SkipChecks \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  WHERE CheckID IS NULL OR CheckID = 55);\n\t\t\t\t\tEND;\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 57 )\n\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 57) WITH NOWAIT;\n\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  57 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t230 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Security' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'SQL Agent Job Runs at Startup' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/startup' AS URL ,\n\t\t\t\t\t\t\t\t\t\t( 'Job [' + j.name\n\t\t\t\t\t\t\t\t\t\t  + '] runs automatically when SQL Server Agent starts up.  Make sure you know exactly what this job is doing, because it could pose a security risk.' ) AS Details\n\t\t\t\t\t\t\t\tFROM    msdb.dbo.sysschedules sched\n\t\t\t\t\t\t\t\t\t\tJOIN msdb.dbo.sysjobschedules jsched ON sched.schedule_id = jsched.schedule_id\n\t\t\t\t\t\t\t\t\t\tJOIN msdb.dbo.sysjobs j ON jsched.job_id = j.job_id\n\t\t\t\t\t\t\t\tWHERE   sched.freq_type = 64\n\t\t\t\t\t\t\t\t        AND sched.enabled = 1;\n\t\t\t\t\tEND;\n\n\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 97 )\n\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 97) WITH NOWAIT;\n\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  97 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t100 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Performance' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Unusual SQL Server Edition' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/workgroup' AS URL ,\n\t\t\t\t\t\t\t\t\t\t( 'This server is using '\n\t\t\t\t\t\t\t\t\t\t  + CAST(SERVERPROPERTY('edition') AS VARCHAR(100))\n\t\t\t\t\t\t\t\t\t\t  + ', which is capped at low amounts of CPU and memory.' ) AS Details\n\t\t\t\t\t\t\t\tWHERE   CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) NOT LIKE '%Standard%'\n\t\t\t\t\t\t\t\t\t\tAND CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) NOT LIKE '%Enterprise%'\n\t\t\t\t\t\t\t\t\t\tAND CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) NOT LIKE '%Data Center%'\n\t\t\t\t\t\t\t\t\t\tAND CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) NOT LIKE '%Developer%'\n\t\t\t\t\t\t\t\t\t\tAND CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) NOT LIKE '%Business Intelligence%';\n\t\t\t\t\tEND;\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 154 )\n\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 154) WITH NOWAIT;\n\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  154 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t10 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Performance' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'32-bit SQL Server Installed' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/32bit' AS URL ,\n\t\t\t\t\t\t\t\t\t\t( 'This server uses the 32-bit x86 binaries for SQL Server instead of the 64-bit x64 binaries. The amount of memory available for query workspace and execution plans is heavily limited.' ) AS Details\n\t\t\t\t\t\t\t\tWHERE   CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) NOT LIKE '%64%';\n\t\t\t\t\tEND;\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 62 )\n\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 62) WITH NOWAIT;\n\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  62 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t[name] AS DatabaseName ,\n\t\t\t\t\t\t\t\t\t\t200 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Performance' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Old Compatibility Level' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/compatlevel' AS URL ,\n\t\t\t\t\t\t\t\t\t\t( 'Database ' + [name]\n\t\t\t\t\t\t\t\t\t\t  + ' is compatibility level '\n\t\t\t\t\t\t\t\t\t\t  + CAST(compatibility_level AS VARCHAR(20))\n\t\t\t\t\t\t\t\t\t\t  + ', which may cause unwanted results when trying to run queries that have newer T-SQL features.' ) AS Details\n\t\t\t\t\t\t\t\tFROM    sys.databases\n\t\t\t\t\t\t\t\tWHERE   name NOT IN ( SELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tDatabaseName\n\t\t\t\t\t\t\t\t\t\t\t\t\t  FROM      #SkipChecks \n\t\t\t\t\t\t\t\t\t\t\t\t\t  WHERE CheckID IS NULL OR CheckID = 62)\n\t\t\t\t\t\t\t\t\t\tAND compatibility_level <= 90;\n\t\t\t\t\tEND;\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 94 )\n\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 94) WITH NOWAIT;\n\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  94 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t200 AS [Priority] ,\n\t\t\t\t\t\t\t\t\t\t'Monitoring' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Agent Jobs Without Failure Emails' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/alerts' AS URL ,\n\t\t\t\t\t\t\t\t\t\t'The job ' + [name]\n\t\t\t\t\t\t\t\t\t\t+ ' has not been set up to notify an operator if it fails.' AS Details\n\t\t\t\t\t\t\t\tFROM    msdb.[dbo].[sysjobs] j\n\t\t\t\t\t\t\t\t\t\tINNER JOIN ( SELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[job_id]\n\t\t\t\t\t\t\t\t\t\t\t\t\t FROM   [msdb].[dbo].[sysjobschedules]\n\t\t\t\t\t\t\t\t\t\t\t\t\t WHERE  next_run_date > 0\n\t\t\t\t\t\t\t\t\t\t\t\t   ) s ON j.job_id = s.job_id\n\t\t\t\t\t\t\t\tWHERE   j.enabled = 1\n\t\t\t\t\t\t\t\t\t\tAND j.notify_email_operator_id = 0\n\t\t\t\t\t\t\t\t\t\tAND j.notify_netsend_operator_id = 0\n\t\t\t\t\t\t\t\t\t\tAND j.notify_page_operator_id = 0\n\t\t\t\t\t\t\t\t\t\tAND j.category_id <> 100; /* Exclude SSRS category */\n\t\t\t\t\tEND;\n\n\n\t\t\t\tIF EXISTS ( SELECT  1\n\t\t\t\t\t\t\tFROM    sys.configurations\n\t\t\t\t\t\t\tWHERE   name = 'remote admin connections'\n\t\t\t\t\t\t\t\t\tAND value_in_use = 0 )\n\t\t\t\t\tAND NOT EXISTS ( SELECT 1\n\t\t\t\t\t\t\t\t\t FROM   #SkipChecks\n\t\t\t\t\t\t\t\t\t WHERE  DatabaseName IS NULL AND CheckID = 100 )\n\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 100) WITH NOWAIT;\n\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  100 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t50 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Reliability' AS FindingGroup ,\n\t\t\t\t\t\t\t\t\t\t'Remote DAC Disabled' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/dac' AS URL ,\n\t\t\t\t\t\t\t\t\t\t'Remote access to the Dedicated Admin Connection (DAC) is not enabled. The DAC can make remote troubleshooting much easier when SQL Server is unresponsive.';\n\t\t\t\t\tEND;\n\n\n\t\t\t\tIF EXISTS ( SELECT  *\n\t\t\t\t\t\t\tFROM    sys.dm_os_schedulers\n\t\t\t\t\t\t\tWHERE   is_online = 0 )\n\t\t\t\t\tAND NOT EXISTS ( SELECT 1\n\t\t\t\t\t\t\t\t\t FROM   #SkipChecks\n\t\t\t\t\t\t\t\t\t WHERE  DatabaseName IS NULL AND CheckID = 101 )\n\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 101) WITH NOWAIT;\n\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  101 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t50 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Performance' AS FindingGroup ,\n\t\t\t\t\t\t\t\t\t\t'CPU Schedulers Offline' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/schedulers' AS URL ,\n\t\t\t\t\t\t\t\t\t\t'Some CPU cores are not accessible to SQL Server due to affinity masking or licensing problems.';\n\t\t\t\t\tEND;\n\n\n\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 110 )\n\t\t\t\t\t\t\t\tAND EXISTS (SELECT * FROM master.sys.all_objects WHERE name = 'dm_os_memory_nodes')\n\t\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 110) WITH NOWAIT;\n\n\t\t\t\t\t\t\tSET @StringToExecute = 'IF EXISTS (SELECT  *\n\t\t\t\t\t\t\t\t\t\t\t\tFROM sys.dm_os_nodes n\n\t\t\t\t\t\t\t\t\t\t\t\tINNER JOIN sys.dm_os_memory_nodes m ON n.memory_node_id = m.memory_node_id\n\t\t\t\t\t\t\t\t\t\t\t\tWHERE n.node_state_desc = ''OFFLINE'')\n\t\t\t\t\t\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT  110 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t50 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t''Performance'' AS FindingGroup ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t''Memory Nodes Offline'' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t''https://BrentOzar.com/go/schedulers'' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t''Due to affinity masking or licensing problems, some of the memory may not be available.'' OPTION (RECOMPILE)';\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\tEND;\n\n\n\t\t\t\tIF EXISTS ( SELECT  *\n\t\t\t\t\t\t\tFROM    sys.databases\n\t\t\t\t\t\t\tWHERE   state > 1 )\n\t\t\t\t\tAND NOT EXISTS ( SELECT 1\n\t\t\t\t\t\t\t\t\t FROM   #SkipChecks\n\t\t\t\t\t\t\t\t\t WHERE  DatabaseName IS NULL AND CheckID = 102 )\n\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 102) WITH NOWAIT;\n\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  102 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t[name] ,\n\t\t\t\t\t\t\t\t\t\t20 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Reliability' AS FindingGroup ,\n\t\t\t\t\t\t\t\t\t\t'Unusual Database State: ' + [state_desc] AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/repair' AS URL ,\n\t\t\t\t\t\t\t\t\t\t'This database may not be online.'\n\t\t\t\t\t\t\t\tFROM    sys.databases\n\t\t\t\t\t\t\t\tWHERE   state > 1;\n\t\t\t\t\tEND;\n\n\t\t\t\tIF EXISTS ( SELECT  *\n\t\t\t\t\t\t\tFROM    master.sys.extended_procedures )\n\t\t\t\t\tAND NOT EXISTS ( SELECT 1\n\t\t\t\t\t\t\t\t\t FROM   #SkipChecks\n\t\t\t\t\t\t\t\t\t WHERE  DatabaseName IS NULL AND CheckID = 105 )\n\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 105) WITH NOWAIT;\n\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  105 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t'master' ,\n\t\t\t\t\t\t\t\t\t\t200 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Reliability' AS FindingGroup ,\n\t\t\t\t\t\t\t\t\t\t'Extended Stored Procedures in Master' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/clr' AS URL ,\n\t\t\t\t\t\t\t\t\t\t'The [' + name\n\t\t\t\t\t\t\t\t\t\t+ '] extended stored procedure is in the master database. CLR may be in use, and the master database now needs to be part of your backup/recovery planning.'\n\t\t\t\t\t\t\t\tFROM    master.sys.extended_procedures;\n\t\t\t\t\tEND;\n\n\n\n\t\t\t\t\tIF NOT EXISTS ( SELECT 1\n\t\t\t\t\t\t\t\t\t\t FROM   #SkipChecks\n\t\t\t\t\t\t\t\t\t\t WHERE  DatabaseName IS NULL AND CheckID = 107 )\n\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 107) WITH NOWAIT;\n\n\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\tSELECT  107 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t50 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t'Performance' AS FindingGroup ,\n\t\t\t\t\t\t\t\t\t\t\t'Poison Wait Detected: ' + wait_type  AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/poison/#' + wait_type AS URL ,\n\t\t\t\t\t\t\t\t\t\t\tCONVERT(VARCHAR(10), (SUM([wait_time_ms]) / 1000) / 86400) + ':' + CONVERT(VARCHAR(20), DATEADD(s, (SUM([wait_time_ms]) / 1000), 0), 108) + ' of this wait have been recorded. This wait often indicates killer performance problems.'\n\t\t\t\t\t\t\t\t\tFROM sys.[dm_os_wait_stats]\n\t\t\t\t\t\t\t\t\tWHERE wait_type IN('IO_QUEUE_LIMIT', 'IO_RETRY', 'LOG_RATE_GOVERNOR', 'PREEMPTIVE_DEBUG', 'RESMGR_THROTTLED', 'RESOURCE_SEMAPHORE', 'RESOURCE_SEMAPHORE_QUERY_COMPILE','SE_REPL_CATCHUP_THROTTLE','SE_REPL_COMMIT_ACK','SE_REPL_COMMIT_TURN','SE_REPL_ROLLBACK_ACK','SE_REPL_SLOW_SECONDARY_THROTTLE','THREADPOOL')\n\t\t\t\t\t\t\t\t\tGROUP BY wait_type\n\t\t\t\t\t\t\t\t    HAVING SUM([wait_time_ms]) > (SELECT 5000 * datediff(HH,create_date,CURRENT_TIMESTAMP) AS hours_since_startup FROM sys.databases WHERE name='tempdb')\n\t\t\t\t\t\t\t\t\tAND SUM([wait_time_ms]) > 60000;\n\t\t\t\t\t\tEND;\n\n\n\n\t\t\t\t\tIF NOT EXISTS ( SELECT 1\n\t\t\t\t\t\t\t\t\t\t FROM   #SkipChecks\n\t\t\t\t\t\t\t\t\t\t WHERE  DatabaseName IS NULL AND CheckID = 121 )\n\t\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 121) WITH NOWAIT;\n\n\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\tSELECT  121 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t50 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t'Performance' AS FindingGroup ,\n\t\t\t\t\t\t\t\t\t\t\t'Poison Wait Detected: Serializable Locking'  AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/serializable' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\tCONVERT(VARCHAR(10), (SUM([wait_time_ms]) / 1000) / 86400) + ':' + CONVERT(VARCHAR(20), DATEADD(s, (SUM([wait_time_ms]) / 1000), 0), 108) + ' of LCK_M_R% waits have been recorded. This wait often indicates killer performance problems.'\n\t\t\t\t\t\t\t\t\tFROM sys.[dm_os_wait_stats]\n\t\t\t\t\t\t\t\t\tWHERE wait_type IN ('LCK_M_RS_S', 'LCK_M_RS_U', 'LCK_M_RIn_NL','LCK_M_RIn_S', 'LCK_M_RIn_U','LCK_M_RIn_X', 'LCK_M_RX_S', 'LCK_M_RX_U','LCK_M_RX_X')\n\t\t\t\t\t\t\t\t    HAVING SUM([wait_time_ms]) > (SELECT 5000 * datediff(HH,create_date,CURRENT_TIMESTAMP) AS hours_since_startup FROM sys.databases WHERE name='tempdb')\n\t\t\t\t\t\t\t\t\tAND SUM([wait_time_ms]) > 60000;\n\t\t\t\t\t\tEND;\n\n\n\n\n\t\t\t\t\tIF @ProductVersionMajor >= 11 AND NOT EXISTS ( SELECT 1\n\t\t\t\t\t\t\t\t\t\t FROM   #SkipChecks\n\t\t\t\t\t\t\t\t\t\t WHERE  DatabaseName IS NULL AND CheckID = 162 )\n\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 162) WITH NOWAIT;\n\n\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\tSELECT  162 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t50 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t'Performance' AS FindingGroup ,\n\t\t\t\t\t\t\t\t\t\t\t'Poison Wait Detected: CMEMTHREAD & NUMA'  AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/poison' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\tCONVERT(VARCHAR(10), (SUM([wait_time_ms]) / 1000) / 86400) + ':' + CONVERT(VARCHAR(20), DATEADD(s, (SUM([wait_time_ms]) / 1000), 0), 108) + ' of this wait have been recorded. In servers with over 8 cores per NUMA node, when CMEMTHREAD waits are a bottleneck, trace flag 8048 may be needed.'\n\t\t\t\t\t\t\t\t\tFROM sys.dm_os_nodes n \n\t\t\t\t\t\t\t\t\tINNER JOIN sys.[dm_os_wait_stats] w ON w.wait_type = 'CMEMTHREAD'\n\t\t\t\t\t\t\t\t\tWHERE n.node_id = 0 AND n.online_scheduler_count >= 8\n\t\t\t\t\t\t\t\t\t\tAND EXISTS (SELECT * FROM sys.dm_os_nodes WHERE node_id > 0 AND node_state_desc NOT LIKE '%DAC')\n\t\t\t\t\t\t\t\t\tGROUP BY w.wait_type\n\t\t\t\t\t\t\t\t    HAVING SUM([wait_time_ms]) > (SELECT 5000 * datediff(HH,create_date,CURRENT_TIMESTAMP) AS hours_since_startup FROM sys.databases WHERE name='tempdb')\n\t\t\t\t\t\t\t\t\tAND SUM([wait_time_ms]) > 60000;\n\t\t\t\t\t\tEND;\n\n\n\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT 1\n\t\t\t\t\t\t\t\t\t\t FROM   #SkipChecks\n\t\t\t\t\t\t\t\t\t\t WHERE  DatabaseName IS NULL AND CheckID = 111 )\n\t\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 111) WITH NOWAIT;\n\n\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\tSELECT  111 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t50 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t'Reliability' AS FindingGroup ,\n\t\t\t\t\t\t\t\t\t\t\t'Possibly Broken Log Shipping'  AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\td.[name] ,\n\t\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/shipping' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\td.[name] + ' is in a restoring state, but has not had a backup applied in the last two days. This is a possible indication of a broken transaction log shipping setup.'\n\t\t\t\t\t\t\t\t\t\t\tFROM [master].sys.databases d\n\t\t\t\t\t\t\t\t\t\t\tINNER JOIN [master].sys.database_mirroring dm ON d.database_id = dm.database_id\n\t\t\t\t\t\t\t\t\t\t\t\tAND dm.mirroring_role IS NULL\n\t\t\t\t\t\t\t\t\t\t\tWHERE ( d.[state] = 1\n\t\t\t\t\t\t\t\t\t\t\tOR (d.[state] = 0 AND d.[is_in_standby] = 1) )\n\t\t\t\t\t\t\t\t\t\t\tAND NOT EXISTS(SELECT * FROM msdb.dbo.restorehistory rh\n\t\t\t\t\t\t\t\t\t\t\tINNER JOIN msdb.dbo.backupset bs ON rh.backup_set_id = bs.backup_set_id\n\t\t\t\t\t\t\t\t\t\t\tWHERE d.[name] COLLATE SQL_Latin1_General_CP1_CI_AS = rh.destination_database_name COLLATE SQL_Latin1_General_CP1_CI_AS\n\t\t\t\t\t\t\t\t\t\t\tAND rh.restore_date >= DATEADD(dd, -2, GETDATE()));\n\n\t\t\t\t\t\tEND;\n\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 112 )\n\t\t\t\t\t\t\t\t\tAND EXISTS (SELECT * FROM master.sys.all_objects WHERE name = 'change_tracking_databases')\n\t\t\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 112) WITH NOWAIT;\n\n\t\t\t\t\t\t\t\tSET @StringToExecute = 'INSERT INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t(CheckID,\n\t\t\t\t\t\t\t\t\tPriority,\n\t\t\t\t\t\t\t\t\tFindingsGroup,\n\t\t\t\t\t\t\t\t\tFinding,\n\t\t\t\t\t\t\t\t\tURL,\n\t\t\t\t\t\t\t\t\tDetails)\n\t\t\t\t\t\t\t  SELECT 112 AS CheckID,\n\t\t\t\t\t\t\t  100 AS Priority,\n\t\t\t\t\t\t\t  ''Performance'' AS FindingsGroup,\n\t\t\t\t\t\t\t  ''Change Tracking Enabled'' AS Finding,\n\t\t\t\t\t\t\t  ''https://BrentOzar.com/go/tracking'' AS URL,\n\t\t\t\t\t\t\t  ( d.[name] + '' has change tracking enabled. This is not a default setting, and it has some performance overhead. It keeps track of changes to rows in tables that have change tracking turned on.'' ) AS Details FROM sys.change_tracking_databases AS ctd INNER JOIN sys.databases AS d ON ctd.database_id = d.database_id OPTION (RECOMPILE)';\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\t\tEND;\n\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT 1\n\t\t\t\t\t\t\t\t\t\t FROM   #SkipChecks\n\t\t\t\t\t\t\t\t\t\t WHERE  DatabaseName IS NULL AND CheckID = 116 )\n\t\t\t\t\t\t\t\t\tAND EXISTS (SELECT * FROM msdb.sys.all_columns WHERE name = 'compressed_backup_size')\n\t\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 116) WITH NOWAIT\n\n\t\t\t\t\t\t\tSET @StringToExecute = 'INSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\tSELECT  116 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t200 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t''Informational'' AS FindingGroup ,\n\t\t\t\t\t\t\t\t\t\t\t''Backup Compression Default Off''  AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t''https://BrentOzar.com/go/backup'' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\t''Uncompressed full backups have happened recently, and backup compression is not turned on at the server level. Backup compression is included with SQL Server 2008R2 & newer, even in Standard Edition. We recommend turning backup compression on by default so that ad-hoc backups will get compressed.''\n\t\t\t\t\t\t\t\t\t\t\tFROM sys.configurations\n\t\t\t\t\t\t\t\t\t\t\tWHERE configuration_id = 1579 AND CAST(value_in_use AS INT) = 0\n                                            AND EXISTS (SELECT * FROM msdb.dbo.backupset WHERE backup_size = compressed_backup_size AND type = ''D'' AND backup_finish_date >= DATEADD(DD, -14, GETDATE())) OPTION (RECOMPILE);';\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 117 )\n\t\t\t\t\t\t\t\t\tAND EXISTS (SELECT * FROM master.sys.all_objects WHERE name = 'dm_exec_query_resource_semaphores')\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 117) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tSET @StringToExecute = 'IF 0 < (SELECT SUM([forced_grant_count]) FROM sys.dm_exec_query_resource_semaphores WHERE [forced_grant_count] IS NOT NULL)\n\t\t\t\t\t\t\t\tINSERT INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t(CheckID,\n\t\t\t\t\t\t\t\t\tPriority,\n\t\t\t\t\t\t\t\t\tFindingsGroup,\n\t\t\t\t\t\t\t\t\tFinding,\n\t\t\t\t\t\t\t\t\tURL,\n\t\t\t\t\t\t\t\t\tDetails)\n\t\t\t\t\t\t\t  SELECT 117 AS CheckID,\n\t\t\t\t\t\t\t  100 AS Priority,\n\t\t\t\t\t\t\t  ''Performance'' AS FindingsGroup,\n\t\t\t\t\t\t\t  ''Memory Pressure Affecting Queries'' AS Finding,\n\t\t\t\t\t\t\t  ''https://BrentOzar.com/go/grants'' AS URL,\n\t\t\t\t\t\t\t  CAST(SUM(forced_grant_count) AS NVARCHAR(100)) + '' forced grants reported in the DMV sys.dm_exec_query_resource_semaphores, indicating memory pressure has affected query runtimes.''\n\t\t\t\t\t\t\t  FROM sys.dm_exec_query_resource_semaphores WHERE [forced_grant_count] IS NOT NULL OPTION (RECOMPILE);';\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\t\tEND;\n\n\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 124 )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 124) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tINSERT INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t(CheckID,\n\t\t\t\t\t\t\t\t\tPriority,\n\t\t\t\t\t\t\t\t\tFindingsGroup,\n\t\t\t\t\t\t\t\t\tFinding,\n\t\t\t\t\t\t\t\t\tURL,\n\t\t\t\t\t\t\t\t\tDetails)\n\t\t\t\t\t\t\t\tSELECT 124, 150, 'Performance', 'Deadlocks Happening Daily', 'https://BrentOzar.com/go/deadlocks',\n\t\t\t\t\t\t\t\t\tCAST(p.cntr_value AS NVARCHAR(100)) + ' deadlocks recorded since startup. To find them, run sp_BlitzLock.' AS Details\n\t\t\t\t\t\t\t\tFROM sys.dm_os_performance_counters p\n\t\t\t\t\t\t\t\t\tINNER JOIN sys.databases d ON d.name = 'tempdb'\n\t\t\t\t\t\t\t\tWHERE RTRIM(p.counter_name) = 'Number of Deadlocks/sec'\n\t\t\t\t\t\t\t\t\tAND RTRIM(p.instance_name) = '_Total'\n\t\t\t\t\t\t\t\t\tAND p.cntr_value > 0\n\t\t\t\t\t\t\t\t\tAND (1.0 * p.cntr_value / NULLIF(datediff(DD,create_date,CURRENT_TIMESTAMP),0)) > 10;\n\t\t\t\t\t\t\tEND;\n\n\n\t\t\t\t\t\tIF DATEADD(mi, -15, GETDATE()) < (SELECT TOP 1 creation_time FROM sys.dm_exec_query_stats ORDER BY creation_time)\n\t\t\t\t\t\tAND NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 125 )\n\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 125) WITH NOWAIT;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tINSERT INTO #BlitzResults\n\t\t\t\t\t\t\t\t(CheckID,\n\t\t\t\t\t\t\t\tPriority,\n\t\t\t\t\t\t\t\tFindingsGroup,\n\t\t\t\t\t\t\t\tFinding,\n\t\t\t\t\t\t\t\tURL,\n\t\t\t\t\t\t\t\tDetails)\n\t\t\t\t\t\t\tSELECT TOP 1 125, 10, 'Performance', 'Plan Cache Erased Recently', 'https://BrentOzar.com/askbrent/plan-cache-erased-recently/',\n\t\t\t\t\t\t\t\t'The oldest query in the plan cache was created at ' + CAST(creation_time AS NVARCHAR(50)) + '. Someone ran DBCC FREEPROCCACHE, restarted SQL Server, or it is under horrific memory pressure.'\n\t\t\t\t\t\t\tFROM sys.dm_exec_query_stats WITH (NOLOCK)\n\t\t\t\t\t\t\tORDER BY creation_time;\t\n\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\tIF EXISTS (SELECT * FROM sys.configurations WHERE name = 'priority boost' AND (value = 1 OR value_in_use = 1))\n\t\t\t\t\t\tAND NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 126 )\n\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 126) WITH NOWAIT;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tINSERT INTO #BlitzResults\n\t\t\t\t\t\t\t\t(CheckID,\n\t\t\t\t\t\t\t\tPriority,\n\t\t\t\t\t\t\t\tFindingsGroup,\n\t\t\t\t\t\t\t\tFinding,\n\t\t\t\t\t\t\t\tURL,\n\t\t\t\t\t\t\t\tDetails)\n\t\t\t\t\t\t\tVALUES(126, 5, 'Reliability', 'Priority Boost Enabled', 'https://BrentOzar.com/go/priorityboost/',\n\t\t\t\t\t\t\t\t'Priority Boost sounds awesome, but it can actually cause your SQL Server to crash.');\n\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 128 )\n\t\t\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\t\tIF (@ProductVersionMajor = 12 AND @ProductVersionMinor < 5000) OR\n\t\t\t\t\t\t\t   (@ProductVersionMajor = 11 AND @ProductVersionMinor < 6020) OR\n\t\t\t\t\t\t\t   (@ProductVersionMajor = 10.5 AND @ProductVersionMinor < 6000) OR\n\t\t\t\t\t\t\t   (@ProductVersionMajor = 10 AND @ProductVersionMinor < 6000) OR\n\t\t\t\t\t\t\t   (@ProductVersionMajor = 9 /*AND @ProductVersionMinor <= 5000*/)\n\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 128) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tINSERT INTO #BlitzResults(CheckID, Priority, FindingsGroup, Finding, URL, Details)\n\t\t\t\t\t\t\t\t\tVALUES(128, 20, 'Reliability', 'Unsupported Build of SQL Server', 'https://BrentOzar.com/go/unsupported',\n\t\t\t\t\t\t\t\t\t\t'Version ' + CAST(@ProductVersionMajor AS VARCHAR(100)) + '.' + \n\t\t\t\t\t\t\t\t\t\tCASE WHEN @ProductVersionMajor > 9 THEN\n\t\t\t\t\t\t\t\t\t\tCAST(@ProductVersionMinor AS VARCHAR(100)) + ' is no longer supported by Microsoft. You need to apply a service pack.'\n\t\t\t\t\t\t\t\t\t\tELSE ' is no longer support by Microsoft. You should be making plans to upgrade to a modern version of SQL Server.' END);\n\t\t\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\t\tEND;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t/* Reliability - Dangerous Build of SQL Server (Corruption) */\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 129 )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\tIF (@ProductVersionMajor = 11 AND @ProductVersionMinor >= 3000 AND @ProductVersionMinor <= 3436) OR\n\t\t\t\t\t\t\t   (@ProductVersionMajor = 11 AND @ProductVersionMinor = 5058) OR\n\t\t\t\t\t\t\t   (@ProductVersionMajor = 12 AND @ProductVersionMinor >= 2000 AND @ProductVersionMinor <= 2342)\n\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 129) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tINSERT INTO #BlitzResults(CheckID, Priority, FindingsGroup, Finding, URL, Details)\n\t\t\t\t\t\t\t\t\tVALUES(129, 20, 'Reliability', 'Dangerous Build of SQL Server (Corruption)', 'http://sqlperformance.com/2014/06/sql-indexes/hotfix-sql-2012-rebuilds',\n\t\t\t\t\t\t\t\t\t\t'There are dangerous known bugs with version ' + CAST(@ProductVersionMajor AS VARCHAR(100)) + '.' + CAST(@ProductVersionMinor AS VARCHAR(100)) + '. Check the URL for details and apply the right service pack or hotfix.');\n\t\t\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\t/* Reliability - Dangerous Build of SQL Server (Security) */\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 157 )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\tIF (@ProductVersionMajor = 10 AND @ProductVersionMinor >= 5500 AND @ProductVersionMinor <= 5512) OR\n\t\t\t\t\t\t\t   (@ProductVersionMajor = 10 AND @ProductVersionMinor >= 5750 AND @ProductVersionMinor <= 5867) OR\n\t\t\t\t\t\t\t   (@ProductVersionMajor = 10.5 AND @ProductVersionMinor >= 4000 AND @ProductVersionMinor <= 4017) OR\n\t\t\t\t\t\t\t   (@ProductVersionMajor = 10.5 AND @ProductVersionMinor >= 4251 AND @ProductVersionMinor <= 4319) OR\n\t\t\t\t\t\t\t   (@ProductVersionMajor = 11 AND @ProductVersionMinor >= 3000 AND @ProductVersionMinor <= 3129) OR\n\t\t\t\t\t\t\t   (@ProductVersionMajor = 11 AND @ProductVersionMinor >= 3300 AND @ProductVersionMinor <= 3447) OR\n\t\t\t\t\t\t\t   (@ProductVersionMajor = 12 AND @ProductVersionMinor >= 2000 AND @ProductVersionMinor <= 2253) OR\n\t\t\t\t\t\t\t   (@ProductVersionMajor = 12 AND @ProductVersionMinor >= 2300 AND @ProductVersionMinor <= 2370)\n\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 157) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tINSERT INTO #BlitzResults(CheckID, Priority, FindingsGroup, Finding, URL, Details)\n\t\t\t\t\t\t\t\t\tVALUES(157, 20, 'Reliability', 'Dangerous Build of SQL Server (Security)', 'https://technet.microsoft.com/en-us/library/security/MS14-044',\n\t\t\t\t\t\t\t\t\t\t'There are dangerous known bugs with version ' + CAST(@ProductVersionMajor AS VARCHAR(100)) + '.' + CAST(@ProductVersionMinor AS VARCHAR(100)) + '. Check the URL for details and apply the right service pack or hotfix.');\n\t\t\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\t\tEND;\n\t\t\t\t\t\t\n\t\t\t\t\t\t/* Check if SQL 2016 Standard Edition but not SP1 */\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 189 )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\tIF (@ProductVersionMajor = 13 AND @ProductVersionMinor < 4001 AND @@VERSION LIKE '%Standard Edition%') \n\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 189) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tINSERT INTO #BlitzResults(CheckID, Priority, FindingsGroup, Finding, URL, Details)\n\t\t\t\t\t\t\t\t\tVALUES(189, 100, 'Features', 'Missing Features', 'https://blogs.msdn.microsoft.com/sqlreleaseservices/sql-server-2016-service-pack-1-sp1-released/',\n\t\t\t\t\t\t\t\t\t\t'SQL 2016 Standard Edition is being used but not Service Pack 1. Check the URL for a list of Enterprise Features that are included in Standard Edition as of SP1.');\n\t\t\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\t\tEND;\t\t\t\t\t\t\n\n                        /* Performance - High Memory Use for In-Memory OLTP (Hekaton) */\n                        IF NOT EXISTS ( SELECT  1\n\t\t\t\t                        FROM    #SkipChecks\n\t\t\t\t                        WHERE   DatabaseName IS NULL AND CheckID = 145 )\n\t                        AND EXISTS ( SELECT *\n\t\t\t\t\t                        FROM   sys.all_objects o\n\t\t\t\t\t                        WHERE  o.name = 'dm_db_xtp_table_memory_stats' )\n\t                        BEGIN\n\t\t                        \n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 145) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tSET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)\n\t\t\t                        SELECT 145 AS CheckID,\n\t\t\t                        10 AS Priority,\n\t\t\t                        ''Performance'' AS FindingsGroup,\n\t\t\t                        ''High Memory Use for In-Memory OLTP (Hekaton)'' AS Finding,\n\t\t\t                        ''https://BrentOzar.com/go/hekaton'' AS URL,\n\t\t\t                        CAST(CAST((SUM(mem.pages_kb / 1024.0) / CAST(value_in_use AS INT) * 100) AS INT) AS NVARCHAR(100)) + ''% of your '' + CAST(CAST((CAST(value_in_use AS DECIMAL(38,1)) / 1024) AS MONEY) AS NVARCHAR(100)) + ''GB of your max server memory is being used for in-memory OLTP tables (Hekaton). Microsoft recommends having 2X your Hekaton table space available in memory just for Hekaton, with a max of 250GB of in-memory data regardless of your server memory capacity.'' AS Details\n\t\t\t                        FROM sys.configurations c INNER JOIN sys.dm_os_memory_clerks mem ON mem.type = ''MEMORYCLERK_XTP''\n                                    WHERE c.name = ''max server memory (MB)''\n                                    GROUP BY c.value_in_use\n                                    HAVING CAST(value_in_use AS DECIMAL(38,2)) * .25 < SUM(mem.pages_kb / 1024.0)\n                                      OR SUM(mem.pages_kb / 1024.0) > 250000 OPTION (RECOMPILE)';\n\t\t                        \n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t                        END;\n\n\n                        /* Performance - In-Memory OLTP (Hekaton) In Use */\n                        IF NOT EXISTS ( SELECT  1\n\t\t\t\t                        FROM    #SkipChecks\n\t\t\t\t                        WHERE   DatabaseName IS NULL AND CheckID = 146 )\n\t                        AND EXISTS ( SELECT *\n\t\t\t\t\t                        FROM   sys.all_objects o\n\t\t\t\t\t                        WHERE  o.name = 'dm_db_xtp_table_memory_stats' )\n\t                        BEGIN\n\t\t                        \n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 146) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tSET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)\n\t\t\t                        SELECT 146 AS CheckID,\n\t\t\t                        200 AS Priority,\n\t\t\t                        ''Performance'' AS FindingsGroup,\n\t\t\t                        ''In-Memory OLTP (Hekaton) In Use'' AS Finding,\n\t\t\t                        ''https://BrentOzar.com/go/hekaton'' AS URL,\n\t\t\t                        CAST(CAST((SUM(mem.pages_kb / 1024.0) / CAST(value_in_use AS INT) * 100) AS INT) AS NVARCHAR(100)) + ''% of your '' + CAST(CAST((CAST(value_in_use AS DECIMAL(38,1)) / 1024) AS MONEY) AS NVARCHAR(100)) + ''GB of your max server memory is being used for in-memory OLTP tables (Hekaton).'' AS Details\n\t\t\t                        FROM sys.configurations c INNER JOIN sys.dm_os_memory_clerks mem ON mem.type = ''MEMORYCLERK_XTP''\n                                    WHERE c.name = ''max server memory (MB)''\n                                    GROUP BY c.value_in_use\n                                    HAVING SUM(mem.pages_kb / 1024.0) > 10 OPTION (RECOMPILE)';\n\t\t                        \n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t                        END;\n\n                        /* In-Memory OLTP (Hekaton) - Transaction Errors */\n                        IF NOT EXISTS ( SELECT  1\n\t\t\t\t                        FROM    #SkipChecks\n\t\t\t\t                        WHERE   DatabaseName IS NULL AND CheckID = 147 )\n\t                        AND EXISTS ( SELECT *\n\t\t\t\t\t                        FROM   sys.all_objects o\n\t\t\t\t\t                        WHERE  o.name = 'dm_xtp_transaction_stats' )\n\t                        BEGIN\n\t\t                        \n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 147) WITH NOWAIT\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tSET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)\n\t\t\t                        SELECT 147 AS CheckID,\n\t\t\t                        100 AS Priority,\n\t\t\t                        ''In-Memory OLTP (Hekaton)'' AS FindingsGroup,\n\t\t\t                        ''Transaction Errors'' AS Finding,\n\t\t\t                        ''https://BrentOzar.com/go/hekaton'' AS URL,\n\t\t\t                        ''Since restart: '' + CAST(validation_failures AS NVARCHAR(100)) + '' validation failures, '' + CAST(dependencies_failed AS NVARCHAR(100)) + '' dependency failures, '' + CAST(write_conflicts AS NVARCHAR(100)) + '' write conflicts, '' + CAST(unique_constraint_violations AS NVARCHAR(100)) + '' unique constraint violations.'' AS Details\n\t\t\t                        FROM sys.dm_xtp_transaction_stats\n                                    WHERE validation_failures <> 0\n                                            OR dependencies_failed <> 0\n                                            OR write_conflicts <> 0\n                                            OR unique_constraint_violations <> 0 OPTION (RECOMPILE);';\n\t\t                        \n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t                        END;\n\n\n\n                        /* Reliability - Database Files on Network File Shares */\n                        IF NOT EXISTS ( SELECT  1\n\t\t\t\t                        FROM    #SkipChecks\n\t\t\t\t                        WHERE   DatabaseName IS NULL AND CheckID = 148 )\n\t                        BEGIN\n\t\t                        \n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 148) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t                        ( CheckID ,\n\t\t\t\t\t                        DatabaseName ,\n\t\t\t\t\t                        Priority ,\n\t\t\t\t\t                        FindingsGroup ,\n\t\t\t\t\t                        Finding ,\n\t\t\t\t\t                        URL ,\n\t\t\t\t\t                        Details\n\t\t\t\t                        )\n\t\t\t\t                        SELECT DISTINCT 148 AS CheckID ,\n\t\t\t\t\t\t                        d.[name] AS DatabaseName ,\n\t\t\t\t\t\t                        170 AS Priority ,\n\t\t\t\t\t\t                        'Reliability' AS FindingsGroup ,\n\t\t\t\t\t\t                        'Database Files on Network File Shares' AS Finding ,\n\t\t\t\t\t\t                        'https://BrentOzar.com/go/nas' AS URL ,\n\t\t\t\t\t\t                        ( 'Files for this database are on: ' + LEFT(mf.physical_name, 30)) AS Details\n\t\t\t\t                        FROM    sys.databases d\n                                          INNER JOIN sys.master_files mf ON d.database_id = mf.database_id\n\t\t\t\t                        WHERE mf.physical_name LIKE '\\\\%'\n\t\t\t\t\t\t                        AND d.name NOT IN ( SELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t\t\t\t                        DatabaseName\n\t\t\t\t\t\t\t\t\t\t\t                        FROM    #SkipChecks \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHERE CheckID IS NULL OR CheckID = 148);\n\t                        END;\n\n                        /* Reliability - Database Files Stored in Azure */\n                        IF NOT EXISTS ( SELECT  1\n\t\t\t\t                        FROM    #SkipChecks\n\t\t\t\t                        WHERE   DatabaseName IS NULL AND CheckID = 149 )\n\t                        BEGIN\n\t\t                        \n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 149) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t                        ( CheckID ,\n\t\t\t\t\t                        DatabaseName ,\n\t\t\t\t\t                        Priority ,\n\t\t\t\t\t                        FindingsGroup ,\n\t\t\t\t\t                        Finding ,\n\t\t\t\t\t                        URL ,\n\t\t\t\t\t                        Details\n\t\t\t\t                        )\n\t\t\t\t                        SELECT DISTINCT 149 AS CheckID ,\n\t\t\t\t\t\t                        d.[name] AS DatabaseName ,\n\t\t\t\t\t\t                        170 AS Priority ,\n\t\t\t\t\t\t                        'Reliability' AS FindingsGroup ,\n\t\t\t\t\t\t                        'Database Files Stored in Azure' AS Finding ,\n\t\t\t\t\t\t                        'https://BrentOzar.com/go/azurefiles' AS URL ,\n\t\t\t\t\t\t                        ( 'Files for this database are on: ' + LEFT(mf.physical_name, 30)) AS Details\n\t\t\t\t                        FROM    sys.databases d\n                                          INNER JOIN sys.master_files mf ON d.database_id = mf.database_id\n\t\t\t\t                        WHERE mf.physical_name LIKE 'http://%'\n\t\t\t\t\t\t                        AND d.name NOT IN ( SELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t\t\t\t                        DatabaseName\n\t\t\t\t\t\t\t\t\t\t\t                        FROM    #SkipChecks \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHERE CheckID IS NULL OR CheckID = 149);\n\t                        END;\n\n\n                        /* Reliability - Errors Logged Recently in the Default Trace */\n                        \n\t\t\t\t\t\t/* First, let's check that there aren't any issues with the trace files */\n\t\t\t\t\t\tBEGIN TRY\n\t\t\t\t\t\t\n\t\t\t\t\t\tINSERT INTO #fnTraceGettable\n\t\t\t\t\t\t\t(\tTextData ,\n\t\t\t\t\t\t\t\tDatabaseName ,\n\t\t\t\t\t\t\t\tEventClass ,\n\t\t\t\t\t\t\t\tSeverity ,\n\t\t\t\t\t\t\t\tStartTime ,\n\t\t\t\t\t\t\t\tEndTime ,\n\t\t\t\t\t\t\t\tDuration ,\n\t\t\t\t\t\t\t\tNTUserName ,\n\t\t\t\t\t\t\t\tNTDomainName ,\n\t\t\t\t\t\t\t\tHostName ,\n\t\t\t\t\t\t\t\tApplicationName ,\n\t\t\t\t\t\t\t\tLoginName ,\n\t\t\t\t\t\t\t\tDBUserName\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tSELECT TOP 20000\n\t\t\t\t\t\t\t\tCONVERT(NVARCHAR(4000),t.TextData) ,\n\t\t\t\t\t\t\t\tt.DatabaseName ,\n\t\t\t\t\t\t\t\tt.EventClass ,\n\t\t\t\t\t\t\t\tt.Severity ,\n\t\t\t\t\t\t\t\tt.StartTime ,\n\t\t\t\t\t\t\t\tt.EndTime ,\n\t\t\t\t\t\t\t\tt.Duration ,\n\t\t\t\t\t\t\t\tt.NTUserName ,\n\t\t\t\t\t\t\t\tt.NTDomainName ,\n\t\t\t\t\t\t\t\tt.HostName ,\n\t\t\t\t\t\t\t\tt.ApplicationName ,\n\t\t\t\t\t\t\t\tt.LoginName ,\n\t\t\t\t\t\t\t\tt.DBUserName\n\t\t\t\t\t\t\tFROM sys.fn_trace_gettable(@base_tracefilename, DEFAULT) t\n\t\t\t\t\t\t\tWHERE\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\tt.EventClass = 22\n\t\t\t\t\t\t\t\tAND t.Severity >= 17\n\t\t\t\t\t\t\t\tAND t.StartTime > DATEADD(dd, -30, GETDATE())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tOR\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t    t.EventClass IN (92, 93)\n                                AND t.StartTime > DATEADD(dd, -30, GETDATE())\n                                AND t.Duration > 15000000\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tOR\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\tt.EventClass IN (94, 95, 116)\n\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\t\tSET @TraceFileIssue = 0\n\n\t\t\t\t\t\tEND TRY\n\t\t\t\t\t\tBEGIN CATCH\n\n\t\t\t\t\t\t\tSET @TraceFileIssue = 1\n\t\t\t\t\t\t\n\t\t\t\t\t\tEND CATCH\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tIF @TraceFileIssue = 1\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t                        FROM    #SkipChecks\n\t\t\t\t                        WHERE   DatabaseName IS NULL AND CheckID = 199 )\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t            ( CheckID ,\n\t\t\t\t\t\t\t\t                DatabaseName ,\n\t\t\t\t\t\t\t\t                Priority ,\n\t\t\t\t\t\t\t\t                FindingsGroup ,\n\t\t\t\t\t\t\t\t                Finding ,\n\t\t\t\t\t\t\t\t                URL ,\n\t\t\t\t\t\t\t\t                Details\n\t\t\t\t\t\t\t\t            )\n\t\t\t\t\t\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t\t\t\t\t\t\t'199' AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t\t'' AS DatabaseName ,\n\t\t\t\t\t\t\t\t\t\t\t\t50 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t\t'Reliability' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t\t'There Is An Error With The Default Trace' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/defaulttrace' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\t\t'Somebody has been messing with your trace files. Check the files are present at ' + @base_tracefilename AS Details\n\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t                        FROM    #SkipChecks\n\t\t\t\t                        WHERE   DatabaseName IS NULL AND CheckID = 150 )\n                            AND @base_tracefilename IS NOT NULL\n\t\t\t\t\t\t\tAND @TraceFileIssue = 0\n\t                        BEGIN\n\n\t\t                        IF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 150) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t                        ( CheckID ,\n\t\t\t\t\t                        DatabaseName ,\n\t\t\t\t\t                        Priority ,\n\t\t\t\t\t                        FindingsGroup ,\n\t\t\t\t\t                        Finding ,\n\t\t\t\t\t                        URL ,\n\t\t\t\t\t                        Details\n\t\t\t\t                        )\n\t\t\t\t                        SELECT DISTINCT 150 AS CheckID ,\n\t\t\t\t\t                            t.DatabaseName,\n\t\t\t\t\t\t                        50 AS Priority ,\n\t\t\t\t\t\t                        'Reliability' AS FindingsGroup ,\n\t\t\t\t\t\t                        'Errors Logged Recently in the Default Trace' AS Finding ,\n\t\t\t\t\t\t                        'https://BrentOzar.com/go/defaulttrace' AS URL ,\n\t\t\t\t\t\t                         CAST(t.TextData AS NVARCHAR(4000)) AS Details\n                                        FROM    #fnTraceGettable t\n                                        WHERE t.EventClass = 22\n                                          /* Removed these as they're unnecessary, we filter this when inserting data into #fnTraceGettable */\n\t\t\t\t\t\t\t\t\t\t  --AND t.Severity >= 17\n                                          --AND t.StartTime > DATEADD(dd, -30, GETDATE());\n\t                        END;\n\n\n                        /* Performance - File Growths Slow */\n                        IF NOT EXISTS ( SELECT  1\n\t\t\t\t                        FROM    #SkipChecks\n\t\t\t\t                        WHERE   DatabaseName IS NULL AND CheckID = 151 )\n                            AND @base_tracefilename IS NOT NULL\n\t\t\t\t\t\t\tAND @TraceFileIssue = 0\n\t                        BEGIN\n\t\t                        \n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 151) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t                        ( CheckID ,\n\t\t\t\t\t                        DatabaseName ,\n\t\t\t\t\t                        Priority ,\n\t\t\t\t\t                        FindingsGroup ,\n\t\t\t\t\t                        Finding ,\n\t\t\t\t\t                        URL ,\n\t\t\t\t\t                        Details\n\t\t\t\t                        )\n\t\t\t\t                        SELECT DISTINCT 151 AS CheckID ,\n\t\t\t\t\t                            t.DatabaseName,\n\t\t\t\t\t\t                        50 AS Priority ,\n\t\t\t\t\t\t                        'Performance' AS FindingsGroup ,\n\t\t\t\t\t\t                        'File Growths Slow' AS Finding ,\n\t\t\t\t\t\t                        'https://BrentOzar.com/go/filegrowth' AS URL ,\n\t\t\t\t\t\t                        CAST(COUNT(*) AS NVARCHAR(100)) + ' growths took more than 15 seconds each. Consider setting file autogrowth to a smaller increment.' AS Details\n                                        FROM    #fnTraceGettable t\n                                        WHERE t.EventClass IN (92, 93)\n                                          /* Removed these as they're unnecessary, we filter this when inserting data into #fnTraceGettable */\n\t\t\t\t\t\t\t\t\t\t  --AND t.StartTime > DATEADD(dd, -30, GETDATE())\n                                          --AND t.Duration > 15000000\n                                        GROUP BY t.DatabaseName\n                                        HAVING COUNT(*) > 1;\n\t                        END;\n\n\n                        /* Performance - Many Plans for One Query */\n                        IF NOT EXISTS ( SELECT  1\n\t\t\t\t                        FROM    #SkipChecks\n\t\t\t\t                        WHERE   DatabaseName IS NULL AND CheckID = 160 )\n                            AND EXISTS (SELECT * FROM sys.all_columns WHERE name = 'query_hash')\n\t                        BEGIN\n\t\t                        \n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 160) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tSET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)\n\t\t\t                        SELECT TOP 1 160 AS CheckID,\n\t\t\t                        100 AS Priority,\n\t\t\t                        ''Performance'' AS FindingsGroup,\n\t\t\t                        ''Many Plans for One Query'' AS Finding,\n\t\t\t                        ''https://BrentOzar.com/go/parameterization'' AS URL,\n\t\t\t                        CAST(COUNT(DISTINCT plan_handle) AS NVARCHAR(50)) + '' plans are present for a single query in the plan cache - meaning we probably have parameterization issues.'' AS Details\n\t\t\t                        FROM sys.dm_exec_query_stats qs\n                                    CROSS APPLY sys.dm_exec_plan_attributes(qs.plan_handle) pa\n                                    WHERE pa.attribute = ''dbid''\n                                    GROUP BY qs.query_hash, pa.value\n                                    HAVING COUNT(DISTINCT plan_handle) > 50\n\t\t\t\t\t\t\t\t\tORDER BY COUNT(DISTINCT plan_handle) DESC OPTION (RECOMPILE);';\n\t\t                        \n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t                        END;\n\n\n                        /* Performance - High Number of Cached Plans */\n                        IF NOT EXISTS ( SELECT  1\n\t\t\t\t                        FROM    #SkipChecks\n\t\t\t\t                        WHERE   DatabaseName IS NULL AND CheckID = 161 )\n\t                        BEGIN\n\t\t                        \n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 161) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tSET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)\n\t\t\t                        SELECT TOP 1 161 AS CheckID,\n\t\t\t                        100 AS Priority,\n\t\t\t                        ''Performance'' AS FindingsGroup,\n\t\t\t                        ''High Number of Cached Plans'' AS Finding,\n\t\t\t                        ''https://BrentOzar.com/go/planlimits'' AS URL,\n\t\t\t                        ''Your server configuration is limited to '' + CAST(ht.buckets_count * 4 AS VARCHAR(20)) + '' '' + ht.name + '', and you are currently caching '' + CAST(cc.entries_count AS VARCHAR(20)) + ''.'' AS Details\n\t\t\t                        FROM sys.dm_os_memory_cache_hash_tables ht\n\t\t\t                        INNER JOIN sys.dm_os_memory_cache_counters cc ON ht.name = cc.name AND ht.type = cc.type\n\t\t\t                        where ht.name IN ( ''SQL Plans'' , ''Object Plans'' , ''Bound Trees'' )\n\t\t\t                        AND cc.entries_count >= (3 * ht.buckets_count) OPTION (RECOMPILE)';\n\t\t                        \n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t                        END;\n\n\n\t\t\t\t\t\t/* Performance - Too Much Free Memory */\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 165 )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 165) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tINSERT INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t(CheckID,\n\t\t\t\t\t\t\t\t\tPriority,\n\t\t\t\t\t\t\t\t\tFindingsGroup,\n\t\t\t\t\t\t\t\t\tFinding,\n\t\t\t\t\t\t\t\t\tURL,\n\t\t\t\t\t\t\t\t\tDetails)\n\t\t\t\t\t\t\t\tSELECT 165, 50, 'Performance', 'Too Much Free Memory', 'https://BrentOzar.com/go/freememory',\n\t\t\t\t\t\t\t\t\tCAST((CAST(cFree.cntr_value AS BIGINT) / 1024 / 1024 ) AS NVARCHAR(100)) + N'GB of free memory inside SQL Server''s buffer pool, which is ' + CAST((CAST(cTotal.cntr_value AS BIGINT) / 1024 / 1024) AS NVARCHAR(100)) + N'GB. You would think lots of free memory would be good, but check out the URL for more information.' AS Details\n\t\t\t\t\t\t\t\tFROM sys.dm_os_performance_counters cFree\n\t\t\t\t\t\t\t\tINNER JOIN sys.dm_os_performance_counters cTotal ON cTotal.object_name LIKE N'%Memory Manager%'\n\t\t\t\t\t\t\t\t\tAND cTotal.counter_name = N'Total Server Memory (KB)                                                                                                        '\n\t\t\t\t\t\t\t\tWHERE cFree.object_name LIKE N'%Memory Manager%'\n\t\t\t\t\t\t\t\t\tAND cFree.counter_name = N'Free Memory (KB)                                                                                                                '\n\t\t\t\t\t\t\t\t\tAND CAST(cTotal.cntr_value AS BIGINT) > 20480000000\n\t\t\t\t\t\t\t\t\tAND CAST(cTotal.cntr_value AS BIGINT) * .3 <= CAST(cFree.cntr_value AS BIGINT)\n                                    AND CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) NOT LIKE '%Standard%';\n\n\t\t\t\t\t\t\tEND;\n\n\n                        /* Outdated sp_Blitz - sp_Blitz is Over 6 Months Old */\n                        IF NOT EXISTS ( SELECT  1\n\t\t\t\t                        FROM    #SkipChecks\n\t\t\t\t                        WHERE   DatabaseName IS NULL AND CheckID = 155 )\n\t\t\t\t           AND DATEDIFF(MM, @VersionDate, GETDATE()) > 6\n\t                        BEGIN\n\t\t                        \n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 155) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t                        ( CheckID ,\n\t\t\t\t\t                        Priority ,\n\t\t\t\t\t                        FindingsGroup ,\n\t\t\t\t\t                        Finding ,\n\t\t\t\t\t                        URL ,\n\t\t\t\t\t                        Details\n\t\t\t\t                        )\n\t\t\t\t                        SELECT 155 AS CheckID ,\n\t\t\t\t\t\t                        0 AS Priority ,\n\t\t\t\t\t\t                        'Outdated sp_Blitz' AS FindingsGroup ,\n\t\t\t\t\t\t                        'sp_Blitz is Over 6 Months Old' AS Finding ,\n\t\t\t\t\t\t                        'http://FirstResponderKit.org/' AS URL ,\n\t\t\t\t\t\t                        'Some things get better with age, like fine wine and your T-SQL. However, sp_Blitz is not one of those things - time to go download the current one.' AS Details;\n\t                        END;\n\n\n\t\t\t\t\t\t/* Populate a list of database defaults. I'm doing this kind of oddly -\n\t\t\t\t\t\t    it reads like a lot of work, but this way it compiles & runs on all\n\t\t\t\t\t\t    versions of SQL Server.\n\t\t\t\t\t\t*/\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Generating database defaults.', 0, 1) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tINSERT INTO #DatabaseDefaults\n\t\t\t\t\t\t  SELECT 'is_supplemental_logging_enabled', 0, 131, 210, 'Supplemental Logging Enabled', 'https://BrentOzar.com/go/dbdefaults', NULL\n\t\t\t\t\t\t  FROM sys.all_columns \n\t\t\t\t\t\t  WHERE name = 'is_supplemental_logging_enabled' AND object_id = OBJECT_ID('sys.databases');\n\t\t\t\t\t\tINSERT INTO #DatabaseDefaults\n\t\t\t\t\t\t  SELECT 'snapshot_isolation_state', 0, 132, 210, 'Snapshot Isolation Enabled', 'https://BrentOzar.com/go/dbdefaults', NULL\n\t\t\t\t\t\t  FROM sys.all_columns \n\t\t\t\t\t\t  WHERE name = 'snapshot_isolation_state' AND object_id = OBJECT_ID('sys.databases');\n\t\t\t\t\t\tINSERT INTO #DatabaseDefaults\n\t\t\t\t\t\t  SELECT 'is_read_committed_snapshot_on', 0, 133, 210, 'Read Committed Snapshot Isolation Enabled', 'https://BrentOzar.com/go/dbdefaults', NULL\n\t\t\t\t\t\t  FROM sys.all_columns \n\t\t\t\t\t\t  WHERE name = 'is_read_committed_snapshot_on' AND object_id = OBJECT_ID('sys.databases');\n\t\t\t\t\t\tINSERT INTO #DatabaseDefaults\n\t\t\t\t\t\t  SELECT 'is_auto_create_stats_incremental_on', 0, 134, 210, 'Auto Create Stats Incremental Enabled', 'https://BrentOzar.com/go/dbdefaults', NULL\n\t\t\t\t\t\t  FROM sys.all_columns \n\t\t\t\t\t\t  WHERE name = 'is_auto_create_stats_incremental_on' AND object_id = OBJECT_ID('sys.databases');\n\t\t\t\t\t\tINSERT INTO #DatabaseDefaults\n\t\t\t\t\t\t  SELECT 'is_ansi_null_default_on', 0, 135, 210, 'ANSI NULL Default Enabled', 'https://BrentOzar.com/go/dbdefaults', NULL\n\t\t\t\t\t\t  FROM sys.all_columns \n\t\t\t\t\t\t  WHERE name = 'is_ansi_null_default_on' AND object_id = OBJECT_ID('sys.databases');\n\t\t\t\t\t\tINSERT INTO #DatabaseDefaults\n\t\t\t\t\t\t  SELECT 'is_recursive_triggers_on', 0, 136, 210, 'Recursive Triggers Enabled', 'https://BrentOzar.com/go/dbdefaults', NULL\n\t\t\t\t\t\t  FROM sys.all_columns \n\t\t\t\t\t\t  WHERE name = 'is_recursive_triggers_on' AND object_id = OBJECT_ID('sys.databases');\n\t\t\t\t\t\tINSERT INTO #DatabaseDefaults\n\t\t\t\t\t\t  SELECT 'is_trustworthy_on', 0, 137, 210, 'Trustworthy Enabled', 'https://BrentOzar.com/go/dbdefaults', NULL\n\t\t\t\t\t\t  FROM sys.all_columns \n\t\t\t\t\t\t  WHERE name = 'is_trustworthy_on' AND object_id = OBJECT_ID('sys.databases');\n\t\t\t\t\t\tINSERT INTO #DatabaseDefaults\n\t\t\t\t\t\t  SELECT 'is_parameterization_forced', 0, 138, 210, 'Forced Parameterization Enabled', 'https://BrentOzar.com/go/dbdefaults', NULL\n\t\t\t\t\t\t  FROM sys.all_columns \n\t\t\t\t\t\t  WHERE name = 'is_parameterization_forced' AND object_id = OBJECT_ID('sys.databases');\n\t\t\t\t\t\t/* Not alerting for this since we actually want it and we have a separate check for it:\n\t\t\t\t\t\tINSERT INTO #DatabaseDefaults\n\t\t\t\t\t\t  SELECT 'is_query_store_on', 0, 139, 210, 'Query Store Enabled', 'https://BrentOzar.com/go/dbdefaults', NULL\n\t\t\t\t\t\t  FROM sys.all_columns \n\t\t\t\t\t\t  WHERE name = 'is_query_store_on' AND object_id = OBJECT_ID('sys.databases');\n\t\t\t\t\t\t*/\n\t\t\t\t\t\tINSERT INTO #DatabaseDefaults\n\t\t\t\t\t\t  SELECT 'is_cdc_enabled', 0, 140, 210, 'Change Data Capture Enabled', 'https://BrentOzar.com/go/dbdefaults', NULL\n\t\t\t\t\t\t  FROM sys.all_columns \n\t\t\t\t\t\t  WHERE name = 'is_cdc_enabled' AND object_id = OBJECT_ID('sys.databases');\n\t\t\t\t\t\tINSERT INTO #DatabaseDefaults\n\t\t\t\t\t\t  SELECT 'containment', 0, 141, 210, 'Containment Enabled', 'https://BrentOzar.com/go/dbdefaults', NULL\n\t\t\t\t\t\t  FROM sys.all_columns \n\t\t\t\t\t\t  WHERE name = 'containment' AND object_id = OBJECT_ID('sys.databases');\n\t\t\t\t\t\tINSERT INTO #DatabaseDefaults\n\t\t\t\t\t\t  SELECT 'target_recovery_time_in_seconds', 0, 142, 210, 'Target Recovery Time Changed', 'https://BrentOzar.com/go/dbdefaults', NULL\n\t\t\t\t\t\t  FROM sys.all_columns \n\t\t\t\t\t\t  WHERE name = 'target_recovery_time_in_seconds' AND object_id = OBJECT_ID('sys.databases');\n\t\t\t\t\t\tINSERT INTO #DatabaseDefaults\n\t\t\t\t\t\t  SELECT 'delayed_durability', 0, 143, 210, 'Delayed Durability Enabled', 'https://BrentOzar.com/go/dbdefaults', NULL\n\t\t\t\t\t\t  FROM sys.all_columns \n\t\t\t\t\t\t  WHERE name = 'delayed_durability' AND object_id = OBJECT_ID('sys.databases');\n\t\t\t\t\t\tINSERT INTO #DatabaseDefaults\n\t\t\t\t\t\t  SELECT 'is_memory_optimized_elevate_to_snapshot_on', 0, 144, 210, 'Memory Optimized Enabled', 'https://BrentOzar.com/go/dbdefaults', NULL\n\t\t\t\t\t\t  FROM sys.all_columns \n\t\t\t\t\t\t  WHERE name = 'is_memory_optimized_elevate_to_snapshot_on' AND object_id = OBJECT_ID('sys.databases');\n\n\t\t\t\t\t\tDECLARE DatabaseDefaultsLoop CURSOR FOR\n\t\t\t\t\t\t  SELECT name, DefaultValue, CheckID, Priority, Finding, URL, Details\n\t\t\t\t\t\t  FROM #DatabaseDefaults;\n\n\t\t\t\t\t\tOPEN DatabaseDefaultsLoop;\n\t\t\t\t\t\tFETCH NEXT FROM DatabaseDefaultsLoop into @CurrentName, @CurrentDefaultValue, @CurrentCheckID, @CurrentPriority, @CurrentFinding, @CurrentURL, @CurrentDetails;\n\t\t\t\t\t\tWHILE @@FETCH_STATUS = 0\n\t\t\t\t\t\tBEGIN \n\n\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, @CurrentCheckID) WITH NOWAIT;\n\n\t\t\t\t\t\t\t/* Target Recovery Time (142) can be either 0 or 60 due to a number of bugs */\n\t\t\t\t\t\t    IF @CurrentCheckID = 142\n\t\t\t\t\t\t\t\tSET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details)\n\t\t\t\t\t\t\t\t   SELECT ' + CAST(@CurrentCheckID AS NVARCHAR(200)) + ', d.[name], ' + CAST(@CurrentPriority AS NVARCHAR(200)) + ', ''Non-Default Database Config'', ''' + @CurrentFinding + ''',''' + @CurrentURL + ''',''' + COALESCE(@CurrentDetails, 'This database setting is not the default.') + '''\n\t\t\t\t\t\t\t\t\tFROM sys.databases d\n\t\t\t\t\t\t\t\t\tWHERE d.database_id > 4 AND (d.[' + @CurrentName + '] NOT IN (0, 60) OR d.[' + @CurrentName + '] IS NULL) OPTION (RECOMPILE);';\n\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\tSET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details)\n\t\t\t\t\t\t\t\t   SELECT ' + CAST(@CurrentCheckID AS NVARCHAR(200)) + ', d.[name], ' + CAST(@CurrentPriority AS NVARCHAR(200)) + ', ''Non-Default Database Config'', ''' + @CurrentFinding + ''',''' + @CurrentURL + ''',''' + COALESCE(@CurrentDetails, 'This database setting is not the default.') + '''\n\t\t\t\t\t\t\t\t\tFROM sys.databases d\n\t\t\t\t\t\t\t\t\tWHERE d.database_id > 4 AND (d.[' + @CurrentName + '] <> ' + @CurrentDefaultValue + ' OR d.[' + @CurrentName + '] IS NULL) OPTION (RECOMPILE);';\n\t\t\t\t\t\t    \n\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tEXEC (@StringToExecute);\n\n\t\t\t\t\t\tFETCH NEXT FROM DatabaseDefaultsLoop into @CurrentName, @CurrentDefaultValue, @CurrentCheckID, @CurrentPriority, @CurrentFinding, @CurrentURL, @CurrentDetails; \n\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\tCLOSE DatabaseDefaultsLoop;\n\t\t\t\t\t\tDEALLOCATE DatabaseDefaultsLoop;\n\t\t\t\t\t\t\t\n\n/*This checks to see if Agent is Offline*/\nIF @ProductVersionMajor >= 10\n\t\t\t   AND NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 167 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\tIF EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\t\tFROM    sys.all_objects\n\t\t\t\t\t\t\t\t\t\t\tWHERE   name = 'dm_server_services' )\n\t\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  IF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 167) WITH NOWAIT;\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  INSERT    INTO [#BlitzResults]\n\t\t\t\t\t\t\t\t\t( [CheckID] ,\n\t\t\t\t\t\t\t\t\t  [Priority] ,\n\t\t\t\t\t\t\t\t\t  [FindingsGroup] ,\n\t\t\t\t\t\t\t\t\t  [Finding] ,\n\t\t\t\t\t\t\t\t\t  [URL] ,\n\t\t\t\t\t\t\t\t\t  [Details] )\n\n\t\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t\t167 AS [CheckID] ,\n\t\t\t\t\t\t\t250 AS [Priority] ,\n\t\t\t\t\t\t\t'Server Info' AS [FindingsGroup] ,\n\t\t\t\t\t\t\t'Agent is Currently Offline' AS [Finding] ,\n\t\t\t\t\t\t\t'' AS [URL] ,\n\t\t\t\t\t\t\t( 'Oops! It looks like the ' + [servicename] + ' service is ' + [status_desc] + '. The startup type is ' + [startup_type_desc] + '.'\n\t\t\t\t\t\t\t   ) AS [Details]\n\t\t\t\t\t\t  FROM\n\t\t\t\t\t\t\t[sys].[dm_server_services]\n\t\t\t\t\t\t  WHERE [status_desc] <> 'Running'\n\t\t\t\t\t\t  AND [servicename] LIKE 'SQL Server Agent%'\n\t\t\t\t\t\t  AND CAST(SERVERPROPERTY('Edition') AS VARCHAR(1000)) NOT LIKE '%xpress%';\n\n\t\t\t\t\tEND; \n\t\t\t\tEND;\n\n/*This checks to see if the Full Text thingy is offline*/\nIF @ProductVersionMajor >= 10\n\t\t\t   AND NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 168 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\tIF EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\t\tFROM    sys.all_objects\n\t\t\t\t\t\t\t\t\t\t\tWHERE   name = 'dm_server_services' )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  IF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 168) WITH NOWAIT;\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  INSERT    INTO [#BlitzResults]\n\t\t\t\t\t\t\t\t\t( [CheckID] ,\n\t\t\t\t\t\t\t\t\t  [Priority] ,\n\t\t\t\t\t\t\t\t\t  [FindingsGroup] ,\n\t\t\t\t\t\t\t\t\t  [Finding] ,\n\t\t\t\t\t\t\t\t\t  [URL] ,\n\t\t\t\t\t\t\t\t\t  [Details] )\n\n\t\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t\t168 AS [CheckID] ,\n\t\t\t\t\t\t\t250 AS [Priority] ,\n\t\t\t\t\t\t\t'Server Info' AS [FindingsGroup] ,\n\t\t\t\t\t\t\t'Full-text Filter Daemon Launcher is Currently Offline' AS [Finding] ,\n\t\t\t\t\t\t\t'' AS [URL] ,\n\t\t\t\t\t\t\t( 'Oops! It looks like the ' + [servicename] + ' service is ' + [status_desc] + '. The startup type is ' + [startup_type_desc] + '.'\n\t\t\t\t\t\t\t   ) AS [Details]\n\t\t\t\t\t\t  FROM\n\t\t\t\t\t\t\t[sys].[dm_server_services]\n\t\t\t\t\t\t  WHERE [status_desc] <> 'Running'\n\t\t\t\t\t\t  AND [servicename] LIKE 'SQL Full-text Filter Daemon Launcher%';\n\n\t\t\t\t\tEND;\n\t\t\t\t\tEND; \n\n/*This checks which service account SQL Server is running as.*/\nIF @ProductVersionMajor >= 10 \n\t\t\t   AND NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 169 )\n\n\t\t\t\t\tBEGIN\n\t\t\t\t\tIF EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\t\tFROM    sys.all_objects\n\t\t\t\t\t\t\t\t\t\t\tWHERE   name = 'dm_server_services' )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  IF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 169) WITH NOWAIT;\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  INSERT    INTO [#BlitzResults]\n\t\t\t\t\t\t\t\t\t( [CheckID] ,\n\t\t\t\t\t\t\t\t\t  [Priority] ,\n\t\t\t\t\t\t\t\t\t  [FindingsGroup] ,\n\t\t\t\t\t\t\t\t\t  [Finding] ,\n\t\t\t\t\t\t\t\t\t  [URL] ,\n\t\t\t\t\t\t\t\t\t  [Details] )\n\n\t\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t\t169 AS [CheckID] ,\n\t\t\t\t\t\t\t250 AS [Priority] ,\n\t\t\t\t\t\t\t'Informational' AS [FindingsGroup] ,\n\t\t\t\t\t\t\t'SQL Server is running under an NT Service account' AS [Finding] ,\n\t\t\t\t\t\t\t'https://BrentOzar.com/go/setup' AS [URL] ,\n\t\t\t\t\t\t\t( 'I''m running as ' + [service_account] + '. I wish I had an Active Directory service account instead.'\n\t\t\t\t\t\t\t   ) AS [Details]\n\t\t\t\t\t\t  FROM\n\t\t\t\t\t\t\t[sys].[dm_server_services]\n\t\t\t\t\t\t  WHERE [service_account] LIKE 'NT Service%'\n\t\t\t\t\t\t  AND [servicename] LIKE 'SQL Server%'\n\t\t\t\t\t\t  AND [servicename] NOT LIKE 'SQL Server Agent%';\n\n\t\t\t\t\tEND;\n\t\t\t\t\tEND;\n\n/*This checks which service account SQL Agent is running as.*/\nIF @ProductVersionMajor >= 10\n\t\t\t   AND NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 170 )\n\n\t\t\t\t\tBEGIN\n\t\t\t\t\tIF EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\t\tFROM    sys.all_objects\n\t\t\t\t\t\t\t\t\t\t\tWHERE   name = 'dm_server_services' )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  IF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 170) WITH NOWAIT;\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  INSERT    INTO [#BlitzResults]\n\t\t\t\t\t\t\t\t\t( [CheckID] ,\n\t\t\t\t\t\t\t\t\t  [Priority] ,\n\t\t\t\t\t\t\t\t\t  [FindingsGroup] ,\n\t\t\t\t\t\t\t\t\t  [Finding] ,\n\t\t\t\t\t\t\t\t\t  [URL] ,\n\t\t\t\t\t\t\t\t\t  [Details] )\n\n\t\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t\t170 AS [CheckID] ,\n\t\t\t\t\t\t\t250 AS [Priority] ,\n\t\t\t\t\t\t\t'Informational' AS [FindingsGroup] ,\n\t\t\t\t\t\t\t'SQL Server Agent is running under an NT Service account' AS [Finding] ,\n\t\t\t\t\t\t\t'https://BrentOzar.com/go/setup' AS [URL] ,\n\t\t\t\t\t\t\t( 'I''m running as ' + [service_account] + '. I wish I had an Active Directory service account instead.'\n\t\t\t\t\t\t\t   ) AS [Details]\n\t\t\t\t\t\t  FROM\n\t\t\t\t\t\t\t[sys].[dm_server_services]\n\t\t\t\t\t\t  WHERE [service_account] LIKE 'NT Service%'\n\t\t\t\t\t\t  AND [servicename] LIKE 'SQL Server Agent%';\n\n\t\t\t\t\tEND; \n\t\t\t\t\tEND;\n\n/*This counts memory dumps and gives min and max date of in view*/\nIF @ProductVersionMajor >= 10\n               AND NOT (@ProductVersionMajor = 10.5 AND @ProductVersionMinor < 4297) /* Skip due to crash bug: https://support.microsoft.com/en-us/help/2908087 */\n\t\t\t   AND NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 171 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\tIF EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\t\tFROM    sys.all_objects\n\t\t\t\t\t\t\t\t\t\t\tWHERE   name = 'dm_server_memory_dumps' )\n\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\tIF 5 <= (SELECT COUNT(*) FROM [sys].[dm_server_memory_dumps] WHERE [creation_time] >= DATEADD(YEAR, -1, GETDATE()))\n\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t  IF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 171) WITH NOWAIT;\n\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t  INSERT    INTO [#BlitzResults]\n\t\t\t\t\t\t\t\t\t\t( [CheckID] ,\n\t\t\t\t\t\t\t\t\t\t  [Priority] ,\n\t\t\t\t\t\t\t\t\t\t  [FindingsGroup] ,\n\t\t\t\t\t\t\t\t\t\t  [Finding] ,\n\t\t\t\t\t\t\t\t\t\t  [URL] ,\n\t\t\t\t\t\t\t\t\t\t  [Details] )\n\n\t\t\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t\t\t171 AS [CheckID] ,\n\t\t\t\t\t\t\t\t20 AS [Priority] ,\n\t\t\t\t\t\t\t\t'Reliability' AS [FindingsGroup] ,\n\t\t\t\t\t\t\t\t'Memory Dumps Have Occurred' AS [Finding] ,\n\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/dump' AS [URL] ,\n\t\t\t\t\t\t\t\t( 'That ain''t good. I''ve had ' + \n\t\t\t\t\t\t\t\t\tCAST(COUNT(*) AS VARCHAR(100)) + ' memory dumps between ' + \n\t\t\t\t\t\t\t\t\tCAST(CAST(MIN([creation_time]) AS DATETIME) AS VARCHAR(100)) +\n\t\t\t\t\t\t\t\t\t' and ' +\n\t\t\t\t\t\t\t\t\tCAST(CAST(MAX([creation_time]) AS DATETIME) AS VARCHAR(100)) +\n\t\t\t\t\t\t\t\t\t'!'\n\t\t\t\t\t\t\t\t   ) AS [Details]\n\t\t\t\t\t\t\t  FROM\n\t\t\t\t\t\t\t\t[sys].[dm_server_memory_dumps]\n\t\t\t\t\t\t\t  WHERE [creation_time] >= DATEADD(year, -1, GETDATE());\n\n\t\t\t\t\t\t\tEND; \n\t\t\t\t\t\tEND;\n\t\t\t\t\tEND;\n\n/*Checks to see if you're on Developer or Evaluation*/\n\t\t\t\t\tIF\tNOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 173 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  IF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 173) WITH NOWAIT;\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  INSERT    INTO [#BlitzResults]\n\t\t\t\t\t\t\t\t\t( [CheckID] ,\n\t\t\t\t\t\t\t\t\t  [Priority] ,\n\t\t\t\t\t\t\t\t\t  [FindingsGroup] ,\n\t\t\t\t\t\t\t\t\t  [Finding] ,\n\t\t\t\t\t\t\t\t\t  [URL] ,\n\t\t\t\t\t\t\t\t\t  [Details] )\n\n\t\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t\t173 AS [CheckID] ,\n\t\t\t\t\t\t\t200 AS [Priority] ,\n\t\t\t\t\t\t\t'Licensing' AS [FindingsGroup] ,\n\t\t\t\t\t\t\t'Non-Production License' AS [Finding] ,\n\t\t\t\t\t\t\t'https://BrentOzar.com/go/licensing' AS [URL] ,\n\t\t\t\t\t\t\t( 'We''re not the licensing police, but if this is supposed to be a production server, and you''re running ' + \n\t\t\t\t\t\t\tCAST(SERVERPROPERTY('edition') AS VARCHAR(100)) +\n\t\t\t\t\t\t\t' the good folks at Microsoft might get upset with you. Better start counting those cores.'\n\t\t\t\t\t\t\t   ) AS [Details]\n\t\t\t\t\t\t\tWHERE CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) LIKE '%Developer%'\n\t\t\t\t\t\t\tOR CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) LIKE '%Evaluation%';\n\n\t\t\t\t\tEND;\n\n/*Checks to see if Buffer Pool Extensions are in use*/\n\t\t\tIF @ProductVersionMajor >= 12  \n\t\t\t   AND NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 174 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  IF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 174) WITH NOWAIT;\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  INSERT    INTO [#BlitzResults]\n\t\t\t\t\t\t\t\t\t( [CheckID] ,\n\t\t\t\t\t\t\t\t\t  [Priority] ,\n\t\t\t\t\t\t\t\t\t  [FindingsGroup] ,\n\t\t\t\t\t\t\t\t\t  [Finding] ,\n\t\t\t\t\t\t\t\t\t  [URL] ,\n\t\t\t\t\t\t\t\t\t  [Details] )\n\n\t\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t\t174 AS [CheckID] ,\n\t\t\t\t\t\t\t200 AS [Priority] ,\n\t\t\t\t\t\t\t'Performance' AS [FindingsGroup] ,\n\t\t\t\t\t\t\t'Buffer Pool Extensions Enabled' AS [Finding] ,\n\t\t\t\t\t\t\t'https://BrentOzar.com/go/bpe' AS [URL] ,\n\t\t\t\t\t\t\t( 'You have Buffer Pool Extensions enabled, and one lives here: ' + \n\t\t\t\t\t\t\t\t[path] +\n\t\t\t\t\t\t\t\t'. It''s currently ' +\n\t\t\t\t\t\t\t\tCASE WHEN [current_size_in_kb] / 1024. / 1024. > 0\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t THEN CAST([current_size_in_kb] / 1024. / 1024. AS VARCHAR(100))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  + ' GB'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ELSE CAST([current_size_in_kb] / 1024. AS VARCHAR(100))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  + ' MB'\n\t\t\t\t\t\t\t\tEND +\n\t\t\t\t\t\t\t\t'. Did you know that BPEs only provide single threaded access 8KB (one page) at a time?'\t\n\t\t\t\t\t\t\t   ) AS [Details]\n\t\t\t\t\t\t\t FROM sys.dm_os_buffer_pool_extension_configuration\n\t\t\t\t\t\t\t WHERE [state_description] <> 'BUFFER POOL EXTENSION DISABLED';\n\n\t\t\t\t\tEND;\n\n/*Check for too many tempdb files*/\n\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 175 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 175) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\tSELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t175 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t'TempDB' AS DatabaseName ,\n\t\t\t\t\t\t\t\t\t\t170 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'File Configuration' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'TempDB Has >16 Data Files' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/tempdb' AS URL ,\n\t\t\t\t\t\t\t\t\t\t'Woah, Nelly! TempDB has ' + CAST(COUNT_BIG(*) AS VARCHAR(30)) + '. Did you forget to terminate a loop somewhere?' AS Details\n\t\t\t\t\t\t\t\t  FROM sys.[master_files] AS [mf] \n\t\t\t\t\t\t\t\t  WHERE [mf].[database_id] = 2 AND [mf].[type] = 0\n\t\t\t\t\t\t\t\t  HAVING COUNT_BIG(*) > 16; \n\t\t\t\t\tEND;\t\n\n\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 176 )\n\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\n\t\t\tIF EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM    sys.all_objects\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHERE   name = 'dm_xe_sessions' )\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 176) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t\t\t\t176 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'' AS DatabaseName ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t200 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'Monitoring' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'Extended Events Hyperextension' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/xe' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'Hey big spender, you have ' + CAST(COUNT_BIG(*) AS VARCHAR(30)) + ' Extended Events sessions running. You sure you meant to do that?' AS Details\n\t\t\t\t\t\t\t\t\t\t\t    FROM sys.dm_xe_sessions\n\t\t\t\t\t\t\t\t\t\t\t\tWHERE [name] NOT IN\n\t\t\t\t\t\t\t\t\t\t\t\t( 'AlwaysOn_health', 'system_health', 'telemetry_xevents', 'sp_server_diagnostics', 'hkenginexesession' )\n\t\t\t\t\t\t\t\t\t\t\t\tAND name NOT LIKE '%$A%'\n\t\t\t\t\t\t\t\t\t\t\t  HAVING COUNT_BIG(*) >= 2; \n\t\t\t\t\t\t\t\tEND;\t\n\t\t\t\t\t\t\t\tEND;\n\t\t\t\n\t\t\t/*Harmful startup parameter*/\n\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 177 )\n\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM    sys.all_objects\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHERE   name = 'dm_server_registry' )\n\t\t\t\n\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 177) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t\t\t\t177 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'' AS DatabaseName ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t5 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'Monitoring' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'Disabled Internal Monitoring Features' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'https://msdn.microsoft.com/en-us/library/ms190737.aspx' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'You have -x as a startup parameter. You should head to the URL and read more about what it does to your system.' AS Details\n\t\t\t\t\t\t\t\t\t\t\t\t\tFROM\n\t\t\t\t\t\t\t\t\t\t\t\t\t[sys].[dm_server_registry] AS [dsr]\n\t\t\t\t\t\t\t\t\t\t\t\t\tWHERE\n\t\t\t\t\t\t\t\t\t\t\t\t\t[dsr].[registry_key] LIKE N'%MSSQLServer\\Parameters'\n\t\t\t\t\t\t\t\t\t\t\t\t\tAND [dsr].[value_data] = '-x';; \n\t\t\t\t\t\t\t\tEND;\t\t\n\t\t\t\t\t\t\t\tEND;\n\t\t\t\n\t\t\t\n\t\t\t/* Reliability - Dangerous Third Party Modules - 179 */\n\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 179 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  IF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 179) WITH NOWAIT;\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  INSERT    INTO [#BlitzResults]\n\t\t\t\t\t\t\t\t\t( [CheckID] ,\n\t\t\t\t\t\t\t\t\t  [Priority] ,\n\t\t\t\t\t\t\t\t\t  [FindingsGroup] ,\n\t\t\t\t\t\t\t\t\t  [Finding] ,\n\t\t\t\t\t\t\t\t\t  [URL] ,\n\t\t\t\t\t\t\t\t\t  [Details] )\n\n\t\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t\t179 AS [CheckID] ,\n\t\t\t\t\t\t\t5 AS [Priority] ,\n\t\t\t\t\t\t\t'Reliability' AS [FindingsGroup] ,\n\t\t\t\t\t\t\t'Dangerous Third Party Modules' AS [Finding] ,\n\t\t\t\t\t\t\t'https://support.microsoft.com/en-us/kb/2033238' AS [URL] ,\n\t\t\t\t\t\t\t( COALESCE(company, '') + ' - ' + COALESCE(description, '') + ' - ' + COALESCE(name, '') + ' - suspected dangerous third party module is installed.') AS [Details]\n\t\t\t\t\t\t\tFROM sys.dm_os_loaded_modules \n\t\t\t\t\t\t\tWHERE UPPER(name) LIKE UPPER('%\\ENTAPI.DLL') /* McAfee VirusScan Enterprise */\n\t\t\t\t\t\t\tOR UPPER(name) LIKE UPPER('%\\HIPI.DLL') OR UPPER(name) LIKE UPPER('%\\HcSQL.dll') OR UPPER(name) LIKE UPPER('%\\HcApi.dll') OR UPPER(name) LIKE UPPER('%\\HcThe.dll') /* McAfee Host Intrusion */\n\t\t\t\t\t\t\tOR UPPER(name) LIKE UPPER('%\\SOPHOS_DETOURED.DLL') OR UPPER(name) LIKE UPPER('%\\SOPHOS_DETOURED_x64.DLL') OR UPPER(name) LIKE UPPER('%\\SWI_IFSLSP_64.dll') /* Sophos AV */\n\t\t\t\t\t\t\tOR UPPER(name) LIKE UPPER('%\\PIOLEDB.DLL') OR UPPER(name) LIKE UPPER('%\\PISDK.DLL'); /* OSISoft PI data access */\n\n\t\t\t\t\tEND;\n\n\t\t\t/*Find shrink database tasks*/\n\n\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 180 )\n\t\t\t\t\t\t\tAND CONVERT(VARCHAR(128), SERVERPROPERTY ('productversion')) LIKE '1%' /* Only run on 2008+ */\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 180) WITH NOWAIT;\n\t\t\t\t\t\n\t\t\t\t\t\tWITH XMLNAMESPACES ('www.microsoft.com/SqlServer/Dts' AS [dts])\n\t\t\t\t\t\t,[maintenance_plan_steps] AS (\n\t\t\t\t\t\t\tSELECT [name]\n\t\t\t\t\t\t\t\t, [id] -- ID required to link maintenace plan with jobs and jobhistory (sp_Blitz Issue #776)\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t, CAST(CAST([packagedata] AS VARBINARY(MAX)) AS XML) AS [maintenance_plan_xml]\n\t\t\t\t\t\t\tFROM [msdb].[dbo].[sysssispackages]\n\t\t\t\t\t\t\tWHERE [packagetype] = 6\n\t\t\t\t\t\t   )\n\t\t\t\t\t\t\tINSERT    INTO [#BlitzResults]\n\t\t\t\t\t\t\t\t\t( [CheckID] ,\n\t\t\t\t\t\t\t\t\t\t[Priority] ,\n\t\t\t\t\t\t\t\t\t\t[FindingsGroup] ,\n\t\t\t\t\t\t\t\t\t\t[Finding] ,\n\t\t\t\t\t\t\t\t\t\t[URL] ,\n\t\t\t\t\t\t\t\t\t\t[Details] )\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t180 AS [CheckID] ,\n\t\t\t\t\t\t-- sp_Blitz Issue #776\n\t\t\t\t\t\t-- Job has history and was executed in the last 30 days\n\t\t\t\t\t\tCASE WHEN (cast(datediff(dd, substring(cast(sjh.run_date as nvarchar(10)), 1, 4) + '-' + substring(cast(sjh.run_date as nvarchar(10)), 5, 2) + '-' + substring(cast(sjh.run_date as nvarchar(10)), 7, 2), GETDATE()) AS INT) < 30) OR (j.[enabled] = 1 AND ssc.[enabled] = 1 )THEN\n\t\t\t\t\t\t    100\n\t\t\t\t\t\tELSE -- no job history (implicit) AND job not run in the past 30 days AND (Job disabled OR Job Schedule disabled)\n\t\t\t\t\t        200\n\t\t\t\t\t\tEND AS Priority,\n\t\t\t\t\t\t'Performance' AS [FindingsGroup] ,\n\t\t\t\t\t\t'Shrink Database Step In Maintenance Plan' AS [Finding] ,\n\t\t\t\t\t\t'https://BrentOzar.com/go/autoshrink' AS [URL] ,\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t'The maintenance plan ' + [mps].[name] + ' has a step to shrink databases in it. Shrinking databases is as outdated as maintenance plans.'  \n\t\t\t\t\t\t+ CASE WHEN COALESCE(ssc.name,'0') != '0' THEN + ' (Schedule: [' + ssc.name + '])' ELSE + '' END AS [Details]\n\t\t\t\t\t\tFROM [maintenance_plan_steps] [mps]\n\t\t\t\t\t\t\tCROSS APPLY [maintenance_plan_xml].[nodes]('//dts:Executables/dts:Executable') [t]([c])\n                    \tjoin msdb.dbo.sysmaintplan_subplans as sms \n                    \t\ton mps.id = sms.plan_id \n                    \tJOIN msdb.dbo.sysjobs j \n                    \t\ton sms.job_id = j.job_id\n                    \tLEFT OUTER JOIN msdb.dbo.sysjobsteps AS step\n                    \t\tON j.job_id = step.job_id\n                    \tLEFT OUTER JOIN msdb.dbo.sysjobschedules AS sjsc \n                    \t\tON j.job_id = sjsc.job_id\n                    \tLEFT OUTER JOIN msdb.dbo.sysschedules AS ssc \n                    \t\tON sjsc.schedule_id = ssc.schedule_id\n                    \t\tAND sjsc.job_id = j.job_id\n                    \tLEFT OUTER JOIN msdb.dbo.sysjobhistory AS sjh \n                    \t\tON j.job_id = sjh.job_id \n                    \t\tAND step.step_id = sjh.step_id\n                    \t\tAND sjh.run_date IN (SELECT max(sjh2.run_date) FROM msdb.dbo.sysjobhistory AS sjh2 WHERE sjh2.job_id = j.job_id) -- get the latest entry date\n                    \t\tAND sjh.run_time IN (SELECT max(sjh3.run_time) FROM msdb.dbo.sysjobhistory AS sjh3 WHERE sjh3.job_id = j.job_id AND sjh3.run_date = sjh.run_date) -- get the latest entry time\n\t\t\t\t\t\tWHERE [c].[value]('(@dts:ObjectName)', 'VARCHAR(128)') = 'Shrink Database Task';\n\n\t\t\t\t\t\tEND;\n\n\n\t\t/*Find repetitive maintenance tasks*/\n\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 181 )\n\t\t\t\t\t\tAND CONVERT(VARCHAR(128), SERVERPROPERTY ('productversion')) LIKE '1%' /* Only run on 2008+ */\n\t\t\t\tBEGIN\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 181) WITH NOWAIT;\n\n\t\t\t\t\t\tWITH XMLNAMESPACES ('www.microsoft.com/SqlServer/Dts' AS [dts])\n\t\t\t\t\t\t,[maintenance_plan_steps] AS (\n\t\t\t\t\t\t\tSELECT [name]\n\t\t\t\t\t\t\t\t, CAST(CAST([packagedata] AS VARBINARY(MAX)) AS XML) AS [maintenance_plan_xml]\n\t\t\t\t\t\t\tFROM [msdb].[dbo].[sysssispackages]\n\t\t\t\t\t\t\tWHERE [packagetype] = 6\n\t\t\t\t\t\t\t), [maintenance_plan_table] AS (\n\t\t\t\t\t\tSELECT [mps].[name]\n\t\t\t\t\t\t\t,[c].[value]('(@dts:ObjectName)', 'NVARCHAR(128)') AS [step_name]\n\t\t\t\t\t\tFROM [maintenance_plan_steps] [mps]\n\t\t\t\t\t\t\tCROSS APPLY [maintenance_plan_xml].[nodes]('//dts:Executables/dts:Executable') [t]([c])\n\t\t\t\t\t\t), [mp_steps_pretty] AS (SELECT DISTINCT [m1].[name] ,\n\t\t\t\t\t\t\t\tSTUFF((SELECT N', ' + [m2].[step_name]  FROM [maintenance_plan_table] AS [m2] WHERE [m1].[name] = [m2].[name] \n\t\t\t\t\t\t\t\tFOR XML PATH(N'')), 1, 2, N'') AS [maintenance_plan_steps]\n\t\t\t\t\t\tFROM [maintenance_plan_table] AS [m1])\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tINSERT    INTO [#BlitzResults]\n\t\t\t\t\t\t\t\t\t( [CheckID] ,\n\t\t\t\t\t\t\t\t\t\t[Priority] ,\n\t\t\t\t\t\t\t\t\t\t[FindingsGroup] ,\n\t\t\t\t\t\t\t\t\t\t[Finding] ,\n\t\t\t\t\t\t\t\t\t\t[URL] ,\n\t\t\t\t\t\t\t\t\t\t[Details] )\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t181 AS [CheckID] ,\n\t\t\t\t\t\t100 AS [Priority] ,\n\t\t\t\t\t\t'Performance' AS [FindingsGroup] ,\n\t\t\t\t\t\t'Repetitive Steps In Maintenance Plans' AS [Finding] ,\n\t\t\t\t\t\t'https://ola.hallengren.com/' AS [URL] , \n\t\t\t\t\t\t'The maintenance plan ' + [m].[name] + ' is doing repetitive work on indexes and statistics. Perhaps it''s time to try something more modern?' AS [Details]\n\t\t\t\t\t\tFROM [mp_steps_pretty] m\n\t\t\t\t\t\tWHERE m.[maintenance_plan_steps] LIKE '%Rebuild%Reorganize%'\n\t\t\t\t\t\tOR m.[maintenance_plan_steps] LIKE '%Rebuild%Update%';\n\n\t\t\t\t\t\tEND;\n\t\t\t\n\n\t\t\t/* Reliability - No Failover Cluster Nodes Available - 184 */\n\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 184 )\n\t\t\t\tAND CAST(SERVERPROPERTY('ProductVersion') AS NVARCHAR(128)) NOT LIKE '10%'\n\t\t\t\tAND CAST(SERVERPROPERTY('ProductVersion') AS NVARCHAR(128)) NOT LIKE '9%'\n\t\t\t\t\tBEGIN\n\t\t                        IF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 184) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tSET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)\n\t\t\t                        \t\t\t\t\t\t\tSELECT TOP 1\n\t\t\t\t\t\t\t  184 AS CheckID ,\n\t\t\t\t\t\t\t  20 AS Priority ,\n\t\t\t\t\t\t\t  ''Reliability'' AS FindingsGroup ,\n\t\t\t\t\t\t\t  ''No Failover Cluster Nodes Available'' AS Finding ,\n\t\t\t\t\t\t\t  ''https://BrentOzar.com/go/node'' AS URL ,\n\t\t\t\t\t\t\t  ''There are no failover cluster nodes available if the active node fails'' AS Details\n\t\t\t\t\t\t\tFROM (\n\t\t\t\t\t\t\t  SELECT SUM(CASE WHEN [status] = 0 AND [is_current_owner] = 0 THEN 1 ELSE 0 END) AS [available_nodes]\n\t\t\t\t\t\t\t  FROM sys.dm_os_cluster_nodes\n\t\t\t\t\t\t\t) a\n\t\t\t\t\t\t\tWHERE [available_nodes] < 1 OPTION (RECOMPILE)';\n\t\t                        \n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\tEND;\n\n\t\t/* Reliability - TempDB File Error */\n\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 191 )\n\t\t\tAND (SELECT COUNT(*) FROM sys.master_files WHERE database_id = 2) <> (SELECT COUNT(*) FROM tempdb.sys.database_files)\n\t\t\t\tBEGIN\n\t\t\t\t\t\n\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 191) WITH NOWAIT\n\t\t\t\t\t\n\t\t\t\t\tINSERT    INTO [#BlitzResults]\n\t\t\t\t\t\t\t( [CheckID] ,\n\t\t\t\t\t\t\t\t[Priority] ,\n\t\t\t\t\t\t\t\t[FindingsGroup] ,\n\t\t\t\t\t\t\t\t[Finding] ,\n\t\t\t\t\t\t\t\t[URL] ,\n\t\t\t\t\t\t\t\t[Details] )\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t191 AS [CheckID] ,\n\t\t\t\t\t\t50 AS [Priority] ,\n\t\t\t\t\t\t'Reliability' AS [FindingsGroup] ,\n\t\t\t\t\t\t'TempDB File Error' AS [Finding] ,\n\t\t\t\t\t\t'https://BrentOzar.com/go/tempdboops' AS [URL] , \n\t\t\t\t\t\t'Mismatch between the number of TempDB files in sys.master_files versus tempdb.sys.database_files' AS [Details];\n\t\t\t\tEND;\n\n/*Perf - Odd number of cores in a socket*/\n\t\tIF NOT EXISTS ( SELECT  1\n\t\t                FROM    #SkipChecks\n\t\t                WHERE   DatabaseName IS NULL\n\t\t                        AND CheckID = 198 )\n\t\t   AND EXISTS ( SELECT  1\n\t\t                FROM    sys.dm_os_schedulers\n\t\t                WHERE   is_online = 1\n\t\t                        AND scheduler_id < 255\n\t\t                        AND parent_node_id < 64\n\t\t                GROUP BY parent_node_id,\n\t\t                        is_online\n\t\t                HAVING  ( COUNT(cpu_id) + 2 ) % 2 = 1 )\n\t\t   BEGIN\n\t\t\n\t\t         IF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 198) WITH NOWAIT\n\t\t\t\t \n\t\t\t\t INSERT INTO #BlitzResults\n\t\t                (\n\t\t                  CheckID,\n\t\t                  DatabaseName,\n\t\t                  Priority,\n\t\t                  FindingsGroup,\n\t\t                  Finding,\n\t\t                  URL,\n\t\t                  Details\n\t\t\t\t        )\n\t\t         SELECT 198 AS CheckID,\n\t\t                NULL AS DatabaseName,\n\t\t                10 AS Priority,\n\t\t                'Performance' AS FindingsGroup,\n\t\t                'CPU w/Odd Number of Cores' AS Finding,\n\t\t                'https://BrentOzar.com/go/oddity' AS URL,\n\t\t                'Node ' + CONVERT(VARCHAR(10), parent_node_id) + ' has ' + CONVERT(VARCHAR(10), COUNT(cpu_id))\n\t\t                + CASE WHEN COUNT(cpu_id) = 1 THEN ' core assigned to it. This is a really bad NUMA configuration.'\n\t\t                       ELSE ' cores assigned to it. This is a really bad NUMA configuration.'\n\t\t                  END AS Details\n\t\t         FROM   sys.dm_os_schedulers\n\t\t         WHERE  is_online = 1\n\t\t                AND scheduler_id < 255\n\t\t                AND parent_node_id < 64\n\t\t         GROUP BY parent_node_id,\n\t\t                is_online\n\t\t         HAVING ( COUNT(cpu_id) + 2 ) % 2 = 1;    \n\t\t\n\t\t   END;\n\n/*Begin: checking default trace for odd DBCC activity*/\n\t\t\n\t\t--Grab relevant event data\n\t\tIF @TraceFileIssue = 0\n\t\tBEGIN\n\t\tSELECT UPPER(\n\t\t\t\t\tREPLACE(\n\t\t\t\t\t\tSUBSTRING(CONVERT(NVARCHAR(MAX), t.TextData), 0, \n\t\t\t\t\t\t\t\tISNULL(\n\t\t\t\t\t\t\t\t\tNULLIF(\n\t\t\t\t\t\t\t\t\t\tCHARINDEX('(', CONVERT(NVARCHAR(MAX), t.TextData)), \n\t\t\t\t\t\t\t\t\t\t 0), \n\t\t\t\t\t\t\t\t\t  LEN(CONVERT(NVARCHAR(MAX), t.TextData)) + 1 )) --This replaces everything up to an open paren, if one exists. \n\t\t\t\t\t\t\t\t\t\t, SUBSTRING(CONVERT(NVARCHAR(MAX), t.TextData), \n\t\t\t\t\t\t\t\t\t\t\tISNULL(\n\t\t\t\t\t\t\t\t\t\t\t\tNULLIF(\n\t\t\t\t\t\t\t\t\t\t\t\t\tCHARINDEX(' WITH ',CONVERT(NVARCHAR(MAX), t.TextData))\n\t\t\t\t\t\t\t\t\t\t\t\t\t, 0), \n\t\t\t\t\t\t\t\t\t\t\t\tLEN(CONVERT(NVARCHAR(MAX), t.TextData)) + 1), \n\t\t\t\t\t\t\t\t\t\t\t\t\tLEN(CONVERT(NVARCHAR(MAX), t.TextData)) + 1 )\n\t\t\t\t\t   , '') --This replaces any optional WITH clause to a DBCC command, like tableresults.\n\t\t\t\t\t) AS [dbcc_event_trunc_upper],\n\t\t\tUPPER(\n\t\t\t\tREPLACE(\n\t\t\t\t\tCONVERT(NVARCHAR(MAX), t.TextData), SUBSTRING(CONVERT(NVARCHAR(MAX), t.TextData), \n\t\t\t\t\t\t\t\t\t\t\tISNULL(\n\t\t\t\t\t\t\t\t\t\t\t\tNULLIF(\n\t\t\t\t\t\t\t\t\t\t\t\t\tCHARINDEX(' WITH ',CONVERT(NVARCHAR(MAX), t.TextData))\n\t\t\t\t\t\t\t\t\t\t\t\t\t, 0), \n\t\t\t\t\t\t\t\t\t\t\t\tLEN(CONVERT(NVARCHAR(MAX), t.TextData)) + 1), \n\t\t\t\t\t\t\t\t\t\t\t\t\tLEN(CONVERT(NVARCHAR(MAX), t.TextData)) + 1 ), '')) AS [dbcc_event_full_upper],\n\t\t\tMIN(t.StartTime) OVER (PARTITION BY CONVERT(NVARCHAR(128), t.TextData)) AS\tmin_start_time,\n\t\t\tMAX(t.StartTime) OVER (PARTITION BY CONVERT(NVARCHAR(128), t.TextData)) AS max_start_time,\n\t\t\tt.NTUserName AS [nt_user_name], \n\t\t\tt.NTDomainName AS [nt_domain_name], \n\t\t\tt.HostName AS [host_name],\n\t\t    t.ApplicationName AS [application_name], \n\t\t\tt.LoginName [login_name], \n\t\t\tt.DBUserName AS [db_user_name]\n\t\t \tINTO #dbcc_events_from_trace\n\t\t    FROM #fnTraceGettable AS t\n\t\t\tWHERE t.EventClass = 116\n\t\t\tOPTION(RECOMPILE)\n\t\t\tEND;\n\n\t\t\t/*Overall count of DBCC events excluding silly stuff*/\n\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 203 )\n\t\t\t\t\t\t\tAND @TraceFileIssue = 0\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  IF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 199) WITH NOWAIT\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  INSERT    INTO [#BlitzResults]\n\t\t\t\t\t\t\t\t\t( [CheckID] ,\n\t\t\t\t\t\t\t\t\t  [Priority] ,\n\t\t\t\t\t\t\t\t\t  [FindingsGroup] ,\n\t\t\t\t\t\t\t\t\t  [Finding] ,\n\t\t\t\t\t\t\t\t\t  [URL] ,\n\t\t\t\t\t\t\t\t\t  [Details] )\n\t\t\tSELECT 203 AS CheckID ,\n\t\t\t        50 AS Priority ,\n\t\t\t        'DBCC Events' AS FindingsGroup ,\n\t\t\t        'Overall Events' AS Finding ,\n\t\t\t        '' AS URL ,\n\t\t\t        CAST(COUNT(*) AS NVARCHAR(100)) + ' DBCC events have taken place between ' + CONVERT(NVARCHAR(30), MIN(d.min_start_time)) + ' and ' + CONVERT(NVARCHAR(30),  MAX(d.max_start_time)) + \n\t\t\t\t\t'. This does not include CHECKDB and other usually benign DBCC events.'\n\t\t\t\t\tAS Details\n\t\t\tFROM    #dbcc_events_from_trace d\n\t\t\t/* This WHERE clause below looks horrible, but it's because users can run stuff like\n\t\t\t   DBCC     LOGINFO\n\t\t\t   with lots of spaces (or carriage returns, or comments) in between the DBCC and the\n\t\t\t   command they're trying to run. See Github issues 1062, 1074, 1075.\n\t\t\t*/\n\t\t\tWHERE d.dbcc_event_full_upper NOT LIKE '%DBCC%ADDINSTANCE%'\n\t\t\tAND d.dbcc_event_full_upper NOT LIKE '%DBCC%CHECKALLOC%'\n\t\t\tAND d.dbcc_event_full_upper NOT LIKE '%DBCC%CHECKCATALOG%'\n\t\t\tAND d.dbcc_event_full_upper NOT LIKE '%DBCC%CHECKCONSTRAINTS%'\n\t\t\tAND d.dbcc_event_full_upper NOT LIKE '%DBCC%CHECKDB%'\n\t\t\tAND d.dbcc_event_full_upper NOT LIKE '%DBCC%CHECKFILEGROUP%'\n\t\t\tAND d.dbcc_event_full_upper NOT LIKE '%DBCC%CHECKIDENT%'\n\t\t\tAND d.dbcc_event_full_upper NOT LIKE '%DBCC%CHECKPRIMARYFILE%'\n\t\t\tAND d.dbcc_event_full_upper NOT LIKE '%DBCC%CHECKTABLE%'\n\t\t\tAND d.dbcc_event_full_upper NOT LIKE '%DBCC%CLEANTABLE%'\n\t\t\tAND d.dbcc_event_full_upper NOT LIKE '%DBCC%DBINFO%'\n\t\t\tAND d.dbcc_event_full_upper NOT LIKE '%DBCC%ERRORLOG%'\n\t\t\tAND d.dbcc_event_full_upper NOT LIKE '%DBCC%INCREMENTINSTANCE%'\n\t\t\tAND d.dbcc_event_full_upper NOT LIKE '%DBCC%INPUTBUFFER%'\n\t\t\tAND d.dbcc_event_full_upper NOT LIKE '%DBCC%LOGINFO%'\n\t\t\tAND d.dbcc_event_full_upper NOT LIKE '%DBCC%OPENTRAN%'\n\t\t\tAND d.dbcc_event_full_upper NOT LIKE '%DBCC%SETINSTANCE%'\n\t\t\tAND d.dbcc_event_full_upper NOT LIKE '%DBCC%SHOWFILESTATS%'\n\t\t\tAND d.dbcc_event_full_upper NOT LIKE '%DBCC%SHOW_STATISTICS%'\n\t\t\tAND d.dbcc_event_full_upper NOT LIKE '%DBCC%SQLPERF%NETSTATS%'\n\t\t\tAND d.dbcc_event_full_upper NOT LIKE '%DBCC%SQLPERF%LOGSPACE%'\n\t\t\tAND d.dbcc_event_full_upper NOT LIKE '%DBCC%TRACEON%'\n\t\t\tAND d.dbcc_event_full_upper NOT LIKE '%DBCC%TRACEOFF%'\n\t\t\tAND d.dbcc_event_full_upper NOT LIKE '%DBCC%TRACESTATUS%'\n\t\t\tAND d.application_name NOT LIKE 'Critical Care(R) Collector'\n\t\t\tAND d.application_name NOT LIKE '%Red Gate Software Ltd SQL Prompt%'\n\t\t\tAND d.application_name NOT LIKE '%Spotlight Diagnostic Server%'\n\t\t\tAND d.application_name NOT LIKE '%SQL Diagnostic Manager%'\n\t\t\tAND d.application_name NOT LIKE '%Sentry%'\n\t\t\t\n\n\t\t\tHAVING COUNT(*) > 0;\n\t\t\t\n\t\t\t\tEND;\n\n\t\t\t/*Check for someone running drop clean buffers*/\n\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 207 )\n\t\t\t\t\t\t\tAND @TraceFileIssue = 0\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  IF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 200) WITH NOWAIT\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  INSERT    INTO [#BlitzResults]\n\t\t\t\t\t\t\t\t\t( [CheckID] ,\n\t\t\t\t\t\t\t\t\t  [Priority] ,\n\t\t\t\t\t\t\t\t\t  [FindingsGroup] ,\n\t\t\t\t\t\t\t\t\t  [Finding] ,\n\t\t\t\t\t\t\t\t\t  [URL] ,\n\t\t\t\t\t\t\t\t\t  [Details] )\n\t\t\t\t\tSELECT 207 AS CheckID ,\n\t\t\t\t\t        10 AS Priority ,\n\t\t\t\t\t        'Performance' AS FindingsGroup ,\n\t\t\t\t\t        'DBCC DROPCLEANBUFFERS Ran Recently' AS Finding ,\n\t\t\t\t\t        '' AS URL ,\n\t\t\t\t\t        'The user ' + COALESCE(d.nt_user_name, d.login_name) + ' has run DBCC DROPCLEANBUFFERS ' + CAST(COUNT(*) AS NVARCHAR(100)) + ' times between ' + CONVERT(NVARCHAR(30), MIN(d.min_start_time)) + ' and ' + CONVERT(NVARCHAR(30),  MAX(d.max_start_time)) + \n\t\t\t\t\t\t\t'. If this is a production box, know that you''re clearing all data out of memory when this happens. What kind of monster would do that?'\n\t\t\t\t\t\t\tAS Details\n\t\t\t\t\tFROM    #dbcc_events_from_trace d\n\t\t\t\t\tWHERE d.dbcc_event_full_upper = N'DBCC DROPCLEANBUFFERS'\n\t\t\t\t\tGROUP BY COALESCE(d.nt_user_name, d.login_name)\n\t\t\t\t\tHAVING COUNT(*) > 0;\n\n\t\t\t\t\tEND; \n\n\t\t\t/*Check for someone running free proc cache*/\n\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 208 )\n\t\t\t\t\t\t\tAND @TraceFileIssue = 0\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  IF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 201) WITH NOWAIT\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  INSERT    INTO [#BlitzResults]\n\t\t\t\t\t\t\t\t\t( [CheckID] ,\n\t\t\t\t\t\t\t\t\t  [Priority] ,\n\t\t\t\t\t\t\t\t\t  [FindingsGroup] ,\n\t\t\t\t\t\t\t\t\t  [Finding] ,\n\t\t\t\t\t\t\t\t\t  [URL] ,\n\t\t\t\t\t\t\t\t\t  [Details] )\n\t\t\t\t\tSELECT 208 AS CheckID ,\n\t\t\t\t\t        10 AS Priority ,\n\t\t\t\t\t        'DBCC Events' AS FindingsGroup ,\n\t\t\t\t\t        'DBCC FREEPROCCACHE Ran Recently' AS Finding ,\n\t\t\t\t\t        '' AS URL ,\n\t\t\t\t\t        'The user ' + COALESCE(d.nt_user_name, d.login_name) + ' has run DBCC FREEPROCCACHE ' + CAST(COUNT(*) AS NVARCHAR(100)) + ' times between ' + CONVERT(NVARCHAR(30), MIN(d.min_start_time)) + ' and ' + CONVERT(NVARCHAR(30),  MAX(d.max_start_time)) + \n\t\t\t\t\t\t\t'. This has bad idea jeans written all over its butt, like most other bad idea jeans.'\n\t\t\t\t\t\t\tAS Details\n\t\t\t\t\tFROM    #dbcc_events_from_trace d\n\t\t\t\t\tWHERE d.dbcc_event_full_upper = N'DBCC FREEPROCCACHE'\n\t\t\t\t\tGROUP BY COALESCE(d.nt_user_name, d.login_name)\n\t\t\t\t\tHAVING COUNT(*) > 0;\n\n\t\t\t\t\tEND;\n\n\t\t\t/*Check for someone clearing wait stats*/\n\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 205 )\n\t\t\t\t\t\t\tAND @TraceFileIssue = 0\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  IF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 202) WITH NOWAIT\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  INSERT    INTO [#BlitzResults]\n\t\t\t\t\t\t\t\t\t( [CheckID] ,\n\t\t\t\t\t\t\t\t\t  [Priority] ,\n\t\t\t\t\t\t\t\t\t  [FindingsGroup] ,\n\t\t\t\t\t\t\t\t\t  [Finding] ,\n\t\t\t\t\t\t\t\t\t  [URL] ,\n\t\t\t\t\t\t\t\t\t  [Details] )\n\t\t\t\t\tSELECT 205 AS CheckID ,\n\t\t\t\t\t        50 AS Priority ,\n\t\t\t\t\t        'Performance' AS FindingsGroup ,\n\t\t\t\t\t        'Wait Stats Cleared Recently' AS Finding ,\n\t\t\t\t\t        '' AS URL ,\n\t\t\t\t\t        'The user ' + COALESCE(d.nt_user_name, d.login_name) + ' has run DBCC SQLPERF(''SYS.DM_OS_WAIT_STATS'',CLEAR) ' + CAST(COUNT(*) AS NVARCHAR(100)) + ' times between ' + CONVERT(NVARCHAR(30), MIN(d.min_start_time)) + ' and ' + CONVERT(NVARCHAR(30),  MAX(d.max_start_time)) + \n\t\t\t\t\t\t\t'. Why are you clearing wait stats? What are you hiding?'\n\t\t\t\t\t\t\tAS Details\n\t\t\t\t\tFROM    #dbcc_events_from_trace d\n\t\t\t\t\tWHERE d.dbcc_event_full_upper = N'DBCC SQLPERF(''SYS.DM_OS_WAIT_STATS'',CLEAR)'\n\t\t\t\t\tGROUP BY COALESCE(d.nt_user_name, d.login_name)\n\t\t\t\t\tHAVING COUNT(*) > 0;\n\n\t\t\t\t\tEND;\n\n\t\t\t/*Check for someone writing to pages. Yeah, right?*/\n\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 209 )\n\t\t\t\t\t\t\tAND @TraceFileIssue = 0\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  IF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 203) WITH NOWAIT\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  INSERT    INTO [#BlitzResults]\n\t\t\t\t\t\t\t\t\t( [CheckID] ,\n\t\t\t\t\t\t\t\t\t  [Priority] ,\n\t\t\t\t\t\t\t\t\t  [FindingsGroup] ,\n\t\t\t\t\t\t\t\t\t  [Finding] ,\n\t\t\t\t\t\t\t\t\t  [URL] ,\n\t\t\t\t\t\t\t\t\t  [Details] )\n\t\t\t\t\t\tSELECT 209 AS CheckID ,\n\t\t\t\t\t\t        50 AS Priority ,\n\t\t\t\t\t\t        'Reliability' AS FindingsGroup ,\n\t\t\t\t\t\t        'DBCC WRITEPAGE Used Recently' AS Finding ,\n\t\t\t\t\t\t        '' AS URL ,\n\t\t\t\t\t\t        'The user ' + COALESCE(d.nt_user_name, d.login_name) + ' has run DBCC WRITEPAGE ' + CAST(COUNT(*) AS NVARCHAR(100)) + ' times between ' + CONVERT(NVARCHAR(30), MIN(d.min_start_time)) + ' and ' + CONVERT(NVARCHAR(30),  MAX(d.max_start_time)) + \n\t\t\t\t\t\t\t\t'. So, uh, are they trying to fix corruption, or cause corruption?'\n\t\t\t\t\t\t\t\tAS Details\n\t\t\t\t\t\tFROM    #dbcc_events_from_trace d\n\t\t\t\t\t\tWHERE d.dbcc_event_trunc_upper = N'DBCC WRITEPAGE'\n\t\t\t\t\t\tGROUP BY COALESCE(d.nt_user_name, d.login_name)\n\t\t\t\t\t\tHAVING COUNT(*) > 0;\n\n\t\t\t\t\t\tEND;\n\n\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 210 )\n\t\t\t\t\t\t\tAND @TraceFileIssue = 0\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  IF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 204) WITH NOWAIT\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  INSERT    INTO [#BlitzResults]\n\t\t\t\t\t\t\t\t\t( [CheckID] ,\n\t\t\t\t\t\t\t\t\t  [Priority] ,\n\t\t\t\t\t\t\t\t\t  [FindingsGroup] ,\n\t\t\t\t\t\t\t\t\t  [Finding] ,\n\t\t\t\t\t\t\t\t\t  [URL] ,\n\t\t\t\t\t\t\t\t\t  [Details] )\n\n\t\t\t\t\t\tSELECT 210 AS CheckID ,\n\t\t\t\t\t\t        10 AS Priority ,\n\t\t\t\t\t\t        'Performance' AS FindingsGroup ,\n\t\t\t\t\t\t        'DBCC SHRINK% Ran Recently' AS Finding ,\n\t\t\t\t\t\t        '' AS URL ,\n\t\t\t\t\t\t        'The user ' + COALESCE(d.nt_user_name, d.login_name) + ' has run file shrinks ' + CAST(COUNT(*) AS NVARCHAR(100)) + ' times between ' + CONVERT(NVARCHAR(30), MIN(d.min_start_time)) + ' and ' + CONVERT(NVARCHAR(30),  MAX(d.max_start_time)) + \n\t\t\t\t\t\t\t\t'. So, uh, are they trying cause bad performance on purpose?'\n\t\t\t\t\t\t\t\tAS Details\n\t\t\t\t\t\tFROM    #dbcc_events_from_trace d\n\t\t\t\t\t\tWHERE d.dbcc_event_trunc_upper LIKE N'DBCC SHRINK%'\n\t\t\t\t\t\tGROUP BY COALESCE(d.nt_user_name, d.login_name)\n\t\t\t\t\t\tHAVING COUNT(*) > 0;\n\n\t\t\t\t\t\tEND;\n\n\n/*End: checking default trace for odd DBCC activity*/\n\t\t\t\t\n\t\t\t\t/*Begin check for autoshrink events*/\n\n\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 206 )\n\t\t\t\t\t\tAND @TraceFileIssue = 0\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  IF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 205) WITH NOWAIT\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  INSERT    INTO [#BlitzResults]\n\t\t\t\t\t\t\t\t\t( [CheckID] ,\n\t\t\t\t\t\t\t\t\t  [Priority] ,\n\t\t\t\t\t\t\t\t\t  [FindingsGroup] ,\n\t\t\t\t\t\t\t\t\t  [Finding] ,\n\t\t\t\t\t\t\t\t\t  [URL] ,\n\t\t\t\t\t\t\t\t\t  [Details] )\n\n\t\t\t\t\t\tSELECT\t206 AS CheckID ,\n\t\t\t\t\t\t\t\t        10 AS Priority ,\n\t\t\t\t\t\t\t\t        'Performance' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t        'Auto-Shrink Ran Recently' AS Finding ,\n\t\t\t\t\t\t\t\t        '' AS URL , \n\t\t\t\t\t\t\t\t\t\tN'The database ' + QUOTENAME(t.DatabaseName) + N' has had ' \n\t\t\t\t\t\t\t\t\t\t\t+ CONVERT(NVARCHAR(10), COUNT(*)) \n\t\t\t\t\t\t\t\t\t\t\t\t+ N' auto shrink events between ' \n\t\t\t\t\t\t\t\t\t\t\t\t\t+ CONVERT(NVARCHAR(30), MIN(t.StartTime)) + ' and ' + CONVERT(NVARCHAR(30), MAX(t.StartTime)) \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ ' that lasted on average ' \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ CONVERT(NVARCHAR(10), AVG(DATEDIFF(SECOND, t.StartTime, t.EndTime)))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ ' seconds.' AS Details\n\t\t\t\t\t\tFROM #fnTraceGettable AS t\n\t\t\t\t\t\tWHERE t.EventClass IN (94, 95)\n\t\t\t\t\t\tGROUP BY t.DatabaseName\n\t\t\t\t\t\tHAVING AVG(DATEDIFF(SECOND, t.StartTime, t.EndTime)) > 5;\n\t\t\t\t\n\t\t\t\tEND;\n\n\n\t\t\t\tIF @CheckUserDatabaseObjects = 1\n\t\t\t\t\tBEGIN\n\n\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Starting @CheckUserDatabaseObjects section.', 0, 1) WITH NOWAIT\n\n                        /*\n                        But what if you need to run a query in every individual database?\n\t\t\t\t        Check out CheckID 99 below. Yes, it uses sp_MSforeachdb, and no,\n\t\t\t\t        we're not happy about that. sp_MSforeachdb is known to have a lot\n\t\t\t\t        of issues, like skipping databases sometimes. However, this is the\n\t\t\t\t        only built-in option that we have. If you're writing your own code\n\t\t\t\t        for database maintenance, consider Aaron Bertrand's alternative:\n\t\t\t\t        http://www.mssqltips.com/sqlservertip/2201/making-a-more-reliable-and-flexible-spmsforeachdb/\n\t\t\t\t        We don't include that as part of sp_Blitz, of course, because\n\t\t\t\t        copying and distributing copyrighted code from others without their\n\t\t\t\t        written permission isn't a good idea.\n\t\t\t\t        */\n\t\t\t\t        IF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t        FROM    #SkipChecks\n\t\t\t\t\t\t\t\t        WHERE   DatabaseName IS NULL AND CheckID = 99 )\n\t\t\t\t\t        BEGIN\n\t\t\t\t\t\t        \n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 99) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEXEC dbo.sp_MSforeachdb 'USE [?];  IF EXISTS (SELECT * FROM  sys.tables WITH (NOLOCK) WHERE name = ''sysmergepublications'' ) IF EXISTS ( SELECT * FROM sysmergepublications WITH (NOLOCK) WHERE retention = 0)   INSERT INTO #BlitzResults (CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details) SELECT DISTINCT 99, DB_NAME(), 110, ''Performance'', ''Infinite merge replication metadata retention period'', ''https://BrentOzar.com/go/merge'', (''The ['' + DB_NAME() + ''] database has merge replication metadata retention period set to infinite - this can be the case of significant performance issues.'')';\n\t\t\t\t\t        END;\n\t\t\t\t        /*\n\t\t\t\t        Note that by using sp_MSforeachdb, we're running the query in all\n\t\t\t\t        databases. We're not checking #SkipChecks here for each database to\n\t\t\t\t        see if we should run the check in this database. That means we may\n\t\t\t\t        still run a skipped check if it involves sp_MSforeachdb. We just\n\t\t\t\t        don't output those results in the last step.\n                        */\n\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 163 )\n                            AND EXISTS(SELECT * FROM sys.all_objects WHERE name = 'database_query_store_options')\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t/* --TOURSTOP03-- */\n\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 163) WITH NOWAIT;\n\n\t\t\t\t\t\t\t\tEXEC dbo.sp_MSforeachdb 'USE [?];\n\t\t\t                            INSERT INTO #BlitzResults\n\t\t\t                            (CheckID,\n\t\t\t                            DatabaseName,\n\t\t\t                            Priority,\n\t\t\t                            FindingsGroup,\n\t\t\t                            Finding,\n\t\t\t                            URL,\n\t\t\t                            Details)\n\t\t                              SELECT TOP 1 163,\n\t\t                              ''?'',\n\t\t                              200,\n\t\t                              ''Performance'',\n\t\t                              ''Query Store Disabled'',\n\t\t                              ''https://BrentOzar.com/go/querystore'',\n\t\t                              (''The new SQL Server 2016 Query Store feature has not been enabled on this database.'')\n\t\t                              FROM [?].sys.database_query_store_options WHERE desired_state = 0 \n\t\t\t\t\t\t\t\t\t  AND ''?'' NOT IN (''master'', ''model'', ''msdb'', ''tempdb'', ''DWConfiguration'', ''DWDiagnostics'', ''DWQueue'', ''ReportServer'', ''ReportServerTempDB'') OPTION (RECOMPILE)';\n\t\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tIF @ProductVersionMajor >= 13 AND @ProductVersionMinor < 2149 --CU1 has the fix in it\n\t\t\t\t\t\t\tAND NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\t\t FROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\t\t WHERE   DatabaseName IS NULL AND CheckID = 182 )\n\t\t\t\t\t\t\tAND CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) NOT LIKE '%Enterprise%'\n\t\t\t\t\t\t\tAND CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) NOT LIKE '%Developer%'\n\t\t\t\t\t\t\tBEGIN \n\t\t\t                \n\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 182) WITH NOWAIT;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tSET @StringToExecute = 'INSERT INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t\t\t\t\t(CheckID,\n\t\t\t\t\t\t\t\t\t\t\t\t\tDatabaseName,\n\t\t\t\t\t\t\t\t\t\t\t\t\tPriority,\n\t\t\t\t\t\t\t\t\t\t\t\t\tFindingsGroup,\n\t\t\t\t\t\t\t\t\t\t\t\t\tFinding,\n\t\t\t\t\t\t\t\t\t\t\t\t\tURL,\n\t\t\t\t\t\t\t\t\t\t\t\t\tDetails)\n\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT TOP 1 \n\t\t\t\t\t\t\t\t\t\t\t\t\t182,\n\t\t\t\t\t\t\t\t\t\t\t\t\t''Server'',\n\t\t\t\t\t\t\t\t\t\t\t\t\t20,\n\t\t\t\t\t\t\t\t\t\t\t\t\t''Reliability'',\n\t\t\t\t\t\t\t\t\t\t\t\t\t''Query Store Cleanup Disabled'',\n\t\t\t\t\t\t\t\t\t\t\t\t\t''https://BrentOzar.com/go/cleanup'',\n\t\t\t\t\t\t\t\t\t\t\t\t\t(''SQL 2016 RTM has a bug involving dumps that happen every time Query Store cleanup jobs run. This is fixed in CU1 and later: https://sqlserverupdates.com/sql-server-2016-updates/'')\n\t\t\t\t\t\t\t\t\t\t\t\t\tFROM    sys.databases AS d\n\t\t\t\t\t\t\t\t\t\t\t\t\tWHERE   d.is_query_store_on = 1 OPTION (RECOMPILE);';\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\t\tEND;\n\n\t\t\t\t        IF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t        FROM    #SkipChecks\n\t\t\t\t\t\t\t\t        WHERE   DatabaseName IS NULL AND CheckID = 41 )\n\t\t\t\t\t        BEGIN\n\t\t\t\t\t\t        \n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 41) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEXEC dbo.sp_MSforeachdb 'use [?];\n\t\t                              INSERT INTO #BlitzResults\n\t\t                              (CheckID,\n\t\t                              DatabaseName,\n\t\t                              Priority,\n\t\t                              FindingsGroup,\n\t\t                              Finding,\n\t\t                              URL,\n\t\t                              Details)\n\t\t                              SELECT 41,\n\t\t                              ''?'',\n\t\t                              170,\n\t\t                              ''File Configuration'',\n\t\t                              ''Multiple Log Files on One Drive'',\n\t\t                              ''https://BrentOzar.com/go/manylogs'',\n\t\t                              (''The ['' + DB_NAME() + ''] database has multiple log files on the '' + LEFT(physical_name, 1) + '' drive. This is not a performance booster because log file access is sequential, not parallel.'')\n\t\t                              FROM [?].sys.database_files WHERE type_desc = ''LOG''\n\t\t\t                            AND ''?'' <> ''[tempdb]''\n\t\t                              GROUP BY LEFT(physical_name, 1)\n\t\t                              HAVING COUNT(*) > 1 OPTION (RECOMPILE);';\n\t\t\t\t\t        END;\n\n\t\t\t\t        IF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t        FROM    #SkipChecks\n\t\t\t\t\t\t\t\t        WHERE   DatabaseName IS NULL AND CheckID = 42 )\n\t\t\t\t\t        BEGIN\n\t\t\t\t\t\t        \n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 42) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEXEC dbo.sp_MSforeachdb 'use [?];\n\t\t\t                            INSERT INTO #BlitzResults\n\t\t\t                            (CheckID,\n\t\t\t                            DatabaseName,\n\t\t\t                            Priority,\n\t\t\t                            FindingsGroup,\n\t\t\t                            Finding,\n\t\t\t                            URL,\n\t\t\t                            Details)\n\t\t\t                            SELECT DISTINCT 42,\n\t\t\t                            ''?'',\n\t\t\t                            170,\n\t\t\t                            ''File Configuration'',\n\t\t\t                            ''Uneven File Growth Settings in One Filegroup'',\n\t\t\t                            ''https://BrentOzar.com/go/grow'',\n\t\t\t                            (''The ['' + DB_NAME() + ''] database has multiple data files in one filegroup, but they are not all set up to grow in identical amounts.  This can lead to uneven file activity inside the filegroup.'')\n\t\t\t                            FROM [?].sys.database_files\n\t\t\t                            WHERE type_desc = ''ROWS''\n\t\t\t                            GROUP BY data_space_id\n\t\t\t                            HAVING COUNT(DISTINCT growth) > 1 OR COUNT(DISTINCT is_percent_growth) > 1 OPTION (RECOMPILE);';\n\t\t\t\t\t        END;\n\n\n\t\t\t\t            IF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t            FROM    #SkipChecks\n\t\t\t\t\t\t\t\t            WHERE   DatabaseName IS NULL AND CheckID = 82 )\n\t\t\t\t\t            BEGIN\n\n\t\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 82) WITH NOWAIT;\n\n\t\t\t\t\t\t            EXEC sp_MSforeachdb 'use [?];\n\t\t                                INSERT INTO #BlitzResults\n\t\t                                (CheckID,\n\t\t                                DatabaseName,\n\t\t                                Priority,\n\t\t                                FindingsGroup,\n\t\t                                Finding,\n\t\t                                URL, Details)\n\t\t                                SELECT  DISTINCT 82 AS CheckID,\n\t\t                                ''?'' as DatabaseName,\n\t\t                                170 AS Priority,\n\t\t                                ''File Configuration'' AS FindingsGroup,\n\t\t                                ''File growth set to percent'',\n\t\t                                ''https://BrentOzar.com/go/percentgrowth'' AS URL,\n\t\t                                ''The ['' + DB_NAME() + ''] database file '' + f.physical_name + '' has grown to '' + CONVERT(NVARCHAR(10), CONVERT(NUMERIC(38, 2), (f.size / 128.) / 1024.)) + '' GB, and is using percent filegrowth settings. This can lead to slow performance during growths if Instant File Initialization is not enabled.''\n\t\t                                FROM    [?].sys.database_files f\n\t\t                                WHERE   is_percent_growth = 1 and size > 128000  OPTION (RECOMPILE);';\n\t\t\t\t\t            END;\n\n\n\n                            /* addition by Henrik Staun Poulsen, Stovi Software */\n\t\t\t\t            IF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t            FROM    #SkipChecks\n\t\t\t\t\t\t\t\t            WHERE   DatabaseName IS NULL AND CheckID = 158 )\n\t\t\t\t\t            BEGIN\n\n\t\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 158) WITH NOWAIT;\n\n\t\t\t\t\t\t            EXEC sp_MSforeachdb 'use [?];\n\t\t                                INSERT INTO #BlitzResults\n\t\t                                (CheckID,\n\t\t                                DatabaseName,\n\t\t                                Priority,\n\t\t                                FindingsGroup,\n\t\t                                Finding,\n\t\t                                URL, Details)\n\t\t                                SELECT  DISTINCT 158 AS CheckID,\n\t\t                                ''?'' as DatabaseName,\n\t\t                                170 AS Priority,\n\t\t                                ''File Configuration'' AS FindingsGroup,\n\t\t                                ''File growth set to 1MB'',\n\t\t                                ''https://BrentOzar.com/go/percentgrowth'' AS URL,\n\t\t                                ''The ['' + DB_NAME() + ''] database file '' + f.physical_name + '' is using 1MB filegrowth settings, but it has grown to '' + CAST((f.size * 8 / 1000000) AS NVARCHAR(10)) + '' GB. Time to up the growth amount.''\n\t\t                                FROM    [?].sys.database_files f\n                                        WHERE is_percent_growth = 0 and growth=128 and size > 128000  OPTION (RECOMPILE);';\n\t\t\t\t\t            END;\n\n\n\n\t\t\t\t        IF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t        FROM    #SkipChecks\n\t\t\t\t\t\t\t\t        WHERE   DatabaseName IS NULL AND CheckID = 33 )\n\t\t\t\t\t        BEGIN\n\t\t\t\t\t\t        IF @@VERSION NOT LIKE '%Microsoft SQL Server 2000%'\n\t\t\t\t\t\t\t        AND @@VERSION NOT LIKE '%Microsoft SQL Server 2005%'\n\t\t\t\t\t\t\t        BEGIN\n\t\t\t\t\t\t\t\t        \n\t\t\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 33) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tEXEC dbo.sp_MSforeachdb 'USE [?]; INSERT INTO #BlitzResults\n\t\t\t\t\t                                (CheckID,\n\t\t\t\t\t                                DatabaseName,\n\t\t\t\t\t                                Priority,\n\t\t\t\t\t                                FindingsGroup,\n\t\t\t\t\t                                Finding,\n\t\t\t\t\t                                URL,\n\t\t\t\t\t                                Details)\n\t\t                                  SELECT DISTINCT 33,\n\t\t                                  db_name(),\n\t\t                                  200,\n\t\t                                  ''Licensing'',\n\t\t                                  ''Enterprise Edition Features In Use'',\n\t\t                                  ''https://BrentOzar.com/go/ee'',\n\t\t                                  (''The ['' + DB_NAME() + ''] database is using '' + feature_name + ''.  If this database is restored onto a Standard Edition server, the restore will fail on versions prior to 2016 SP1.'')\n\t\t                                  FROM [?].sys.dm_db_persisted_sku_features OPTION (RECOMPILE);';\n\t\t\t\t\t\t\t        END;\n\t\t\t\t\t        END;\n\n\n\t\t\t\t        IF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t        FROM    #SkipChecks\n\t\t\t\t\t\t\t\t        WHERE   DatabaseName IS NULL AND CheckID = 19 )\n\t\t\t\t\t        BEGIN\n\t\t\t\t\t\t        /* Method 1: Check sys.databases parameters */\n\t\t\t\t\t\t        \n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 19) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t        ( CheckID ,\n\t\t\t\t\t\t\t\t          DatabaseName ,\n\t\t\t\t\t\t\t\t          Priority ,\n\t\t\t\t\t\t\t\t          FindingsGroup ,\n\t\t\t\t\t\t\t\t          Finding ,\n\t\t\t\t\t\t\t\t          URL ,\n\t\t\t\t\t\t\t\t          Details\n\t\t\t\t\t\t\t\t        )\n\n\t\t\t\t\t\t\t\t        SELECT  19 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t        [name] AS DatabaseName ,\n\t\t\t\t\t\t\t\t\t\t        200 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t        'Informational' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t        'Replication In Use' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t        'https://BrentOzar.com/go/repl' AS URL ,\n\t\t\t\t\t\t\t\t\t\t        ( 'Database [' + [name]\n\t\t\t\t\t\t\t\t\t\t          + '] is a replication publisher, subscriber, or distributor.' ) AS Details\n\t\t\t\t\t\t\t\t        FROM    sys.databases\n\t\t\t\t\t\t\t\t        WHERE   name NOT IN ( SELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t        DatabaseName\n\t\t\t\t\t\t\t\t\t\t\t\t\t          FROM      #SkipChecks \n\t\t\t\t\t\t\t\t\t\t\t\t\t          WHERE CheckID IS NULL OR CheckID = 19)\n\t\t\t\t\t\t\t\t\t\t        AND is_published = 1\n\t\t\t\t\t\t\t\t\t\t        OR is_subscribed = 1\n\t\t\t\t\t\t\t\t\t\t        OR is_merge_published = 1\n\t\t\t\t\t\t\t\t\t\t        OR is_distributor = 1;\n\n\t\t\t\t\t\t        /* Method B: check subscribers for MSreplication_objects tables */\n\t\t\t\t\t\t        EXEC dbo.sp_MSforeachdb 'USE [?]; INSERT INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t\t        (CheckID,\n\t\t\t\t\t\t\t\t\t\t        DatabaseName,\n\t\t\t\t\t\t\t\t\t\t        Priority,\n\t\t\t\t\t\t\t\t\t\t        FindingsGroup,\n\t\t\t\t\t\t\t\t\t\t        Finding,\n\t\t\t\t\t\t\t\t\t\t        URL,\n\t\t\t\t\t\t\t\t\t\t        Details)\n\t\t\t\t\t\t\t          SELECT DISTINCT 19,\n\t\t\t\t\t\t\t          db_name(),\n\t\t\t\t\t\t\t          200,\n\t\t\t\t\t\t\t          ''Informational'',\n\t\t\t\t\t\t\t          ''Replication In Use'',\n\t\t\t\t\t\t\t          ''https://BrentOzar.com/go/repl'',\n\t\t\t\t\t\t\t          (''['' + DB_NAME() + ''] has MSreplication_objects tables in it, indicating it is a replication subscriber.'')\n\t\t\t\t\t\t\t          FROM [?].sys.tables\n\t\t\t\t\t\t\t          WHERE name = ''dbo.MSreplication_objects'' AND ''?'' <> ''master'' OPTION (RECOMPILE)';\n\n\t\t\t\t\t        END;\n\n\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 32 )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 32) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEXEC dbo.sp_MSforeachdb 'USE [?];\n\t\t\tINSERT INTO #BlitzResults\n\t\t\t(CheckID,\n\t\t\tDatabaseName,\n\t\t\tPriority,\n\t\t\tFindingsGroup,\n\t\t\tFinding,\n\t\t\tURL,\n\t\t\tDetails)\n\t\t\tSELECT 32,\n\t\t\t''?'',\n\t\t\t150,\n\t\t\t''Performance'',\n\t\t\t''Triggers on Tables'',\n\t\t\t''https://BrentOzar.com/go/trig'',\n\t\t\t(''The ['' + DB_NAME() + ''] database has '' + CAST(SUM(1) AS NVARCHAR(50)) + '' triggers.'')\n\t\t\tFROM [?].sys.triggers t INNER JOIN [?].sys.objects o ON t.parent_id = o.object_id\n\t\t\tINNER JOIN [?].sys.schemas s ON o.schema_id = s.schema_id WHERE t.is_ms_shipped = 0 AND DB_NAME() != ''ReportServer''\n\t\t\tHAVING SUM(1) > 0 OPTION (RECOMPILE)';\n\t\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 38 )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 38) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEXEC dbo.sp_MSforeachdb 'USE [?];\n\t\t\tINSERT INTO #BlitzResults\n\t\t\t(CheckID,\n\t\t\tDatabaseName,\n\t\t\tPriority,\n\t\t\tFindingsGroup,\n\t\t\tFinding,\n\t\t\tURL,\n\t\t\tDetails)\n\t\t  SELECT DISTINCT 38,\n\t\t  ''?'',\n\t\t  110,\n\t\t  ''Performance'',\n\t\t  ''Active Tables Without Clustered Indexes'',\n\t\t  ''https://BrentOzar.com/go/heaps'',\n\t\t  (''The ['' + DB_NAME() + ''] database has heaps - tables without a clustered index - that are being actively queried.'')\n\t\t  FROM [?].sys.indexes i INNER JOIN [?].sys.objects o ON i.object_id = o.object_id\n\t\t  INNER JOIN [?].sys.partitions p ON i.object_id = p.object_id AND i.index_id = p.index_id\n\t\t  INNER JOIN sys.databases sd ON sd.name = ''?''\n\t\t  LEFT OUTER JOIN [?].sys.dm_db_index_usage_stats ius ON i.object_id = ius.object_id AND i.index_id = ius.index_id AND ius.database_id = sd.database_id\n\t\t  WHERE i.type_desc = ''HEAP'' AND COALESCE(ius.user_seeks, ius.user_scans, ius.user_lookups, ius.user_updates) IS NOT NULL\n\t\t  AND sd.name <> ''tempdb'' AND sd.name <> ''DWDiagnostics'' AND o.is_ms_shipped = 0 AND o.type <> ''S'' OPTION (RECOMPILE)';\n\t\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 164 )\n                            AND EXISTS(SELECT * FROM sys.all_objects WHERE name = 'fn_validate_plan_guide')\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 164) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEXEC dbo.sp_MSforeachdb 'USE [?];\n\t\t\tINSERT INTO #BlitzResults\n\t\t\t(CheckID,\n\t\t\tDatabaseName,\n\t\t\tPriority,\n\t\t\tFindingsGroup,\n\t\t\tFinding,\n\t\t\tURL,\n\t\t\tDetails)\n\t\t  SELECT DISTINCT 164,\n\t\t  ''?'',\n\t\t  20,\n\t\t  ''Reliability'',\n\t\t  ''Plan Guides Failing'',\n\t\t  ''https://BrentOzar.com/go/misguided'',\n\t\t  (''The ['' + DB_NAME() + ''] database has plan guides that are no longer valid, so the queries involved may be failing silently.'')\n\t\t  FROM [?].sys.plan_guides g CROSS APPLY fn_validate_plan_guide(g.plan_guide_id) OPTION (RECOMPILE)';\n\t\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 39 )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 39) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEXEC dbo.sp_MSforeachdb 'USE [?];\n\t\t\tINSERT INTO #BlitzResults\n\t\t\t(CheckID,\n\t\t\tDatabaseName,\n\t\t\tPriority,\n\t\t\tFindingsGroup,\n\t\t\tFinding,\n\t\t\tURL,\n\t\t\tDetails)\n\t\t  SELECT DISTINCT 39,\n\t\t  ''?'',\n\t\t  150,\n\t\t  ''Performance'',\n\t\t  ''Inactive Tables Without Clustered Indexes'',\n\t\t  ''https://BrentOzar.com/go/heaps'',\n\t\t  (''The ['' + DB_NAME() + ''] database has heaps - tables without a clustered index - that have not been queried since the last restart.  These may be backup tables carelessly left behind.'')\n\t\t  FROM [?].sys.indexes i INNER JOIN [?].sys.objects o ON i.object_id = o.object_id\n\t\t  INNER JOIN [?].sys.partitions p ON i.object_id = p.object_id AND i.index_id = p.index_id\n\t\t  INNER JOIN sys.databases sd ON sd.name = ''?''\n\t\t  LEFT OUTER JOIN [?].sys.dm_db_index_usage_stats ius ON i.object_id = ius.object_id AND i.index_id = ius.index_id AND ius.database_id = sd.database_id\n\t\t  WHERE i.type_desc = ''HEAP'' AND COALESCE(ius.user_seeks, ius.user_scans, ius.user_lookups, ius.user_updates) IS NULL\n\t\t  AND sd.name <> ''tempdb'' AND sd.name <> ''DWDiagnostics'' AND o.is_ms_shipped = 0 AND o.type <> ''S'' OPTION (RECOMPILE)';\n\t\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 46 )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 46) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEXEC dbo.sp_MSforeachdb 'USE [?];\n\t\t  INSERT INTO #BlitzResults\n\t\t\t\t(CheckID,\n\t\t\t\tDatabaseName,\n\t\t\t\tPriority,\n\t\t\t\tFindingsGroup,\n\t\t\t\tFinding,\n\t\t\t\tURL,\n\t\t\t\tDetails)\n\t\t  SELECT 46,\n\t\t  ''?'',\n\t\t  150,\n\t\t  ''Performance'',\n\t\t  ''Leftover Fake Indexes From Wizards'',\n\t\t  ''https://BrentOzar.com/go/hypo'',\n\t\t  (''The index ['' + DB_NAME() + ''].['' + s.name + ''].['' + o.name + ''].['' + i.name + ''] is a leftover hypothetical index from the Index Tuning Wizard or Database Tuning Advisor.  This index is not actually helping performance and should be removed.'')\n\t\t  from [?].sys.indexes i INNER JOIN [?].sys.objects o ON i.object_id = o.object_id INNER JOIN [?].sys.schemas s ON o.schema_id = s.schema_id\n\t\t  WHERE i.is_hypothetical = 1 OPTION (RECOMPILE);';\n\t\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 47 )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 47) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEXEC dbo.sp_MSforeachdb 'USE [?];\n\t\t  INSERT INTO #BlitzResults\n\t\t\t\t(CheckID,\n\t\t\t\tDatabaseName,\n\t\t\t\tPriority,\n\t\t\t\tFindingsGroup,\n\t\t\t\tFinding,\n\t\t\t\tURL,\n\t\t\t\tDetails)\n\t\t  SELECT 47,\n\t\t  ''?'',\n\t\t  100,\n\t\t  ''Performance'',\n\t\t  ''Indexes Disabled'',\n\t\t  ''https://BrentOzar.com/go/ixoff'',\n\t\t  (''The index ['' + DB_NAME() + ''].['' + s.name + ''].['' + o.name + ''].['' + i.name + ''] is disabled.  This index is not actually helping performance and should either be enabled or removed.'')\n\t\t  from [?].sys.indexes i INNER JOIN [?].sys.objects o ON i.object_id = o.object_id INNER JOIN [?].sys.schemas s ON o.schema_id = s.schema_id\n\t\t  WHERE i.is_disabled = 1 OPTION (RECOMPILE);';\n\t\t\t\t\t\t\tEND;\n\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 48 )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 48) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEXEC dbo.sp_MSforeachdb 'USE [?];\n\t\t  INSERT INTO #BlitzResults\n\t\t\t\t(CheckID,\n\t\t\t\tDatabaseName,\n\t\t\t\tPriority,\n\t\t\t\tFindingsGroup,\n\t\t\t\tFinding,\n\t\t\t\tURL,\n\t\t\t\tDetails)\n\t\t  SELECT DISTINCT 48,\n\t\t  ''?'',\n\t\t  150,\n\t\t  ''Performance'',\n\t\t  ''Foreign Keys Not Trusted'',\n\t\t  ''https://BrentOzar.com/go/trust'',\n\t\t  (''The ['' + DB_NAME() + ''] database has foreign keys that were probably disabled, data was changed, and then the key was enabled again.  Simply enabling the key is not enough for the optimizer to use this key - we have to alter the table using the WITH CHECK CHECK CONSTRAINT parameter.'')\n\t\t  from [?].sys.foreign_keys i INNER JOIN [?].sys.objects o ON i.parent_object_id = o.object_id INNER JOIN [?].sys.schemas s ON o.schema_id = s.schema_id\n\t\t  WHERE i.is_not_trusted = 1 AND i.is_not_for_replication = 0 AND i.is_disabled = 0 AND ''?'' NOT IN (''master'', ''model'', ''msdb'', ''ReportServer'', ''ReportServerTempDB'') OPTION (RECOMPILE);';\n\t\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 56 )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 56) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEXEC dbo.sp_MSforeachdb 'USE [?];\n\t\t  INSERT INTO #BlitzResults\n\t\t\t\t(CheckID,\n\t\t\t\tDatabaseName,\n\t\t\t\tPriority,\n\t\t\t\tFindingsGroup,\n\t\t\t\tFinding,\n\t\t\t\tURL,\n\t\t\t\tDetails)\n\t\t  SELECT 56,\n\t\t  ''?'',\n\t\t  150,\n\t\t  ''Performance'',\n\t\t  ''Check Constraint Not Trusted'',\n\t\t  ''https://BrentOzar.com/go/trust'',\n\t\t  (''The check constraint ['' + DB_NAME() + ''].['' + s.name + ''].['' + o.name + ''].['' + i.name + ''] is not trusted - meaning, it was disabled, data was changed, and then the constraint was enabled again.  Simply enabling the constraint is not enough for the optimizer to use this constraint - we have to alter the table using the WITH CHECK CHECK CONSTRAINT parameter.'')\n\t\t  from [?].sys.check_constraints i INNER JOIN [?].sys.objects o ON i.parent_object_id = o.object_id\n\t\t  INNER JOIN [?].sys.schemas s ON o.schema_id = s.schema_id\n\t\t  WHERE i.is_not_trusted = 1 AND i.is_not_for_replication = 0 AND i.is_disabled = 0 OPTION (RECOMPILE);';\n\t\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 95 )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\tIF @@VERSION NOT LIKE '%Microsoft SQL Server 2000%'\n\t\t\t\t\t\t\t\t\tAND @@VERSION NOT LIKE '%Microsoft SQL Server 2005%'\n\t\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 95) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tEXEC dbo.sp_MSforeachdb 'USE [?];\n\t\t\tINSERT INTO #BlitzResults\n\t\t\t\t  (CheckID,\n\t\t\t\t  DatabaseName,\n\t\t\t\t  Priority,\n\t\t\t\t  FindingsGroup,\n\t\t\t\t  Finding,\n\t\t\t\t  URL,\n\t\t\t\t  Details)\n\t\t\tSELECT TOP 1 95 AS CheckID,\n\t\t\t''?'' as DatabaseName,\n\t\t\t110 AS Priority,\n\t\t\t''Performance'' AS FindingsGroup,\n\t\t\t''Plan Guides Enabled'' AS Finding,\n\t\t\t''https://BrentOzar.com/go/guides'' AS URL,\n\t\t\t(''Database ['' + DB_NAME() + ''] has query plan guides so a query will always get a specific execution plan. If you are having trouble getting query performance to improve, it might be due to a frozen plan. Review the DMV sys.plan_guides to learn more about the plan guides in place on this server.'') AS Details\n\t\t\tFROM [?].sys.plan_guides WHERE is_disabled = 0 OPTION (RECOMPILE);';\n\t\t\t\t\t\t\t\t\tEND;\n\t\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 60 )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 60) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEXEC sp_MSforeachdb 'USE [?];\n\t\t  INSERT INTO #BlitzResults\n\t\t\t\t(CheckID,\n\t\t\t\tDatabaseName,\n\t\t\t\tPriority,\n\t\t\t\tFindingsGroup,\n\t\t\t\tFinding,\n\t\t\t\tURL,\n\t\t\t\tDetails)\n\t\t  SELECT 60 AS CheckID,\n\t\t  ''?'' as DatabaseName,\n\t\t  100 AS Priority,\n\t\t  ''Performance'' AS FindingsGroup,\n\t\t  ''Fill Factor Changed'',\n\t\t  ''https://BrentOzar.com/go/fillfactor'' AS URL,\n\t\t  ''The ['' + DB_NAME() + ''] database has '' + CAST(SUM(1) AS NVARCHAR(50)) + '' objects with fill factor = '' + CAST(fill_factor AS NVARCHAR(5)) + ''%. This can cause memory and storage performance problems, but may also prevent page splits.''\n\t\t  FROM    [?].sys.indexes\n\t\t  WHERE   fill_factor <> 0 AND fill_factor < 80 AND is_disabled = 0 AND is_hypothetical = 0 \n\t\t  GROUP BY fill_factor OPTION (RECOMPILE);';\n\t\t\t\t\t\t\tEND;\n\n\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 78 )\n\t\t\t\t\t\t\tBEGIN\n                                \n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 78) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEXECUTE master.sys.sp_MSforeachdb 'USE [?]; \n                                    INSERT INTO #Recompile \n                                    SELECT DBName = DB_Name(), SPName = SO.name, SM.is_recompiled, ISR.SPECIFIC_SCHEMA \n                                    FROM sys.sql_modules AS SM \n                                    LEFT OUTER JOIN master.sys.databases AS sDB ON SM.object_id = DB_id() \n                                    LEFT OUTER JOIN dbo.sysobjects AS SO ON SM.object_id = SO.id and type = ''P'' \n                                    LEFT OUTER JOIN INFORMATION_SCHEMA.ROUTINES AS ISR on ISR.Routine_Name = SO.name AND ISR.SPECIFIC_CATALOG = DB_Name()\n                                    WHERE SM.is_recompiled=1  OPTION (RECOMPILE); /* oh the rich irony of recompile here */\n                                    '; \n                                INSERT INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t\t\t\t\t(Priority,\n\t\t\t\t\t\t\t\t\t\t\t\t\tFindingsGroup,\n                                                    Finding,\n                                                    DatabaseName,\n                                                    URL,\n                                                    Details,\n                                                    CheckID)\n                                SELECT [Priority] = '100', \n                                    FindingsGroup = 'Performance', \n                                    Finding = 'Stored Procedure WITH RECOMPILE',\n                                    DatabaseName = DBName,\n                                    URL = 'https://BrentOzar.com/go/recompile',\n                                    Details = '[' + DBName + '].[' + SPSchema + '].[' + ProcName + '] has WITH RECOMPILE in the stored procedure code, which may cause increased CPU usage due to constant recompiles of the code.',\n                                    CheckID = '78'\n                                FROM #Recompile AS TR WHERE ProcName NOT LIKE 'sp_AskBrent%' AND ProcName NOT LIKE 'sp_Blitz%'; \n                                DROP TABLE #Recompile;\n                            END;\n\n\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 86 )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 86) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEXEC dbo.sp_MSforeachdb 'USE [?]; INSERT INTO #BlitzResults (CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details) SELECT DISTINCT 86, DB_NAME(), 230, ''Security'', ''Elevated Permissions on a Database'', ''https://BrentOzar.com/go/elevated'', (''In ['' + DB_NAME() + ''], user ['' + u.name + '']  has the role ['' + g.name + ''].  This user can perform tasks beyond just reading and writing data.'') FROM [?].dbo.sysmembers m inner join [?].dbo.sysusers u on m.memberuid = u.uid inner join sysusers g on m.groupuid = g.uid where u.name <> ''dbo'' and g.name in (''db_owner'' , ''db_accessadmin'' , ''db_securityadmin'' , ''db_ddladmin'') OPTION (RECOMPILE);';\n\t\t\t\t\t\t\tEND;\n\n\n\t\t\t\t\t\t\t/*Check for non-aligned indexes in partioned databases*/\n\n\t\t\t\t\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 72 )\n\t\t\t\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 72) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tEXEC dbo.sp_MSforeachdb 'USE [?];\n\t\t\t\t\t\t\t\tinsert into #partdb(dbname, objectname, type_desc)\n\t\t\t\t\t\t\t\tSELECT distinct db_name(DB_ID()) as DBName,o.name Object_Name,ds.type_desc\n\t\t\t\t\t\t\t\tFROM sys.objects AS o JOIN sys.indexes AS i ON o.object_id = i.object_id\n\t\t\t\t\t\t\t\tJOIN sys.data_spaces ds on ds.data_space_id = i.data_space_id\n\t\t\t\t\t\t\t\tLEFT OUTER JOIN sys.dm_db_index_usage_stats AS s ON i.object_id = s.object_id AND i.index_id = s.index_id AND s.database_id = DB_ID()\n\t\t\t\t\t\t\t\tWHERE  o.type = ''u''\n\t\t\t\t\t\t\t\t -- Clustered and Non-Clustered indexes\n\t\t\t\t\t\t\t\tAND i.type IN (1, 2)\n\t\t\t\t\t\t\t\tAND o.object_id in\n\t\t\t\t\t\t\t\t  (\n\t\t\t\t\t\t\t\t\tSELECT a.object_id from\n\t\t\t\t\t\t\t\t\t  (SELECT ob.object_id, ds.type_desc from sys.objects ob JOIN sys.indexes ind on ind.object_id = ob.object_id join sys.data_spaces ds on ds.data_space_id = ind.data_space_id\n\t\t\t\t\t\t\t\t\t  GROUP BY ob.object_id, ds.type_desc ) a group by a.object_id having COUNT (*) > 1\n\t\t\t\t\t\t\t\t  )  OPTION (RECOMPILE);';\n\t\t\t\t\t\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t72 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdbname AS DatabaseName ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t100 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Performance' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'The partitioned database ' + dbname\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ ' may have non-aligned indexes' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/aligned' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Having non-aligned indexes on partitioned tables may cause inefficient query plans and CPU pressure' AS Details\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM    #partdb\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHERE   dbname IS NOT NULL\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND dbname NOT IN ( SELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  DatabaseName\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM  #SkipChecks \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHERE CheckID IS NULL OR CheckID = 72);\n\t\t\t\t\t\t\t\t\t\t\t\tDROP TABLE #partdb;\n\t\t\t\t\t\t\t\t\t\t\tEND;\n\n\n\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 113 )\n\t\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t  IF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 113) WITH NOWAIT;\n\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t  EXEC dbo.sp_MSforeachdb 'USE [?];\n\t\t\t\t\t\t\t  INSERT INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t(CheckID,\n\t\t\t\t\t\t\t\t\tDatabaseName,\n\t\t\t\t\t\t\t\t\tPriority,\n\t\t\t\t\t\t\t\t\tFindingsGroup,\n\t\t\t\t\t\t\t\t\tFinding,\n\t\t\t\t\t\t\t\t\tURL,\n\t\t\t\t\t\t\t\t\tDetails)\n\t\t\t\t\t\t\t  SELECT DISTINCT 113,\n\t\t\t\t\t\t\t  ''?'',\n\t\t\t\t\t\t\t  50,\n\t\t\t\t\t\t\t  ''Reliability'',\n\t\t\t\t\t\t\t  ''Full Text Indexes Not Updating'',\n\t\t\t\t\t\t\t  ''https://BrentOzar.com/go/fulltext'',\n\t\t\t\t\t\t\t  (''At least one full text index in this database has not been crawled in the last week.'')\n\t\t\t\t\t\t\t  from [?].sys.fulltext_indexes i WHERE change_tracking_state_desc <> ''AUTO'' AND i.is_enabled = 1 AND i.crawl_end_date < DATEADD(dd, -7, GETDATE())  OPTION (RECOMPILE);';\n\t\t\t\t\t\t\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 115 )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 115) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEXEC dbo.sp_MSforeachdb 'USE [?];\n\t\t  INSERT INTO #BlitzResults\n\t\t\t\t(CheckID,\n\t\t\t\tDatabaseName,\n\t\t\t\tPriority,\n\t\t\t\tFindingsGroup,\n\t\t\t\tFinding,\n\t\t\t\tURL,\n\t\t\t\tDetails)\n\t\t  SELECT 115,\n\t\t  ''?'',\n\t\t  110,\n\t\t  ''Performance'',\n\t\t  ''Parallelism Rocket Surgery'',\n\t\t  ''https://BrentOzar.com/go/makeparallel'',\n\t\t  (''['' + DB_NAME() + ''] has a make_parallel function, indicating that an advanced developer may be manhandling SQL Server into forcing queries to go parallel.'')\n\t\t  from [?].INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_NAME = ''make_parallel'' AND ROUTINE_TYPE = ''FUNCTION'' OPTION (RECOMPILE);';\n\t\t\t\t\t\t\tEND;\n\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 122 )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 122) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t/* SQL Server 2012 and newer uses temporary stats for AlwaysOn Availability Groups, and those show up as user-created */\n\t\t\t\t\t\t\t\tIF EXISTS (SELECT *\n\t\t\t\t\t\t\t\t\t  FROM sys.all_columns c\n\t\t\t\t\t\t\t\t\t  INNER JOIN sys.all_objects o ON c.object_id = o.object_id\n\t\t\t\t\t\t\t\t\t  WHERE c.name = 'is_temporary' AND o.name = 'stats')\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tEXEC dbo.sp_MSforeachdb 'USE [?];\n\t\t\t\t\t\t\t\t\t\t\t\tINSERT INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t\t\t\t\t(CheckID,\n\t\t\t\t\t\t\t\t\t\t\t\t\tDatabaseName,\n\t\t\t\t\t\t\t\t\t\t\t\t\tPriority,\n\t\t\t\t\t\t\t\t\t\t\t\t\tFindingsGroup,\n\t\t\t\t\t\t\t\t\t\t\t\t\tFinding,\n\t\t\t\t\t\t\t\t\t\t\t\t\tURL,\n\t\t\t\t\t\t\t\t\t\t\t\t\tDetails)\n\t\t\t\t\t\t\t\t\t\t\t\tSELECT TOP 1 122,\n\t\t\t\t\t\t\t\t\t\t\t\t''?'',\n\t\t\t\t\t\t\t\t\t\t\t\t200,\n\t\t\t\t\t\t\t\t\t\t\t\t''Performance'',\n\t\t\t\t\t\t\t\t\t\t\t\t''User-Created Statistics In Place'',\n\t\t\t\t\t\t\t\t\t\t\t\t''https://BrentOzar.com/go/userstats'',\n\t\t\t\t\t\t\t\t\t\t\t\t(''['' + DB_NAME() + ''] has '' + CAST(SUM(1) AS NVARCHAR(10)) + '' user-created statistics. This indicates that someone is being a rocket scientist with the stats, and might actually be slowing things down, especially during stats updates.'')\n\t\t\t\t\t\t\t\t\t\t\t\tfrom [?].sys.stats WHERE user_created = 1 AND is_temporary = 0\n                                                HAVING SUM(1) > 0  OPTION (RECOMPILE);';\n\n\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\tEXEC dbo.sp_MSforeachdb 'USE [?];\n\t\t\t\t\t\t\t\t\t\t\t\tINSERT INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t\t\t\t\t(CheckID,\n\t\t\t\t\t\t\t\t\t\t\t\t\tDatabaseName,\n\t\t\t\t\t\t\t\t\t\t\t\t\tPriority,\n\t\t\t\t\t\t\t\t\t\t\t\t\tFindingsGroup,\n\t\t\t\t\t\t\t\t\t\t\t\t\tFinding,\n\t\t\t\t\t\t\t\t\t\t\t\t\tURL,\n\t\t\t\t\t\t\t\t\t\t\t\t\tDetails)\n\t\t\t\t\t\t\t\t\t\t\t\tSELECT 122,\n\t\t\t\t\t\t\t\t\t\t\t\t''?'',\n\t\t\t\t\t\t\t\t\t\t\t\t200,\n\t\t\t\t\t\t\t\t\t\t\t\t''Performance'',\n\t\t\t\t\t\t\t\t\t\t\t\t''User-Created Statistics In Place'',\n\t\t\t\t\t\t\t\t\t\t\t\t''https://BrentOzar.com/go/userstats'',\n\t\t\t\t\t\t\t\t\t\t\t\t(''['' + DB_NAME() + ''] has '' + CAST(SUM(1) AS NVARCHAR(10)) + '' user-created statistics. This indicates that someone is being a rocket scientist with the stats, and might actually be slowing things down, especially during stats updates.'')\n\t\t\t\t\t\t\t\t\t\t\t\tfrom [?].sys.stats WHERE user_created = 1\n                                                HAVING SUM(1) > 0 OPTION (RECOMPILE);';\n\n\n\t\t\t\t\t\t\tEND; /* IF NOT EXISTS ( SELECT  1 */\n\n\n\t\t        /*Check for high VLF count: this will omit any database snapshots*/\n\n\t\t\t\t        IF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t        FROM    #SkipChecks\n\t\t\t\t\t\t\t\t        WHERE   DatabaseName IS NULL AND CheckID = 69 )\n\t\t\t\t\t        BEGIN\n\t\t\t\t\t\t        IF @ProductVersionMajor >= 11\n\n\t\t\t\t\t\t\t        BEGIN\n\t\t\t\t\t\t\t\t        \n\t\t\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d] (2012 version of Log Info).', 0, 1, 69) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tEXEC sp_MSforeachdb N'USE [?];\n\t\t                                      INSERT INTO #LogInfo2012\n\t\t                                      EXEC sp_executesql N''DBCC LogInfo() WITH NO_INFOMSGS'';\n\t\t                                      IF    @@ROWCOUNT > 999\n\t\t                                      BEGIN\n\t\t\t                                    INSERT  INTO #BlitzResults\n\t\t\t                                    ( CheckID\n\t\t\t                                    ,DatabaseName\n\t\t\t                                    ,Priority\n\t\t\t                                    ,FindingsGroup\n\t\t\t                                    ,Finding\n\t\t\t                                    ,URL\n\t\t\t                                    ,Details)\n\t\t\t                                    SELECT      69\n\t\t\t                                    ,DB_NAME()\n\t\t\t                                    ,170\n\t\t\t                                    ,''File Configuration''\n\t\t\t                                    ,''High VLF Count''\n\t\t\t                                    ,''https://BrentOzar.com/go/vlf''\n\t\t\t                                    ,''The ['' + DB_NAME() + ''] database has '' +  CAST(COUNT(*) as VARCHAR(20)) + '' virtual log files (VLFs). This may be slowing down startup, restores, and even inserts/updates/deletes.''\n\t\t\t                                    FROM #LogInfo2012\n\t\t\t                                    WHERE EXISTS (SELECT name FROM master.sys.databases\n\t\t\t\t\t                                    WHERE source_database_id is null)  OPTION (RECOMPILE);\n\t\t                                      END\n\t\t                                    TRUNCATE TABLE #LogInfo2012;';\n\t\t\t\t\t\t\t\t        DROP TABLE #LogInfo2012;\n\t\t\t\t\t\t\t        END;\n\t\t\t\t\t\t        ELSE\n\t\t\t\t\t\t\t        BEGIN\n\t\t\t\t\t\t\t\t        \n\t\t\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d] (pre-2012 version of Log Info).', 0, 1, 69) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tEXEC sp_MSforeachdb N'USE [?];\n\t\t                                      INSERT INTO #LogInfo\n\t\t                                      EXEC sp_executesql N''DBCC LogInfo() WITH NO_INFOMSGS'';\n\t\t                                      IF    @@ROWCOUNT > 999\n\t\t                                      BEGIN\n\t\t\t                                    INSERT  INTO #BlitzResults\n\t\t\t                                    ( CheckID\n\t\t\t                                    ,DatabaseName\n\t\t\t                                    ,Priority\n\t\t\t                                    ,FindingsGroup\n\t\t\t                                    ,Finding\n\t\t\t                                    ,URL\n\t\t\t                                    ,Details)\n\t\t\t                                    SELECT      69\n\t\t\t                                    ,DB_NAME()\n\t\t\t                                    ,170\n\t\t\t                                    ,''File Configuration''\n\t\t\t                                    ,''High VLF Count''\n\t\t\t                                    ,''https://BrentOzar.com/go/vlf''\n\t\t\t                                    ,''The ['' + DB_NAME() + ''] database has '' +  CAST(COUNT(*) as VARCHAR(20)) + '' virtual log files (VLFs). This may be slowing down startup, restores, and even inserts/updates/deletes.''\n\t\t\t                                    FROM #LogInfo\n\t\t\t                                    WHERE EXISTS (SELECT name FROM master.sys.databases\n\t\t\t                                    WHERE source_database_id is null) OPTION (RECOMPILE);\n\t\t                                      END\n\t\t                                      TRUNCATE TABLE #LogInfo;';\n\t\t\t\t\t\t\t\t        DROP TABLE #LogInfo;\n\t\t\t\t\t\t\t        END;\n\t\t\t\t\t        END;\n\n\n\t\t\t\t        IF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t        FROM    #SkipChecks\n\t\t\t\t\t\t\t\t        WHERE   DatabaseName IS NULL AND CheckID = 80 )\n\t\t\t\t\t        BEGIN\n\t\t\t\t\t\t        \n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 80) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEXEC dbo.sp_MSforeachdb 'USE [?]; INSERT INTO #BlitzResults (CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details) SELECT DISTINCT 80, DB_NAME(), 170, ''Reliability'', ''Max File Size Set'', ''https://BrentOzar.com/go/maxsize'', (''The ['' + DB_NAME() + ''] database file '' + name + '' has a max file size set to '' + CAST(CAST(max_size AS BIGINT) * 8 / 1024 AS VARCHAR(100)) + ''MB. If it runs out of space, the database will stop working even though there may be drive space available.'') FROM sys.database_files WHERE max_size <> 268435456 AND max_size <> -1 AND type <> 2 AND name <> ''DWDiagnostics''  OPTION (RECOMPILE);';\n\t\t\t\t\t        END;\n\n\t\n\t\t\t\t\t\t/* Check if columnstore indexes are in use - for Github issue #615 */\n\t\t\t\t        IF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t        FROM    #SkipChecks\n\t\t\t\t\t\t\t\t        WHERE   DatabaseName IS NULL AND CheckID = 74 ) /* Trace flags */\n\t\t\t\t\t        BEGIN\n\t\t\t\t\t\t\t\tTRUNCATE TABLE #TemporaryDatabaseResults;\n\t\t\t\t\t\t        \n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 74) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEXEC dbo.sp_MSforeachdb 'USE [?]; IF EXISTS(SELECT * FROM sys.indexes WHERE type IN (5,6)) INSERT INTO #TemporaryDatabaseResults (DatabaseName, Finding) VALUES (DB_NAME(), ''Yup'') OPTION (RECOMPILE);';\n\t\t\t\t\t\t\t\tIF EXISTS (SELECT * FROM #TemporaryDatabaseResults) SET @ColumnStoreIndexesInUse = 1;\n\t\t\t\t\t        END;\n\n\n\t\t\t\t\t\t/* Non-Default Database Scoped Config - Github issue #598 */\n\t\t\t\t        IF EXISTS ( SELECT * FROM sys.all_objects WHERE [name] = 'database_scoped_configurations' )\n\t\t\t\t\t        BEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d] through [%d].', 0, 1, 194, 197) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tINSERT INTO #DatabaseScopedConfigurationDefaults (configuration_id, [name], default_value, default_value_for_secondary, CheckID)\n\t\t\t\t\t\t\t\t\tSELECT 1, 'MAXDOP', 0, NULL, 194\n\t\t\t\t\t\t\t\t\tUNION ALL\n\t\t\t\t\t\t\t\t\tSELECT 2, 'LEGACY_CARDINALITY_ESTIMATION', 0, NULL, 195\n\t\t\t\t\t\t\t\t\tUNION ALL\n\t\t\t\t\t\t\t\t\tSELECT 3, 'PARAMETER_SNIFFING', 1, NULL, 196\n\t\t\t\t\t\t\t\t\tUNION ALL\n\t\t\t\t\t\t\t\t\tSELECT 4, 'QUERY_OPTIMIZER_HOTFIXES', 0, NULL, 197;\n\t\t\t\t\t\t        EXEC dbo.sp_MSforeachdb 'USE [?]; INSERT INTO #BlitzResults (CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details) \n\t\t\t\t\t\t\t\t\tSELECT def1.CheckID, DB_NAME(), 210, ''Non-Default Database Scoped Config'', dsc.[name], ''https://BrentOzar.com/go/dbscope'', (''Set value: '' + COALESCE(CAST(dsc.value AS NVARCHAR(100)),''Empty'') + '' Default: '' + COALESCE(CAST(def1.default_value AS NVARCHAR(100)),''Empty'') + '' Set value for secondary: '' + COALESCE(CAST(dsc.value_for_secondary AS NVARCHAR(100)),''Empty'') + '' Default value for secondary: '' + COALESCE(CAST(def1.default_value_for_secondary AS NVARCHAR(100)),''Empty''))\n\t\t\t\t\t\t\t\t\tFROM [?].sys.database_scoped_configurations dsc \n\t\t\t\t\t\t\t\t\tINNER JOIN #DatabaseScopedConfigurationDefaults def1 ON dsc.configuration_id = def1.configuration_id\n\t\t\t\t\t\t\t\t\tLEFT OUTER JOIN #DatabaseScopedConfigurationDefaults def ON dsc.configuration_id = def.configuration_id AND (dsc.value = def.default_value OR dsc.value IS NULL) AND (dsc.value_for_secondary = def.default_value_for_secondary OR dsc.value_for_secondary IS NULL)\n\t\t\t\t\t\t\t\t\tLEFT OUTER JOIN #SkipChecks sk ON (sk.CheckID IS NULL OR def.CheckID = sk.CheckID) AND (sk.DatabaseName IS NULL OR sk.DatabaseName = DB_NAME())\n\t\t\t\t\t\t\t\t\tWHERE def.configuration_id IS NULL AND sk.CheckID IS NULL ORDER BY 1\n\t\t\t\t\t\t\t\t\t OPTION (RECOMPILE);';\n\t\t\t\t\t        END;\n\n\n\n\t\n\t\t\t\t\tEND; /* IF @CheckUserDatabaseObjects = 1 */\n\n\t\t\t\tIF @CheckProcedureCache = 1\n\t\t\t\t\t\n\t\t\t\t\tBEGIN\n\n\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Begin checking procedure cache', 0, 1) WITH NOWAIT;\n\t\t\t\t\t\n\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 35 )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 35) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\tSELECT  35 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t\t100 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t\t'Performance' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t\t'Single-Use Plans in Procedure Cache' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/single' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\t\t( CAST(COUNT(*) AS VARCHAR(10))\n\t\t\t\t\t\t\t\t\t\t\t\t  + ' query plans are taking up memory in the procedure cache. This may be wasted memory if we cache plans for queries that never get called again. This may be a good use case for SQL Server 2008''s Optimize for Ad Hoc or for Forced Parameterization.' ) AS Details\n\t\t\t\t\t\t\t\t\t\tFROM    sys.dm_exec_cached_plans AS cp\n\t\t\t\t\t\t\t\t\t\tWHERE   cp.usecounts = 1\n\t\t\t\t\t\t\t\t\t\t\t\tAND cp.objtype = 'Adhoc'\n\t\t\t\t\t\t\t\t\t\t\t\tAND EXISTS ( SELECT\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t FROM sys.configurations\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t WHERE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  name = 'optimize for ad hoc workloads'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  AND value_in_use = 0 )\n\t\t\t\t\t\t\t\t\t\tHAVING  COUNT(*) > 1;\n\t\t\t\t\t\t\tEND;\n\n\n\t\t  /* Set up the cache tables. Different on 2005 since it doesn't support query_hash, query_plan_hash. */\n\t\t\t\t\t\tIF @@VERSION LIKE '%Microsoft SQL Server 2005%'\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\tIF @CheckProcedureCacheFilter = 'CPU'\n\t\t\t\t\t\t\t\t\tOR @CheckProcedureCacheFilter IS NULL\n\t\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\t\tSET @StringToExecute = 'WITH queries ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time])\n\t\t\t  AS (SELECT TOP 20 qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time]\n\t\t\t  FROM sys.dm_exec_query_stats qs\n\t\t\t  ORDER BY qs.total_worker_time DESC)\n\t\t\t  INSERT INTO #dm_exec_query_stats ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time])\n\t\t\t  SELECT qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time]\n\t\t\t  FROM queries qs\n\t\t\t  LEFT OUTER JOIN #dm_exec_query_stats qsCaught ON qs.sql_handle = qsCaught.sql_handle AND qs.plan_handle = qsCaught.plan_handle AND qs.statement_start_offset = qsCaught.statement_start_offset\n\t\t\t  WHERE qsCaught.sql_handle IS NULL OPTION (RECOMPILE);';\n\t\t\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\t\t\tIF @CheckProcedureCacheFilter = 'Reads'\n\t\t\t\t\t\t\t\t\tOR @CheckProcedureCacheFilter IS NULL\n\t\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\t\tSET @StringToExecute = 'WITH queries ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time])\n\t\t  AS (SELECT TOP 20 qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time]\n\t\t  FROM sys.dm_exec_query_stats qs\n\t\t  ORDER BY qs.total_logical_reads DESC)\n\t\t  INSERT INTO #dm_exec_query_stats ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time])\n\t\t  SELECT qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time]\n\t\t  FROM queries qs\n\t\t  LEFT OUTER JOIN #dm_exec_query_stats qsCaught ON qs.sql_handle = qsCaught.sql_handle AND qs.plan_handle = qsCaught.plan_handle AND qs.statement_start_offset = qsCaught.statement_start_offset\n\t\t  WHERE qsCaught.sql_handle IS NULL OPTION (RECOMPILE);';\n\t\t\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\t\t\tIF @CheckProcedureCacheFilter = 'ExecCount'\n\t\t\t\t\t\t\t\t\tOR @CheckProcedureCacheFilter IS NULL\n\t\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\t\tSET @StringToExecute = 'WITH queries ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time])\n\t\t  AS (SELECT TOP 20 qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time]\n\t\t  FROM sys.dm_exec_query_stats qs\n\t\t  ORDER BY qs.execution_count DESC)\n\t\t  INSERT INTO #dm_exec_query_stats ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time])\n\t\t  SELECT qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time]\n\t\t  FROM queries qs\n\t\t  LEFT OUTER JOIN #dm_exec_query_stats qsCaught ON qs.sql_handle = qsCaught.sql_handle AND qs.plan_handle = qsCaught.plan_handle AND qs.statement_start_offset = qsCaught.statement_start_offset\n\t\t  WHERE qsCaught.sql_handle IS NULL OPTION (RECOMPILE);';\n\t\t\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\t\t\tIF @CheckProcedureCacheFilter = 'Duration'\n\t\t\t\t\t\t\t\t\tOR @CheckProcedureCacheFilter IS NULL\n\t\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\t\tSET @StringToExecute = 'WITH queries ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time])\n\t\t\tAS (SELECT TOP 20 qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time]\n\t\t\tFROM sys.dm_exec_query_stats qs\n\t\t\tORDER BY qs.total_elapsed_time DESC)\n\t\t\tINSERT INTO #dm_exec_query_stats ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time])\n\t\t\tSELECT qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time]\n\t\t\tFROM queries qs\n\t\t\tLEFT OUTER JOIN #dm_exec_query_stats qsCaught ON qs.sql_handle = qsCaught.sql_handle AND qs.plan_handle = qsCaught.plan_handle AND qs.statement_start_offset = qsCaught.statement_start_offset\n\t\t\tWHERE qsCaught.sql_handle IS NULL OPTION (RECOMPILE);';\n\t\t\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\t\tEND;\n\t\t\t\t\t\tIF @ProductVersionMajor >= 10\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\tIF @CheckProcedureCacheFilter = 'CPU'\n\t\t\t\t\t\t\t\t\tOR @CheckProcedureCacheFilter IS NULL\n\t\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\t\tSET @StringToExecute = 'WITH queries ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time],[query_hash],[query_plan_hash])\n\t\t  AS (SELECT TOP 20 qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time],qs.[query_hash],qs.[query_plan_hash]\n\t\t  FROM sys.dm_exec_query_stats qs\n\t\t  ORDER BY qs.total_worker_time DESC)\n\t\t  INSERT INTO #dm_exec_query_stats ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time],[query_hash],[query_plan_hash])\n\t\t  SELECT qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time],qs.[query_hash],qs.[query_plan_hash]\n\t\t  FROM queries qs\n\t\t  LEFT OUTER JOIN #dm_exec_query_stats qsCaught ON qs.sql_handle = qsCaught.sql_handle AND qs.plan_handle = qsCaught.plan_handle AND qs.statement_start_offset = qsCaught.statement_start_offset\n\t\t  WHERE qsCaught.sql_handle IS NULL OPTION (RECOMPILE);';\n\t\t\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\t\t\tIF @CheckProcedureCacheFilter = 'Reads'\n\t\t\t\t\t\t\t\t\tOR @CheckProcedureCacheFilter IS NULL\n\t\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\t\tSET @StringToExecute = 'WITH queries ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time],[query_hash],[query_plan_hash])\n\t\t  AS (SELECT TOP 20 qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time],qs.[query_hash],qs.[query_plan_hash]\n\t\t  FROM sys.dm_exec_query_stats qs\n\t\t  ORDER BY qs.total_logical_reads DESC)\n\t\t  INSERT INTO #dm_exec_query_stats ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time],[query_hash],[query_plan_hash])\n\t\t  SELECT qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time],qs.[query_hash],qs.[query_plan_hash]\n\t\t  FROM queries qs\n\t\t  LEFT OUTER JOIN #dm_exec_query_stats qsCaught ON qs.sql_handle = qsCaught.sql_handle AND qs.plan_handle = qsCaught.plan_handle AND qs.statement_start_offset = qsCaught.statement_start_offset\n\t\t  WHERE qsCaught.sql_handle IS NULL OPTION (RECOMPILE);';\n\t\t\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\t\t\tIF @CheckProcedureCacheFilter = 'ExecCount'\n\t\t\t\t\t\t\t\t\tOR @CheckProcedureCacheFilter IS NULL\n\t\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\t\tSET @StringToExecute = 'WITH queries ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time],[query_hash],[query_plan_hash])\n\t\t  AS (SELECT TOP 20 qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time],qs.[query_hash],qs.[query_plan_hash]\n\t\t  FROM sys.dm_exec_query_stats qs\n\t\t  ORDER BY qs.execution_count DESC)\n\t\t  INSERT INTO #dm_exec_query_stats ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time],[query_hash],[query_plan_hash])\n\t\t  SELECT qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time],qs.[query_hash],qs.[query_plan_hash]\n\t\t  FROM queries qs\n\t\t  LEFT OUTER JOIN #dm_exec_query_stats qsCaught ON qs.sql_handle = qsCaught.sql_handle AND qs.plan_handle = qsCaught.plan_handle AND qs.statement_start_offset = qsCaught.statement_start_offset\n\t\t  WHERE qsCaught.sql_handle IS NULL OPTION (RECOMPILE);';\n\t\t\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\t\t\tIF @CheckProcedureCacheFilter = 'Duration'\n\t\t\t\t\t\t\t\t\tOR @CheckProcedureCacheFilter IS NULL\n\t\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\t\tSET @StringToExecute = 'WITH queries ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time],[query_hash],[query_plan_hash])\n\t\t  AS (SELECT TOP 20 qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time],qs.[query_hash],qs.[query_plan_hash]\n\t\t  FROM sys.dm_exec_query_stats qs\n\t\t  ORDER BY qs.total_elapsed_time DESC)\n\t\t  INSERT INTO #dm_exec_query_stats ([sql_handle],[statement_start_offset],[statement_end_offset],[plan_generation_num],[plan_handle],[creation_time],[last_execution_time],[execution_count],[total_worker_time],[last_worker_time],[min_worker_time],[max_worker_time],[total_physical_reads],[last_physical_reads],[min_physical_reads],[max_physical_reads],[total_logical_writes],[last_logical_writes],[min_logical_writes],[max_logical_writes],[total_logical_reads],[last_logical_reads],[min_logical_reads],[max_logical_reads],[total_clr_time],[last_clr_time],[min_clr_time],[max_clr_time],[total_elapsed_time],[last_elapsed_time],[min_elapsed_time],[max_elapsed_time],[query_hash],[query_plan_hash])\n\t\t  SELECT qs.[sql_handle],qs.[statement_start_offset],qs.[statement_end_offset],qs.[plan_generation_num],qs.[plan_handle],qs.[creation_time],qs.[last_execution_time],qs.[execution_count],qs.[total_worker_time],qs.[last_worker_time],qs.[min_worker_time],qs.[max_worker_time],qs.[total_physical_reads],qs.[last_physical_reads],qs.[min_physical_reads],qs.[max_physical_reads],qs.[total_logical_writes],qs.[last_logical_writes],qs.[min_logical_writes],qs.[max_logical_writes],qs.[total_logical_reads],qs.[last_logical_reads],qs.[min_logical_reads],qs.[max_logical_reads],qs.[total_clr_time],qs.[last_clr_time],qs.[min_clr_time],qs.[max_clr_time],qs.[total_elapsed_time],qs.[last_elapsed_time],qs.[min_elapsed_time],qs.[max_elapsed_time],qs.[query_hash],qs.[query_plan_hash]\n\t\t  FROM queries qs\n\t\t  LEFT OUTER JOIN #dm_exec_query_stats qsCaught ON qs.sql_handle = qsCaught.sql_handle AND qs.plan_handle = qsCaught.plan_handle AND qs.statement_start_offset = qsCaught.statement_start_offset\n\t\t  WHERE qsCaught.sql_handle IS NULL OPTION (RECOMPILE);';\n\t\t\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\t\t\t\tEND;\n\n\t\t/* Populate the query_plan_filtered field. Only works in 2005SP2+, but we're just doing it in 2008 to be safe. */\n\t\t\t\t\t\t\t\tUPDATE  #dm_exec_query_stats\n\t\t\t\t\t\t\t\tSET     query_plan_filtered = qp.query_plan\n\t\t\t\t\t\t\t\tFROM    #dm_exec_query_stats qs\n\t\t\t\t\t\t\t\t\t\tCROSS APPLY sys.dm_exec_text_query_plan(qs.plan_handle,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  qs.statement_start_offset,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  qs.statement_end_offset)\n\t\t\t\t\t\t\t\t\t\tAS qp;\n\n\t\t\t\t\t\t\tEND;\n\n\t\t/* Populate the additional query_plan, text, and text_filtered fields */\n\t\t\t\t\t\tUPDATE  #dm_exec_query_stats\n\t\t\t\t\t\tSET     query_plan = qp.query_plan ,\n\t\t\t\t\t\t\t\t[text] = st.[text] ,\n\t\t\t\t\t\t\t\ttext_filtered = SUBSTRING(st.text,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ( qs.statement_start_offset\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/ 2 ) + 1,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ( ( CASE qs.statement_end_offset\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN -1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN DATALENGTH(st.text)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE qs.statement_end_offset\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  END\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  - qs.statement_start_offset )\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/ 2 ) + 1)\n\t\t\t\t\t\tFROM    #dm_exec_query_stats qs\n\t\t\t\t\t\t\t\tCROSS APPLY sys.dm_exec_sql_text(qs.sql_handle) AS st\n\t\t\t\t\t\t\t\tCROSS APPLY sys.dm_exec_query_plan(qs.plan_handle)\n\t\t\t\t\t\t\t\tAS qp;\n\n\t\t/* Dump instances of our own script. We're not trying to tune ourselves. */\n\t\t\t\t\t\tDELETE  #dm_exec_query_stats\n\t\t\t\t\t\tWHERE   text LIKE '%sp_Blitz%'\n\t\t\t\t\t\t\t\tOR text LIKE '%#BlitzResults%';\n\n\t\t/* Look for implicit conversions */\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 63 )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 63) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t\t  Details ,\n\t\t\t\t\t\t\t\t\t\t  QueryPlan ,\n\t\t\t\t\t\t\t\t\t\t  QueryPlanFiltered\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\tSELECT  63 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t\t120 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t\t'Query Plans' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t\t'Implicit Conversion' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/implicit' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\t\t( 'One of the top resource-intensive queries is comparing two fields that are not the same datatype.' ) AS Details ,\n\t\t\t\t\t\t\t\t\t\t\t\tqs.query_plan ,\n\t\t\t\t\t\t\t\t\t\t\t\tqs.query_plan_filtered\n\t\t\t\t\t\t\t\t\t\tFROM    #dm_exec_query_stats qs\n\t\t\t\t\t\t\t\t\t\tWHERE   COALESCE(qs.query_plan_filtered,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t CAST(qs.query_plan AS NVARCHAR(MAX))) LIKE '%CONVERT_IMPLICIT%'\n\t\t\t\t\t\t\t\t\t\t\t\tAND COALESCE(qs.query_plan_filtered,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t CAST(qs.query_plan AS NVARCHAR(MAX))) LIKE '%PhysicalOp=\"Index Scan\"%';\n\t\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 64 )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 64) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t\t  Details ,\n\t\t\t\t\t\t\t\t\t\t  QueryPlan ,\n\t\t\t\t\t\t\t\t\t\t  QueryPlanFiltered\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\tSELECT  64 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t\t120 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t\t'Query Plans' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t\t'Implicit Conversion Affecting Cardinality' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/implicit' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\t\t( 'One of the top resource-intensive queries has an implicit conversion that is affecting cardinality estimation.' ) AS Details ,\n\t\t\t\t\t\t\t\t\t\t\t\tqs.query_plan ,\n\t\t\t\t\t\t\t\t\t\t\t\tqs.query_plan_filtered\n\t\t\t\t\t\t\t\t\t\tFROM    #dm_exec_query_stats qs\n\t\t\t\t\t\t\t\t\t\tWHERE   COALESCE(qs.query_plan_filtered,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t CAST(qs.query_plan AS NVARCHAR(MAX))) LIKE '%<PlanAffectingConvert ConvertIssue=\"Cardinality Estimate\" Expression=\"CONVERT_IMPLICIT%';\n\t\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\t\t/* @cms4j, 29.11.2013: Look for RID or Key Lookups */\n\t\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 118 )\n\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 118) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t\t\t  Details ,\n\t\t\t\t\t\t\t\t\t\t\t  QueryPlan ,\n\t\t\t\t\t\t\t\t\t\t\t  QueryPlanFiltered\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\tSELECT  118 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t120 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'Query Plans' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'RID or Key Lookups' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/lookup' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'One of the top resource-intensive queries contains RID or Key Lookups. Try to avoid them by creating covering indexes.' AS Details ,\n\t\t\t\t\t\t\t\t\t\t\t\t\tqs.query_plan ,\n\t\t\t\t\t\t\t\t\t\t\t\t\tqs.query_plan_filtered\n\t\t\t\t\t\t\t\t\t\t\tFROM    #dm_exec_query_stats qs\n\t\t\t\t\t\t\t\t\t\t\tWHERE   COALESCE(qs.query_plan_filtered,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t CAST(qs.query_plan AS NVARCHAR(MAX))) LIKE '%Lookup=\"1\"%';\n\t\t\t\t\t\t\t\tEND; /* @cms4j, 29.11.2013: Look for RID or Key Lookups */\n\n\n\t\t\t\t\t\t/* Look for missing indexes */\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 65 )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 65) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t\t  Details ,\n\t\t\t\t\t\t\t\t\t\t  QueryPlan ,\n\t\t\t\t\t\t\t\t\t\t  QueryPlanFiltered\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\tSELECT  65 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t\t120 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t\t'Query Plans' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t\t'Missing Index' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/missingindex' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\t\t( 'One of the top resource-intensive queries may be dramatically improved by adding an index.' ) AS Details ,\n\t\t\t\t\t\t\t\t\t\t\t\tqs.query_plan ,\n\t\t\t\t\t\t\t\t\t\t\t\tqs.query_plan_filtered\n\t\t\t\t\t\t\t\t\t\tFROM    #dm_exec_query_stats qs\n\t\t\t\t\t\t\t\t\t\tWHERE   COALESCE(qs.query_plan_filtered,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t CAST(qs.query_plan AS NVARCHAR(MAX))) LIKE '%MissingIndexGroup%';\n\t\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\t/* Look for cursors */\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 66 )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 66) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t\t  Details ,\n\t\t\t\t\t\t\t\t\t\t  QueryPlan ,\n\t\t\t\t\t\t\t\t\t\t  QueryPlanFiltered\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\tSELECT  66 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t\t120 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t\t'Query Plans' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t\t'Cursor' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/cursor' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\t\t( 'One of the top resource-intensive queries is using a cursor.' ) AS Details ,\n\t\t\t\t\t\t\t\t\t\t\t\tqs.query_plan ,\n\t\t\t\t\t\t\t\t\t\t\t\tqs.query_plan_filtered\n\t\t\t\t\t\t\t\t\t\tFROM    #dm_exec_query_stats qs\n\t\t\t\t\t\t\t\t\t\tWHERE   COALESCE(qs.query_plan_filtered,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t CAST(qs.query_plan AS NVARCHAR(MAX))) LIKE '%<StmtCursor%';\n\t\t\t\t\t\t\tEND;\n\n\t\t/* Look for scalar user-defined functions */\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 67 )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 67) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t\t  Details ,\n\t\t\t\t\t\t\t\t\t\t  QueryPlan ,\n\t\t\t\t\t\t\t\t\t\t  QueryPlanFiltered\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\tSELECT  67 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t\t120 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t\t'Query Plans' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t\t'Scalar UDFs' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/functions' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\t\t( 'One of the top resource-intensive queries is using a user-defined scalar function that may inhibit parallelism.' ) AS Details ,\n\t\t\t\t\t\t\t\t\t\t\t\tqs.query_plan ,\n\t\t\t\t\t\t\t\t\t\t\t\tqs.query_plan_filtered\n\t\t\t\t\t\t\t\t\t\tFROM    #dm_exec_query_stats qs\n\t\t\t\t\t\t\t\t\t\tWHERE   COALESCE(qs.query_plan_filtered,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t CAST(qs.query_plan AS NVARCHAR(MAX))) LIKE '%<UserDefinedFunction%';\n\t\t\t\t\t\t\tEND;\n\n\t\t\t\t\tEND; /* IF @CheckProcedureCache = 1 */\n\t\t\t\tEND;\n\t\t\t\t\t\t\t\t\t  \n\t\t/*Check to see if the HA endpoint account is set at the same as the SQL Server Service Account*/\n\t\tIF @ProductVersionMajor >= 10\n\t\t\t\t\t\t\t\tAND NOT EXISTS ( SELECT 1\n\t\t\t\t\t\t\t\tFROM #SkipChecks\n\t\t\t\t\t\t\t\tWHERE DatabaseName IS NULL AND CheckID = 187 )\n\n\t\tIF SERVERPROPERTY('IsHadrEnabled') = 1\n    \t\tBEGIN\n                \n\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 187) WITH NOWAIT;\n\t\t\t\t\n\t\t\t\tINSERT    INTO [#BlitzResults]\n                               \t( [CheckID] ,\n                                [Priority] ,\n                                [FindingsGroup] ,\n                                [Finding] ,\n                                [URL] ,\n                                [Details] )\n               \tSELECT\n                        187 AS [CheckID] ,\n                        230 AS [Priority] ,\n                        'Security' AS [FindingsGroup] ,\n                        'Endpoints Owned by Users' AS [Finding] ,\n                       \t'https://BrentOzar.com/go/owners' AS [URL] ,\n                        ( 'Endpoint ' + ep.[name] + ' is owned by ' + SUSER_NAME(ep.principal_id) + '. If the endpoint owner login is disabled or not available due to Active Directory problems, the high availability will stop working.'\n                        ) AS [Details]\n\t\t\t\t\tFROM sys.database_mirroring_endpoints ep\n\t\t\t\t\tLEFT OUTER JOIN sys.dm_server_services s ON SUSER_NAME(ep.principal_id) = s.service_account\n\t\t\t\t\tWHERE s.service_account IS NULL AND ep.principal_id <> 1;\n    \t\tEND;\n\n\t\t/*Check for the last good DBCC CHECKDB date */\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 68 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 68) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tEXEC sp_MSforeachdb N'USE [?];\n\t\t\t\t\t\tINSERT #DBCCs\n\t\t\t\t\t\t\t(ParentObject,\n\t\t\t\t\t\t\tObject,\n\t\t\t\t\t\t\tField,\n\t\t\t\t\t\t\tValue)\n\t\t\t\t\t\tEXEC (''DBCC DBInfo() With TableResults, NO_INFOMSGS'');\n\t\t\t\t\t\tUPDATE #DBCCs SET DbName = N''?'' WHERE DbName IS NULL OPTION (RECOMPILE);';\n\n\t\t\t\t\t\tWITH    DB2\n\t\t\t\t\t\t\t\t  AS ( SELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t\t\tField ,\n\t\t\t\t\t\t\t\t\t\t\t\tValue ,\n\t\t\t\t\t\t\t\t\t\t\t\tDbName\n\t\t\t\t\t\t\t\t\t   FROM     #DBCCs\n\t\t\t\t\t\t\t\t\t   WHERE    Field = 'dbi_dbccLastKnownGood'\n\t\t\t\t\t\t\t\t\t )\n\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\tSELECT  68 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\tDB2.DbName AS DatabaseName ,\n\t\t\t\t\t\t\t\t\t\t\t1 AS PRIORITY ,\n\t\t\t\t\t\t\t\t\t\t\t'Reliability' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t'Last good DBCC CHECKDB over 2 weeks old' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/checkdb' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\t'Last successful CHECKDB: '\n\t\t\t\t\t\t\t\t\t\t\t+ CASE DB2.Value\n\t\t\t\t\t\t\t\t\t\t\t\tWHEN '1900-01-01 00:00:00.000'\n\t\t\t\t\t\t\t\t\t\t\t\tTHEN ' never.'\n\t\t\t\t\t\t\t\t\t\t\t\tELSE DB2.Value\n\t\t\t\t\t\t\t\t\t\t\t  END AS Details\n\t\t\t\t\t\t\t\t\tFROM    DB2\n\t\t\t\t\t\t\t\t\tWHERE   DB2.DbName <> 'tempdb'\n\t\t\t\t\t\t\t\t\t\t\tAND DB2.DbName NOT IN ( SELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  DatabaseName\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  #SkipChecks \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHERE CheckID IS NULL OR CheckID = 68)\n\t\t\t\t\t\t\t\t\t\t\tAND DB2.DbName NOT IN ( SELECT  name\n                                                                    FROM    sys.databases\n                                                                    WHERE   is_read_only = 1)\n\t\t\t\t\t\t\t\t\t\t\tAND CONVERT(DATETIME, DB2.Value, 121) < DATEADD(DD,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  -14,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  CURRENT_TIMESTAMP);\n\t\t\t\t\tEND;\n\n\n\n\n\t/*Verify that the servername is set */\n\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 70 )\n\t\t\t\tBEGIN\n\t\t\t\t\tIF @@SERVERNAME IS NULL\n\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 70) WITH NOWAIT;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\tSELECT  70 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t200 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t'Informational' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t'@@Servername Not Set' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/servername' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\t'@@Servername variable is null. You can fix it by executing: \"sp_addserver ''<LocalServerName>'', local\"' AS Details;\n\t\t\t\t\t\tEND;\n\n\t\t\t\t\tIF  /* @@SERVERNAME IS set */\n\t\t\t\t\t\t(@@SERVERNAME IS NOT NULL\n\t\t\t\t\t\tAND\n\t\t\t\t\t\t/* not a named instance */\n\t\t\t\t\t\tCHARINDEX('\\',CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))) = 0\n\t\t\t\t\t\tAND\n\t\t\t\t\t\t/* not clustered, when computername may be different than the servername */\n\t\t\t\t\t\tSERVERPROPERTY('IsClustered') = 0\n\t\t\t\t\t\tAND\n\t\t\t\t\t\t/* @@SERVERNAME is different than the computer name */\n\t\t\t\t\t\t@@SERVERNAME <> CAST(ISNULL(SERVERPROPERTY('ComputerNamePhysicalNetBIOS'),@@SERVERNAME) AS NVARCHAR(128)) )\n\t\t\t\t\t\t BEGIN\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 70) WITH NOWAIT;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\tSELECT  70 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t200 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t'Configuration' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t'@@Servername Not Correct' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/servername' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\t'The @@Servername is different than the computer name, which may trigger certificate errors.' AS Details;\n\t\t\t\t\t\tEND;\n\n\t\t\t\tEND;\n\t\t/*Check to see if a failsafe operator has been configured*/\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 73 )\n\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 73) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tDECLARE @AlertInfo TABLE\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t  FailSafeOperator NVARCHAR(255) ,\n\t\t\t\t\t\t\t  NotificationMethod INT ,\n\t\t\t\t\t\t\t  ForwardingServer NVARCHAR(255) ,\n\t\t\t\t\t\t\t  ForwardingSeverity INT ,\n\t\t\t\t\t\t\t  PagerToTemplate NVARCHAR(255) ,\n\t\t\t\t\t\t\t  PagerCCTemplate NVARCHAR(255) ,\n\t\t\t\t\t\t\t  PagerSubjectTemplate NVARCHAR(255) ,\n\t\t\t\t\t\t\t  PagerSendSubjectOnly NVARCHAR(255) ,\n\t\t\t\t\t\t\t  ForwardAlways INT\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tINSERT  INTO @AlertInfo\n\t\t\t\t\t\t\t\tEXEC [master].[dbo].[sp_MSgetalertinfo] @includeaddresses = 0;\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  73 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t200 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Monitoring' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'No failsafe operator configured' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/failsafe' AS URL ,\n\t\t\t\t\t\t\t\t\t\t( 'No failsafe operator is configured on this server.  This is a good idea just in-case there are issues with the [msdb] database that prevents alerting.' ) AS Details\n\t\t\t\t\t\t\t\tFROM    @AlertInfo\n\t\t\t\t\t\t\t\tWHERE   FailSafeOperator IS NULL;\n\t\t\t\t\tEND;\n\n/*Identify globally enabled trace flags*/\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 74 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 74) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tINSERT  INTO #TraceStatus\n\t\t\t\t\t\t\t\tEXEC ( ' DBCC TRACESTATUS(-1) WITH NO_INFOMSGS'\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  74 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t200 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Informational' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'TraceFlag On' AS Finding ,\n\t\t\t\t\t\t\t\t\t\tCASE WHEN [T].[TraceFlag] = '834'  AND @ColumnStoreIndexesInUse = 1 THEN 'https://support.microsoft.com/en-us/kb/3210239'\n\t\t\t\t\t\t\t\t\t\t\t ELSE'https://www.BrentOzar.com/go/traceflags/' END AS URL ,\n\t\t\t\t\t\t\t\t\t\t'Trace flag ' + \n\t\t\t\t\t\t\t\t\t\tCASE WHEN [T].[TraceFlag] = '2330' THEN ' 2330 enabled globally. Using this trace Flag disables missing index requests'\n\t\t\t\t\t\t\t\t\t\t\t WHEN [T].[TraceFlag] = '1211' THEN ' 1211 enabled globally. Using this Trace Flag disables lock escalation when you least expect it. No Bueno!'\n\t\t\t\t\t\t\t\t\t\t\t WHEN [T].[TraceFlag] = '1224' THEN ' 1224 enabled globally. Using this Trace Flag disables lock escalation based on the number of locks being taken. You shouldn''t have done that, Dave.'\n\t\t\t\t\t\t\t\t\t\t\t WHEN [T].[TraceFlag] = '652'  THEN ' 652 enabled globally. Using this Trace Flag disables pre-fetching during index scans. If you hate slow queries, you should turn that off.'\n\t\t\t\t\t\t\t\t\t\t\t WHEN [T].[TraceFlag] = '661'  THEN ' 661 enabled globally. Using this Trace Flag disables ghost record removal. Who you gonna call? No one, turn that thing off.'\n\t\t\t\t\t\t\t\t\t\t\t WHEN [T].[TraceFlag] = '1806'  THEN ' 1806 enabled globally. Using this Trace Flag disables instant file initialization. I question your sanity.'\n\t\t\t\t\t\t\t\t\t\t\t WHEN [T].[TraceFlag] = '3505'  THEN ' 3505 enabled globally. Using this Trace Flag disables Checkpoints. Probably not the wisest idea.'\n\t\t\t\t\t\t\t\t\t\t\t WHEN [T].[TraceFlag] = '8649'  THEN ' 8649 enabled globally. Using this Trace Flag drops cost thresholf for parallelism down to 0. I hope this is a dev server.'\n\t\t\t\t\t\t\t\t\t\t     WHEN [T].[TraceFlag] = '834' AND @ColumnStoreIndexesInUse = 1 THEN ' 834 is enabled globally. Using this Trace Flag with Columnstore Indexes is not a great idea.'\n\t\t\t\t\t\t\t\t\t\t\t WHEN [T].[TraceFlag] = '8017' AND (CAST(SERVERPROPERTY('Edition') AS NVARCHAR(1000)) LIKE N'%Express%') THEN ' 8017 is enabled globally, which is the default for express edition.'\n                                             WHEN [T].[TraceFlag] = '8017' AND (CAST(SERVERPROPERTY('Edition') AS NVARCHAR(1000)) NOT LIKE N'%Express%') THEN ' 8017 is enabled globally. Using this Trace Flag disables creation schedulers for all logical processors. Not good.'\n\t\t\t\t\t\t\t\t\t\t\t ELSE [T].[TraceFlag] + ' is enabled globally.' END \n\t\t\t\t\t\t\t\t\t\tAS Details\n\t\t\t\t\t\t\t\tFROM    #TraceStatus T;\n\t\t\t\t\tEND;\n\n\t\t/*Check for transaction log file larger than data file */\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 75 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 75) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  75 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\tDB_NAME(a.database_id) ,\n\t\t\t\t\t\t\t\t\t\t50 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Reliability' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Transaction Log Larger than Data File' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/biglog' AS URL ,\n\t\t\t\t\t\t\t\t\t\t'The database [' + DB_NAME(a.database_id)\n\t\t\t\t\t\t\t\t\t\t+ '] has a ' + CAST((CAST(a.size AS BIGINT) * 8 / 1000000) AS NVARCHAR(20)) + ' GB transaction log file, larger than the total data file sizes. This may indicate that transaction log backups are not being performed or not performed often enough.' AS Details\n\t\t\t\t\t\t\t\tFROM    sys.master_files a\n\t\t\t\t\t\t\t\tWHERE   a.type = 1\n\t\t\t\t\t\t\t\t\t\tAND DB_NAME(a.database_id) NOT IN (\n\t\t\t\t\t\t\t\t\t\tSELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t\t\tDatabaseName\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks \n\t\t\t\t\t\t\t\t\t\tWHERE CheckID = 75 OR CheckID IS NULL)\n\t\t\t\t\t\t\t\t\t\tAND a.size > 125000 /* Size is measured in pages here, so this gets us log files over 1GB. */\n\t\t\t\t\t\t\t\t\t\tAND a.size > ( SELECT   SUM(CAST(b.size AS BIGINT))\n\t\t\t\t\t\t\t\t\t\t\t\t\t   FROM     sys.master_files b\n\t\t\t\t\t\t\t\t\t\t\t\t\t   WHERE    a.database_id = b.database_id\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND b.type = 0\n\t\t\t\t\t\t\t\t\t\t\t\t\t )\n\t\t\t\t\t\t\t\t\t\tAND a.database_id IN (\n\t\t\t\t\t\t\t\t\t\tSELECT  database_id\n\t\t\t\t\t\t\t\t\t\tFROM    sys.databases\n\t\t\t\t\t\t\t\t\t\tWHERE   source_database_id IS NULL );\n\t\t\t\t\tEND;\n\n\t\t/*Check for collation conflicts between user databases and tempdb */\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 76 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 76) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  76 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\tname AS DatabaseName ,\n\t\t\t\t\t\t\t\t\t\t200 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Informational' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Collation is ' + collation_name AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/collate' AS URL ,\n\t\t\t\t\t\t\t\t\t\t'Collation differences between user databases and tempdb can cause conflicts especially when comparing string values' AS Details\n\t\t\t\t\t\t\t\tFROM    sys.databases\n\t\t\t\t\t\t\tWHERE   name NOT IN ( 'master', 'model', 'msdb')\n\t\t\t\t\t\t\t\t\t\tAND name NOT LIKE 'ReportServer%'\n\t\t\t\t\t\t\t\t\t\tAND name NOT IN ( SELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  DatabaseName\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  FROM    #SkipChecks \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  WHERE CheckID IS NULL OR CheckID = 76)\n\t\t\t\t\t\t\t\t\t\tAND collation_name <> ( SELECT\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  collation_name\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  sys.databases\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHERE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  name = 'tempdb'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  );\n\t\t\t\t\tEND;\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 77 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 77) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  DatabaseName ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  77 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\tdSnap.[name] AS DatabaseName ,\n\t\t\t\t\t\t\t\t\t\t50 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Reliability' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Database Snapshot Online' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/snapshot' AS URL ,\n\t\t\t\t\t\t\t\t\t\t'Database [' + dSnap.[name]\n\t\t\t\t\t\t\t\t\t\t+ '] is a snapshot of ['\n\t\t\t\t\t\t\t\t\t\t+ dOriginal.[name]\n\t\t\t\t\t\t\t\t\t\t+ ']. Make sure you have enough drive space to maintain the snapshot as the original database grows.' AS Details\n\t\t\t\t\t\t\t\tFROM    sys.databases dSnap\n\t\t\t\t\t\t\t\t\t\tINNER JOIN sys.databases dOriginal ON dSnap.source_database_id = dOriginal.database_id\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  AND dSnap.name NOT IN (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  SELECT DISTINCT DatabaseName\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  FROM #SkipChecks \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  WHERE CheckID = 77 OR CheckID IS NULL);\n\t\t\t\t\tEND;\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 79 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 79) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  79 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t-- sp_Blitz Issue #776\n\t\t\t\t\t\t\t\t\t\t-- Job has history and was executed in the last 30 days OR Job is enabled AND Job Schedule is enabled\n                \t\t\t\t\t\tCASE WHEN (cast(datediff(dd, substring(cast(sjh.run_date as nvarchar(10)), 1, 4) + '-' + substring(cast(sjh.run_date as nvarchar(10)), 5, 2) + '-' + substring(cast(sjh.run_date as nvarchar(10)), 7, 2), GETDATE()) AS INT) < 30) OR (j.[enabled] = 1 AND ssc.[enabled] = 1 )THEN\n                \t\t\t\t\t\t    100\n                \t\t\t\t\t\tELSE -- no job history (implicit) AND job not run in the past 30 days AND (Job disabled OR Job Schedule disabled)\n            \t\t\t\t\t\t        200\n                \t\t\t\t\t\tEND AS Priority,\n\t\t\t\t\t\t\t\t\t\t'Performance' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Shrink Database Job' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/autoshrink' AS URL ,\n\t\t\t\t\t\t\t\t\t\t'In the [' + j.[name] + '] job, step ['\n\t\t\t\t\t\t\t\t\t\t+ step.[step_name]\n\t\t\t\t\t\t\t\t\t\t+ '] has SHRINKDATABASE or SHRINKFILE, which may be causing database fragmentation.'\n\t\t\t\t\t\t\t\t\t\t+ CASE WHEN COALESCE(ssc.name,'0') != '0' THEN + ' (Schedule: [' + ssc.name + '])' ELSE + '' END AS Details\n\t\t\t\t\t\t\t\tFROM    msdb.dbo.sysjobs j\n\t\t\t\t\t\t\t\t\t\tINNER JOIN msdb.dbo.sysjobsteps step ON j.job_id = step.job_id\n\t\t\t\t\t\t\t\t\t\tLEFT OUTER JOIN msdb.dbo.sysjobschedules AS sjsc \n\t\t\t\t\t\t\t\t\t\t    ON j.job_id = sjsc.job_id\n\t\t\t\t\t\t\t\t\t\tLEFT OUTER JOIN msdb.dbo.sysschedules AS ssc \n\t\t\t\t\t\t\t\t\t\t    ON sjsc.schedule_id = ssc.schedule_id\n\t\t\t\t\t\t\t\t\t\t    AND sjsc.job_id = j.job_id\n\t\t\t\t\t\t\t\t\t\tLEFT OUTER JOIN msdb.dbo.sysjobhistory AS sjh \n\t\t\t\t\t\t\t\t\t\t    ON j.job_id = sjh.job_id \n\t\t\t\t\t\t\t\t\t\t    AND step.step_id = sjh.step_id\n\t\t\t\t\t\t\t\t\t\t    AND sjh.run_date IN (SELECT max(sjh2.run_date) FROM msdb.dbo.sysjobhistory AS sjh2 WHERE sjh2.job_id = j.job_id) -- get the latest entry date\n\t\t\t\t\t\t\t\t\t\t    AND sjh.run_time IN (SELECT max(sjh3.run_time) FROM msdb.dbo.sysjobhistory AS sjh3 WHERE sjh3.job_id = j.job_id AND sjh3.run_date = sjh.run_date) -- get the latest entry time\n\t\t\t\t\t\t\t\tWHERE   step.command LIKE N'%SHRINKDATABASE%'\n\t\t\t\t\t\t\t\t\t\tOR step.command LIKE N'%SHRINKFILE%';\n\t\t\t\t\tEND;\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 81 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 81) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT  81 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t200 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Non-Active Server Config' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\tcr.name AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://www.BrentOzar.com/blitz/sp_configure/' AS URL ,\n\t\t\t\t\t\t\t\t\t\t( 'This sp_configure option isn''t running under its set value.  Its set value is '\n\t\t\t\t\t\t\t\t\t\t  + CAST(cr.[value] AS VARCHAR(100))\n\t\t\t\t\t\t\t\t\t\t  + ' and its running value is '\n\t\t\t\t\t\t\t\t\t\t  + CAST(cr.value_in_use AS VARCHAR(100))\n\t\t\t\t\t\t\t\t\t\t  + '. When someone does a RECONFIGURE or restarts the instance, this setting will start taking effect.' ) AS Details\n\t\t\t\t\t\t\t\tFROM    sys.configurations cr\n\t\t\t\t\t\t\t\tWHERE   cr.value <> cr.value_in_use\n                                 AND NOT (cr.name = 'min server memory (MB)' AND cr.value IN (0,16) AND cr.value_in_use IN (0,16));\n\t\t\t\t\tEND;\n\n\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 123 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 123) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tSELECT TOP 1 123 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t200 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t'Informational' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t'Agent Jobs Starting Simultaneously' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/busyagent/' AS URL ,\n\t\t\t\t\t\t\t\t\t\t( 'Multiple SQL Server Agent jobs are configured to start simultaneously. For detailed schedule listings, see the query in the URL.' ) AS Details\n\t\t\t\t\t\t\t\tFROM    msdb.dbo.sysjobactivity\n\t\t\t\t\t\t\t\tWHERE start_execution_date > DATEADD(dd, -14, GETDATE())\n\t\t\t\t\t\t\t\tGROUP BY start_execution_date HAVING COUNT(*) > 1;\n\t\t\t\t\tEND;\n\n\n\t\t\t\tIF @CheckServerInfo = 1\n\t\t\t\t\tBEGIN\n\n/*This checks Windows version. It would be better if Microsoft gave everything a separate build number, but whatever.*/\nIF @ProductVersionMajor >= 10\n\t\t\t   AND NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 172 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t-- sys.dm_os_host_info includes both Windows and Linux info\n\t\t\t\t\tIF EXISTS (SELECT 1\n\t\t\t\t\t\t\t\t\tFROM\tsys.all_objects\n\t\t\t\t\t\t\t\t\tWHERE\tname = 'dm_os_host_info' )\n\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\t  IF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 172) WITH NOWAIT;\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  INSERT    INTO [#BlitzResults]\n\t\t\t\t\t\t\t\t\t( [CheckID] ,\n\t\t\t\t\t\t\t\t\t  [Priority] ,\n\t\t\t\t\t\t\t\t\t  [FindingsGroup] ,\n\t\t\t\t\t\t\t\t\t  [Finding] ,\n\t\t\t\t\t\t\t\t\t  [URL] ,\n\t\t\t\t\t\t\t\t\t  [Details] )\n\n\t\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t\t172 AS [CheckID] ,\n\t\t\t\t\t\t\t250 AS [Priority] ,\n\t\t\t\t\t\t\t'Server Info' AS [FindingsGroup] ,\n\t\t\t\t\t\t\t'Operating System Version' AS [Finding] ,\n\t\t\t\t\t\t\t( CASE WHEN @IsWindowsOperatingSystem = 1\n\t\t\t\t\t\t\t\tTHEN 'https://en.wikipedia.org/wiki/List_of_Microsoft_Windows_versions'\n\t\t\t\t\t\t\t\tELSE 'https://en.wikipedia.org/wiki/List_of_Linux_distributions'\n\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t) AS [URL] ,\n\t\t\t\t\t\t\t( CASE \n\t\t\t\t\t\t\t\tWHEN [ohi].[host_platform] = 'Linux' THEN 'You''re running the ' + CAST([ohi].[host_distribution] AS VARCHAR(35)) + ' distribution of ' + CAST([ohi].[host_platform] AS VARCHAR(35)) + ', version ' + CAST([ohi].[host_release] AS VARCHAR(5))\n\t\t\t\t\t\t\t\tWHEN [ohi].[host_platform] = 'Windows' AND [ohi].[host_release] = '5' THEN 'You''re running a really old version: Windows 2000, version ' + CAST([ohi].[host_release] AS VARCHAR(5))\n\t\t\t\t\t\t\t\tWHEN [ohi].[host_platform] = 'Windows' AND [ohi].[host_release] > '5' AND [ohi].[host_release] < '6' THEN 'You''re running a really old version: ' + CAST([ohi].[host_distribution] AS VARCHAR(50)) + ', version ' + CAST([ohi].[host_release] AS VARCHAR(5))\n\t\t\t\t\t\t\t\tWHEN [ohi].[host_platform] = 'Windows' AND [ohi].[host_release] >= '6' AND [ohi].[host_release] <= '6.1' THEN 'You''re running a pretty old version: Windows: ' + CAST([ohi].[host_distribution] AS VARCHAR(50)) + ', version ' + CAST([ohi].[host_release] AS VARCHAR(5))\n\t\t\t\t\t\t\t\tWHEN [ohi].[host_platform] = 'Windows' AND [ohi].[host_release] = '6.2' THEN 'You''re running a rather modern version of Windows: ' + CAST([ohi].[host_distribution] AS VARCHAR(50)) + ', version ' + CAST([ohi].[host_release] AS VARCHAR(5))\n\t\t\t\t\t\t\t\tWHEN [ohi].[host_platform] = 'Windows' AND [ohi].[host_release] = '6.3' THEN 'You''re running a pretty modern version of Windows: ' + CAST([ohi].[host_distribution] AS VARCHAR(50)) + ', version ' + CAST([ohi].[host_release] AS VARCHAR(5))\n\t\t\t\t\t\t\t\tWHEN [ohi].[host_platform] = 'Windows' AND [ohi].[host_release] > '6.3' THEN 'Hot dog! You''re living in the future! You''re running ' + CAST([ohi].[host_distribution] AS VARCHAR(50)) + ', version ' + CAST([ohi].[host_release] AS VARCHAR(5))\n\t\t\t\t\t\t\t\tELSE 'You''re running ' + CAST([ohi].[host_distribution] AS VARCHAR(35)) + ', version ' + CAST([ohi].[host_release] AS VARCHAR(5))\n\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t   ) AS [Details]\n\t\t\t\t\t\t\t FROM [sys].[dm_os_host_info] [ohi];\n\t\t\t\t\tEND;\n\t\t\t\t\tELSE\n\t\t\t\t\tBEGIN\n\t\t\t\t\t-- Otherwise, stick with Windows-only detection\n\n\t\t\t\t\t\tIF EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\t\t\tFROM    sys.all_objects\n\t\t\t\t\t\t\t\t\t\t\t\tWHERE   name = 'dm_os_windows_info' )\n\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t  IF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 172) WITH NOWAIT;\n\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t  INSERT    INTO [#BlitzResults]\n\t\t\t\t\t\t\t\t\t\t\t( [CheckID] ,\n\t\t\t\t\t\t\t\t\t\t\t  [Priority] ,\n\t\t\t\t\t\t\t\t\t\t\t  [FindingsGroup] ,\n\t\t\t\t\t\t\t\t\t\t\t  [Finding] ,\n\t\t\t\t\t\t\t\t\t\t\t  [URL] ,\n\t\t\t\t\t\t\t\t\t\t\t  [Details] )\n\n\t\t\t\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t\t\t\t172 AS [CheckID] ,\n\t\t\t\t\t\t\t\t\t250 AS [Priority] ,\n\t\t\t\t\t\t\t\t\t'Server Info' AS [FindingsGroup] ,\n\t\t\t\t\t\t\t\t\t'Windows Version' AS [Finding] ,\n\t\t\t\t\t\t\t\t\t'https://en.wikipedia.org/wiki/List_of_Microsoft_Windows_versions' AS [URL] ,\n\t\t\t\t\t\t\t\t\t( CASE \n\t\t\t\t\t\t\t\t\t\tWHEN [owi].[windows_release] = '5' THEN 'You''re running a really old version: Windows 2000, version ' + CAST([owi].[windows_release] AS VARCHAR(5))\n\t\t\t\t\t\t\t\t\t\tWHEN [owi].[windows_release] > '5' AND [owi].[windows_release] < '6' THEN 'You''re running a really old version: Windows Server 2003/2003R2 era, version ' + CAST([owi].[windows_release] AS VARCHAR(5))\n\t\t\t\t\t\t\t\t\t\tWHEN [owi].[windows_release] >= '6' AND [owi].[windows_release] <= '6.1' THEN 'You''re running a pretty old version: Windows: Server 2008/2008R2 era, version ' + CAST([owi].[windows_release] AS VARCHAR(5))\n\t\t\t\t\t\t\t\t\t\tWHEN [owi].[windows_release] = '6.2' THEN 'You''re running a rather modern version of Windows: Server 2012 era, version ' + CAST([owi].[windows_release] AS VARCHAR(5))\n\t\t\t\t\t\t\t\t\t\tWHEN [owi].[windows_release] = '6.3' THEN 'You''re running a pretty modern version of Windows: Server 2012R2 era, version ' + CAST([owi].[windows_release] AS VARCHAR(5))\n\t\t\t\t\t\t\t\t\t\tWHEN [owi].[windows_release] = '10.0' THEN 'You''re running a pretty modern version of Windows: Server 2016 era, version ' + CAST([owi].[windows_release] AS VARCHAR(5))\n\t\t\t\t\t\t\t\t\t\tELSE 'Hot dog! You''re living in the future! You''re running version ' + CAST([owi].[windows_release] AS VARCHAR(5))\n\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t\t   ) AS [Details]\n\t\t\t\t\t\t\t\t\t FROM [sys].[dm_os_windows_info] [owi];\n\n\t\t\t\t\t\t\tEND;\n\t\t\t\t\t\tEND;\n\t\t\t\t\tEND;\n\n/*\nThis check hits the dm_os_process_memory system view\nto see if locked_page_allocations_kb is > 0,\nwhich could indicate that locked pages in memory is enabled.\n*/\nIF @ProductVersionMajor >= 10 AND  NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 166 )\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  IF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 166) WITH NOWAIT;\n\t\t\t\t\t\t  \n\t\t\t\t\t\t  INSERT    INTO [#BlitzResults]\n\t\t\t\t\t\t\t\t\t( [CheckID] ,\n\t\t\t\t\t\t\t\t\t  [Priority] ,\n\t\t\t\t\t\t\t\t\t  [FindingsGroup] ,\n\t\t\t\t\t\t\t\t\t  [Finding] ,\n\t\t\t\t\t\t\t\t\t  [URL] ,\n\t\t\t\t\t\t\t\t\t  [Details] )\n\t\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t\t166 AS [CheckID] ,\n\t\t\t\t\t\t\t250 AS [Priority] ,\n\t\t\t\t\t\t\t'Server Info' AS [FindingsGroup] ,\n\t\t\t\t\t\t\t'Locked Pages In Memory Enabled' AS [Finding] ,\n\t\t\t\t\t\t\t'https://BrentOzar.com/go/lpim' AS [URL] ,\n\t\t\t\t\t\t\t( 'You currently have '\n\t\t\t\t\t\t\t  + CASE WHEN [dopm].[locked_page_allocations_kb] / 1024. / 1024. > 0\n\t\t\t\t\t\t\t\t\t THEN CAST([dopm].[locked_page_allocations_kb] / 1024. / 1024. AS VARCHAR(100))\n\t\t\t\t\t\t\t\t\t\t  + ' GB'\n\t\t\t\t\t\t\t\t\t ELSE CAST([dopm].[locked_page_allocations_kb] / 1024. AS VARCHAR(100))\n\t\t\t\t\t\t\t\t\t\t  + ' MB'\n\t\t\t\t\t\t\t\tEND + ' of pages locked in memory.' ) AS [Details]\n\t\t\t\t\t\t  FROM\n\t\t\t\t\t\t\t[sys].[dm_os_process_memory] AS [dopm]\n\t\t\t\t\t\t  WHERE\n\t\t\t\t\t\t\t[dopm].[locked_page_allocations_kb] > 0;\n\t\t\t\t\tEND; \n\n\t\t\t/* Server Info - Locked Pages In Memory Enabled - Check 166 - SQL Server 2016 SP1 and newer */\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 166 )\n\t\t\t\t\t\t\tAND EXISTS ( SELECT  *\n\t\t\t\t\t\t\t\t\t\t\tFROM    sys.all_objects o\n\t\t\t\t\t\t\t\t\t\t\t\t\tINNER JOIN sys.all_columns c ON o.object_id = c.object_id\n\t\t\t\t\t\t\t\t\t\t\tWHERE   o.name = 'dm_os_sys_info'\n\t\t\t\t\t\t\t\t\t\t\t\t\tAND c.name = 'sql_memory_model' )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 166) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tSET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)\n\t\t\tSELECT  166 AS CheckID ,\n\t\t\t250 AS Priority ,\n\t\t\t''Server Info'' AS FindingsGroup ,\n\t\t\t''Memory Model Unconventional'' AS Finding ,\n\t\t\t''https://BrentOzar.com/go/lpim'' AS URL ,\n\t\t\t''Memory Model: '' + CAST(sql_memory_model_desc AS NVARCHAR(100))\n\t\t\tFROM sys.dm_os_sys_info WHERE sql_memory_model <> 1 OPTION (RECOMPILE);';\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\n\t\t\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\t\t\t\tEND;\n\n\n\n\t\t\t/*\n\t\t\tStarting with SQL Server 2014 SP2, Instant File Initialization \n\t\t\tis logged in the SQL Server Error Log.\n\t\t\t*/\n\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 184 )\n\t\t\t\t\t\t\tAND (@ProductVersionMajor >= 13) OR (@ProductVersionMajor = 12 AND @ProductVersionMinor >= 5000)\n\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 184) WITH NOWAIT;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tINSERT INTO #ErrorLog\n\t\t\t\t\t\t\tEXEC sys.xp_readerrorlog 0, 1, N'Database Instant File Initialization: enabled';\n\n\t\t\t\t\t\t\tIF @@ROWCOUNT > 0\n\t\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t\t  [Priority] ,\n\t\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t\t\t\t\t\t\t193 AS [CheckID] ,\n\t\t\t\t\t\t\t\t\t\t\t\t250 AS [Priority] ,\n\t\t\t\t\t\t\t\t\t\t\t\t'Server Info' AS [FindingsGroup] ,\n\t\t\t\t\t\t\t\t\t\t\t\t'Instant File Initialization Enabled' AS [Finding] ,\n\t\t\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/instant' AS [URL] ,\n\t\t\t\t\t\t\t\t\t\t\t\t'The service account has the Perform Volume Maintenance Tasks permission.';\n\t\t\t\t\t\tEND; \n\n\t\t\t/* Server Info - Instant File Initialization Not Enabled - Check 192 - SQL Server 2016 SP1 and newer */\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 192 )\n\t\t\t\t\t\t\tAND EXISTS ( SELECT  *\n\t\t\t\t\t\t\t\t\t\t\tFROM    sys.all_objects o\n\t\t\t\t\t\t\t\t\t\t\t\t\tINNER JOIN sys.all_columns c ON o.object_id = c.object_id\n\t\t\t\t\t\t\t\t\t\t\tWHERE   o.name = 'dm_server_services'\n\t\t\t\t\t\t\t\t\t\t\t\t\tAND c.name = 'instant_file_initialization_enabled' )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 192) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tSET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)\n\t\t\tSELECT  192 AS CheckID ,\n\t\t\t50 AS Priority ,\n\t\t\t''Server Info'' AS FindingsGroup ,\n\t\t\t''Instant File Initialization Not Enabled'' AS Finding ,\n\t\t\t''https://BrentOzar.com/go/instant'' AS URL ,\n\t\t\t''Consider enabling IFI for faster restores and data file growths.''\n\t\t\tFROM sys.dm_server_services WHERE instant_file_initialization_enabled <> ''Y'' AND filename LIKE ''%sqlservr.exe%'' OPTION (RECOMPILE);';\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\t\t\t\tEND;\n\n\n\n\n\n\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 130 )\n\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 130) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\tSELECT  130 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t250 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'Server Info' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'Server Name' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'https://BrentOzar.com/go/servername' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t@@SERVERNAME AS Details\n\t\t\t\t\t\t\t\t\t\t\t\tWHERE @@SERVERNAME IS NOT NULL;\n\t\t\t\t\t\t\t\tEND;\n\n\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 83 )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\tIF EXISTS ( SELECT  *\n\t\t\t\t\t\t\t\t\t\t\tFROM    sys.all_objects\n\t\t\t\t\t\t\t\t\t\t\tWHERE   name = 'dm_server_services' )\n\t\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 83) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t-- DATETIMEOFFSET and DATETIME have different minimum values, so there's\n\t\t\t\t-- a small workaround here to force 1753-01-01 if the minimum is detected\n\t\t\t\t\t\t\t\t\t\tSET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)\n\t\t\t\tSELECT  83 AS CheckID ,\n\t\t\t\t250 AS Priority ,\n\t\t\t\t''Server Info'' AS FindingsGroup ,\n\t\t\t\t''Services'' AS Finding ,\n\t\t\t\t'''' AS URL ,\n\t\t\t\tN''Service: '' + servicename + N'' runs under service account '' + service_account + N''. Last startup time: '' + COALESCE(CAST(CASE WHEN YEAR(last_startup_time) <= 1753 THEN CAST(''17530101'' as datetime) ELSE CAST(last_startup_time AS DATETIME) END AS VARCHAR(50)), ''not shown.'') + ''. Startup type: '' + startup_type_desc + N'', currently '' + status_desc + ''.''\n\t\t\t\tFROM sys.dm_server_services OPTION (RECOMPILE);';\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\t\t\t\tEND;\n\t\t\t\t\t\t\tEND;\n\n\t\t\t/* Check 84 - SQL Server 2012 */\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 84 )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\tIF EXISTS ( SELECT  *\n\t\t\t\t\t\t\t\t\t\t\tFROM    sys.all_objects o\n\t\t\t\t\t\t\t\t\t\t\t\t\tINNER JOIN sys.all_columns c ON o.object_id = c.object_id\n\t\t\t\t\t\t\t\t\t\t\tWHERE   o.name = 'dm_os_sys_info'\n\t\t\t\t\t\t\t\t\t\t\t\t\tAND c.name = 'physical_memory_kb' )\n\t\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 84) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tSET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)\n\t\t\tSELECT  84 AS CheckID ,\n\t\t\t250 AS Priority ,\n\t\t\t''Server Info'' AS FindingsGroup ,\n\t\t\t''Hardware'' AS Finding ,\n\t\t\t'''' AS URL ,\n\t\t\t''Logical processors: '' + CAST(cpu_count AS VARCHAR(50)) + ''. Physical memory: '' + CAST( CAST(ROUND((physical_memory_kb / 1024.0 / 1024), 1) AS INT) AS VARCHAR(50)) + ''GB.''\n\t\t\tFROM sys.dm_os_sys_info OPTION (RECOMPILE);';\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\t\t\t\tEND;\n\n\t\t\t/* Check 84 - SQL Server 2008 */\n\t\t\t\t\t\t\t\tIF EXISTS ( SELECT  *\n\t\t\t\t\t\t\t\t\t\t\tFROM    sys.all_objects o\n\t\t\t\t\t\t\t\t\t\t\t\t\tINNER JOIN sys.all_columns c ON o.object_id = c.object_id\n\t\t\t\t\t\t\t\t\t\t\tWHERE   o.name = 'dm_os_sys_info'\n\t\t\t\t\t\t\t\t\t\t\t\t\tAND c.name = 'physical_memory_in_bytes' )\n\t\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 84) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tSET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)\n\t\t\tSELECT  84 AS CheckID ,\n\t\t\t250 AS Priority ,\n\t\t\t''Server Info'' AS FindingsGroup ,\n\t\t\t''Hardware'' AS Finding ,\n\t\t\t'''' AS URL ,\n\t\t\t''Logical processors: '' + CAST(cpu_count AS VARCHAR(50)) + ''. Physical memory: '' + CAST( CAST(ROUND((physical_memory_in_bytes / 1024.0 / 1024 / 1024), 1) AS INT) AS VARCHAR(50)) + ''GB.''\n\t\t\tFROM sys.dm_os_sys_info OPTION (RECOMPILE);';\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\t\t\t\tEND;\n\t\t\t\t\t\t\tEND;\n\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 85 )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 85) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\tSELECT  85 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t\t250 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t\t'Server Info' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t\t'SQL Server Service' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t\t'' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\t\tN'Version: '\n\t\t\t\t\t\t\t\t\t\t\t\t+ CAST(SERVERPROPERTY('productversion') AS NVARCHAR(100))\n\t\t\t\t\t\t\t\t\t\t\t\t+ N'. Patch Level: '\n\t\t\t\t\t\t\t\t\t\t\t\t+ CAST(SERVERPROPERTY('productlevel') AS NVARCHAR(100))\n\t\t\t\t\t\t\t\t\t\t\t\t+ N'. Edition: '\n\t\t\t\t\t\t\t\t\t\t\t\t+ CAST(SERVERPROPERTY('edition') AS VARCHAR(100))\n\t\t\t\t\t\t\t\t\t\t\t\t+ N'. AlwaysOn Enabled: '\n\t\t\t\t\t\t\t\t\t\t\t\t+ CAST(COALESCE(SERVERPROPERTY('IsHadrEnabled'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0) AS VARCHAR(100))\n\t\t\t\t\t\t\t\t\t\t\t\t+ N'. AlwaysOn Mgr Status: '\n\t\t\t\t\t\t\t\t\t\t\t\t+ CAST(COALESCE(SERVERPROPERTY('HadrManagerStatus'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0) AS VARCHAR(100));\n\t\t\t\t\t\t\tEND;\n\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 88 )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 88) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\tSELECT  88 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t\t250 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t\t'Server Info' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t\t'SQL Server Last Restart' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t\t'' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\t\tCAST(create_date AS VARCHAR(100))\n\t\t\t\t\t\t\t\t\t\tFROM    sys.databases\n\t\t\t\t\t\t\t\t\t\tWHERE   database_id = 2;\n\t\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 91 )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 91) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\tSELECT  91 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t\t250 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t\t'Server Info' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t\t'Server Last Restart' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t\t'' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\t\tCAST(DATEADD(SECOND, (ms_ticks/1000)*(-1), GETDATE()) AS nvarchar(25))\n\t\t\t\t\t\t\t\t\t\tFROM sys.dm_os_sys_info;\n\t\t\t\t\t\t\tEND;\n\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 92 )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 92) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tINSERT  INTO #driveInfo\n\t\t\t\t\t\t\t\t\t\t( drive, SIZE )\n\t\t\t\t\t\t\t\t\t\tEXEC master..xp_fixeddrives;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\tSELECT  92 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t\t250 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t\t'Server Info' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t\t'Drive ' + i.drive + ' Space' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t\t'' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\t\tCAST(i.SIZE AS VARCHAR(30))\n\t\t\t\t\t\t\t\t\t\t\t\t+ 'MB free on ' + i.drive\n\t\t\t\t\t\t\t\t\t\t\t\t+ ' drive' AS Details\n\t\t\t\t\t\t\t\t\t\tFROM    #driveInfo AS i;\n\t\t\t\t\t\t\t\tDROP TABLE #driveInfo;\n\t\t\t\t\t\t\tEND;\n\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 103 )\n\t\t\t\t\t\t\tAND EXISTS ( SELECT *\n\t\t\t\t\t\t\t\t\t\t FROM   sys.all_objects o\n\t\t\t\t\t\t\t\t\t\t\t\tINNER JOIN sys.all_columns c ON o.object_id = c.object_id\n\t\t\t\t\t\t\t\t\t\t WHERE  o.name = 'dm_os_sys_info'\n\t\t\t\t\t\t\t\t\t\t\t\tAND c.name = 'virtual_machine_type_desc' )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 103) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tSET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)\n\t\t\t\t\t\t\t\t\tSELECT 103 AS CheckID,\n\t\t\t\t\t\t\t\t\t250 AS Priority,\n\t\t\t\t\t\t\t\t\t''Server Info'' AS FindingsGroup,\n\t\t\t\t\t\t\t\t\t''Virtual Server'' AS Finding,\n\t\t\t\t\t\t\t\t\t''https://BrentOzar.com/go/virtual'' AS URL,\n\t\t\t\t\t\t\t\t\t''Type: ('' + virtual_machine_type_desc + '')'' AS Details\n\t\t\t\t\t\t\t\t\tFROM sys.dm_os_sys_info\n\t\t\t\t\t\t\t\t\tWHERE virtual_machine_type <> 0 OPTION (RECOMPILE);';\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 114 )\n\t\t\t\t\t\t\tAND EXISTS ( SELECT *\n\t\t\t\t\t\t\t\t\t\t FROM   sys.all_objects o\n\t\t\t\t\t\t\t\t\t\t WHERE  o.name = 'dm_os_memory_nodes' )\n\t\t\t\t\t\t\tAND EXISTS ( SELECT *\n\t\t\t\t\t\t\t\t\t\t FROM   sys.all_objects o\n\t\t\t\t\t\t\t\t\t\t INNER JOIN sys.all_columns c ON o.object_id = c.object_id\n\t\t\t\t\t\t\t\t\t\t WHERE  o.name = 'dm_os_nodes'\n                                \t \t\tAND c.name = 'processor_group' )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 114) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tSET @StringToExecute = 'INSERT INTO #BlitzResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)\n\t\t\t\t\t\t\t\t\t\tSELECT  114 AS CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t\t250 AS Priority ,\n\t\t\t\t\t\t\t\t\t\t\t\t''Server Info'' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t\t''Hardware - NUMA Config'' AS Finding ,\n\t\t\t\t\t\t\t\t\t\t\t\t'''' AS URL ,\n\t\t\t\t\t\t\t\t\t\t\t\t''Node: '' + CAST(n.node_id AS NVARCHAR(10)) + '' State: '' + node_state_desc\n\t\t\t\t\t\t\t\t\t\t\t\t+ '' Online schedulers: '' + CAST(n.online_scheduler_count AS NVARCHAR(10)) + '' Offline schedulers: '' + CAST(oac.offline_schedulers AS VARCHAR(100)) + '' Processor Group: '' + CAST(n.processor_group AS NVARCHAR(10))\n\t\t\t\t\t\t\t\t\t\t\t\t+ '' Memory node: '' + CAST(n.memory_node_id AS NVARCHAR(10)) + '' Memory VAS Reserved GB: '' + CAST(CAST((m.virtual_address_space_reserved_kb / 1024.0 / 1024) AS INT) AS NVARCHAR(100))\n\t\t\t\t\t\t\t\t\t\tFROM sys.dm_os_nodes n\n\t\t\t\t\t\t\t\t\t\tINNER JOIN sys.dm_os_memory_nodes m ON n.memory_node_id = m.memory_node_id\n\t\t\t\t\t\t\t\t\t\tOUTER APPLY (SELECT \n\t\t\t\t\t\t\t\t\t\tCOUNT(*) AS [offline_schedulers]\n\t\t\t\t\t\t\t\t\t\tFROM sys.dm_os_schedulers dos\n\t\t\t\t\t\t\t\t\t\tWHERE n.node_id = dos.parent_node_id \n\t\t\t\t\t\t\t\t\t\tAND dos.status = ''VISIBLE OFFLINE''\n\t\t\t\t\t\t\t\t\t\t) oac\n\t\t\t\t\t\t\t\t\t\tWHERE n.node_state_desc NOT LIKE ''%DAC%''\n\t\t\t\t\t\t\t\t\t\tORDER BY n.node_id OPTION (RECOMPILE);';\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NOT NULL PRINT @StringToExecute;\n\t\t\t\t\t\t\t\tIF @Debug = 2 AND @StringToExecute IS NULL PRINT '@StringToExecute has gone NULL, for some reason.';\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEXECUTE(@StringToExecute);\n\t\t\t\t\t\t\tEND;\n\t\t\t\t\t\t\t\t\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 211 )\n\t\t\t\t\t\t\t\tBEGIN\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 211) WITH NOWAIT;\n\n\t\t\t\t\t\t\t\tDECLARE @outval VARCHAR(36);\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEXEC master.sys.xp_regread @rootkey = 'HKEY_LOCAL_MACHINE',\n\t\t\t\t\t\t\t\t                           @key = 'SYSTEM\\CurrentControlSet\\Control\\Power\\User\\PowerSchemes',\n\t\t\t\t\t\t\t\t                           @value_name = 'ActivePowerScheme',\n\t\t\t\t\t\t\t\t                           @value = @outval OUTPUT;\n\n\t\t\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t\t)\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tSELECT  211 AS CheckId,\n\t\t\t\t\t\t\t\t\t250 AS Priority,\n\t\t\t\t\t\t\t\t\t'Server Info' AS FindingsGroup,\n\t\t\t\t\t\t\t\t\t'Power Plan' AS Finding,\n\t\t\t\t\t\t\t\t\t'https://www.brentozar.com/blitz/power-mode/' AS URL,\n\t\t\t\t\t\t\t\t\t'Your server is in '\n\t\t\t\t\t\t\t\t\t+ CASE @outval\n\t\t\t\t\t\t\t             WHEN 'a1841308-3541-4fab-bc81-f71556f20b4a'\n\t\t\t\t\t\t\t             THEN 'power saving mode -- are you sure this is a production SQL Server?'\n\t\t\t\t\t\t\t             WHEN '381b4222-f694-41f0-9685-ff5bb260df2e'\n\t\t\t\t\t\t\t             THEN 'balanced power mode -- Uh... you want your CPUs to run at full speed, right?'\n\t\t\t\t\t\t\t             WHEN '8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c'\n\t\t\t\t\t\t\t             THEN 'high performance power mode'\n\t\t\t\t\t\t\t\t\t\t ELSE 'Unknown!'\n\t\t\t\t\t\t\t        END AS Details\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEND;\n\n\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 212 )\n\t\t\t\t\t\t\t\tBEGIN\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 212) WITH NOWAIT;\n\n\t\t\t\t\t\t        INSERT INTO #Instances (Instance_Number, Instance_Name, Data_Field)\n\t\t\t\t\t\t\t\tEXEC master.sys.xp_regread @rootkey = 'HKEY_LOCAL_MACHINE',\n\t\t\t\t\t\t\t\t                           @key = 'SOFTWARE\\Microsoft\\Microsoft SQL Server',\n\t\t\t\t\t\t\t\t                           @value_name = 'InstalledInstances'\n\t\t\t\t\t\t\t\t\n                                IF (SELECT COUNT(*) FROM #Instances) > 1\n                                BEGIN\n\n                                    DECLARE @InstanceCount NVARCHAR(MAX)\n                                    SELECT @InstanceCount = COUNT(*) FROM #Instances\n                                                              \n\t\t\t\t\t\t\t\t\tINSERT INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t\t( \n\t\t\t\t\t\t\t\t\t\t  CheckID ,\n\t\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t\t)\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t        SELECT  \n\t\t\t\t\t\t\t\t\t    212 AS CheckId ,\n\t\t\t\t\t\t\t\t\t    250 AS Priority ,\n\t\t\t\t\t\t\t\t\t    'Server Info' AS FindingsGroup ,\n\t\t\t\t\t\t\t\t\t    'Instance Stacking' AS Finding ,\n\t\t\t\t\t\t\t\t\t    'https://www.brentozar.com/go/babygotstacked/' AS URL ,\n\t\t\t\t\t\t\t\t\t    'Your Server has ' + @InstanceCount + ' Instances of SQL Server running. More than one is usually a bad idea. Read the URL for more info'\n\t\t\t\t\t\t\t    END;\n\t                        END;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 106 )\n\t\t\t\t\t\t\t\t\t\t\tAND (select convert(int,value_in_use) from sys.configurations where name = 'default trace enabled' ) = 1\n                                AND DATALENGTH( COALESCE( @base_tracefilename, '' ) ) > DATALENGTH('.TRC')\n\t\t\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 106) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t\t\t\t\t\t\t 106 AS CheckID\n\t\t\t\t\t\t\t\t\t\t\t\t,250 AS Priority\n\t\t\t\t\t\t\t\t\t\t\t\t,'Server Info' AS FindingsGroup\n\t\t\t\t\t\t\t\t\t\t\t\t,'Default Trace Contents' AS Finding\n\t\t\t\t\t\t\t\t\t\t\t\t,'https://BrentOzar.com/go/trace' AS URL\n\t\t\t\t\t\t\t\t\t\t\t\t,'The default trace holds '+cast(DATEDIFF(hour,MIN(StartTime),GETDATE())as VARCHAR(30))+' hours of data'\n\t\t\t\t\t\t\t\t\t\t\t\t+' between '+cast(Min(StartTime) as VARCHAR(30))+' and '+cast(GETDATE()as VARCHAR(30))\n\t\t\t\t\t\t\t\t\t\t\t\t+('. The default trace files are located in: '+left( @curr_tracefilename,len(@curr_tracefilename) - @indx)\n\t\t\t\t\t\t\t\t\t\t\t\t) as Details\n\t\t\t\t\t\t\t\t\t\tFROM    ::fn_trace_gettable( @base_tracefilename, default )\n\t\t\t\t\t\t\t\t\t\tWHERE EventClass BETWEEN 65500 and 65600;\n\t\t\t\t\t\t\tEND; /* CheckID 106 */\n\n\n\t\t\t\t\t\t\tIF NOT EXISTS ( SELECT  1\n\t\t\t\t\t\t\t\t\t\t\tFROM    #SkipChecks\n\t\t\t\t\t\t\t\t\t\t\tWHERE   DatabaseName IS NULL AND CheckID = 152 )\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\tIF EXISTS (SELECT * FROM sys.dm_os_wait_stats ws\n\t\t\t\t\t\t\t\t\t\t\tLEFT OUTER JOIN #IgnorableWaits i ON ws.wait_type = i.wait_type\n\t\t\t\t\t\t\t\t\t\t\tWHERE wait_time_ms > .1 * @CpuMsSinceWaitsCleared AND waiting_tasks_count > 0 \n\t\t\t\t\t\t\t\t\t\t\tAND i.wait_type IS NULL)\n\t\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\t/* Check for waits that have had more than 10% of the server's wait time */\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 152) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tWITH os(wait_type, waiting_tasks_count, wait_time_ms, max_wait_time_ms, signal_wait_time_ms)\n\t\t\t\t\t\t\t\t\tAS\n\t\t\t\t\t\t\t\t\t(SELECT ws.wait_type, waiting_tasks_count, wait_time_ms, max_wait_time_ms, signal_wait_time_ms\n\t\t\t\t\t\t\t\t\t\tFROM sys.dm_os_wait_stats ws\n\t\t\t\t\t\t\t\t\t\tLEFT OUTER JOIN #IgnorableWaits i ON ws.wait_type = i.wait_type\n\t\t\t\t\t\t\t\t\t\t\tWHERE i.wait_type IS NULL \n\t\t\t\t\t\t\t\t\t\t\t\tAND wait_time_ms > .1 * @CpuMsSinceWaitsCleared\n\t\t\t\t\t\t\t\t\t\t\t\tAND waiting_tasks_count > 0)\n\t\t\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\tSELECT TOP 9\n\t\t\t\t\t\t\t\t\t\t\t\t\t 152 AS CheckID\n\t\t\t\t\t\t\t\t\t\t\t\t\t,240 AS Priority\n\t\t\t\t\t\t\t\t\t\t\t\t\t,'Wait Stats' AS FindingsGroup\n\t\t\t\t\t\t\t\t\t\t\t\t\t, CAST(ROW_NUMBER() OVER(ORDER BY os.wait_time_ms DESC) AS NVARCHAR(10)) + N' - ' + os.wait_type AS Finding\n\t\t\t\t\t\t\t\t\t\t\t\t\t,'https://BrentOzar.com/go/waits' AS URL\n\t\t\t\t\t\t\t\t\t\t\t\t\t, Details = CAST(CAST(SUM(os.wait_time_ms / 1000.0 / 60 / 60) OVER (PARTITION BY os.wait_type) AS NUMERIC(18,1)) AS NVARCHAR(20)) + N' hours of waits, ' +\n\t\t\t\t\t\t\t\t\t\t\t\t\tCAST(CAST((SUM(60.0 * os.wait_time_ms) OVER (PARTITION BY os.wait_type) ) / @MsSinceWaitsCleared  AS NUMERIC(18,1)) AS NVARCHAR(20)) + N' minutes average wait time per hour, ' + \n\t\t\t\t\t\t\t\t\t\t\t\t\t/* CAST(CAST(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t100.* SUM(os.wait_time_ms) OVER (PARTITION BY os.wait_type) \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/ (1. * SUM(os.wait_time_ms) OVER () )\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS NUMERIC(18,1)) AS NVARCHAR(40)) + N'% of waits, ' + */\n\t\t\t\t\t\t\t\t\t\t\t\t\tCAST(CAST(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t100. * SUM(os.signal_wait_time_ms) OVER (PARTITION BY os.wait_type) \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/ (1. * SUM(os.wait_time_ms) OVER ())\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS NUMERIC(18,1)) AS NVARCHAR(40)) + N'% signal wait, ' + \n\t\t\t\t\t\t\t\t\t\t\t\t\tCAST(SUM(os.waiting_tasks_count) OVER (PARTITION BY os.wait_type) AS NVARCHAR(40)) + N' waiting tasks, ' +\n\t\t\t\t\t\t\t\t\t\t\t\t\tCAST(CASE WHEN  SUM(os.waiting_tasks_count) OVER (PARTITION BY os.wait_type) > 0\n\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCAST(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSUM(os.wait_time_ms) OVER (PARTITION BY os.wait_type)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/ (1. * SUM(os.waiting_tasks_count) OVER (PARTITION BY os.wait_type)) \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS NUMERIC(18,1))\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSE 0 END AS NVARCHAR(40)) + N' ms average wait time.'\n\t\t\t\t\t\t\t\t\t\t\tFROM    os\n\t\t\t\t\t\t\t\t\t\t\tORDER BY SUM(os.wait_time_ms / 1000.0 / 60 / 60) OVER (PARTITION BY os.wait_type) DESC;\n\t\t\t\t\t\t\t\t\tEND; /* IF EXISTS (SELECT * FROM sys.dm_os_wait_stats WHERE wait_time_ms > 0 AND waiting_tasks_count > 0) */\n\n\t\t\t\t\t\t\t\t/* If no waits were found, add a note about that */\n\t\t\t\t\t\t\t\tIF NOT EXISTS (SELECT * FROM #BlitzResults WHERE CheckID IN (107, 108, 109, 121, 152, 162))\n\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Running CheckId [%d].', 0, 1, 153) WITH NOWAIT;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t\t\t\t\t\t  Details\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\tVALUES (153, 240, 'Wait Stats', 'No Significant Waits Detected', 'https://BrentOzar.com/go/waits', 'This server might be just sitting around idle, or someone may have cleared wait stats recently.');\n\t\t\t\t\t\t\t\tEND;\n\t\t\t\t\t\t\tEND; /* CheckID 152 */    \n\n\t\t\t\t\tEND; /* IF @CheckServerInfo = 1 */\n\t\t\tEND; /* IF ( ( SERVERPROPERTY('ServerName') NOT IN ( SELECT ServerName */\n\n\n\t\t\t\t/* Delete priorites they wanted to skip. */\n\t\t\t\tIF @IgnorePrioritiesAbove IS NOT NULL\n\t\t\t\t\tDELETE  #BlitzResults\n\t\t\t\t\tWHERE   [Priority] > @IgnorePrioritiesAbove AND CheckID <> -1;\n\n\t\t\t\tIF @IgnorePrioritiesBelow IS NOT NULL\n\t\t\t\t\tDELETE  #BlitzResults\n\t\t\t\t\tWHERE   [Priority] < @IgnorePrioritiesBelow AND CheckID <> -1;\n\n\t\t\t\t/* Delete checks they wanted to skip. */\n\t\t\t\tIF @SkipChecksTable IS NOT NULL\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tDELETE  FROM #BlitzResults\n\t\t\t\t\t\tWHERE   DatabaseName IN ( SELECT    DatabaseName\n\t\t\t\t\t\t\t\t\t\t\t\t  FROM      #SkipChecks\n\t\t\t\t\t\t\t\t\t\t\t\t  WHERE CheckID IS NULL\n\t\t\t\t\t\t\t\t\t\t\t\t  AND (ServerName IS NULL OR ServerName = SERVERPROPERTY('ServerName')));\n\t\t\t\t\t\tDELETE  FROM #BlitzResults\n\t\t\t\t\t\tWHERE   CheckID IN ( SELECT    CheckID\n\t\t\t\t\t\t\t\t\t\t\t\t  FROM      #SkipChecks\n\t\t\t\t\t\t\t\t\t\t\t\t  WHERE DatabaseName IS NULL\n\t\t\t\t\t\t\t\t\t\t\t\t  AND (ServerName IS NULL OR ServerName = SERVERPROPERTY('ServerName')));\n\t\t\t\t\t\tDELETE r FROM #BlitzResults r\n\t\t\t\t\t\t\tINNER JOIN #SkipChecks c ON r.DatabaseName = c.DatabaseName and r.CheckID = c.CheckID\n\t\t\t\t\t\t\t\t\t\t\t\t  AND (ServerName IS NULL OR ServerName = SERVERPROPERTY('ServerName'));\n\t\t\t\t\tEND;\n\n\t\t\t\t/* Add summary mode */\n\t\t\t\tIF @SummaryMode > 0\n\t\t\t\t\tBEGIN\n\t\t\t\t\tUPDATE #BlitzResults\n\t\t\t\t\t  SET Finding = br.Finding + ' (' + CAST(brTotals.recs AS NVARCHAR(20)) + ')'\n\t\t\t\t\t  FROM #BlitzResults br\n\t\t\t\t\t\tINNER JOIN (SELECT FindingsGroup, Finding, Priority, COUNT(*) AS recs FROM #BlitzResults GROUP BY FindingsGroup, Finding, Priority) brTotals ON br.FindingsGroup = brTotals.FindingsGroup AND br.Finding = brTotals.Finding AND br.Priority = brTotals.Priority\n\t\t\t\t\t\tWHERE brTotals.recs > 1;\n\n\t\t\t\t\tDELETE br\n\t\t\t\t\t  FROM #BlitzResults br\n\t\t\t\t\t  WHERE EXISTS (SELECT * FROM #BlitzResults brLower WHERE br.FindingsGroup = brLower.FindingsGroup AND br.Finding = brLower.Finding AND br.Priority = brLower.Priority AND br.ID > brLower.ID);\n\n\t\t\t\t\tEND;\n\n\t\t\t/* Add credits for the nice folks who put so much time into building and maintaining this for free: */\n\t\t\t\t\n\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t  Details\n\t\t\t\t\t\t)\n\t\t\t\tVALUES  ( -1 ,\n\t\t\t\t\t\t  255 ,\n\t\t\t\t\t\t  'Thanks!' ,\n\t\t\t\t\t\t  'From Your Community Volunteers' ,\n\t\t\t\t\t\t  'http://FirstResponderKit.org' ,\n\t\t\t\t\t\t  'We hope you found this tool useful.'\n\t\t\t\t\t\t);\n\n\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t  Details\n\n\t\t\t\t\t\t)\n\t\t\t\tVALUES  ( -1 ,\n\t\t\t\t\t\t  0 ,\n\t\t\t\t\t\t  'sp_Blitz ' + CAST(CONVERT(DATETIME, @VersionDate, 102) AS VARCHAR(100)),\n\t\t\t\t\t\t  'SQL Server First Responder Kit' ,\n\t\t\t\t\t\t  'http://FirstResponderKit.org/' ,\n\t\t\t\t\t\t  'To get help or add your own contributions, join us at http://FirstResponderKit.org.'\n\n\t\t\t\t\t\t);\n\n\t\t\t\tINSERT  INTO #BlitzResults\n\t\t\t\t\t\t( CheckID ,\n\t\t\t\t\t\t  Priority ,\n\t\t\t\t\t\t  FindingsGroup ,\n\t\t\t\t\t\t  Finding ,\n\t\t\t\t\t\t  URL ,\n\t\t\t\t\t\t  Details\n\n\t\t\t\t\t\t)\n\t\t\t\tSELECT 156 ,\n\t\t\t\t\t\t  254 ,\n\t\t\t\t\t\t  'Rundate' ,\n\t\t\t\t\t\t  GETDATE() ,\n\t\t\t\t\t\t  'http://FirstResponderKit.org/' ,\n\t\t\t\t\t\t  'Captain''s log: stardate something and something...';\n\t\t\t\t\t\t  \n\t\t\t\tIF @EmailRecipients IS NOT NULL\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\n\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Sending an email.', 0, 1) WITH NOWAIT;\n\t\t\t\t\t\n\t\t\t\t\t/* Database mail won't work off a local temp table. I'm not happy about this hacky workaround either. */\n\t\t\t\t\tIF (OBJECT_ID('tempdb..##BlitzResults', 'U') IS NOT NULL) DROP TABLE ##BlitzResults;\n\t\t\t\t\tSELECT * INTO ##BlitzResults FROM #BlitzResults;\n\t\t\t\t\tSET @query_result_separator = char(9);\n\t\t\t\t\tSET @StringToExecute = 'SET NOCOUNT ON;SELECT [Priority] , [FindingsGroup] , [Finding] , [DatabaseName] , [URL] ,  [Details] , CheckID FROM ##BlitzResults ORDER BY Priority , FindingsGroup, Finding, Details; SET NOCOUNT OFF;';\n\t\t\t\t\tSET @EmailSubject = 'sp_Blitz Results for ' + @@SERVERNAME;\n\t\t\t\t\tSET @EmailBody = 'sp_Blitz ' + CAST(CONVERT(DATETIME, @VersionDate, 102) AS VARCHAR(100)) + '. http://FirstResponderKit.org';\n\t\t\t\t\tIF @EmailProfile IS NULL\n\t\t\t\t\t\tEXEC msdb.dbo.sp_send_dbmail\n\t\t\t\t\t\t\t@recipients = @EmailRecipients,\n\t\t\t\t\t\t\t@subject = @EmailSubject,\n\t\t\t\t\t\t\t@body = @EmailBody,\n\t\t\t\t\t\t\t@query_attachment_filename = 'sp_Blitz-Results.csv',\n\t\t\t\t\t\t\t@attach_query_result_as_file = 1,\n\t\t\t\t\t\t\t@query_result_header = 1,\n\t\t\t\t\t\t\t@query_result_width = 32767,\n\t\t\t\t\t\t\t@append_query_error = 1,\n\t\t\t\t\t\t\t@query_result_no_padding = 1,\n\t\t\t\t\t\t\t@query_result_separator = @query_result_separator,\n\t\t\t\t\t\t\t@query = @StringToExecute;\n\t\t\t\t\tELSE\n\t\t\t\t\t\tEXEC msdb.dbo.sp_send_dbmail\n\t\t\t\t\t\t\t@profile_name = @EmailProfile,\n\t\t\t\t\t\t\t@recipients = @EmailRecipients,\n\t\t\t\t\t\t\t@subject = @EmailSubject,\n\t\t\t\t\t\t\t@body = @EmailBody,\n\t\t\t\t\t\t\t@query_attachment_filename = 'sp_Blitz-Results.csv',\n\t\t\t\t\t\t\t@attach_query_result_as_file = 1,\n\t\t\t\t\t\t\t@query_result_header = 1,\n\t\t\t\t\t\t\t@query_result_width = 32767,\n\t\t\t\t\t\t\t@append_query_error = 1,\n\t\t\t\t\t\t\t@query_result_no_padding = 1,\n\t\t\t\t\t\t\t@query_result_separator = @query_result_separator,\n\t\t\t\t\t\t\t@query = @StringToExecute;\n\t\t\t\t\tIF (OBJECT_ID('tempdb..##BlitzResults', 'U') IS NOT NULL) DROP TABLE ##BlitzResults;\n\t\t\t\tEND;\n\n\t\t\t\t/* Checks if @OutputServerName is populated with a valid linked server, and that the database name specified is valid */\n\t\t\t\tDECLARE @ValidOutputServer BIT;\n\t\t\t\tDECLARE @ValidOutputLocation BIT;\n\t\t\t\tDECLARE @LinkedServerDBCheck NVARCHAR(2000);\n\t\t\t\tDECLARE @ValidLinkedServerDB INT;\n\t\t\t\tDECLARE @tmpdbchk table (cnt int);\n\t\t\t\tIF @OutputServerName IS NOT NULL\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @Debug IN (1, 2) RAISERROR('Outputting to a remote server.', 0, 1) WITH NOWAIT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF EXISTS (SELECT server_id FROM sys.servers WHERE QUOTENAME([name]) = @OutputServerName)\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\tSET @LinkedServerDBCheck = 'SELECT 1 WHERE EXISTS (SELECT * FROM '+@OutputServerName+'.master.sys.databases WHERE QUOTENAME([name]) = '''+@OutputDatabaseName+''')';\n\t\t\t\t\t\t\t\tINSERT INTO @tmpdbchk EXEC sys.sp_executesql @LinkedServerDBCheck;\n\t\t\t\t\t\t\t\tSET @ValidLinkedServerDB = (SELECT COUNT(*) FROM @tmpdbchk);\n\t\t\t\t\t\t\t\tIF (@ValidLinkedServerDB > 0)\n\t\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\t\tSET @ValidOutputServer = 1;\n\t\t\t\t\t\t\t\t\t\tSET @ValidOutputLocation = 1;\n\t\t\t\t\t\t\t\t\tEND;\n\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\tRAISERROR('The specified database was not found on the output server', 16, 0);\n\t\t\t\t\t\t\tEND;\n\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\tRAISERROR('The specified output server was not found', 16, 0);\n\t\t\t\t\t\t\tEND;\n\t\t\t\t\tEND;\n\t\t\t\tELSE\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tIF @OutputDatabaseName IS NOT NULL\n\t\t\t\t\t\t\tAND @OutputSchemaName IS NOT NULL\n\t\t\t\t\t\t\tAND @OutputTableName IS NOT NULL\n\t\t\t\t\t\t\tAND EXISTS ( SELECT *\n\t\t\t\t\t\t\t\t FROM   sys.databases\n\t\t\t\t\t\t\t\t WHERE  QUOTENAME([name]) = @OutputDatabaseName)\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\tSET @ValidOutputLocation = 1;\n\t\t\t\t\t\t\tEND;\n\t\t\t\t\t\tELSE IF @OutputDatabaseName IS NOT NULL\n\t\t\t\t\t\t\tAND @OutputSchemaName IS NOT NULL\n\t\t\t\t\t\t\tAND @OutputTableName IS NOT NULL\n\t\t\t\t\t\t\tAND NOT EXISTS ( SELECT *\n\t\t\t\t\t\t\t\t FROM   sys.databases\n\t\t\t\t\t\t\t\t WHERE  QUOTENAME([name]) = @OutputDatabaseName)\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\tRAISERROR('The specified output database was not found on this server', 16, 0);\n\t\t\t\t\t\t\tEND;\n\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\tSET @ValidOutputLocation = 0; \n\t\t\t\t\t\t\tEND;\n\t\t\t\t\tEND;\n\n\t\t\t\t/* @OutputTableName lets us export the results to a permanent table */\n\t\t\t\tIF @ValidOutputLocation = 1\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tSET @StringToExecute = 'USE '\n\t\t\t\t\t\t\t+ @OutputDatabaseName\n\t\t\t\t\t\t\t+ '; IF EXISTS(SELECT * FROM '\n\t\t\t\t\t\t\t+ @OutputDatabaseName\n\t\t\t\t\t\t\t+ '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''\n\t\t\t\t\t\t\t+ @OutputSchemaName\n\t\t\t\t\t\t\t+ ''') AND NOT EXISTS (SELECT * FROM '\n\t\t\t\t\t\t\t+ @OutputDatabaseName\n\t\t\t\t\t\t\t+ '.INFORMATION_SCHEMA.TABLES WHERE QUOTENAME(TABLE_SCHEMA) = '''\n\t\t\t\t\t\t\t+ @OutputSchemaName + ''' AND QUOTENAME(TABLE_NAME) = '''\n\t\t\t\t\t\t\t+ @OutputTableName + ''') CREATE TABLE '\n\t\t\t\t\t\t\t+ @OutputSchemaName + '.'\n\t\t\t\t\t\t\t+ @OutputTableName\n\t\t\t\t\t\t\t+ ' (ID INT IDENTITY(1,1) NOT NULL,\n\t\t\t\t\t\t\t\tServerName NVARCHAR(128),\n\t\t\t\t\t\t\t\tCheckDate DATETIMEOFFSET,\n\t\t\t\t\t\t\t\tPriority TINYINT ,\n\t\t\t\t\t\t\t\tFindingsGroup VARCHAR(50) ,\n\t\t\t\t\t\t\t\tFinding VARCHAR(200) ,\n\t\t\t\t\t\t\t\tDatabaseName NVARCHAR(128),\n\t\t\t\t\t\t\t\tURL VARCHAR(200) ,\n\t\t\t\t\t\t\t\tDetails NVARCHAR(4000) ,\n\t\t\t\t\t\t\t\tQueryPlan [XML] NULL ,\n\t\t\t\t\t\t\t\tQueryPlanFiltered [NVARCHAR](MAX) NULL,\n\t\t\t\t\t\t\t\tCheckID INT ,\n\t\t\t\t\t\t\t\tCONSTRAINT [PK_' + CAST(NEWID() AS CHAR(36)) + '] PRIMARY KEY CLUSTERED (ID ASC));';\n\t\t\t\t\t\tIF @ValidOutputServer = 1\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\tSET @StringToExecute = REPLACE(@StringToExecute,''''+@OutputSchemaName+'''',''''''+@OutputSchemaName+'''''');\n\t\t\t\t\t\t\t\tSET @StringToExecute = REPLACE(@StringToExecute,''''+@OutputTableName+'''',''''''+@OutputTableName+'''''');\n\t\t\t\t\t\t\t\tSET @StringToExecute = REPLACE(@StringToExecute,'[XML]','[NVARCHAR](MAX)');\n\t\t\t\t\t\t\t\tEXEC('EXEC('''+@StringToExecute+''') AT ' + @OutputServerName);\n\t\t\t\t\t\t\tEND;   \n\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\tEXEC(@StringToExecute);\n\t\t\t\t\t\t\tEND;\n\t\t\t\t\t\tIF @ValidOutputServer = 1\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\tSET @StringToExecute = N' IF EXISTS(SELECT * FROM '\n\t\t\t\t\t\t\t\t+ @OutputServerName + '.'\n\t\t\t\t\t\t\t\t+ @OutputDatabaseName\n\t\t\t\t\t\t\t\t+ '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''\n\t\t\t\t\t\t\t\t+ @OutputSchemaName + ''') INSERT '\n\t\t\t\t\t\t\t\t+ @OutputServerName + '.'\n\t\t\t\t\t\t\t\t+ @OutputDatabaseName + '.'\n\t\t\t\t\t\t\t\t+ @OutputSchemaName + '.'\n\t\t\t\t\t\t\t\t+ @OutputTableName\n\t\t\t\t\t\t\t\t+ ' (ServerName, CheckDate, CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details, QueryPlan, QueryPlanFiltered) SELECT '''\n\t\t\t\t\t\t\t\t+ CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))\n\t\t\t\t\t\t\t\t+ ''', SYSDATETIMEOFFSET(), CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details, CAST(QueryPlan AS NVARCHAR(MAX)), QueryPlanFiltered FROM #BlitzResults ORDER BY Priority , FindingsGroup , Finding , Details';\n\n\t\t\t\t\t\t\t\tEXEC(@StringToExecute);\n\t\t\t\t\t\t\tEND;   \n\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\tSET @StringToExecute = N' IF EXISTS(SELECT * FROM '\n\t\t\t\t\t\t\t\t+ @OutputDatabaseName\n\t\t\t\t\t\t\t\t+ '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''\n\t\t\t\t\t\t\t\t+ @OutputSchemaName + ''') INSERT '\n\t\t\t\t\t\t\t\t+ @OutputDatabaseName + '.'\n\t\t\t\t\t\t\t\t+ @OutputSchemaName + '.'\n\t\t\t\t\t\t\t\t+ @OutputTableName\n\t\t\t\t\t\t\t\t+ ' (ServerName, CheckDate, CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details, QueryPlan, QueryPlanFiltered) SELECT '''\n\t\t\t\t\t\t\t\t+ CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))\n\t\t\t\t\t\t\t\t+ ''', SYSDATETIMEOFFSET(), CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details, QueryPlan, QueryPlanFiltered FROM #BlitzResults ORDER BY Priority , FindingsGroup , Finding , Details';\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tEXEC(@StringToExecute);\n\t\t\t\t\t\t\tEND;\n\t\t\t\t\tEND;\n\t\t\t\tELSE IF (SUBSTRING(@OutputTableName, 2, 2) = '##')\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tIF @ValidOutputServer = 1\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\tRAISERROR('Due to the nature of temporary tables, outputting to a linked server requires a permanent table.', 16, 0);\n\t\t\t\t\t\t\tEND;\n\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\tSET @StringToExecute = N' IF (OBJECT_ID(''tempdb..'\n\t\t\t\t\t\t\t\t\t+ @OutputTableName\n\t\t\t\t\t\t\t\t\t+ ''') IS NOT NULL) DROP TABLE ' + @OutputTableName + ';'\n\t\t\t\t\t\t\t\t\t+ 'CREATE TABLE '\n\t\t\t\t\t\t\t\t\t+ @OutputTableName\n\t\t\t\t\t\t\t\t\t+ ' (ID INT IDENTITY(1,1) NOT NULL,\n\t\t\t\t\t\t\t\t\t\tServerName NVARCHAR(128),\n\t\t\t\t\t\t\t\t\t\tCheckDate DATETIMEOFFSET,\n\t\t\t\t\t\t\t\t\t\tPriority TINYINT ,\n\t\t\t\t\t\t\t\t\t\tFindingsGroup VARCHAR(50) ,\n\t\t\t\t\t\t\t\t\t\tFinding VARCHAR(200) ,\n\t\t\t\t\t\t\t\t\t\tDatabaseName NVARCHAR(128),\n\t\t\t\t\t\t\t\t\t\tURL VARCHAR(200) ,\n\t\t\t\t\t\t\t\t\t\tDetails NVARCHAR(4000) ,\n\t\t\t\t\t\t\t\t\t\tQueryPlan [XML] NULL ,\n\t\t\t\t\t\t\t\t\t\tQueryPlanFiltered [NVARCHAR](MAX) NULL,\n\t\t\t\t\t\t\t\t\t\tCheckID INT ,\n\t\t\t\t\t\t\t\t\t\tCONSTRAINT [PK_' + CAST(NEWID() AS CHAR(36)) + '] PRIMARY KEY CLUSTERED (ID ASC));'\n\t\t\t\t\t\t\t\t\t+ ' INSERT '\n\t\t\t\t\t\t\t\t\t+ @OutputTableName\n\t\t\t\t\t\t\t\t\t+ ' (ServerName, CheckDate, CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details, QueryPlan, QueryPlanFiltered) SELECT '''\n\t\t\t\t\t\t\t\t\t+ CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))\n\t\t\t\t\t\t\t\t\t+ ''', SYSDATETIMEOFFSET(), CheckID, DatabaseName, Priority, FindingsGroup, Finding, URL, Details, QueryPlan, QueryPlanFiltered FROM #BlitzResults ORDER BY Priority , FindingsGroup , Finding , Details';\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tEXEC(@StringToExecute);\n\t\t\t\t\t\t\tEND;\n\t\t\t\t\tEND;\n\t\t\t\tELSE IF (SUBSTRING(@OutputTableName, 2, 1) = '#')\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tRAISERROR('Due to the nature of Dymamic SQL, only global (i.e. double pound (##)) temp tables are supported for @OutputTableName', 16, 0);\n\t\t\t\t\tEND;\n\n\n\t\t\t\tDECLARE @separator AS VARCHAR(1);\n\t\t\t\tIF @OutputType = 'RSV'\n\t\t\t\t\tSET @separator = CHAR(31);\n\t\t\t\tELSE\n\t\t\t\t\tSET @separator = ',';\n\n\t\t\t\tIF @OutputType = 'COUNT'\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tSELECT  COUNT(*) AS Warnings\n\t\t\t\t\t\tFROM    #BlitzResults;\n\t\t\t\t\tEND;\n\t\t\t\tELSE\n\t\t\t\t\tIF @OutputType IN ( 'CSV', 'RSV' )\n\t\t\t\t\t\tBEGIN\n\n\t\t\t\t\t\t\tSELECT  Result = CAST([Priority] AS NVARCHAR(100))\n\t\t\t\t\t\t\t\t\t+ @separator + CAST(CheckID AS NVARCHAR(100))\n\t\t\t\t\t\t\t\t\t+ @separator + COALESCE([FindingsGroup],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'(N/A)') + @separator\n\t\t\t\t\t\t\t\t\t+ COALESCE([Finding], '(N/A)') + @separator\n\t\t\t\t\t\t\t\t\t+ COALESCE(DatabaseName, '(N/A)') + @separator\n\t\t\t\t\t\t\t\t\t+ COALESCE([URL], '(N/A)') + @separator\n\t\t\t\t\t\t\t\t\t+ COALESCE([Details], '(N/A)')\n\t\t\t\t\t\t\tFROM    #BlitzResults\n\t\t\t\t\t\t\tORDER BY Priority ,\n\t\t\t\t\t\t\t\t\tFindingsGroup ,\n\t\t\t\t\t\t\t\t\tFinding ,\n\t\t\t\t\t\t\t\t\tDatabaseName ,\n\t\t\t\t\t\t\t\t\tDetails;\n\t\t\t\t\t\tEND;\n\t\t\t\t\tELSE IF @OutputXMLasNVARCHAR = 1 AND @OutputType <> 'NONE'\n\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\tSELECT  [Priority] ,\n\t\t\t\t\t\t\t\t\t[FindingsGroup] ,\n\t\t\t\t\t\t\t\t\t[Finding] ,\n\t\t\t\t\t\t\t\t\t[DatabaseName] ,\n\t\t\t\t\t\t\t\t\t[URL] ,\n\t\t\t\t\t\t\t\t\t[Details] ,\n\t\t\t\t\t\t\t\t\tCAST([QueryPlan] AS NVARCHAR(MAX)) AS QueryPlan,\n\t\t\t\t\t\t\t\t\t[QueryPlanFiltered] ,\n\t\t\t\t\t\t\t\t\tCheckID\n\t\t\t\t\t\t\tFROM    #BlitzResults\n\t\t\t\t\t\t\tORDER BY Priority ,\n\t\t\t\t\t\t\t\t\tFindingsGroup ,\n\t\t\t\t\t\t\t\t\tFinding ,\n\t\t\t\t\t\t\t\t\tDatabaseName ,\n\t\t\t\t\t\t\t\t\tDetails;\n\t\t\t\t\t\tEND;\n\t\t\t\t\tELSE IF @OutputType = 'MARKDOWN'\n\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\tWITH Results AS (SELECT row_number() OVER (ORDER BY Priority, FindingsGroup, Finding, DatabaseName, Details) AS rownum, * \n\t\t\t\t\t\t\t\t\t\t\t\tFROM #BlitzResults\n\t\t\t\t\t\t\t\t\t\t\t\tWHERE Priority > 0 AND Priority < 255 AND FindingsGroup IS NOT NULL AND Finding IS NOT NULL\n\t\t\t\t\t\t\t\t\t\t\t\tAND FindingsGroup <> 'Security' /* Specifically excluding security checks for public exports */)\n\t\t\t\t\t\t\tSELECT \n\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\tWHEN r.Priority <> COALESCE(rPrior.Priority, 0) OR r.FindingsGroup <> rPrior.FindingsGroup  THEN @crlf + N'**Priority ' + CAST(COALESCE(r.Priority,N'') AS NVARCHAR(5)) + N': ' + COALESCE(r.FindingsGroup,N'') + N'**:' + @crlf + @crlf \n\t\t\t\t\t\t\t\t\tELSE N'' \n\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t+ CASE WHEN r.Finding <> COALESCE(rPrior.Finding,N'') AND r.Finding <> rNext.Finding THEN N'- ' + COALESCE(r.Finding,N'') + N' ' + COALESCE(r.DatabaseName, N'') + N' - ' + COALESCE(r.Details,N'') + @crlf\n\t\t\t\t\t\t\t\t\t   WHEN r.Finding <> COALESCE(rPrior.Finding,N'') AND r.Finding = rNext.Finding AND r.Details = rNext.Details THEN N'- ' + COALESCE(r.Finding,N'') + N' - ' + COALESCE(r.Details,N'') + @crlf + @crlf + N'    * ' + COALESCE(r.DatabaseName, N'') + @crlf\n\t\t\t\t\t\t\t\t\t   WHEN r.Finding <> COALESCE(rPrior.Finding,N'') AND r.Finding = rNext.Finding THEN N'- ' + COALESCE(r.Finding,N'') + @crlf + CASE WHEN r.DatabaseName IS NULL THEN N'' ELSE  N'    * ' + COALESCE(r.DatabaseName,N'') END + CASE WHEN r.Details <> rPrior.Details THEN N' - ' + COALESCE(r.Details,N'') + @crlf ELSE '' END\n\t\t\t\t\t\t\t\t\t   ELSE CASE WHEN r.DatabaseName IS NULL THEN N'' ELSE  N'    * ' + COALESCE(r.DatabaseName,N'') END + CASE WHEN r.Details <> rPrior.Details THEN N' - ' + COALESCE(r.Details,N'') + @crlf ELSE N'' + @crlf END \n\t\t\t\t\t\t\t\tEND + @crlf \n\t\t\t\t\t\t\t  FROM Results r\n\t\t\t\t\t\t\t  LEFT OUTER JOIN Results rPrior ON r.rownum = rPrior.rownum + 1\n\t\t\t\t\t\t\t  LEFT OUTER JOIN Results rNext ON r.rownum = rNext.rownum - 1\n\t\t\t\t\t\t\tORDER BY r.rownum FOR XML PATH(N'');\n\t\t\t\t\t\tEND;\n\t\t\t\t\tELSE IF @OutputType <> 'NONE'\n\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t/* --TOURSTOP05-- */\n\t\t\t\t\t\t\tSELECT  [Priority] ,\n\t\t\t\t\t\t\t\t\t[FindingsGroup] ,\n\t\t\t\t\t\t\t\t\t[Finding] ,\n\t\t\t\t\t\t\t\t\t[DatabaseName] ,\n\t\t\t\t\t\t\t\t\t[URL] ,\n\t\t\t\t\t\t\t\t\t[Details] ,\n\t\t\t\t\t\t\t\t\t[QueryPlan] ,\n\t\t\t\t\t\t\t\t\t[QueryPlanFiltered] ,\n\t\t\t\t\t\t\t\t\tCheckID\n\t\t\t\t\t\t\tFROM    #BlitzResults\n\t\t\t\t\t\t\tORDER BY Priority ,\n\t\t\t\t\t\t\t\t\tFindingsGroup ,\n\t\t\t\t\t\t\t\t\tFinding ,\n\t\t\t\t\t\t\t\t\tDatabaseName ,\n\t\t\t\t\t\t\t\t\tDetails;\n\t\t\t\t\t\tEND;\n\n\t\t\t\tDROP TABLE #BlitzResults;\n\n\t\t\t\tIF @OutputProcedureCache = 1\n\t\t\t\tAND @CheckProcedureCache = 1\n\t\t\t\t\tSELECT TOP 20\n\t\t\t\t\t\t\ttotal_worker_time / execution_count AS AvgCPU ,\n\t\t\t\t\t\t\ttotal_worker_time AS TotalCPU ,\n\t\t\t\t\t\t\tCAST(ROUND(100.00 * total_worker_time\n\t\t\t\t\t\t\t\t\t   / ( SELECT   SUM(total_worker_time)\n\t\t\t\t\t\t\t\t\t\t   FROM     sys.dm_exec_query_stats\n\t\t\t\t\t\t\t\t\t\t ), 2) AS MONEY) AS PercentCPU ,\n\t\t\t\t\t\t\ttotal_elapsed_time / execution_count AS AvgDuration ,\n\t\t\t\t\t\t\ttotal_elapsed_time AS TotalDuration ,\n\t\t\t\t\t\t\tCAST(ROUND(100.00 * total_elapsed_time\n\t\t\t\t\t\t\t\t\t   / ( SELECT   SUM(total_elapsed_time)\n\t\t\t\t\t\t\t\t\t\t   FROM     sys.dm_exec_query_stats\n\t\t\t\t\t\t\t\t\t\t ), 2) AS MONEY) AS PercentDuration ,\n\t\t\t\t\t\t\ttotal_logical_reads / execution_count AS AvgReads ,\n\t\t\t\t\t\t\ttotal_logical_reads AS TotalReads ,\n\t\t\t\t\t\t\tCAST(ROUND(100.00 * total_logical_reads\n\t\t\t\t\t\t\t\t\t   / ( SELECT   SUM(total_logical_reads)\n\t\t\t\t\t\t\t\t\t\t   FROM     sys.dm_exec_query_stats\n\t\t\t\t\t\t\t\t\t\t ), 2) AS MONEY) AS PercentReads ,\n\t\t\t\t\t\t\texecution_count ,\n\t\t\t\t\t\t\tCAST(ROUND(100.00 * execution_count\n\t\t\t\t\t\t\t\t\t   / ( SELECT   SUM(execution_count)\n\t\t\t\t\t\t\t\t\t\t   FROM     sys.dm_exec_query_stats\n\t\t\t\t\t\t\t\t\t\t ), 2) AS MONEY) AS PercentExecutions ,\n\t\t\t\t\t\t\tCASE WHEN DATEDIFF(mi, creation_time,\n\t\t\t\t\t\t\t\t\t\t\t   qs.last_execution_time) = 0 THEN 0\n\t\t\t\t\t\t\t\t ELSE CAST(( 1.00 * execution_count / DATEDIFF(mi,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  creation_time,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  qs.last_execution_time) ) AS MONEY)\n\t\t\t\t\t\t\tEND AS executions_per_minute ,\n\t\t\t\t\t\t\tqs.creation_time AS plan_creation_time ,\n\t\t\t\t\t\t\tqs.last_execution_time ,\n\t\t\t\t\t\t\ttext ,\n\t\t\t\t\t\t\ttext_filtered ,\n\t\t\t\t\t\t\tquery_plan ,\n\t\t\t\t\t\t\tquery_plan_filtered ,\n\t\t\t\t\t\t\tsql_handle ,\n\t\t\t\t\t\t\tquery_hash ,\n\t\t\t\t\t\t\tplan_handle ,\n\t\t\t\t\t\t\tquery_plan_hash\n\t\t\t\t\tFROM    #dm_exec_query_stats qs\n\t\t\t\t\tORDER BY CASE UPPER(@CheckProcedureCacheFilter)\n\t\t\t\t\t\t\t   WHEN 'CPU' THEN total_worker_time\n\t\t\t\t\t\t\t   WHEN 'READS' THEN total_logical_reads\n\t\t\t\t\t\t\t   WHEN 'EXECCOUNT' THEN execution_count\n\t\t\t\t\t\t\t   WHEN 'DURATION' THEN total_elapsed_time\n\t\t\t\t\t\t\t   ELSE total_worker_time\n\t\t\t\t\t\t\t END DESC;\n\n\tEND; /* ELSE -- IF @OutputType = 'SCHEMA' */\n\n    SET NOCOUNT OFF;\nGO\n\n/*\n--Sample execution call with the most common parameters:\nEXEC [dbo].[sp_Blitz]\n    @CheckUserDatabaseObjects = 1 ,\n    @CheckProcedureCache = 0 ,\n    @OutputType = 'TABLE' ,\n    @OutputProcedureCache = 0 ,\n    @CheckProcedureCacheFilter = NULL,\n    @CheckServerInfo = 1\n*/\nIF OBJECT_ID('dbo.sp_BlitzBackups') IS NULL\n  EXEC ('CREATE PROCEDURE dbo.sp_BlitzBackups AS RETURN 0;');\nGO\nALTER PROCEDURE [dbo].[sp_BlitzBackups]\n    @Help TINYINT = 0 ,\n\t@HoursBack INT = 168,\n\t@MSDBName NVARCHAR(256) = 'msdb',\n\t@AGName NVARCHAR(256) = NULL,\n\t@RestoreSpeedFullMBps INT = NULL,\n\t@RestoreSpeedDiffMBps INT = NULL,\n\t@RestoreSpeedLogMBps INT = NULL,\n\t@Debug TINYINT = 0,\n\t@PushBackupHistoryToListener BIT = 0,\n\t@WriteBackupsToListenerName NVARCHAR(256) = NULL,\n    @WriteBackupsToDatabaseName NVARCHAR(256) = NULL,\n    @WriteBackupsLastHours INT = 168,\n    @VersionDate DATE = NULL OUTPUT\nWITH RECOMPILE\nAS\n\tBEGIN\n    SET NOCOUNT ON;\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\n\tDECLARE @Version VARCHAR(30);\n\tSET @Version = '2.2';\n\tSET @VersionDate = '20180201';\n\n\tIF @Help = 1 PRINT '\n\t/*\n\tsp_BlitzBackups from http://FirstResponderKit.org\n\t\n\tThis script checks your backups to see how much data you might lose when\n\tthis server fails, and how long it might take to recover.\n\n\tTo learn more, visit http://FirstResponderKit.org where you can download new\n\tversions for free, watch training videos on how it works, get more info on\n\tthe findings, contribute your own code, and more.\n\n\tKnown limitations of this version:\n\t - Only Microsoft-supported versions of SQL Server. Sorry, 2005 and 2000.\n\n\tUnknown limitations of this version:\n\t - None.  (If we knew them, they would be known. Duh.)\n\n     Changes - for the full list of improvements and fixes in this version, see:\n     https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/\n\n\n\tParameter explanations:\n\n\t@HoursBack INT = 168\t\tHow many hours of history to examine, back from now.\n\t\t\t\t\t\t\t\tYou can check just the last 24 hours of backups, for example.\n\t@MSDBName NVARCHAR(255) \tYou can restore MSDB from different servers and check them\n\t\t\t\t\t\t\t\tcentrally. Also useful if you create a DBA utility database\n\t\t\t\t\t\t\t\tand merge data from several servers in an AG into one DB.\n\t@RestoreSpeedFullMBps INT\tBy default, we use the backup speed from MSDB to guesstimate\n\t\t\t\t\t\t\t\thow fast your restores will go. If you have done performance\n\t\t\t\t\t\t\t\ttuning and testing of your backups (or if they horribly go even\n\t\t\t\t\t\t\t\tslower in your DR environment, and you want to account for\n\t\t\t\t\t\t\t\tthat), then you can pass in different numbers here.\n\t@RestoreSpeedDiffMBps INT\tSee above.\n\t@RestoreSpeedLogMBps INT\tSee above.\n\n\tFor more documentation: https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/\n\n    MIT License\n\t\n\tCopyright (c) 2017 Brent Ozar Unlimited\n\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\tof this software and associated documentation files (the \"Software\"), to deal\n\tin the Software without restriction, including without limitation the rights\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\tcopies of the Software, and to permit persons to whom the Software is\n\tfurnished to do so, subject to the following conditions:\n\n\tThe above copyright notice and this permission notice shall be included in all\n\tcopies or substantial portions of the Software.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\tSOFTWARE.\n\n\n\n\n\t*/';\nELSE\nBEGIN\nDECLARE @StringToExecute NVARCHAR(MAX) = N'', \n\t\t@InnerStringToExecute NVARCHAR(MAX) = N'',\n\t\t@ProductVersion NVARCHAR(128), \n\t\t@ProductVersionMajor DECIMAL(10, 2),\n        @ProductVersionMinor DECIMAL(10, 2), \n\t\t@StartTime DATETIME2, @ResultText NVARCHAR(MAX), \n\t\t@crlf NVARCHAR(2),\n        @MoreInfoHeader NVARCHAR(100), \n\t\t@MoreInfoFooter NVARCHAR(100);\n\nIF @HoursBack > 0\n    SET @HoursBack = @HoursBack * -1;\n\nIF\t@WriteBackupsLastHours > 0\n    SET @WriteBackupsLastHours = @WriteBackupsLastHours * -1;\n\nSELECT  @crlf = NCHAR(13) + NCHAR(10), \n\t\t@StartTime = DATEADD(hh, @HoursBack, GETDATE()),\n        @MoreInfoHeader = N'<?ClickToSeeDetails -- ' + @crlf, @MoreInfoFooter = @crlf + N' -- ?>';\n\nSET @ProductVersion = CAST(SERVERPROPERTY('ProductVersion') AS NVARCHAR(128));\nSELECT @ProductVersionMajor = SUBSTRING(@ProductVersion, 1, CHARINDEX('.', @ProductVersion) + 1),\n       @ProductVersionMinor = PARSENAME(CONVERT(VARCHAR(32), @ProductVersion), 2);\n\nCREATE TABLE #Backups\n(\n    id INT IDENTITY(1, 1),\n    database_name NVARCHAR(128),\n    database_guid UNIQUEIDENTIFIER,\n    RPOWorstCaseMinutes DECIMAL(18, 1),\n    RTOWorstCaseMinutes DECIMAL(18, 1),\n    RPOWorstCaseBackupSetID INT,\n    RPOWorstCaseBackupSetFinishTime DATETIME,\n    RPOWorstCaseBackupSetIDPrior INT,\n    RPOWorstCaseBackupSetPriorFinishTime DATETIME,\n    RPOWorstCaseMoreInfoQuery XML,\n    RTOWorstCaseBackupFileSizeMB DECIMAL(18, 2),\n    RTOWorstCaseMoreInfoQuery XML,\n    FullMBpsAvg DECIMAL(18, 2),\n    FullMBpsMin DECIMAL(18, 2),\n    FullMBpsMax DECIMAL(18, 2),\n    FullSizeMBAvg DECIMAL(18, 2),\n    FullSizeMBMin DECIMAL(18, 2),\n    FullSizeMBMax DECIMAL(18, 2),\n    FullCompressedSizeMBAvg DECIMAL(18, 2),\n    FullCompressedSizeMBMin DECIMAL(18, 2),\n    FullCompressedSizeMBMax DECIMAL(18, 2),\n    DiffMBpsAvg DECIMAL(18, 2),\n    DiffMBpsMin DECIMAL(18, 2),\n    DiffMBpsMax DECIMAL(18, 2),\n    DiffSizeMBAvg DECIMAL(18, 2),\n    DiffSizeMBMin DECIMAL(18, 2),\n    DiffSizeMBMax DECIMAL(18, 2),\n    DiffCompressedSizeMBAvg DECIMAL(18, 2),\n    DiffCompressedSizeMBMin DECIMAL(18, 2),\n    DiffCompressedSizeMBMax DECIMAL(18, 2),\n    LogMBpsAvg DECIMAL(18, 2),\n    LogMBpsMin DECIMAL(18, 2),\n    LogMBpsMax DECIMAL(18, 2),\n    LogSizeMBAvg DECIMAL(18, 2),\n    LogSizeMBMin DECIMAL(18, 2),\n    LogSizeMBMax DECIMAL(18, 2),\n    LogCompressedSizeMBAvg DECIMAL(18, 2),\n    LogCompressedSizeMBMin DECIMAL(18, 2),\n    LogCompressedSizeMBMax DECIMAL(18, 2)\n);\n\nCREATE TABLE #RTORecoveryPoints\n(\n    id INT IDENTITY(1, 1),\n    database_name NVARCHAR(128),\n    database_guid UNIQUEIDENTIFIER,\n    rto_worst_case_size_mb AS\n        ( COALESCE(log_file_size_mb, 0) + COALESCE(diff_file_size_mb, 0) + COALESCE(full_file_size_mb, 0)),\n    rto_worst_case_time_seconds AS\n        ( COALESCE(log_time_seconds, 0) + COALESCE(diff_time_seconds, 0) + COALESCE(full_time_seconds, 0)),\n    full_backup_set_id INT,\n    full_last_lsn NUMERIC(25, 0),\n    full_backup_set_uuid UNIQUEIDENTIFIER,\n    full_time_seconds BIGINT,\n    full_file_size_mb DECIMAL(18, 2),\n    diff_backup_set_id INT,\n    diff_last_lsn NUMERIC(25, 0),\n    diff_time_seconds BIGINT,\n    diff_file_size_mb DECIMAL(18, 2),\n    log_backup_set_id INT,\n    log_last_lsn NUMERIC(25, 0),\n    log_time_seconds BIGINT,\n    log_file_size_mb DECIMAL(18, 2),\n    log_backups INT\n);\n\nCREATE TABLE #Recoverability\n\t(\n\t\tId INT IDENTITY ,\n\t\tDatabaseName NVARCHAR(128),\n\t\tDatabaseGUID UNIQUEIDENTIFIER,\n\t\tLastBackupRecoveryModel NVARCHAR(60),\n\t\tFirstFullBackupSizeMB DECIMAL (18,2),\n\t\tFirstFullBackupDate DATETIME,\n\t\tLastFullBackupSizeMB DECIMAL (18,2),\n\t\tLastFullBackupDate DATETIME,\n\t\tAvgFullBackupThroughputMB DECIMAL (18,2),\n\t\tAvgFullBackupDurationSeconds INT,\n\t\tAvgDiffBackupThroughputMB DECIMAL (18,2),\n\t\tAvgDiffBackupDurationSeconds INT,\n\t\tAvgLogBackupThroughputMB DECIMAL (18,2),\n\t\tAvgLogBackupDurationSeconds INT,\n\t\tAvgFullSizeMB DECIMAL (18,2),\n\t\tAvgDiffSizeMB DECIMAL (18,2),\n\t\tAvgLogSizeMB DECIMAL (18,2),\n\t\tIsBigDiff AS CASE WHEN (AvgFullSizeMB > 10240. AND ((AvgDiffSizeMB * 100.) / AvgFullSizeMB >= 40.))  THEN 1 ELSE 0 END,\n\t\tIsBigLog AS CASE WHEN (AvgFullSizeMB > 10240. AND ((AvgLogSizeMB * 100.) / AvgFullSizeMB >= 20.)) THEN 1 ELSE 0 END\n\t);\n\nCREATE TABLE #Trending\n(\n    DatabaseName NVARCHAR(128),\n\tDatabaseGUID UNIQUEIDENTIFIER,\n    [0] DECIMAL(18, 2),\n    [-1] DECIMAL(18, 2),\n    [-2] DECIMAL(18, 2),\n    [-3] DECIMAL(18, 2),\n    [-4] DECIMAL(18, 2),\n    [-5] DECIMAL(18, 2),\n    [-6] DECIMAL(18, 2),\n    [-7] DECIMAL(18, 2),\n    [-8] DECIMAL(18, 2),\n    [-9] DECIMAL(18, 2),\n    [-10] DECIMAL(18, 2),\n    [-11] DECIMAL(18, 2),\n    [-12] DECIMAL(18, 2)\n);\n\n\nCREATE TABLE #Warnings\n(\n    Id INT IDENTITY(1, 1) PRIMARY KEY CLUSTERED,\n    CheckId INT,\n    Priority INT,\n    DatabaseName VARCHAR(128),\n    Finding VARCHAR(256),\n    Warning VARCHAR(8000)\n);\n\nIF NOT EXISTS(SELECT * FROM sys.databases WHERE name = @MSDBName)\n\tBEGIN\n\tRAISERROR('@MSDBName was specified, but the database does not exist.', 0, 1) WITH NOWAIT;\n\tRETURN;\n\tEND\n\nIF @PushBackupHistoryToListener = 1\nGOTO PushBackupHistoryToListener\n\n\n\tRAISERROR('Inserting to #Backups', 0, 1) WITH NOWAIT;\n\n\tSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\n\tSET @StringToExecute += N'WITH Backups AS (SELECT bs.database_name, bs.database_guid, bs.type AS backup_type ' + @crlf\n\t\t+ ' , MBpsAvg = CAST(AVG(( bs.backup_size / ( CASE WHEN DATEDIFF(ss, bs.backup_start_date, bs.backup_finish_date) = 0 THEN 1 ELSE DATEDIFF(ss, bs.backup_start_date, bs.backup_finish_date) END ) / 1048576 )) AS INT) ' + @crlf\n\t\t+ ' , MBpsMin = CAST(MIN(( bs.backup_size / ( CASE WHEN DATEDIFF(ss, bs.backup_start_date, bs.backup_finish_date) = 0 THEN 1 ELSE DATEDIFF(ss, bs.backup_start_date, bs.backup_finish_date) END ) / 1048576 )) AS INT) ' + @crlf\n\t\t+ ' , MBpsMax = CAST(MAX(( bs.backup_size / ( CASE WHEN DATEDIFF(ss, bs.backup_start_date, bs.backup_finish_date) = 0 THEN 1 ELSE DATEDIFF(ss, bs.backup_start_date, bs.backup_finish_date) END ) / 1048576 )) AS INT) ' + @crlf\n\t\t+ ' , SizeMBAvg = AVG(backup_size / 1048576.0) ' + @crlf\n\t\t+ ' , SizeMBMin = MIN(backup_size / 1048576.0) ' + @crlf\n\t\t+ ' , SizeMBMax = MAX(backup_size / 1048576.0) ' + @crlf\n\t\t+ ' , CompressedSizeMBAvg = AVG(compressed_backup_size / 1048576.0) ' + @crlf\n\t\t+ ' , CompressedSizeMBMin = MIN(compressed_backup_size / 1048576.0) ' + @crlf\n\t\t+ ' , CompressedSizeMBMax = MAX(compressed_backup_size / 1048576.0) ' + @crlf;\n\n\n\tSET @StringToExecute += N' FROM ' + QUOTENAME(@MSDBName) + N'.dbo.backupset bs ' + @crlf\n\t\t+ N' WHERE bs.backup_finish_date >= @StartTime AND bs.is_damaged = 0 ' + @crlf\n\t\t+ N' GROUP BY bs.database_name, bs.database_guid, bs.type)' + @crlf;\n\n\tSET @StringToExecute += + N'INSERT INTO #Backups(database_name, database_guid, ' + @crlf\n\t\t+ N' FullMBpsAvg, FullMBpsMin, FullMBpsMax, FullSizeMBAvg, FullSizeMBMin, FullSizeMBMax, FullCompressedSizeMBAvg, FullCompressedSizeMBMin, FullCompressedSizeMBMax, ' + @crlf\n\t\t+ N' DiffMBpsAvg, DiffMBpsMin, DiffMBpsMax, DiffSizeMBAvg, DiffSizeMBMin, DiffSizeMBMax, DiffCompressedSizeMBAvg, DiffCompressedSizeMBMin, DiffCompressedSizeMBMax, ' + @crlf\n\t\t+ N' LogMBpsAvg, LogMBpsMin, LogMBpsMax, LogSizeMBAvg, LogSizeMBMin, LogSizeMBMax, LogCompressedSizeMBAvg, LogCompressedSizeMBMin, LogCompressedSizeMBMax ) ' + @crlf\n\t\t+ N'SELECT bF.database_name, bF.database_guid ' + @crlf\n\t\t+ N' , bF.MBpsAvg AS FullMBpsAvg ' + @crlf\n\t\t+ N' , bF.MBpsMin AS FullMBpsMin ' + @crlf\n\t\t+ N' , bF.MBpsMax AS FullMBpsMax ' + @crlf\n\t\t+ N' , bF.SizeMBAvg AS FullSizeMBAvg ' + @crlf\n\t\t+ N' , bF.SizeMBMin AS FullSizeMBMin ' + @crlf\n\t\t+ N' , bF.SizeMBMax AS FullSizeMBMax ' + @crlf\n\t\t+ N' , bF.CompressedSizeMBAvg AS FullCompressedSizeMBAvg ' + @crlf\n\t\t+ N' , bF.CompressedSizeMBMin AS FullCompressedSizeMBMin ' + @crlf\n\t\t+ N' , bF.CompressedSizeMBMax AS FullCompressedSizeMBMax ' + @crlf\n\t\t+ N' , bD.MBpsAvg AS DiffMBpsAvg ' + @crlf\n\t\t+ N' , bD.MBpsMin AS DiffMBpsMin ' + @crlf\n\t\t+ N' , bD.MBpsMax AS DiffMBpsMax ' + @crlf\n\t\t+ N' , bD.SizeMBAvg AS DiffSizeMBAvg ' + @crlf\n\t\t+ N' , bD.SizeMBMin AS DiffSizeMBMin ' + @crlf\n\t\t+ N' , bD.SizeMBMax AS DiffSizeMBMax ' + @crlf\n\t\t+ N' , bD.CompressedSizeMBAvg AS DiffCompressedSizeMBAvg ' + @crlf\n\t\t+ N' , bD.CompressedSizeMBMin AS DiffCompressedSizeMBMin ' + @crlf\n\t\t+ N' , bD.CompressedSizeMBMax AS DiffCompressedSizeMBMax ' + @crlf\n\t\t+ N' , bL.MBpsAvg AS LogMBpsAvg ' + @crlf\n\t\t+ N' , bL.MBpsMin AS LogMBpsMin ' + @crlf\n\t\t+ N' , bL.MBpsMax AS LogMBpsMax ' + @crlf\n\t\t+ N' , bL.SizeMBAvg AS LogSizeMBAvg ' + @crlf\n\t\t+ N' , bL.SizeMBMin AS LogSizeMBMin ' + @crlf\n\t\t+ N' , bL.SizeMBMax AS LogSizeMBMax ' + @crlf\n\t\t+ N' , bL.CompressedSizeMBAvg AS LogCompressedSizeMBAvg ' + @crlf\n\t\t+ N' , bL.CompressedSizeMBMin AS LogCompressedSizeMBMin ' + @crlf\n\t\t+ N' , bL.CompressedSizeMBMax AS LogCompressedSizeMBMax ' + @crlf\n\t\t+ N' FROM Backups bF ' + @crlf\n\t\t+ N' LEFT OUTER JOIN Backups bD ON bF.database_name = bD.database_name AND bF.database_guid = bD.database_guid AND bD.backup_type = ''I''' + @crlf\n\t\t+ N' LEFT OUTER JOIN Backups bL ON bF.database_name = bL.database_name AND bF.database_guid = bL.database_guid AND bL.backup_type = ''L''' + @crlf\n\t\t+ N' WHERE bF.backup_type = ''D''; ' + @crlf;\n\n\tIF @Debug = 1\n\t\tPRINT @StringToExecute;\n\n\tEXEC sys.sp_executesql @StringToExecute, N'@StartTime DATETIME2', @StartTime;\n\n\n\tRAISERROR('Updating #Backups with worst RPO case', 0, 1) WITH NOWAIT;\n\n\tSET @StringToExecute =N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\n\tSET @StringToExecute += N'\n\t\t\t\t\t\t\t SELECT  bs.database_name, bs.database_guid, bs.backup_set_id, bsPrior.backup_set_id AS backup_set_id_prior,\n\t\t\t\t\t\t\t         bs.backup_finish_date, bsPrior.backup_finish_date AS backup_finish_date_prior,\n\t\t\t\t\t\t\t         DATEDIFF(ss, bsPrior.backup_finish_date, bs.backup_finish_date) AS backup_gap_seconds\n\t\t\t\t\t\t\t INTO #backup_gaps\n\t\t\t\t\t\t\t FROM ' + QUOTENAME(@MSDBName) + N'.dbo.backupset AS bs\n\t\t\t\t\t\t\t CROSS APPLY ( \n\t\t\t\t\t\t\t \tSELECT TOP 1 bs1.backup_set_id, bs1.backup_finish_date\n\t\t\t\t\t\t\t \tFROM ' + QUOTENAME(@MSDBName) + N'.dbo.backupset AS bs1\n\t\t\t\t\t\t\t \tWHERE bs.database_name = bs1.database_name\n\t\t\t\t\t\t\t \t        AND bs.database_guid = bs1.database_guid\n\t\t\t\t\t\t\t \t        AND bs.backup_finish_date > bs1.backup_finish_date\n\t\t\t\t\t\t\t \t\t\tAND bs.backup_set_id > bs1.backup_set_id\n\t\t\t\t\t\t\t \tORDER BY bs1.backup_finish_date DESC, bs1.backup_set_id DESC \n\t\t\t\t\t\t\t ) bsPrior\n\t\t\t\t\t\t\t WHERE bs.backup_finish_date > @StartTime\n\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t CREATE CLUSTERED INDEX cx_backup_gaps ON #backup_gaps (database_name, database_guid, backup_set_id, backup_finish_date, backup_gap_seconds);\n\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t WITH max_gaps AS (\n\t\t\t\t\t\t\t SELECT g.database_name, g.database_guid, g.backup_set_id, g.backup_set_id_prior, g.backup_finish_date_prior, \n\t\t\t\t\t\t\t        g.backup_finish_date, MAX(g.backup_gap_seconds) AS max_backup_gap_seconds \n\t\t\t\t\t\t\t FROM #backup_gaps AS g\n\t\t\t\t\t\t\t GROUP BY g.database_name, g.database_guid, g.backup_set_id, g.backup_set_id_prior, g.backup_finish_date_prior,  g.backup_finish_date\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tUPDATE #Backups\n\t\t\t\t\t\t\t\tSET   RPOWorstCaseMinutes = bg.max_backup_gap_seconds / 60.0\n\t\t\t\t\t\t\t        , RPOWorstCaseBackupSetID = bg.backup_set_id\n\t\t\t\t\t\t\t\t\t, RPOWorstCaseBackupSetFinishTime = bg.backup_finish_date\n\t\t\t\t\t\t\t\t\t, RPOWorstCaseBackupSetIDPrior = bg.backup_set_id_prior\n\t\t\t\t\t\t\t\t\t, RPOWorstCaseBackupSetPriorFinishTime = bg.backup_finish_date_prior\n\t\t\t\t\t\t\t\tFROM #Backups b\n\t\t\t\t\t\t\t\tINNER HASH JOIN max_gaps bg ON b.database_name = bg.database_name AND b.database_guid = bg.database_guid\n\t\t\t\t\t\t\t\tLEFT OUTER HASH JOIN max_gaps bgBigger ON bg.database_name = bgBigger.database_name AND bg.database_guid = bgBigger.database_guid AND bg.max_backup_gap_seconds < bgBigger.max_backup_gap_seconds\n\t\t\t\t\t\t\t\tWHERE bgBigger.backup_set_id IS NULL;\n\t\t\t\t\t\t\t\t';\n\tIF @Debug = 1\n\t\tPRINT @StringToExecute;\n\n\tEXEC sys.sp_executesql @StringToExecute, N'@StartTime DATETIME2', @StartTime;\n\n\tRAISERROR('Updating #Backups with worst RPO case queries', 0, 1) WITH NOWAIT;\n\n    UPDATE #Backups\n      SET RPOWorstCaseMoreInfoQuery = @MoreInfoHeader + N'SELECT * ' + @crlf\n            + N' FROM ' + QUOTENAME(@MSDBName) + '.dbo.backupset ' + @crlf\n            + N' WHERE database_name = ''' + database_name + ''' ' + @crlf\n            + N' AND database_guid = ''' + CAST(database_guid AS NVARCHAR(50)) + ''' ' + @crlf\n            + N' AND backup_finish_date >= DATEADD(hh, -2, ''' + CAST(CONVERT(DATETIME, RPOWorstCaseBackupSetPriorFinishTime, 102) AS NVARCHAR(100)) + ''') ' + @crlf\n            + N' AND backup_finish_date <= DATEADD(hh, 2, ''' + CAST(CONVERT(DATETIME, RPOWorstCaseBackupSetPriorFinishTime, 102) AS NVARCHAR(100)) + ''') ' + @crlf\n            + N' ORDER BY backup_finish_date;'\n            + @MoreInfoFooter;\n\n\n/* RTO */\n\nRAISERROR('Gathering RTO information', 0, 1) WITH NOWAIT;\n\n\n\tSET @StringToExecute =N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\n\tSET @StringToExecute += N'\n\t\t\t\t\t\t\t INSERT INTO #RTORecoveryPoints(database_name, database_guid, log_last_lsn)\n\t\t\t\t\t\t\t SELECT database_name, database_guid, MAX(last_lsn) AS log_last_lsn\n\t\t\t\t\t\t\t FROM ' + QUOTENAME(@MSDBName) + '.dbo.backupset bLastLog\n\t\t\t\t\t\t\t WHERE type = ''L''\n\t\t\t\t\t\t\t AND bLastLog.backup_finish_date >= @StartTime\n\t\t\t\t\t\t\t GROUP BY database_name, database_guid;\n\t\t\t\t\t\t\t';\n\n\tIF @Debug = 1\n\t\tPRINT @StringToExecute;\n\n\t\tEXEC sys.sp_executesql @StringToExecute, N'@StartTime DATETIME2', @StartTime;\n\n/* Find the most recent full backups for those logs */\n\nRAISERROR('Updating #RTORecoveryPoints', 0, 1) WITH NOWAIT;\n\n\tSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\n\tSET @StringToExecute += N'\n\t\t\t\t\t\t\t UPDATE #RTORecoveryPoints\n\t\t\t\t\t\t\t SET log_backup_set_id = bLasted.backup_set_id\n\t\t\t\t\t\t\t     ,full_backup_set_id = bLasted.backup_set_id\n\t\t\t\t\t\t\t     ,full_last_lsn = bLasted.last_lsn\n\t\t\t\t\t\t\t     ,full_backup_set_uuid = bLasted.backup_set_uuid\n\t\t\t\t\t\t\t FROM #RTORecoveryPoints rp\n\t\t\t\t\t\t\t \t\tCROSS APPLY (\n\t\t\t\t\t\t\t \t\t\t\tSELECT TOP 1 bLog.backup_set_id AS backup_set_id_log, bLastFull.backup_set_id, bLastFull.last_lsn, bLastFull.backup_set_uuid, bLastFull.database_guid, bLastFull.database_name\n\t\t\t\t\t\t\t \t\t\t\tFROM  ' + QUOTENAME(@MSDBName) + N'.dbo.backupset bLog \n\t\t\t\t\t\t\t \t\t\t\tINNER JOIN ' + QUOTENAME(@MSDBName) + N'.dbo.backupset bLastFull \n\t\t\t\t\t\t\t \t\t\t\t\tON bLog.database_guid = bLastFull.database_guid \n\t\t\t\t\t\t\t \t\t\t\t\tAND bLog.database_name = bLastFull.database_name\n\t\t\t\t\t\t\t \t\t\t\t\tAND bLog.first_lsn > bLastFull.last_lsn\n\t\t\t\t\t\t\t \t\t\t\t\tAND bLastFull.type = ''D''\n\t\t\t\t\t\t\t \t\t\t\tWHERE rp.database_guid = bLog.database_guid \n\t\t\t\t\t\t\t \t\t\t\t\tAND rp.database_name = bLog.database_name\n\t\t\t\t\t\t\t \t\t\t) bLasted\n\t\t\t\t\t\t\t LEFT OUTER JOIN ' + QUOTENAME(@MSDBName) + N'.dbo.backupset bLaterFulls ON bLasted.database_guid = bLaterFulls.database_guid AND bLasted.database_name = bLaterFulls.database_name\n\t\t\t\t\t\t\t     AND bLasted.last_lsn < bLaterFulls.last_lsn\n\t\t\t\t\t\t\t     AND bLaterFulls.first_lsn < bLasted.last_lsn\n\t\t\t\t\t\t\t     AND bLaterFulls.type = ''D''\n\t\t\t\t\t\t\t WHERE bLaterFulls.backup_set_id IS NULL;\n\t\t\t\t\t\t\t ';\n\n\tIF @Debug = 1\n\t\tPRINT @StringToExecute;\n\n\tEXEC sys.sp_executesql @StringToExecute;\n\n/* Add any full backups in the StartDate range that weren't part of the above log backup chain */\n\nRAISERROR('Add any full backups in the StartDate range that weren''t part of the above log backup chain', 0, 1) WITH NOWAIT;\n\n\tSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\n\tSET @StringToExecute += N'\n\t\t\t\t\t\t\t INSERT INTO #RTORecoveryPoints(database_name, database_guid, full_backup_set_id, full_last_lsn, full_backup_set_uuid)\n\t\t\t\t\t\t\t SELECT bFull.database_name, bFull.database_guid, bFull.backup_set_id, bFull.last_lsn, bFull.backup_set_uuid\n\t\t\t\t\t\t\t FROM ' + QUOTENAME(@MSDBName) + N'.dbo.backupset bFull\n\t\t\t\t\t\t\t LEFT OUTER JOIN #RTORecoveryPoints rp ON bFull.backup_set_uuid = rp.full_backup_set_uuid\n\t\t\t\t\t\t\t WHERE bFull.type = ''D''\n\t\t\t\t\t\t\t     AND bFull.backup_finish_date IS NOT NULL\n\t\t\t\t\t\t\t     AND rp.full_backup_set_uuid IS NULL\n\t\t\t\t\t\t\t     AND bFull.backup_finish_date >= @StartTime;\n\t\t\t\t\t\t\t';\n\n\tIF @Debug = 1\n\t\tPRINT @StringToExecute;\n\n\t\tEXEC sys.sp_executesql @StringToExecute, N'@StartTime DATETIME2', @StartTime;\n\n/* Fill out the most recent log for that full, but before the next full */\n\nRAISERROR('Fill out the most recent log for that full, but before the next full', 0, 1) WITH NOWAIT;\n\n\tSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\n\tSET @StringToExecute += N'\n\t\t\t\t\t\t\tUPDATE rp\n\t\t\t\t\t\t    SET log_last_lsn = (SELECT MAX(last_lsn) FROM ' + QUOTENAME(@MSDBName) + N'.dbo.backupset bLog WHERE bLog.first_lsn >= rp.full_last_lsn AND bLog.first_lsn <= rpNextFull.full_last_lsn AND bLog.type = ''L'')\n\t\t\t\t\t\t\tFROM #RTORecoveryPoints rp\n\t\t\t\t\t\t    INNER JOIN #RTORecoveryPoints rpNextFull ON rp.database_guid = rpNextFull.database_guid AND rp.database_name = rpNextFull.database_name\n\t\t\t\t\t\t        AND rp.full_last_lsn < rpNextFull.full_last_lsn\n\t\t\t\t\t\t    LEFT OUTER JOIN #RTORecoveryPoints rpEarlierFull ON rp.database_guid = rpEarlierFull.database_guid AND rp.database_name = rpEarlierFull.database_name\n\t\t\t\t\t\t        AND rp.full_last_lsn < rpEarlierFull.full_last_lsn\n\t\t\t\t\t\t        AND rpNextFull.full_last_lsn > rpEarlierFull.full_last_lsn\n\t\t\t\t\t\t    WHERE rpEarlierFull.full_backup_set_id IS NULL;\n\t\t\t\t\t\t\t';\n\n\tIF @Debug = 1\n\t\tPRINT @StringToExecute;\n\n\tEXEC sys.sp_executesql @StringToExecute;\n\n/* Fill out a diff in that range */\n\nRAISERROR('Fill out a diff in that range', 0, 1) WITH NOWAIT;\n\n\tSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\n\tSET @StringToExecute += N'\n\t\t\t\t\t\t\tUPDATE #RTORecoveryPoints\n\t\t\t\t\t\t\tSET diff_last_lsn = (SELECT TOP 1 bDiff.last_lsn FROM ' + QUOTENAME(@MSDBName) + N'.dbo.backupset bDiff\n\t\t\t\t\t\t\t                        WHERE rp.database_guid = bDiff.database_guid AND rp.database_name = bDiff.database_name\n\t\t\t\t\t\t\t                            AND bDiff.type = ''I''\n\t\t\t\t\t\t\t                            AND bDiff.last_lsn < rp.log_last_lsn\n\t\t\t\t\t\t\t                            AND rp.full_backup_set_uuid = bDiff.differential_base_guid\n\t\t\t\t\t\t\t                            ORDER BY bDiff.last_lsn DESC)\n\t\t\t\t\t\t\tFROM #RTORecoveryPoints rp\n\t\t\t\t\t\t\tWHERE diff_last_lsn IS NULL;\n\t\t\t\t\t\t\t';\n\n\tIF @Debug = 1\n\t\tPRINT @StringToExecute;\n\n\tEXEC sys.sp_executesql @StringToExecute;\n\n/* Get time & size totals for full & diff */\n\nRAISERROR('Get time & size totals for full & diff', 0, 1) WITH NOWAIT;\n\n\tSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\n\tSET @StringToExecute += N'\n\t\t\t\t\t\t\tUPDATE #RTORecoveryPoints\n\t\t\t\t\t\t\t    SET full_time_seconds = DATEDIFF(ss,bFull.backup_start_date, bFull.backup_finish_date)\n\t\t\t\t\t\t\t    , full_file_size_mb = bFull.backup_size / 1048576.0\n\t\t\t\t\t\t\t    , diff_backup_set_id = bDiff.backup_set_id\n\t\t\t\t\t\t\t    , diff_time_seconds = DATEDIFF(ss,bDiff.backup_start_date, bDiff.backup_finish_date)\n\t\t\t\t\t\t\t    , diff_file_size_mb = bDiff.backup_size / 1048576.0\n\t\t\t\t\t\t\tFROM #RTORecoveryPoints rp\n\t\t\t\t\t\t\tINNER JOIN ' + QUOTENAME(@MSDBName) + N'.dbo.backupset bFull ON rp.database_guid = bFull.database_guid AND rp.database_name = bFull.database_name AND rp.full_last_lsn = bFull.last_lsn\n\t\t\t\t\t\t\tLEFT OUTER JOIN ' + QUOTENAME(@MSDBName) + N'.dbo.backupset bDiff ON rp.database_guid = bDiff.database_guid AND rp.database_name = bDiff.database_name AND rp.diff_last_lsn = bDiff.last_lsn AND bDiff.last_lsn IS NOT NULL;\n\t\t\t\t\t\t\t';\n\n\tIF @Debug = 1\n\t\tPRINT @StringToExecute;\n\t\n\tEXEC sys.sp_executesql @StringToExecute;\n\n\n/* Get time & size totals for logs */\n\nRAISERROR('Get time & size totals for logs', 0, 1) WITH NOWAIT;\n\n\tSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\n\tSET @StringToExecute += N'\n\t\t\t\t\t\t\tWITH LogTotals AS (\n\t\t\t\t\t\t\t\t SELECT rp.id, log_time_seconds = SUM(DATEDIFF(ss,bLog.backup_start_date, bLog.backup_finish_date))\n\t\t\t\t\t\t\t\t    , log_file_size = SUM(bLog.backup_size)\n\t\t\t\t\t\t\t\t    , SUM(1) AS log_backups\n\t\t\t\t\t\t\t\t        FROM #RTORecoveryPoints rp\n\t\t\t\t\t\t\t\t            INNER JOIN ' + QUOTENAME(@MSDBName) + N'.dbo.backupset bLog ON rp.database_guid = bLog.database_guid AND rp.database_name = bLog.database_name AND bLog.type = ''L''\n\t\t\t\t\t\t\t\t            AND bLog.first_lsn > COALESCE(rp.diff_last_lsn, rp.full_last_lsn)\n\t\t\t\t\t\t\t\t            AND bLog.first_lsn <= rp.log_last_lsn\n\t\t\t\t\t\t\t\t        GROUP BY rp.id\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tUPDATE #RTORecoveryPoints\n\t\t\t\t\t\t\t\t    SET log_time_seconds = lt.log_time_seconds\n\t\t\t\t\t\t\t\t    , log_file_size_mb = lt.log_file_size / 1048576.0\n\t\t\t\t\t\t\t\t    , log_backups = lt.log_backups\n\t\t\t\t\t\t\t\tFROM #RTORecoveryPoints rp\n\t\t\t\t\t\t\t\t    INNER JOIN LogTotals lt ON rp.id = lt.id;\n\t\t\t\t\t\t\t\t\t';\n\n\tIF @Debug = 1\n\t\tPRINT @StringToExecute;\n\n\tEXEC sys.sp_executesql @StringToExecute;\n\nRAISERROR('Gathering RTO worst cases', 0, 1) WITH NOWAIT;\n\n\tSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\n\tSET @StringToExecute += N'\n\t\t\t\t\t\t\tWITH WorstCases AS (\n\t\t\t\t\t\t\t\tSELECT rp.*\n\t\t\t\t\t\t\t\t  FROM #RTORecoveryPoints rp\n\t\t\t\t\t\t\t\t    LEFT OUTER JOIN #RTORecoveryPoints rpNewer \n\t\t\t\t\t\t\t\t\t\tON rp.database_guid = rpNewer.database_guid \n\t\t\t\t\t\t\t\t\t\tAND rp.database_name = rpNewer.database_name \n\t\t\t\t\t\t\t\t\t\tAND rp.full_last_lsn < rpNewer.full_last_lsn \n\t\t\t\t\t\t\t\t\t\tAND rpNewer.rto_worst_case_size_mb = (SELECT TOP 1 rto_worst_case_size_mb FROM #RTORecoveryPoints s\tWHERE rp.database_guid = s.database_guid AND rp.database_name = s.database_name ORDER BY rto_worst_case_size_mb DESC)\n\t\t\t\t\t\t\t\t  WHERE rp.rto_worst_case_size_mb = (SELECT TOP 1 rto_worst_case_size_mb FROM #RTORecoveryPoints s WHERE rp.database_guid = s.database_guid AND rp.database_name = s.database_name ORDER BY rto_worst_case_size_mb DESC)\n\t\t\t\t\t\t\t\t    /* OR  rp.rto_worst_case_time_seconds = (SELECT TOP 1 rto_worst_case_time_seconds FROM #RTORecoveryPoints s WHERE rp.database_guid = s.database_guid AND rp.database_name = s.database_name ORDER BY rto_worst_case_time_seconds DESC) */\n\t\t\t\t\t\t\t\t  AND rpNewer.database_guid IS NULL\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tUPDATE #Backups\n\t\t\t\t\t\t\t\t\t\tSET RTOWorstCaseMinutes = \n                                                                    /* Fulls */\n                                                                    (CASE WHEN @RestoreSpeedFullMBps IS NULL \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   THEN wc.full_time_seconds / 60.0\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   ELSE @RestoreSpeedFullMBps / wc.full_file_size_mb\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   END)\n\n                                                                    /* Diffs, which might not have been taken */\n                                                                    + (CASE WHEN @RestoreSpeedDiffMBps IS NOT NULL AND wc.diff_file_size_mb IS NOT NULL\n                                                                        THEN @RestoreSpeedDiffMBps / wc.diff_file_size_mb\n                                                                        ELSE COALESCE(wc.diff_time_seconds,0) / 60.0\n                                                                        END)\n\n                                                                    /* Logs, which might not have been taken */\n                                                                    + (CASE WHEN @RestoreSpeedLogMBps IS NOT NULL AND wc.log_file_size_mb IS NOT NULL\n                                                                        THEN @RestoreSpeedLogMBps / wc.log_file_size_mb\n                                                                        ELSE COALESCE(wc.log_time_seconds,0) / 60.0\n                                                                        END)\n\t\t\t\t\t\t\t\t        , RTOWorstCaseBackupFileSizeMB = wc.rto_worst_case_size_mb\n\t\t\t\t\t\t\t\tFROM #Backups b\n\t\t\t\t\t\t\t\tINNER JOIN WorstCases wc \n\t\t\t\t\t\t\t\tON b.database_guid = wc.database_guid \n\t\t\t\t\t\t\t\t\tAND b.database_name = wc.database_name;\n\t\t\t\t\t\t\t\t';\n\n\tIF @Debug = 1\n\t\tPRINT @StringToExecute;\n\n\tEXEC sys.sp_executesql @StringToExecute, N'@RestoreSpeedFullMBps INT, @RestoreSpeedDiffMBps INT, @RestoreSpeedLogMBps INT', @RestoreSpeedFullMBps, @RestoreSpeedDiffMBps, @RestoreSpeedLogMBps;\n\n\n\n/*Populating Recoverability*/\n\n\n\t/*Get distinct list of databases*/\n\tSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\n\tSET @StringToExecute += N'\n\t\t\t\t\t\t\t SELECT DISTINCT b.database_name, database_guid\n\t\t\t\t\t\t\t FROM   ' + QUOTENAME(@MSDBName) + N'.dbo.backupset AS b;'\n\n\tIF @Debug = 1\n\t\tPRINT @StringToExecute;\n\n\tINSERT #Recoverability ( DatabaseName, DatabaseGUID )\n\tEXEC sys.sp_executesql @StringToExecute;\n\n\n\t/*Find most recent recovery model, backup size, and backup date*/\n\tSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\n\tSET @StringToExecute += \tN'\n\t\t\t\t\t\t\t\tUPDATE r\n\t\t\t\t\t\t\t\tSET r.LastBackupRecoveryModel = ca.recovery_model,\n\t\t\t\t\t\t\t\t\tr.LastFullBackupSizeMB = ca.compressed_backup_size,\n\t\t\t\t\t\t\t\t\tr.LastFullBackupDate = ca.backup_finish_date\n\t\t\t\t\t\t\t\tFROM #Recoverability r\n\t\t\t\t\t\t\t\t\tCROSS APPLY (\n\t\t\t\t\t\t\t\t\t\tSELECT TOP 1 b.recovery_model, (b.compressed_backup_size / 1048576.0) AS compressed_backup_size, b.backup_finish_date\n\t\t\t\t\t\t\t\t\t\tFROM ' + QUOTENAME(@MSDBName) + N'.dbo.backupset AS b\n\t\t\t\t\t\t\t\t\t\tWHERE r.DatabaseName = b.database_name\n\t\t\t\t\t\t\t\t\t\tAND r.DatabaseGUID = b.database_guid\n\t\t\t\t\t\t\t\t\t\tAND b.type = ''D''\n\t\t\t\t\t\t\t\t\t\tAND b.backup_finish_date > @StartTime\n\t\t\t\t\t\t\t\t\t\tORDER BY b.backup_finish_date DESC\n\t\t\t\t\t\t\t\t\t\t\t\t) ca;'\n\n\tIF @Debug = 1\n\t\tPRINT @StringToExecute;\n\n\tEXEC sys.sp_executesql @StringToExecute, N'@StartTime DATETIME2', @StartTime;\n\n\t/*Find first backup size and date*/\n\tSET @StringToExecute =N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\n\tSET @StringToExecute += N'\n\t\t\t\t\t\t\tUPDATE r\n\t\t\t\t\t\t\tSET r.FirstFullBackupSizeMB = ca.compressed_backup_size,\n\t\t\t\t\t\t\t\tr.FirstFullBackupDate = ca.backup_finish_date\n\t\t\t\t\t\t\tFROM #Recoverability r\n\t\t\t\t\t\t\t\tCROSS APPLY (\n\t\t\t\t\t\t\t\t\tSELECT TOP 1 (b.compressed_backup_size / 1048576.0) AS compressed_backup_size, b.backup_finish_date\n\t\t\t\t\t\t\t\t\tFROM ' + QUOTENAME(@MSDBName) + N'.dbo.backupset AS b\n\t\t\t\t\t\t\t\t\tWHERE r.DatabaseName = b.database_name \n\t\t\t\t\t\t\t\t\tAND r.DatabaseGUID = b.database_guid\n\t\t\t\t\t\t\t\t\tAND b.type = ''D''\n\t\t\t\t\t\t\t\t\tAND b.backup_finish_date > @StartTime\n\t\t\t\t\t\t\t\t\tORDER BY b.backup_finish_date ASC\n\t\t\t\t\t\t\t\t\t\t\t) ca;'\n\n\tIF @Debug = 1\n\t\tPRINT @StringToExecute;\n\n\tEXEC sys.sp_executesql @StringToExecute, N'@StartTime DATETIME2', @StartTime;\n\n\n\t/*Find average backup throughputs for full, diff, and log*/\n\tSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\n\tSET @StringToExecute += N'\n\t\t\t\t\t\t\tUPDATE r\n\t\t\t\t\t\t\tSET r.AvgFullBackupThroughputMB = ca_full.AvgFullSpeed,\n\t\t\t\t\t\t\t\tr.AvgDiffBackupThroughputMB = ca_diff.AvgDiffSpeed,\n\t\t\t\t\t\t\t\tr.AvgLogBackupThroughputMB = ca_log.AvgLogSpeed,\n\t\t\t\t\t\t\t\tr.AvgFullBackupDurationSeconds = AvgFullDuration,\n\t\t\t\t\t\t\t\tr.AvgDiffBackupDurationSeconds = AvgDiffDuration,\n\t\t\t\t\t\t\t\tr.AvgLogBackupDurationSeconds = AvgLogDuration\n\t\t\t\t\t\t\tFROM #Recoverability AS r\n\t\t\t\t\t\t\tOUTER APPLY (\n\t\t\t\t\t\t\t\tSELECT b.database_name, \n\t\t\t\t\t\t\t\t\t   AVG( b.compressed_backup_size / ( DATEDIFF(ss, b.backup_start_date, b.backup_finish_date) ) / 1048576.0 ) AS AvgFullSpeed,\n\t\t\t\t\t\t\t\t\t   AVG( DATEDIFF(ss, b.backup_start_date, b.backup_finish_date) ) AS AvgFullDuration\n\t\t\t\t\t\t\t\tFROM ' + QUOTENAME(@MSDBName) + N'.dbo.backupset b\n\t\t\t\t\t\t\t\tWHERE r.DatabaseName = b.database_name\n\t\t\t\t\t\t\t\tAND r.DatabaseGUID = b.database_guid\n\t\t\t\t\t\t\t\tAND b.type = ''D'' \n\t\t\t\t\t\t\t\tAND DATEDIFF(SECOND, b.backup_start_date, b.backup_finish_date) > 0\n\t\t\t\t\t\t\t\tAND b.backup_finish_date > @StartTime\n\t\t\t\t\t\t\t\tGROUP BY b.database_name\n\t\t\t\t\t\t\t\t\t\t) ca_full\n\t\t\t\t\t\t\tOUTER APPLY (\n\t\t\t\t\t\t\t\tSELECT b.database_name, \n\t\t\t\t\t\t\t\t\t   AVG( b.compressed_backup_size / ( DATEDIFF(ss, b.backup_start_date, b.backup_finish_date) ) / 1048576.0 ) AS AvgDiffSpeed,\n\t\t\t\t\t\t\t\t\t   AVG( DATEDIFF(ss, b.backup_start_date, b.backup_finish_date) ) AS AvgDiffDuration\n\t\t\t\t\t\t\t\tFROM ' + QUOTENAME(@MSDBName) + N'.dbo.backupset b\n\t\t\t\t\t\t\t\tWHERE r.DatabaseName = b.database_name\n\t\t\t\t\t\t\t\tAND r.DatabaseGUID = b.database_guid\n\t\t\t\t\t\t\t\tAND b.type = ''I'' \n\t\t\t\t\t\t\t\tAND DATEDIFF(SECOND, b.backup_start_date, b.backup_finish_date) > 0\n\t\t\t\t\t\t\t\tAND b.backup_finish_date > @StartTime\n\t\t\t\t\t\t\t\tGROUP BY b.database_name\n\t\t\t\t\t\t\t\t\t\t) ca_diff\n\t\t\t\t\t\t\tOUTER APPLY (\n\t\t\t\t\t\t\t\tSELECT b.database_name, \n\t\t\t\t\t\t\t\t\t   AVG( b.compressed_backup_size / ( DATEDIFF(ss, b.backup_start_date, b.backup_finish_date) ) / 1048576.0 ) AS AvgLogSpeed,\n\t\t\t\t\t\t\t\t\t   AVG( DATEDIFF(ss, b.backup_start_date, b.backup_finish_date) ) AS AvgLogDuration\n\t\t\t\t\t\t\t\tFROM ' + QUOTENAME(@MSDBName) + N'.dbo.backupset b\n\t\t\t\t\t\t\t\tWHERE r.DatabaseName = b.database_name\n\t\t\t\t\t\t\t\tAND r.DatabaseGUID = b.database_guid\n\t\t\t\t\t\t\t\tAND b.type = ''L''\n\t\t\t\t\t\t\t\tAND DATEDIFF(SECOND, b.backup_start_date, b.backup_finish_date) > 0\n\t\t\t\t\t\t\t\tAND b.backup_finish_date > @StartTime\n\t\t\t\t\t\t\t\tGROUP BY b.database_name\n\t\t\t\t\t\t\t\t\t\t) ca_log;'\n\n\tIF @Debug = 1\n\t\tPRINT @StringToExecute;\n\n\tEXEC sys.sp_executesql @StringToExecute, N'@StartTime DATETIME2', @StartTime;\n\n\n\t/*Find max and avg diff and log sizes*/\n\tSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\n\tSET @StringToExecute += N'\n\t\t\t\t\t\t\tUPDATE r\n\t\t\t\t\t\t\t SET r.AvgFullSizeMB = fulls.avg_full_size,\n\t\t\t\t\t\t\t \t r.AvgDiffSizeMB = diffs.avg_diff_size,\n\t\t\t\t\t\t\t \t r.AvgLogSizeMB = logs.avg_log_size\n\t\t\t\t\t\t\t FROM #Recoverability AS r\n\t\t\t\t\t\t\t OUTER APPLY (\n\t\t\t\t\t\t\t \tSELECT b.database_name, AVG(b.compressed_backup_size / 1048576.0) AS avg_full_size\n\t\t\t\t\t\t\t \tFROM ' + QUOTENAME(@MSDBName) + N'.dbo.backupset AS b\n\t\t\t\t\t\t\t \tWHERE r.DatabaseName = b.database_name\n\t\t\t\t\t\t\t\tAND r.DatabaseGUID = b.database_guid\n\t\t\t\t\t\t\t \tAND b.type = ''D''\n\t\t\t\t\t\t\t\tAND b.backup_finish_date > @StartTime\n\t\t\t\t\t\t\t \tGROUP BY b.database_name\n\t\t\t\t\t\t\t \t\t\t) AS fulls\n\t\t\t\t\t\t\t OUTER APPLY (\n\t\t\t\t\t\t\t \tSELECT b.database_name, AVG(b.compressed_backup_size / 1048576.0) AS avg_diff_size\n\t\t\t\t\t\t\t \tFROM ' + QUOTENAME(@MSDBName) + N'.dbo.backupset AS b\n\t\t\t\t\t\t\t \tWHERE r.DatabaseName = b.database_name\n\t\t\t\t\t\t\t\tAND r.DatabaseGUID = b.database_guid\n\t\t\t\t\t\t\t \tAND b.type = ''I''\n\t\t\t\t\t\t\t\tAND b.backup_finish_date > @StartTime\n\t\t\t\t\t\t\t \tGROUP BY b.database_name\n\t\t\t\t\t\t\t \t\t\t) AS diffs\n\t\t\t\t\t\t\t OUTER APPLY (\n\t\t\t\t\t\t\t \tSELECT b.database_name, AVG(b.compressed_backup_size / 1048576.0) AS avg_log_size\n\t\t\t\t\t\t\t \tFROM ' + QUOTENAME(@MSDBName) + N'.dbo.backupset AS b\n\t\t\t\t\t\t\t \tWHERE r.DatabaseName = b.database_name\n\t\t\t\t\t\t\t\tAND r.DatabaseGUID = b.database_guid\n\t\t\t\t\t\t\t \tAND b.type = ''L''\n\t\t\t\t\t\t\t\tAND b.backup_finish_date > @StartTime\n\t\t\t\t\t\t\t \tGROUP BY b.database_name\n\t\t\t\t\t\t\t \t\t\t) AS logs;'\n\n\tIF @Debug = 1\n\t\tPRINT @StringToExecute;\n\n\tEXEC sys.sp_executesql @StringToExecute, N'@StartTime DATETIME2', @StartTime;\n\t\n/*Trending - only works if backupfile is populated, which means in msdb */\nIF @MSDBName = N'msdb'\nBEGIN\n\tSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' --+ @crlf;\n\n\tSET @StringToExecute += N'\n\t\t\t\t\t\t\tSELECT  p.DatabaseName,\n\t\t\t\t\t\t\t\t\tp.DatabaseGUID,\n\t\t\t\t\t\t\t\t\tp.[0],\n\t\t\t\t\t\t\t\t\tp.[-1],\n\t\t\t\t\t\t\t\t\tp.[-2],\n\t\t\t\t\t\t\t\t\tp.[-3],\n\t\t\t\t\t\t\t\t\tp.[-4],\n\t\t\t\t\t\t\t\t\tp.[-5],\n\t\t\t\t\t\t\t\t\tp.[-6],\n\t\t\t\t\t\t\t\t\tp.[-7],\n\t\t\t\t\t\t\t\t\tp.[-8],\n\t\t\t\t\t\t\t\t\tp.[-9],\n\t\t\t\t\t\t\t\t\tp.[-10],\n\t\t\t\t\t\t\t\t\tp.[-11],\n\t\t\t\t\t\t\t\t\tp.[-12]\n\t\t\t\t\t\t\t\tFROM ( SELECT b.database_name AS DatabaseName,\n\t\t\t\t\t\t\t\t\t\t\t  b.database_guid AS DatabaseGUID,\n\t\t\t\t\t\t\t\t\t\t\t  DATEDIFF(MONTH, @StartTime, b.backup_start_date) AS MonthsAgo ,\n\t\t\t\t\t\t\t\t\t\t\t  CONVERT(DECIMAL(18, 2), AVG(bf.file_size / 1048576.0)) AS AvgSizeMB\n\t\t\t\t\t\t\t\t\t\tFROM ' + QUOTENAME(@MSDBName) + N'.dbo.backupset AS b \n\t\t\t\t\t\t\t\t\t\tINNER JOIN ' + QUOTENAME(@MSDBName) + N'.dbo.backupfile AS bf\n\t\t\t\t\t\t\t\t\t\tON b.backup_set_id = bf.backup_set_id\n\t\t\t\t\t\t\t\t\t\tWHERE b.database_name NOT IN ( ''master'', ''msdb'', ''model'', ''tempdb'' )\n\t\t\t\t\t\t\t\t\t\tAND bf.file_type = ''D''\n\t\t\t\t\t\t\t\t\t\tAND b.backup_start_date >= DATEADD(YEAR, -1, @StartTime)\n\t\t\t\t\t\t\t\t\t\tAND b.backup_start_date <= SYSDATETIME()\n\t\t\t\t\t\t\t\t\t\tGROUP BY b.database_name,\n\t\t\t\t\t\t\t\t\t\t\t\t b.database_guid,\t\n\t\t\t\t\t\t\t\t\t\t\t\t DATEDIFF(mm, @StartTime, b.backup_start_date)\n\t\t\t\t\t\t\t\t\t ) AS bckstat PIVOT ( SUM(bckstat.AvgSizeMB) FOR bckstat.MonthsAgo IN ( [0], [-1], [-2], [-3], [-4], [-5], [-6], [-7], [-8], [-9], [-10], [-11], [-12] ) ) AS p\n\t\t\t\t\t\t\t\tORDER BY p.DatabaseName;\n\t\t\t\t\t\t\t\t'\n\n\t\tIF @Debug = 1\n\t\t\tPRINT @StringToExecute;\n\n\t\tINSERT #Trending ( DatabaseName, DatabaseGUID, [0], [-1], [-2], [-3], [-4], [-5], [-6], [-7], [-8], [-9], [-10], [-11], [-12] )\n\t\tEXEC sys.sp_executesql @StringToExecute, N'@StartTime DATETIME2', @StartTime;\n\nEND\n\n/*End Trending*/\n\n/*End populating Recoverability*/\n\nRAISERROR('Returning data', 0, 1) WITH NOWAIT;\n\n\tSELECT   b.*\n\t\tFROM     #Backups AS b\n\t\tORDER BY b.database_name;\n\n\tSELECT   r.*,\n             t.[0], t.[-1], t.[-2], t.[-3], t.[-4], t.[-5], t.[-6], t.[-7], t.[-8], t.[-9], t.[-10], t.[-11], t.[-12]\n\t\tFROM #Recoverability AS r\n\t\tLEFT JOIN #Trending t\n\t\tON r.DatabaseName = t.DatabaseName\n\t\tAND r.DatabaseGUID = t.DatabaseGUID\t\n\t\tWHERE r.LastBackupRecoveryModel IS NOT NULL\n\t\tORDER BY r.DatabaseName\n\n\nRAISERROR('Rules analysis starting', 0, 1) WITH NOWAIT;\n\n/*Looking for out of band backups by finding most common backup operator user_name and noting backups taken by other user_names*/\n\n\tSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\n\tSET @StringToExecute += N'\n\t\t\t\t\t\t\tWITH common_people AS (\n\t\t\t\t\t\t\t\t\tSELECT TOP 1 b.user_name, COUNT_BIG(*) AS Records\n\t\t\t\t\t\t\t\t\tFROM ' + QUOTENAME(@MSDBName) + N'.dbo.backupset AS b\n\t\t\t\t\t\t\t\t\tGROUP BY b.user_name\n\t\t\t\t\t\t\t\t\tORDER BY Records DESC\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tSELECT \n\t\t\t\t\t\t\t\t1 AS CheckId,\n\t\t\t\t\t\t\t\t100 AS [Priority],\n\t\t\t\t\t\t\t\tb.database_name AS [Database Name],\n\t\t\t\t\t\t\t\t''Non-Agent backups taken'' AS [Finding], \n\t\t\t\t\t\t\t\t''The database '' + QUOTENAME(b.database_name) + '' has been backed up by '' + QUOTENAME(b.user_name) + '' '' + CONVERT(VARCHAR(10), COUNT(*)) + '' times.'' AS [Warning]\n\t\t\t\t\t\t\tFROM   ' + QUOTENAME(@MSDBName) + N'.dbo.backupset AS b\n\t\t\t\t\t\t\tWHERE  b.user_name NOT LIKE ''%Agent%'' AND b.user_name NOT LIKE ''%AGENT%'' \n\t\t\t\t\t\t\tAND NOT EXISTS (\n\t\t\t\t\t\t\t\t\t\t\tSELECT 1\n\t\t\t\t\t\t\t\t\t\t\tFROM common_people AS cp\n\t\t\t\t\t\t\t\t\t\t\tWHERE cp.user_name = b.user_name\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tGROUP BY b.database_name, b.user_name\n\t\t\t\t\t\t\tHAVING COUNT(*) > 1;' + @crlf;\n\n\tIF @Debug = 1\n\t\tPRINT @StringToExecute;\n\n\t\tINSERT #Warnings (CheckId, Priority, DatabaseName, Finding, Warning )\n\t\tEXEC sys.sp_executesql @StringToExecute;\n\t\n\t/*Looking for compatibility level changing. Only looking for databases that have changed more than twice (It''s possible someone may have changed up, had CE problems, and then changed back)*/\n\n\tSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\n\tSET @StringToExecute += N'SELECT \n\t\t\t\t\t\t\t\t2 AS CheckId,\n\t\t\t\t\t\t\t\t100 AS [Priority],\n\t\t\t\t\t\t\t\tb.database_name AS [Database Name],\n\t\t\t\t\t\t\t\t''Compatibility level changing'' AS [Finding],\n\t\t\t\t\t\t\t\t''The database '' + QUOTENAME(b.database_name) + '' has changed compatibility levels '' + CONVERT(VARCHAR(10), COUNT(DISTINCT b.compatibility_level)) + '' times.'' AS [Warning]\n\t\t\t\t\t\t\tFROM   ' + QUOTENAME(@MSDBName) + N'.dbo.backupset AS b\n\t\t\t\t\t\t\tGROUP BY b.database_name\n\t\t\t\t\t\t\tHAVING COUNT(DISTINCT b.compatibility_level) > 2;' + @crlf;\n\n\tIF @Debug = 1\n\t\tPRINT @StringToExecute;\n\n\t\tINSERT #Warnings ( CheckId, Priority, DatabaseName, Finding, Warning )\n\t\tEXEC sys.sp_executesql @StringToExecute;\n\t\n\t/*Looking for password protected backups. This hasn''t been a popular option ever, and was largely replaced by encrypted backups, but it''s simple to check for.*/\n\n\tSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\n\tSET @StringToExecute += N'SELECT \n\t\t\t\t\t\t\t\t3 AS CheckId,\n\t\t\t\t\t\t\t\t100 AS [Priority],\n\t\t\t\t\t\t\t\tb.database_name AS [Database Name],\n\t\t\t\t\t\t\t\t''Password backups'' AS [Finding],\n\t\t\t\t\t\t\t\t''The database '' + QUOTENAME(b.database_name) + '' has been backed up with a password '' + CONVERT(VARCHAR(10), COUNT(*)) + '' times. Who has the password?'' AS [Warning]\n\t\t\t\t\t\t\tFROM   ' + QUOTENAME(@MSDBName) + N'.dbo.backupset AS b\n\t\t\t\t\t\t\tWHERE b.is_password_protected = 1\n\t\t\t\t\t\t\tGROUP BY b.database_name;' + @crlf;\n\n\tIF @Debug = 1\n\t\tPRINT @StringToExecute;\n\n\t\tINSERT #Warnings ( CheckId, Priority, DatabaseName, Finding, Warning )\n\t\tEXEC sys.sp_executesql @StringToExecute;\n\t\n\t/*Looking for snapshot backups. There are legit reasons for these, but we should flag them so the questions get asked. What questions? Good question.*/\n\n\tSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\n\tSET @StringToExecute += N'SELECT \n\t\t\t\t\t\t\t\t4 AS CheckId,\n\t\t\t\t\t\t\t\t100 AS [Priority],\n\t\t\t\t\t\t\t\tb.database_name AS [Database Name],\n\t\t\t\t\t\t\t\t''Snapshot backups'' AS [Finding],\n\t\t\t\t\t\t\t\t''The database '' + QUOTENAME(b.database_name) + '' has had '' + CONVERT(VARCHAR(10), COUNT(*)) + '' snapshot backups. This message is purely informational.'' AS [Warning]\n\t\t\t\t\t\t\tFROM   ' + QUOTENAME(@MSDBName) + N'.dbo.backupset AS b\n\t\t\t\t\t\t\tWHERE b.is_snapshot = 1\n\t\t\t\t\t\t\tGROUP BY b.database_name;' + @crlf;\n\n\tIF @Debug = 1\n\t\tPRINT @StringToExecute;\n\n\t\tINSERT #Warnings ( CheckId, Priority, DatabaseName, Finding, Warning )\n\t\tEXEC sys.sp_executesql @StringToExecute;\n\t\n\t/*It''s fine to take backups of read only databases, but it''s not always necessary (there''s no new data, after all).*/\n\n\tSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\n\tSET @StringToExecute += N'SELECT \n\t\t\t\t\t\t\t\t5 AS CheckId,\n\t\t\t\t\t\t\t\t100 AS [Priority],\n\t\t\t\t\t\t\t\tb.database_name AS [Database Name],\n\t\t\t\t\t\t\t\t''Read only state backups'' AS [Finding],\n\t\t\t\t\t\t\t\t''The database '' + QUOTENAME(b.database_name) + '' has been backed up '' + CONVERT(VARCHAR(10), COUNT(*)) + '' times while in a read-only state. This can be normal if it''''s a secondary, but a bit odd otherwise.'' AS [Warning]\n\t\t\t\t\t\t\tFROM   ' + QUOTENAME(@MSDBName) + N'.dbo.backupset AS b\n\t\t\t\t\t\t\tWHERE b.is_readonly = 1\n\t\t\t\t\t\t\tGROUP BY b.database_name;' + @crlf;\n\n\tIF @Debug = 1\n\t\tPRINT @StringToExecute;\n\n\t\tINSERT #Warnings ( CheckId, Priority, DatabaseName, Finding, Warning )\n\t\tEXEC sys.sp_executesql @StringToExecute;\n\t\n\t/*So, I''ve come across people who think they need to change their database to single user mode to take a backup. Or that doing that will help something. I just need to know, here.*/\n\n\tSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\n\tSET @StringToExecute += N'SELECT \n\t\t\t\t\t\t\t\t6 AS CheckId,\n\t\t\t\t\t\t\t\t100 AS [Priority],\n\t\t\t\t\t\t\t\tb.database_name AS [Database Name],\n\t\t\t\t\t\t\t\t''Single user mode backups'' AS [Finding],\n\t\t\t\t\t\t\t\t''The database '' + QUOTENAME(b.database_name) + '' has been backed up '' + CONVERT(VARCHAR(10), COUNT(*)) + '' times while in single-user mode. This is really weird! Make sure your backup process doesn''''t include a mode change anywhere.'' AS [Warning]\n\t\t\t\t\t\t\tFROM   ' + QUOTENAME(@MSDBName) + N'.dbo.backupset AS b\n\t\t\t\t\t\t\tWHERE b.is_single_user = 1\n\t\t\t\t\t\t\tGROUP BY b.database_name;' + @crlf;\n\n\tIF @Debug = 1\n\t\tPRINT @StringToExecute;\n\n\t\tINSERT #Warnings ( CheckId, Priority, DatabaseName, Finding, Warning )\n\t\tEXEC sys.sp_executesql @StringToExecute;\n\t\n\t/*C''mon, it''s 2017. Take your backups with CHECKSUMS, people.*/\n\n\tSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\n\tSET @StringToExecute += N'SELECT \n\t\t\t\t\t\t\t\t7 AS CheckId,\n\t\t\t\t\t\t\t\t100 AS [Priority],\n\t\t\t\t\t\t\t\tb.database_name AS [Database Name],\n\t\t\t\t\t\t\t\t''No CHECKSUMS'' AS [Finding],\n\t\t\t\t\t\t\t\t''The database '' + QUOTENAME(b.database_name) + '' has been backed up '' + CONVERT(VARCHAR(10), COUNT(*)) + '' times without CHECKSUMS in the past 30 days. CHECKSUMS can help alert you to corruption errors.'' AS [Warning]\n\t\t\t\t\t\t\tFROM   ' + QUOTENAME(@MSDBName) + N'.dbo.backupset AS b\n\t\t\t\t\t\t\tWHERE b.has_backup_checksums = 0\n\t\t\t\t\t\t\tAND b.backup_finish_date >= DATEADD(DAY, -30, SYSDATETIME())\n\t\t\t\t\t\t\tGROUP BY b.database_name;' + @crlf;\n\n\tIF @Debug = 1\n\t\tPRINT @StringToExecute;\n\n\t\tINSERT #Warnings ( CheckId, Priority, DatabaseName, Finding, Warning )\n\t\tEXEC sys.sp_executesql @StringToExecute;\n\t\n\t/*Damaged is a Black Flag album. You don''t want your backups to be like a Black Flag album. */\n\n\tSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\n\tSET @StringToExecute += N'SELECT \n\t\t\t\t\t\t\t\t8 AS CheckId,\n\t\t\t\t\t\t\t\t100 AS [Priority],\n\t\t\t\t\t\t\t\tb.database_name AS [Database Name],\n\t\t\t\t\t\t\t\t''Damaged backups'' AS [Finding],\n\t\t\t\t\t\t\t\t''The database '' + QUOTENAME(b.database_name) + '' has had '' + CONVERT(VARCHAR(10), COUNT(*)) + '' damaged backups taken without stopping to throw an error. This is done by specifying CONTINUE_AFTER_ERROR in your BACKUP commands.'' AS [Warning]\n\t\t\t\t\t\t\tFROM   ' + QUOTENAME(@MSDBName) + N'.dbo.backupset AS b\n\t\t\t\t\t\t\tWHERE b.is_damaged = 1\n\t\t\t\t\t\t\tGROUP BY b.database_name;' + @crlf;\n\n\tIF @Debug = 1\n\t\tPRINT @StringToExecute;\n\n\t\tINSERT #Warnings ( CheckId, Priority, DatabaseName, Finding, Warning )\n\t\tEXEC sys.sp_executesql @StringToExecute;\n\t\n\t/*Checking for encrypted backups and the last backup of the encryption key.*/\n\n\t/*2014 ONLY*/\n\nIF @ProductVersionMajor >= 12\n\tBEGIN\n\n\tSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\n\tSET @StringToExecute += N'SELECT \n\t\t\t\t\t\t\t\t9 AS CheckId,\n\t\t\t\t\t\t\t\t100 AS [Priority],\n\t\t\t\t\t\t\t\tb.database_name AS [Database Name],\n\t\t\t\t\t\t\t\t''Encrypted backups'' AS [Finding],\n\t\t\t\t\t\t\t\t''The database '' + QUOTENAME(b.database_name) + '' has had '' + CONVERT(VARCHAR(10), COUNT(*)) + '' '' + b.encryptor_type + '' backups, and the last time a certificate was backed up is '\n\t\t\t\t\t\t\t\t+ CASE WHEN LOWER(@MSDBName) <> N'msdb'\n\t\t\t\t\t\t\t\t\tTHEN + N'...well, that information is on another server, anyway.'' AS [Warning]'\n\t\t\t\t\t\t\t\t\tELSE + CONVERT(VARCHAR(30), (SELECT MAX(c.pvt_key_last_backup_date) FROM sys.certificates AS c WHERE c.name NOT LIKE '##%')) + N'.'' AS [Warning]'\n\t\t\t\t\t\t\t\t\tEND + \n\t\t\t\t\t\t\tN'\n\t\t\t\t\t\t\tFROM   ' + QUOTENAME(@MSDBName) + N'.dbo.backupset AS b\n\t\t\t\t\t\t\tWHERE b.encryptor_type IS NOT NULL\n\t\t\t\t\t\t\tGROUP BY b.database_name, b.encryptor_type;' + @crlf;\n\n\tIF @Debug = 1\n\t\tPRINT @StringToExecute;\n\n\t\tINSERT #Warnings ( CheckId, Priority, DatabaseName, Finding, Warning )\n\t\tEXEC sys.sp_executesql @StringToExecute;\n\t\n\tEND\n\t\n\t/*Looking for backups that have BULK LOGGED data in them -- this can screw up point in time LOG recovery.*/\n\n\tSET @StringToExecute =N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\n\tSET @StringToExecute += N'SELECT \n\t\t10 AS CheckId,\n\t\t100 AS [Priority],\n\t\tb.database_name AS [Database Name],\n\t\t''Bulk logged backups'' AS [Finding],\n\t\t''The database '' + QUOTENAME(b.database_name) + '' has had '' + CONVERT(VARCHAR(10), COUNT(*)) + '' backups with bulk logged data. This can make point in time recovery awkward. '' AS [Warning]\n\tFROM   ' + QUOTENAME(@MSDBName) + '.dbo.backupset AS b\n\tWHERE b.has_bulk_logged_data = 1\n\tGROUP BY b.database_name;' + @crlf;\n\n\tIF @Debug = 1\n\t\tPRINT @StringToExecute;\n\n\t\tINSERT #Warnings ( CheckId, Priority, DatabaseName, Finding, Warning )\n\t\tEXEC sys.sp_executesql @StringToExecute;\n\t\n\t/*Looking for recovery model being switched between FULL and SIMPLE, because it''s a bad practice.*/\n\n\tSET @StringToExecute =N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\n\tSET @StringToExecute += N'SELECT \n\t\t11 AS CheckId,\n\t\t100 AS [Priority],\n\t\tb.database_name AS [Database Name],\n\t\t''Recovery model switched'' AS [Finding],\n\t\t''The database '' + QUOTENAME(b.database_name) + '' has changed recovery models from between FULL and SIMPLE '' + CONVERT(VARCHAR(10), COUNT(DISTINCT b.recovery_model)) + '' times. This breaks the log chain and is generally a bad idea.'' AS [Warning]\n\tFROM   ' + QUOTENAME(@MSDBName) + '.dbo.backupset AS b\n\tWHERE b.recovery_model <> ''BULK-LOGGED''\n\tGROUP BY b.database_name\n\tHAVING COUNT(DISTINCT b.recovery_model) > 4;' + @crlf;\n\n\tIF @Debug = 1\n\t\tPRINT @StringToExecute;\n\n\t\tINSERT #Warnings ( CheckId, Priority, DatabaseName, Finding, Warning )\n\t\tEXEC sys.sp_executesql @StringToExecute;\n\n\t/*Looking for uncompressed backups.*/\n\n\tSET @StringToExecute =N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\n\tSET @StringToExecute += N'SELECT \n\t\t12 AS CheckId,\n\t\t100 AS [Priority],\n\t\tb.database_name AS [Database Name],\n\t\t''Uncompressed backups'' AS [Finding],\n\t\t''The database '' + QUOTENAME(b.database_name) + '' has had '' + CONVERT(VARCHAR(10), COUNT(*)) + '' uncompressed backups in the last 30 days. This is a free way to save time and space. And SPACETIME. If your version of SQL supports it.'' AS [Warning]\n\tFROM   ' + QUOTENAME(@MSDBName) + '.dbo.backupset AS b\n\tWHERE backup_size = compressed_backup_size AND type = ''D''\n\tAND b.backup_finish_date >= DATEADD(DAY, -30, SYSDATETIME())\n\tGROUP BY b.database_name;' + @crlf;\n\n\tIF @Debug = 1\n\t\tPRINT @StringToExecute;\n\n\t\tINSERT #Warnings ( CheckId, Priority, DatabaseName, Finding, Warning )\n\t\tEXEC sys.sp_executesql @StringToExecute;\n\nRAISERROR('Rules analysis starting on temp tables', 0, 1) WITH NOWAIT;\n\n\t\tINSERT #Warnings ( CheckId, Priority, DatabaseName, Finding, Warning )\n\t\tSELECT\n\t\t\t13 AS CheckId,\n\t\t\t100 AS Priority,\n\t\t\tr.DatabaseName as [DatabaseName],\n\t\t\t'Big Diffs' AS [Finding],\n\t\t\t'On average, Differential backups for this database are >=40% of the size of the average Full backup.' AS [Warning]\n\t\t\tFROM #Recoverability AS r\n\t\t\tWHERE r.IsBigDiff = 1\n\n\t\tINSERT #Warnings ( CheckId, Priority, DatabaseName, Finding, Warning )\n\t\tSELECT\n\t\t\t13 AS CheckId,\n\t\t\t100 AS Priority,\n\t\t\tr.DatabaseName as [DatabaseName],\n\t\t\t'Big Logs' AS [Finding],\n\t\t\t'On average, Log backups for this database are >=20% of the size of the average Full backup.' AS [Warning]\n\t\t\tFROM #Recoverability AS r\n\t\t\tWHERE r.IsBigLog = 1\n\n\n\n/*Insert thank you stuff last*/\n\t\tINSERT #Warnings ( CheckId, Priority, DatabaseName, Finding, Warning )\n\n\t\tSELECT\n\t\t2147483647 AS [CheckId],\n\t\t2147483647 AS [Priority],\n\t\t'From Your Community Volunteers' AS [DatabaseName],\n\t\t'sp_BlitzBackups Version: ' + @Version + ', Version Date: ' + CONVERT(VARCHAR(30), @VersionDate) + '.' AS [Finding],\n\t\t'Thanks for using our stored procedure. We hope you find it useful! Check out our other free SQL Server scripts at firstresponderkit.org!' AS [Warning];\n\nRAISERROR('Rules analysis finished', 0, 1) WITH NOWAIT;\n\nSELECT w.CheckId, w.Priority, w.DatabaseName, w.Finding, w.Warning\nFROM #Warnings AS w\nORDER BY w.Priority, w.CheckId;\n\nDROP TABLE #Backups, #Warnings, #Recoverability, #RTORecoveryPoints\n\n\nRETURN;\n\nPushBackupHistoryToListener:\n\nRAISERROR('Pushing backup history to listener', 0, 1) WITH NOWAIT;\n\nDECLARE @msg NVARCHAR(4000) = N'';\nDECLARE @RemoteCheck TABLE (c INT NULL);\n\n\nIF @WriteBackupsToDatabaseName IS NULL\n\tBEGIN\n\tRAISERROR('@WriteBackupsToDatabaseName can''t be NULL.', 0, 1) WITH NOWAIT\n\tRETURN;\n\tEND\n\nIF LOWER(@WriteBackupsToDatabaseName) = N'msdb'\n\tBEGIN\n\tRAISERROR('We can''t write to the real msdb, we have to write to a fake msdb.', 0, 1) WITH NOWAIT\n\tRETURN;\n\tEND\n\nIF @WriteBackupsToListenerName IS NULL\nBEGIN\n\tIF @AGName IS NULL\n\t\tBEGIN\n\t\t\tRAISERROR('@WriteBackupsToListenerName and @AGName can''t both be NULL.', 0, 1) WITH NOWAIT;\n\t\t\tRETURN;\n\t\tEND\n\tELSE\n\t\tBEGIN\t\n\t\t\tSELECT @WriteBackupsToListenerName =  dns_name\n\t\t\tFROM sys.availability_groups AS ag\n\t\t\tJOIN sys.availability_group_listeners AS agl\n\t\t\tON ag.group_id = agl.group_id\n\t\t\tWHERE name = @AGName;\n\t\tEND\n\nEND\n\nIF @WriteBackupsToListenerName IS NOT NULL\nBEGIN\n\tIF NOT EXISTS \n\t\t(\n\t\t\tSELECT *\n\t\t\tFROM sys.servers s\n\t\t\tWHERE name = @WriteBackupsToListenerName\n\t\t)\n\t\t\tBEGIN\n\t\t\t\tSET @msg = N'We need a linked server to write data across. Please set one up for ' + @WriteBackupsToListenerName + N'.';\n\t\t\t\tRAISERROR(@msg, 0, 1) WITH NOWAIT;\n\t\t\t\tRETURN;\n\t\t\tEND\nEND\n\n\tSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\n\tSET @StringToExecute += N'SELECT TOP 1 1 FROM ' \n\t\t\t\t\t\t\t+ QUOTENAME(@WriteBackupsToListenerName) + N'.master.sys.databases d WHERE d.name = @i_WriteBackupsToDatabaseName;'\n\n\tIF @Debug = 1\n\t\tPRINT @StringToExecute;\n\n\tINSERT @RemoteCheck (c)\n\tEXEC sp_executesql @StringToExecute, N'@i_WriteBackupsToDatabaseName NVARCHAR(256)', @i_WriteBackupsToDatabaseName = @WriteBackupsToDatabaseName;\n\n\tIF @@ROWCOUNT = 0\n\t\tBEGIN\n\t\tSET @msg = N'The database ' + @WriteBackupsToDatabaseName + N' doesn''t appear to exist on that server.'\n\t\tRAISERROR(@msg, 0, 1) WITH NOWAIT\n\t\tRETURN;\n\t\tEND\n\n\n\tSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\n\tSET @StringToExecute += N'SELECT TOP 1 1 FROM ' \n\t\t\t\t\t\t\t+ QUOTENAME(@WriteBackupsToListenerName) + '.' + QUOTENAME(@WriteBackupsToDatabaseName) + '.sys.tables WHERE name = ''backupset'' AND SCHEMA_NAME(schema_id) = ''dbo'';\n\t\t\t\t\t\t\t' + @crlf;\n\n\tIF @Debug = 1\n\t\tPRINT @StringToExecute;\n\n\tINSERT @RemoteCheck (c)\n\tEXEC sp_executesql @StringToExecute;\n\n\tIF @@ROWCOUNT = 0\n\t\tBEGIN\n\n\t\tSET @msg = N'The database ' + @WriteBackupsToDatabaseName + N' doesn''t appear to have a table called dbo.backupset in it.'\n\t\tRAISERROR(@msg, 0, 1) WITH NOWAIT\n\t\tRAISERROR('Don''t worry, we''ll create it for you!', 0, 1) WITH NOWAIT\n\t\t\n\t\tSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\n\t\tSET @StringToExecute += N'CREATE TABLE ' + QUOTENAME(@WriteBackupsToDatabaseName) + N'.dbo.backupset\n\t\t\t\t\t\t\t\t\t\t\t( backup_set_id INT IDENTITY(1, 1), backup_set_uuid UNIQUEIDENTIFIER, media_set_id INT, first_family_number TINYINT, first_media_number SMALLINT, \n\t\t\t\t\t\t\t\t\t\t\t  last_family_number TINYINT, last_media_number SMALLINT, catalog_family_number TINYINT, catalog_media_number SMALLINT, position INT, expiration_date DATETIME, \n\t\t\t\t\t\t\t\t\t\t\t  software_vendor_id INT, name NVARCHAR(128), description NVARCHAR(255), user_name NVARCHAR(128), software_major_version TINYINT, software_minor_version TINYINT, \n\t\t\t\t\t\t\t\t\t\t\t  software_build_version SMALLINT, time_zone SMALLINT, mtf_minor_version TINYINT, first_lsn NUMERIC(25, 0), last_lsn NUMERIC(25, 0), checkpoint_lsn NUMERIC(25, 0), \n\t\t\t\t\t\t\t\t\t\t\t  database_backup_lsn NUMERIC(25, 0), database_creation_date DATETIME, backup_start_date DATETIME, backup_finish_date DATETIME, type CHAR(1), sort_order SMALLINT, \n\t\t\t\t\t\t\t\t\t\t\t  code_page SMALLINT, compatibility_level TINYINT, database_version INT, backup_size NUMERIC(20, 0), database_name NVARCHAR(128), server_name NVARCHAR(128), \n\t\t\t\t\t\t\t\t\t\t\t  machine_name NVARCHAR(128), flags INT, unicode_locale INT, unicode_compare_style INT, collation_name NVARCHAR(128), is_password_protected BIT, recovery_model NVARCHAR(60), \n\t\t\t\t\t\t\t\t\t\t\t  has_bulk_logged_data BIT, is_snapshot BIT, is_readonly BIT, is_single_user BIT, has_backup_checksums BIT, is_damaged BIT, begins_log_chain BIT, has_incomplete_metadata BIT, \n\t\t\t\t\t\t\t\t\t\t\t  is_force_offline BIT, is_copy_only BIT, first_recovery_fork_guid UNIQUEIDENTIFIER, last_recovery_fork_guid UNIQUEIDENTIFIER, fork_point_lsn NUMERIC(25, 0), database_guid UNIQUEIDENTIFIER, \n\t\t\t\t\t\t\t\t\t\t\t  family_guid UNIQUEIDENTIFIER, differential_base_lsn NUMERIC(25, 0), differential_base_guid UNIQUEIDENTIFIER, compressed_backup_size NUMERIC(20, 0), key_algorithm NVARCHAR(32), \n\t\t\t\t\t\t\t\t\t\t\t  encryptor_thumbprint VARBINARY(20) , encryptor_type NVARCHAR(32) \n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t ' + @crlf;\n\t\t\n\t\tSET @InnerStringToExecute = N'EXEC( ''' + @StringToExecute +  ''' ) AT ' + QUOTENAME(@WriteBackupsToListenerName) + N';'\n\t\n\tIF @Debug = 1\n\t\tPRINT @InnerStringToExecute;\t\t\n\t\t\n\t\tEXEC sp_executesql @InnerStringToExecute\n\n\n\t\tRAISERROR('We''ll even make the indexes!', 0, 1) WITH NOWAIT\n\n\t\t/*Checking for and creating the PK/CX*/\n\n\t\tSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\t\t\n\t\tSET @StringToExecute += N'\n\t\t\n\t\tIF NOT EXISTS (\n\t\tSELECT t.name, i.name\n\t\tFROM ' + QUOTENAME(@WriteBackupsToDatabaseName) + N'.sys.tables AS t\n\t\tJOIN ' + QUOTENAME(@WriteBackupsToDatabaseName) + N'.sys.indexes AS i  \n\t\tON t.object_id = i.object_id\n\t\tWHERE t.name = ?\n\t\tAND i.name LIKE ?\n\t\t)\n\n\t\tBEGIN\n\t\tALTER TABLE ' + QUOTENAME(@WriteBackupsToDatabaseName) + N'.[dbo].[backupset] ADD PRIMARY KEY CLUSTERED ([backup_set_id] ASC)\n\t\tEND\n\t\t'\n\n\t\tSET @InnerStringToExecute = N'EXEC( ''' + @StringToExecute +  ''', ''backupset'', ''PK[_][_]%'' ) AT ' + QUOTENAME(@WriteBackupsToListenerName) + N';'\n\t\n\tIF @Debug = 1\n\t\tPRINT @InnerStringToExecute;\t\t\n\t\t\n\t\tEXEC sp_executesql @InnerStringToExecute\n\n\n\n\t\t/*Checking for and creating index on backup_set_uuid*/\n\n\t\tSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\t\t\n\t\tSET @StringToExecute += N'IF NOT EXISTS (\n\t\tSELECT t.name, i.name\n\t\tFROM ' + QUOTENAME(@WriteBackupsToDatabaseName) + N'.sys.tables AS t\n\t\tJOIN ' + QUOTENAME(@WriteBackupsToDatabaseName) + N'.sys.indexes AS i  \n\t\tON t.object_id = i.object_id\n\t\tWHERE t.name = ?\n\t\tAND i.name = ?\n\t\t)\n\n\t\tBEGIN\n\t\tCREATE NONCLUSTERED INDEX [backupsetuuid] ON ' + QUOTENAME(@WriteBackupsToDatabaseName) + N'.[dbo].[backupset] ([backup_set_uuid] ASC)\n\t\tEND\n\t\t'\n\n\t\tSET @InnerStringToExecute = N'EXEC( ''' + @StringToExecute +  ''', ''backupset'', ''backupsetuuid'' ) AT ' + QUOTENAME(@WriteBackupsToListenerName) + N';'\n\t\n\tIF @Debug = 1\n\t\tPRINT @InnerStringToExecute;\t\t\n\t\t\n\t\tEXEC sp_executesql @InnerStringToExecute\t\t\n\t\t\n\t\t\n\t\t\n\t\t/*Checking for and creating index on media_set_id*/\n\n\t\tSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\t\t\n\t\tSET @StringToExecute += 'IF NOT EXISTS (\n\t\tSELECT t.name, i.name\n\t\tFROM ' + QUOTENAME(@WriteBackupsToDatabaseName) + N'.sys.tables AS t\n\t\tJOIN ' + QUOTENAME(@WriteBackupsToDatabaseName) + N'.sys.indexes AS i  \n\t\tON t.object_id = i.object_id\n\t\tWHERE t.name = ?\n\t\tAND i.name = ?\n\t\t)\n\n\t\tBEGIN\n\t\tCREATE NONCLUSTERED INDEX [backupsetMediaSetId] ON ' + QUOTENAME(@WriteBackupsToDatabaseName) + N'.[dbo].[backupset] ([media_set_id] ASC)\n\t\tEND\n\t\t'\n\n\t\tSET @InnerStringToExecute = N'EXEC( ''' + @StringToExecute +  ''', ''backupset'', ''backupsetMediaSetId'' ) AT ' + QUOTENAME(@WriteBackupsToListenerName) + N';'\n\t\n\tIF @Debug = 1\n\t\tPRINT @InnerStringToExecute;\t\t\n\t\t\n\t\tEXEC sp_executesql @InnerStringToExecute\n\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t/*Checking for and creating index on backup_finish_date*/\n\n\t\tSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\t\t\n\t\tSET @StringToExecute += N'IF NOT EXISTS (\n\t\tSELECT t.name, i.name\n\t\tFROM ' + QUOTENAME(@WriteBackupsToDatabaseName) + N'.sys.tables AS t\n\t\tJOIN ' + QUOTENAME(@WriteBackupsToDatabaseName) + N'.sys.indexes AS i  \n\t\tON t.object_id = i.object_id\n\t\tWHERE t.name = ?\n\t\tAND i.name = ?\n\t\t)\n\n\t\tBEGIN\n\t\tCREATE NONCLUSTERED INDEX [backupsetDate] ON ' + QUOTENAME(@WriteBackupsToDatabaseName) + N'.[dbo].[backupset] ([backup_finish_date] ASC)\n\t\tEND\n\t\t'\n\n\t\tSET @InnerStringToExecute = N'EXEC( ''' + @StringToExecute +  ''', ''backupset'', ''backupsetDate'' ) AT ' + QUOTENAME(@WriteBackupsToListenerName) + N';'\n\t\n\tIF @Debug = 1\n\t\tPRINT @InnerStringToExecute;\t\t\n\t\t\n\t\tEXEC sp_executesql @InnerStringToExecute\n\n\n\t\t\t\n\t\t/*Checking for and creating index on database_name*/\n\n\t\tSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\t\t\n\t\tSET @StringToExecute += N'IF NOT EXISTS (\n\t\tSELECT t.name, i.name\n\t\tFROM ' + QUOTENAME(@WriteBackupsToDatabaseName) + N'.sys.tables AS t\n\t\tJOIN ' + QUOTENAME(@WriteBackupsToDatabaseName) + N'.sys.indexes AS i  \n\t\tON t.object_id = i.object_id\n\t\tWHERE t.name = ?\n\t\tAND i.name = ?\n\t\t)\n\n\t\tBEGIN\t\t\t\t\n\t\tCREATE NONCLUSTERED INDEX [backupsetDatabaseName] ON ' + QUOTENAME(@WriteBackupsToDatabaseName) + N'.[dbo].[backupset] ([database_name] ASC ) INCLUDE ([backup_set_id], [media_set_id]) \n\t\tEND\n\n\t\t'\n\n\t\tSET @InnerStringToExecute = N'EXEC( ''' + @StringToExecute +  ''', ''backupset'', ''backupsetDatabaseName'' ) AT ' + QUOTENAME(@WriteBackupsToListenerName) + N';'\n\t\n\tIF @Debug = 1\n\t\tPRINT @InnerStringToExecute;\t\t\n\t\t\n\t\tEXEC sp_executesql @InnerStringToExecute\n\n\t\tRAISERROR('Table and indexes created! You''re welcome!', 0, 1) WITH NOWAIT\n\t\tEND\n\n\n\t\tRAISERROR('Beginning inserts', 0, 1) WITH NOWAIT;\n\t\tRAISERROR(@crlf, 0, 1) WITH NOWAIT;\n\n\t\t/*\n\t\tBatching code comes from the lovely and talented Michael J. Swart\n\t\thttp://michaeljswart.com/2014/09/take-care-when-scripting-batches/\n\t\tIf you're ever in Canada, he says you can stay at his house, too.\n\t\t*/\n\n\n\t\tSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;' + @crlf;\n\n\t\tSET @StringToExecute += N'\t\n\t\t\t\t\t\t\t\t\tDECLARE\n\t\t\t\t\t\t\t\t\t\t@StartDate DATETIME = DATEADD(HOUR, @i_WriteBackupsLastHours, SYSDATETIME()),\n\t\t\t\t\t\t\t\t\t\t@StartDateNext DATETIME,\n\t\t\t\t\t\t\t\t\t\t@RC INT = 1,\n\t\t\t\t\t\t\t\t\t\t@msg NVARCHAR(4000) = N'''';\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tSELECT @StartDate = MIN(b.backup_start_date)\n\t\t\t\t\t\t\t\t\tFROM msdb.dbo.backupset b\n\t\t\t\t\t\t\t\t\tWHERE b.backup_start_date >= @StartDate\n\t\t\t\t\t\t\t\t\tAND  NOT EXISTS (\n\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT 1 \n\t\t\t\t\t\t\t\t\t\t\t\t\tFROM ' + QUOTENAME(@WriteBackupsToListenerName) + N'.' + QUOTENAME(@WriteBackupsToDatabaseName) + N'.dbo.backupset b2\n\t\t\t\t\t\t\t\t\t\t\t\t\tWHERE b.backup_set_uuid = b2.backup_set_uuid\n\t\t\t\t\t\t\t\t\t\t\t\t\tAND b2.backup_start_date >= @StartDate\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\t\t\t\tSET @StartDateNext = DATEADD(MINUTE, 10, @StartDate);\n\n\t\t\t\t\t\t\t\t IF\n\t\t\t\t\t\t\t\t\t( @StartDate IS NULL )\n\t\t\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\t\t\tSET @msg = N''No data to move, exiting.''\n\t\t\t\t\t\t\t\t\t\t\tRAISERROR(@msg, 0, 1) WITH NOWAIT\t\n\n\t\t\t\t\t\t\t\t\t\t\tRETURN;\n\t\t\t\t\t\t\t\t\t\tEND\n\n\t\t\t\t\t\t\t\t\tRAISERROR(''Starting insert loop'', 0, 1) WITH NOWAIT;\n\n\t\t\t\t\t\t\t\t\tWHILE EXISTS (\n\t\t\t\t\t\t\t\t\t\t\t\tSELECT 1\n\t\t\t\t\t\t\t\t\t\t\t\tFROM msdb.dbo.backupset b\n\t\t\t\t\t\t\t\t\t\t\t\tWHERE NOT EXISTS (\n\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT 1 \n\t\t\t\t\t\t\t\t\t\t\t\t\tFROM ' + QUOTENAME(@WriteBackupsToListenerName) + N'.' + QUOTENAME(@WriteBackupsToDatabaseName) + N'.dbo.backupset b2\n\t\t\t\t\t\t\t\t\t\t\t\t\tWHERE b.backup_set_uuid = b2.backup_set_uuid\n\t\t\t\t\t\t\t\t\t\t\t\t\tAND b2.backup_start_date >= @StartDate\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tSET @msg = N''Inserting data for '' + CONVERT(NVARCHAR(30), @StartDate) + '' through '' +  + CONVERT(NVARCHAR(30), @StartDateNext) + ''.''\n\t\t\t\t\t\t\t\t\tRAISERROR(@msg, 0, 1) WITH NOWAIT\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t'\n\n\t\tSET @StringToExecute += N'INSERT ' + QUOTENAME(@WriteBackupsToListenerName) + N'.' + QUOTENAME(@WriteBackupsToDatabaseName) + N'.dbo.backupset\n\t\t\t\t\t\t\t\t\t' \n\t\tSET @StringToExecute += N' (database_name, database_guid, backup_set_uuid, type, backup_size, backup_start_date, backup_finish_date, media_set_id,\n\t\t\t\t\t\t\t\t\tcompressed_backup_size, recovery_model, server_name, machine_name, first_lsn, last_lsn, user_name, compatibility_level, \n\t\t\t\t\t\t\t\t\tis_password_protected, is_snapshot, is_readonly, is_single_user, has_backup_checksums, is_damaged, ' + CASE WHEN @ProductVersionMajor >= 12 \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN + N'encryptor_type, has_bulk_logged_data)' + @crlf\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE + N'has_bulk_logged_data)' + @crlf\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND\n\t\t\n\t\tSET @StringToExecute +=N'\n\t\t\t\t\t\t\t\t\tSELECT database_name, database_guid, backup_set_uuid, type, backup_size, backup_start_date, backup_finish_date, media_set_id,\n\t\t\t\t\t\t\t\t\tcompressed_backup_size, recovery_model, server_name, machine_name, first_lsn, last_lsn, user_name, compatibility_level, \n\t\t\t\t\t\t\t\t\tis_password_protected, is_snapshot, is_readonly, is_single_user, has_backup_checksums, is_damaged, ' + CASE WHEN @ProductVersionMajor >= 12 \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN + N'encryptor_type, has_bulk_logged_data' + @crlf\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE + N'has_bulk_logged_data' + @crlf\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND\n\t\tSET @StringToExecute +=N'\n\t\t\t\t\t\t\t\t FROM msdb.dbo.backupset b\n\t\t\t\t\t\t\t\t WHERE 1=1\n\t\t\t\t\t\t\t\t AND b.backup_start_date >= @StartDate\n\t\t\t\t\t\t\t\t AND b.backup_start_date < @StartDateNext\n\t\t\t\t\t\t\t\t AND NOT EXISTS (\n\t\t\t\t\t\t\t\t\t\tSELECT 1 \n\t\t\t\t\t\t\t\t\t\tFROM ' + QUOTENAME(@WriteBackupsToListenerName) + N'.' + QUOTENAME(@WriteBackupsToDatabaseName) + N'.dbo.backupset b2\n\t\t\t\t\t\t\t\t\t\tWHERE b.backup_set_uuid = b2.backup_set_uuid\n\t\t\t\t\t\t\t\t\t\tAND b2.backup_start_date >= @StartDate\n\t\t\t\t\t\t\t\t\t\t\t\t\t)'  + @crlf;\n\n\n\t\tSET @StringToExecute +=N'\n\t\t\t\t\t\t\t\t SET @RC = @@ROWCOUNT;\n\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tSET @msg = N''Inserted '' + CONVERT(NVARCHAR(30), @RC) + '' rows for ''+ CONVERT(NVARCHAR(30), @StartDate) + '' through '' + CONVERT(NVARCHAR(30), @StartDateNext) + ''.''\n\t\t\t\t\t\t\t\tRAISERROR(@msg, 0, 1) WITH NOWAIT\n\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t SET @StartDate = @StartDateNext;\n\t\t\t\t\t\t\t\t SET @StartDateNext = DATEADD(MINUTE, 10, @StartDate);\n\n\t\t\t\t\t\t\t\t IF\n\t\t\t\t\t\t\t\t\t( @StartDate > SYSDATETIME() )\n\t\t\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tSET @msg = N''No more data to move, exiting.''\n\t\t\t\t\t\t\t\t\t\t\tRAISERROR(@msg, 0, 1) WITH NOWAIT\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tBREAK;\n\n\t\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t END'  + @crlf;\n\n\tIF @Debug = 1\n\t\tPRINT @StringToExecute;\n\n\tEXEC sp_executesql @StringToExecute, N'@i_WriteBackupsLastHours INT', @i_WriteBackupsLastHours = @WriteBackupsLastHours;\n\nEND;\n\nEND;\n\nGO\nSET ANSI_NULLS ON;\nSET ANSI_PADDING ON;\nSET ANSI_WARNINGS ON;\nSET ARITHABORT ON;\nSET CONCAT_NULL_YIELDS_NULL ON;\nSET QUOTED_IDENTIFIER ON;\nSET STATISTICS IO OFF;\nSET STATISTICS TIME OFF;\nGO\n\nIF (\nSELECT\n  CASE \n     WHEN CONVERT(NVARCHAR(128), SERVERPROPERTY ('PRODUCTVERSION')) LIKE '8%' THEN 0\n     WHEN CONVERT(NVARCHAR(128), SERVERPROPERTY ('PRODUCTVERSION')) LIKE '9%' THEN 0\n\t ELSE 1\n  END \n) = 0\nBEGIN\n\tDECLARE @msg VARCHAR(8000); \n\tSELECT @msg = 'Sorry, sp_BlitzCache doesn''t work on versions of SQL prior to 2008.' + REPLICATE(CHAR(13), 7933);\n\tPRINT @msg;\n\tRETURN;\nEND;\n\nIF OBJECT_ID('dbo.sp_BlitzCache') IS NULL\n  EXEC ('CREATE PROCEDURE dbo.sp_BlitzCache AS RETURN 0;');\nGO\n\nIF OBJECT_ID('dbo.sp_BlitzCache') IS NOT NULL AND OBJECT_ID('tempdb.dbo.##bou_BlitzCacheProcs', 'U') IS NOT NULL\n    EXEC ('DROP TABLE ##bou_BlitzCacheProcs;');\nGO\n\nIF OBJECT_ID('dbo.sp_BlitzCache') IS NOT NULL AND OBJECT_ID('tempdb.dbo.##bou_BlitzCacheResults', 'U') IS NOT NULL\n    EXEC ('DROP TABLE ##bou_BlitzCacheResults;');\nGO\n\nCREATE TABLE ##bou_BlitzCacheResults (\n    SPID INT,\n    ID INT IDENTITY(1,1),\n    CheckID INT,\n    Priority TINYINT,\n    FindingsGroup VARCHAR(50),\n    Finding VARCHAR(200),\n    URL VARCHAR(200),\n    Details VARCHAR(4000) \n);\n\nCREATE TABLE ##bou_BlitzCacheProcs (\n        SPID INT ,\n        QueryType NVARCHAR(258),\n        DatabaseName sysname,\n        AverageCPU DECIMAL(38,4),\n        AverageCPUPerMinute DECIMAL(38,4),\n        TotalCPU DECIMAL(38,4),\n        PercentCPUByType MONEY,\n        PercentCPU MONEY,\n        AverageDuration DECIMAL(38,4),\n        TotalDuration DECIMAL(38,4),\n        PercentDuration MONEY,\n        PercentDurationByType MONEY,\n        AverageReads BIGINT,\n        TotalReads BIGINT,\n        PercentReads MONEY,\n        PercentReadsByType MONEY,\n        ExecutionCount BIGINT,\n        PercentExecutions MONEY,\n        PercentExecutionsByType MONEY,\n        ExecutionsPerMinute MONEY,\n        TotalWrites BIGINT,\n        AverageWrites MONEY,\n        PercentWrites MONEY,\n        PercentWritesByType MONEY,\n        WritesPerMinute MONEY,\n        PlanCreationTime DATETIME,\n\t\tPlanCreationTimeHours AS DATEDIFF(HOUR, PlanCreationTime, SYSDATETIME()),\n        LastExecutionTime DATETIME,\n        PlanHandle VARBINARY(64),\n\t\t[Remove Plan Handle From Cache] AS \n\t\t\tCASE WHEN [PlanHandle] IS NOT NULL \n\t\t\tTHEN 'DBCC FREEPROCCACHE (' + CONVERT(VARCHAR(128), [PlanHandle], 1) + ');'\n\t\t\tELSE 'N/A' END,\n\t\tSqlHandle VARBINARY(64),\n\t\t\t[Remove SQL Handle From Cache] AS \n\t\t\tCASE WHEN [SqlHandle] IS NOT NULL \n\t\t\tTHEN 'DBCC FREEPROCCACHE (' + CONVERT(VARCHAR(128), [SqlHandle], 1) + ');'\n\t\t\tELSE 'N/A' END,\n\t\t[SQL Handle More Info] AS \n\t\t\tCASE WHEN [SqlHandle] IS NOT NULL \n\t\t\tTHEN 'EXEC sp_BlitzCache @OnlySqlHandles = ''' + CONVERT(VARCHAR(128), [SqlHandle], 1) + '''; '\n\t\t\tELSE 'N/A' END,\n\t\tQueryHash BINARY(8),\n\t\t[Query Hash More Info] AS \n\t\t\tCASE WHEN [QueryHash] IS NOT NULL \n\t\t\tTHEN 'EXEC sp_BlitzCache @OnlyQueryHashes = ''' + CONVERT(VARCHAR(32), [QueryHash], 1) + '''; '\n\t\t\tELSE 'N/A' END,\n        QueryPlanHash BINARY(8),\n        StatementStartOffset INT,\n        StatementEndOffset INT,\n        MinReturnedRows BIGINT,\n        MaxReturnedRows BIGINT,\n        AverageReturnedRows MONEY,\n        TotalReturnedRows BIGINT,\n        LastReturnedRows BIGINT,\n\t\t/*The Memory Grant columns are only supported \n\t\t  in certain versions, giggle giggle.\n\t\t*/\n\t\tMinGrantKB BIGINT,\n\t\tMaxGrantKB BIGINT,\n\t\tMinUsedGrantKB BIGINT, \n\t\tMaxUsedGrantKB BIGINT,\n\t\tPercentMemoryGrantUsed MONEY,\n\t\tAvgMaxMemoryGrant MONEY,\n\t\tMinSpills BIGINT,\n\t\tMaxSpills BIGINT,\n\t\tTotalSpills BIGINT,\n\t\tAvgSpills MONEY,\n        QueryText NVARCHAR(MAX),\n        QueryPlan XML,\n        /* these next four columns are the total for the type of query.\n            don't actually use them for anything apart from math by type.\n            */\n        TotalWorkerTimeForType BIGINT,\n        TotalElapsedTimeForType BIGINT,\n        TotalReadsForType BIGINT,\n        TotalExecutionCountForType BIGINT,\n        TotalWritesForType BIGINT,\n        NumberOfPlans INT,\n        NumberOfDistinctPlans INT,\n        SerialDesiredMemory FLOAT,\n        SerialRequiredMemory FLOAT,\n        CachedPlanSize FLOAT,\n        CompileTime FLOAT,\n        CompileCPU FLOAT ,\n        CompileMemory FLOAT ,\n        min_worker_time BIGINT,\n        max_worker_time BIGINT,\n        is_forced_plan BIT,\n        is_forced_parameterized BIT,\n        is_cursor BIT,\n\t\tis_optimistic_cursor BIT,\n\t\tis_forward_only_cursor BIT,\n\t\tis_cursor_dynamic BIT,\n        is_parallel BIT,\n\t\tis_forced_serial BIT,\n\t\tis_key_lookup_expensive BIT,\n\t\tkey_lookup_cost FLOAT,\n\t\tis_remote_query_expensive BIT,\n\t\tremote_query_cost FLOAT,\n        frequent_execution BIT,\n        parameter_sniffing BIT,\n        unparameterized_query BIT,\n        near_parallel BIT,\n        plan_warnings BIT,\n        plan_multiple_plans BIT,\n        long_running BIT,\n        downlevel_estimator BIT,\n        implicit_conversions BIT,\n        busy_loops BIT,\n        tvf_join BIT,\n        tvf_estimate BIT,\n        compile_timeout BIT,\n        compile_memory_limit_exceeded BIT,\n        warning_no_join_predicate BIT,\n        QueryPlanCost FLOAT,\n        missing_index_count INT,\n        unmatched_index_count INT,\n        min_elapsed_time BIGINT,\n        max_elapsed_time BIGINT,\n        age_minutes MONEY,\n        age_minutes_lifetime MONEY,\n        is_trivial BIT,\n\t\ttrace_flags_session VARCHAR(1000),\n\t\tis_unused_grant BIT,\n\t\tfunction_count INT,\n\t\tclr_function_count INT,\n\t\tis_table_variable BIT,\n\t\tno_stats_warning BIT,\n\t\trelop_warnings BIT,\n\t\tis_table_scan BIT,\n\t    backwards_scan BIT,\n\t    forced_index BIT,\n\t    forced_seek BIT,\n\t    forced_scan BIT,\n\t\tcolumnstore_row_mode BIT,\n\t\tis_computed_scalar BIT ,\n\t\tis_sort_expensive BIT,\n\t\tsort_cost FLOAT,\n\t\tis_computed_filter BIT,\n\t\top_name VARCHAR(100) NULL,\n\t\tindex_insert_count INT NULL,\n\t\tindex_update_count INT NULL,\n\t\tindex_delete_count INT NULL,\n\t\tcx_insert_count INT NULL,\n\t\tcx_update_count INT NULL,\n\t\tcx_delete_count INT NULL,\n\t\ttable_insert_count INT NULL,\n\t\ttable_update_count INT NULL,\n\t\ttable_delete_count INT NULL,\n\t\tindex_ops AS (index_insert_count + index_update_count + index_delete_count + \n\t\t\t\t\t  cx_insert_count + cx_update_count + cx_delete_count +\n\t\t\t\t\t  table_insert_count + table_update_count + table_delete_count),\n\t\tis_row_level BIT,\n\t\tis_spatial BIT,\n\t\tindex_dml BIT,\n\t\ttable_dml BIT,\n\t\tlong_running_low_cpu BIT,\n\t\tlow_cost_high_cpu BIT,\n\t\tstale_stats BIT, \n\t\tis_adaptive BIT,\n\t\tindex_spool_cost FLOAT,\n\t\tindex_spool_rows FLOAT,\n\t\tis_spool_expensive BIT,\n\t\tis_spool_more_rows BIT,\n\t\testimated_rows FLOAT,\n\t\tis_bad_estimate BIT, \n\t\tis_paul_white_electric BIT,\n\t\tis_row_goal BIT,\n\t\tis_big_spills BIT,\n\t\timplicit_conversion_info XML,\n\t\tcached_execution_parameters XML,\n\t\tmissing_indexes XML,\n        SetOptions VARCHAR(MAX),\n        Warnings VARCHAR(MAX)\n    );\nGO \n\nALTER PROCEDURE dbo.sp_BlitzCache\n    @Help BIT = 0,\n    @Top INT = NULL,\n    @SortOrder VARCHAR(50) = 'CPU',\n    @UseTriggersAnyway BIT = NULL,\n    @ExportToExcel BIT = 0,\n    @ExpertMode TINYINT = 0,\n    @OutputServerName NVARCHAR(258) = NULL ,\n    @OutputDatabaseName NVARCHAR(258) = NULL ,\n    @OutputSchemaName NVARCHAR(258) = NULL ,\n    @OutputTableName NVARCHAR(258) = NULL ,\n    @ConfigurationDatabaseName NVARCHAR(128) = NULL ,\n    @ConfigurationSchemaName NVARCHAR(258) = NULL ,\n    @ConfigurationTableName NVARCHAR(258) = NULL ,\n    @DurationFilter DECIMAL(38,4) = NULL ,\n    @HideSummary BIT = 0 ,\n    @IgnoreSystemDBs BIT = 1 ,\n    @OnlyQueryHashes VARCHAR(MAX) = NULL ,\n    @IgnoreQueryHashes VARCHAR(MAX) = NULL ,\n    @OnlySqlHandles VARCHAR(MAX) = NULL ,\n\t@IgnoreSqlHandles VARCHAR(MAX) = NULL ,\n    @QueryFilter VARCHAR(10) = 'ALL' ,\n    @DatabaseName NVARCHAR(128) = NULL ,\n    @StoredProcName NVARCHAR(128) = NULL,\n    @Reanalyze BIT = 0 ,\n    @SkipAnalysis BIT = 0 ,\n    @BringThePain BIT = 0, /* This will forcibly set @Top to 2,147,483,647 */\n    @MinimumExecutionCount INT = 0,\n\t@Debug BIT = 0,\n\t@CheckDateOverride DATETIMEOFFSET = NULL,\n\t@MinutesBack INT = NULL,\n\t@VersionDate DATETIME = NULL OUTPUT\nWITH RECOMPILE\nAS\nBEGIN\nSET NOCOUNT ON;\nSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\n\nDECLARE @Version VARCHAR(30);\nSET @Version = '6.2';\nSET @VersionDate = '20180201';\n\nIF @Help = 1 PRINT '\nsp_BlitzCache from http://FirstResponderKit.org\n\t\nThis script displays your most resource-intensive queries from the plan cache,\nand points to ways you can tune these queries to make them faster.\n\n\nTo learn more, visit http://FirstResponderKit.org where you can download new\nversions for free, watch training videos on how it works, get more info on\nthe findings, contribute your own code, and more.\n\nKnown limitations of this version:\n - This query will not run on SQL Server 2005.\n - SQL Server 2008 and 2008R2 have a bug in trigger stats, so that output is\n   excluded by default.\n - @IgnoreQueryHashes and @OnlyQueryHashes require a CSV list of hashes\n   with no spaces between the hash values.\n - @OutputServerName is not functional yet.\n\nUnknown limitations of this version:\n - May or may not be vulnerable to the wick effect.\n\nChanges - for the full list of improvements and fixes in this version, see:\nhttps://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/\n\n\n\nMIT License\n\nCopyright (c) 2016 Brent Ozar Unlimited\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n';\n\nDECLARE @nl NVARCHAR(2) = NCHAR(13) + NCHAR(10) ;\n\nIF @Help = 1\nBEGIN\n    SELECT N'@Help' AS [Parameter Name] ,\n           N'BIT' AS [Data Type] ,\n           N'Displays this help message.' AS [Parameter Description]\n\n    UNION ALL\n    SELECT N'@Top',\n           N'INT',\n           N'The number of records to retrieve and analyze from the plan cache. The following DMVs are used as the plan cache: dm_exec_query_stats, dm_exec_procedure_stats, dm_exec_trigger_stats.'\n\n    UNION ALL\n    SELECT N'@SortOrder',\n           N'VARCHAR(10)',\n           N'Data processing and display order. @SortOrder will still be used, even when preparing output for a table or for excel. Possible values are: \"CPU\", \"Reads\", \"Writes\", \"Duration\", \"Executions\", \"Recent Compilations\", \"Memory Grant\", \"Spills\". Additionally, the word \"Average\" or \"Avg\" can be used to sort on averages rather than total. \"Executions per minute\" and \"Executions / minute\" can be used to sort by execution per minute. For the truly lazy, \"xpm\" can also be used. Note that when you use all or all avg, the only parameters you can use are @Top and @DatabaseName. All others will be ignored.'\n\n    UNION ALL\n    SELECT N'@UseTriggersAnyway',\n           N'BIT',\n           N'On SQL Server 2008R2 and earlier, trigger execution count is incorrect - trigger execution count is incremented once per execution of a SQL agent job. If you still want to see relative execution count of triggers, then you can force sp_BlitzCache to include this information.'\n\n    UNION ALL\n    SELECT N'@ExportToExcel',\n           N'BIT',\n           N'Prepare output for exporting to Excel. Newlines and additional whitespace are removed from query text and the execution plan is not displayed.'\n\n    UNION ALL\n    SELECT N'@ExpertMode',\n           N'TINYINT',\n           N'Default 0. When set to 1, results include more columns. When 2, mode is optimized for Opserver, the open source dashboard.'\n\n    UNION ALL\n    SELECT N'@OutputDatabaseName',\n           N'NVARCHAR(128)',\n           N'The output database. If this does not exist SQL Server will divide by zero and everything will fall apart.'\n\n    UNION ALL\n    SELECT N'@OutputSchemaName',\n           N'NVARCHAR(258)',\n           N'The output schema. If this does not exist SQL Server will divide by zero and everything will fall apart.'\n\n    UNION ALL\n    SELECT N'@OutputTableName',\n           N'NVARCHAR(258)',\n           N'The output table. If this does not exist, it will be created for you.'\n\n    UNION ALL\n    SELECT N'@DurationFilter',\n           N'DECIMAL(38,4)',\n           N'Excludes queries with an average duration (in seconds) less than @DurationFilter.'\n\n    UNION ALL\n    SELECT N'@HideSummary',\n           N'BIT',\n           N'Hides the findings summary result set.'\n\n    UNION ALL\n    SELECT N'@IgnoreSystemDBs',\n           N'BIT',\n           N'Ignores plans found in the system databases (master, model, msdb, tempdb, and resourcedb)'\n\n    UNION ALL\n    SELECT N'@OnlyQueryHashes',\n           N'VARCHAR(MAX)',\n           N'A list of query hashes to query. All other query hashes will be ignored. Stored procedures and triggers will be ignored.'\n\n    UNION ALL\n    SELECT N'@IgnoreQueryHashes',\n           N'VARCHAR(MAX)',\n           N'A list of query hashes to ignore.'\n    \n    UNION ALL\n    SELECT N'@OnlySqlHandles',\n           N'VARCHAR(MAX)',\n           N'One or more sql_handles to use for filtering results.'\n    \n\tUNION ALL\n    SELECT N'@IgnoreSqlHandles',\n           N'VARCHAR(MAX)',\n           N'One or more sql_handles to ignore.'\n\n    UNION ALL\n    SELECT N'@DatabaseName',\n           N'NVARCHAR(128)',\n           N'A database name which is used for filtering results.'\n\n    UNION ALL\n    SELECT N'@StoredProcName',\n           N'NVARCHAR(128)',\n           N'Name of stored procedure you want to find plans for.'\n\n    UNION ALL\n    SELECT N'@BringThePain',\n           N'BIT',\n           N'This forces sp_BlitzCache to examine the entire plan cache. Be careful running this on servers with a lot of memory or a large execution plan cache.'\n\n    UNION ALL\n    SELECT N'@QueryFilter',\n           N'VARCHAR(10)',\n           N'Filter out stored procedures or statements. The default value is ''ALL''. Allowed values are ''procedures'', ''statements'', ''functions'', or ''all'' (any variation in capitalization is acceptable).'\n\n    UNION ALL\n    SELECT N'@Reanalyze',\n           N'BIT',\n           N'The default is 0. When set to 0, sp_BlitzCache will re-evalute the plan cache. Set this to 1 to reanalyze existing results'\n           \n    UNION ALL\n    SELECT N'@MinimumExecutionCount',\n           N'INT',\n           N'Queries with fewer than this number of executions will be omitted from results.'\n    \n\tUNION ALL\n    SELECT N'@Debug',\n           N'BIT',\n           N'Setting this to 1 will print dynamic SQL and select data from all tables used.'\n\n    UNION ALL\n    SELECT N'@MinutesBack',\n           N'INT',\n           N'How many minutes back to begin plan cache analysis. If you put in a positive number, we''ll flip it to negtive.';\n\n\n    /* Column definitions */\n    SELECT N'# Executions' AS [Column Name],\n           N'BIGINT' AS [Data Type],\n           N'The number of executions of this particular query. This is computed across statements, procedures, and triggers and aggregated by the SQL handle.' AS [Column Description]\n\n    UNION ALL\n    SELECT N'Executions / Minute',\n           N'MONEY',\n           N'Number of executions per minute - calculated for the life of the current plan. Plan life is the last execution time minus the plan creation time.'\n\n    UNION ALL\n    SELECT N'Execution Weight',\n           N'MONEY',\n           N'An arbitrary metric of total \"execution-ness\". A weight of 2 is \"one more\" than a weight of 1.'\n\n    UNION ALL\n    SELECT N'Database',\n           N'sysname',\n           N'The name of the database where the plan was encountered. If the database name cannot be determined for some reason, a value of NA will be substituted. A value of 32767 indicates the plan comes from ResourceDB.'\n\n    UNION ALL\n    SELECT N'Total CPU',\n           N'BIGINT',\n           N'Total CPU time, reported in milliseconds, that was consumed by all executions of this query since the last compilation.'\n\n    UNION ALL\n    SELECT N'Avg CPU',\n           N'BIGINT',\n           N'Average CPU time, reported in milliseconds, consumed by each execution of this query since the last compilation.'\n\n    UNION ALL\n    SELECT N'CPU Weight',\n           N'MONEY',\n           N'An arbitrary metric of total \"CPU-ness\". A weight of 2 is \"one more\" than a weight of 1.'\n\n    UNION ALL\n    SELECT N'Total Duration',\n           N'BIGINT',\n           N'Total elapsed time, reported in milliseconds, consumed by all executions of this query since last compilation.'\n\n    UNION ALL\n    SELECT N'Avg Duration',\n           N'BIGINT',\n           N'Average elapsed time, reported in milliseconds, consumed by each execution of this query since the last compilation.'\n\n    UNION ALL\n    SELECT N'Duration Weight',\n           N'MONEY',\n           N'An arbitrary metric of total \"Duration-ness\". A weight of 2 is \"one more\" than a weight of 1.'\n\n    UNION ALL\n    SELECT N'Total Reads',\n           N'BIGINT',\n           N'Total logical reads performed by this query since last compilation.'\n\n    UNION ALL\n    SELECT N'Average Reads',\n           N'BIGINT',\n           N'Average logical reads performed by each execution of this query since the last compilation.'\n\n    UNION ALL\n    SELECT N'Read Weight',\n           N'MONEY',\n           N'An arbitrary metric of \"Read-ness\". A weight of 2 is \"one more\" than a weight of 1.'\n\n    UNION ALL\n    SELECT N'Total Writes',\n           N'BIGINT',\n           N'Total logical writes performed by this query since last compilation.'\n\n    UNION ALL\n    SELECT N'Average Writes',\n           N'BIGINT',\n           N'Average logical writes performed by each execution this query since last compilation.'\n\n    UNION ALL\n    SELECT N'Write Weight',\n           N'MONEY',\n           N'An arbitrary metric of \"Write-ness\". A weight of 2 is \"one more\" than a weight of 1.'\n\n    UNION ALL\n    SELECT N'Query Type',\n           N'NVARCHAR(258)',\n           N'The type of query being examined. This can be \"Procedure\", \"Statement\", or \"Trigger\".'\n\n    UNION ALL\n    SELECT N'Query Text',\n           N'NVARCHAR(4000)',\n           N'The text of the query. This may be truncated by either SQL Server or by sp_BlitzCache(tm) for display purposes.'\n\n    UNION ALL\n    SELECT N'% Executions (Type)',\n           N'MONEY',\n           N'Percent of executions relative to the type of query - e.g. 17.2% of all stored procedure executions.'\n\n    UNION ALL\n    SELECT N'% CPU (Type)',\n           N'MONEY',\n           N'Percent of CPU time consumed by this query for a given type of query - e.g. 22% of CPU of all stored procedures executed.'\n\n    UNION ALL\n    SELECT N'% Duration (Type)',\n           N'MONEY',\n           N'Percent of elapsed time consumed by this query for a given type of query - e.g. 12% of all statements executed.'\n\n    UNION ALL\n    SELECT N'% Reads (Type)',\n           N'MONEY',\n           N'Percent of reads consumed by this query for a given type of query - e.g. 34.2% of all stored procedures executed.'\n\n    UNION ALL\n    SELECT N'% Writes (Type)',\n           N'MONEY',\n           N'Percent of writes performed by this query for a given type of query - e.g. 43.2% of all statements executed.'\n\n    UNION ALL\n    SELECT N'Total Rows',\n           N'BIGINT',\n           N'Total number of rows returned for all executions of this query. This only applies to query level stats, not stored procedures or triggers.'\n\n    UNION ALL\n    SELECT N'Average Rows',\n           N'MONEY',\n           N'Average number of rows returned by each execution of the query.'\n\n    UNION ALL\n    SELECT N'Min Rows',\n           N'BIGINT',\n           N'The minimum number of rows returned by any execution of this query.'\n\n    UNION ALL\n    SELECT N'Max Rows',\n           N'BIGINT',\n           N'The maximum number of rows returned by any execution of this query.'\n\n    UNION ALL\n    SELECT N'MinGrantKB',\n           N'BIGINT',\n           N'The minimum memory grant the query received in kb.'\n\n    UNION ALL\n    SELECT N'MaxGrantKB',\n           N'BIGINT',\n           N'The maximum memory grant the query received in kb.'\n\n    UNION ALL\n    SELECT N'MinUsedGrantKB',\n           N'BIGINT',\n           N'The minimum used memory grant the query received in kb.'\n\n    UNION ALL\n    SELECT N'MaxUsedGrantKB',\n           N'BIGINT',\n           N'The maximum used memory grant the query received in kb.'\n\n    SELECT N'MinSpills',\n           N'BIGINT',\n           N'The minimum amount this query has spilled to tempdb in 8k pages.'\n\n    UNION ALL\n    SELECT N'MaxSpills',\n           N'BIGINT',\n           N'The maximum amount this query has spilled to tempdb in 8k pages.'\n\n    UNION ALL\n    SELECT N'TotalSpills',\n           N'BIGINT',\n           N'The total amount this query has spilled to tempdb in 8k pages.'\n\n    UNION ALL\n    SELECT N'AvgSpills',\n           N'BIGINT',\n           N'The average amount this query has spilled to tempdb in 8k pages.'\n\n    UNION ALL\n    SELECT N'PercentMemoryGrantUsed',\n           N'MONEY',\n           N'Result of dividing the maximum grant used by the minimum granted.'\n\n    UNION ALL\n    SELECT N'AvgMaxMemoryGrant',\n           N'MONEY',\n           N'The average maximum memory grant for a query.'\n\n    UNION ALL\n    SELECT N'# Plans',\n           N'INT',\n           N'The total number of execution plans found that match a given query.'\n\n    UNION ALL\n    SELECT N'# Distinct Plans',\n           N'INT',\n           N'The number of distinct execution plans that match a given query. '\n            + NCHAR(13) + NCHAR(10)\n            + N'This may be caused by running the same query across multiple databases or because of a lack of proper parameterization in the database.'\n\n    UNION ALL\n    SELECT N'Created At',\n           N'DATETIME',\n           N'Time that the execution plan was last compiled.'\n\n    UNION ALL\n    SELECT N'Last Execution',\n           N'DATETIME',\n           N'The last time that this query was executed.'\n\n    UNION ALL\n    SELECT N'Query Plan',\n           N'XML',\n           N'The query plan. Click to display a graphical plan or, if you need to patch SSMS, a pile of XML.'\n\n    UNION ALL\n    SELECT N'Plan Handle',\n           N'VARBINARY(64)',\n           N'An arbitrary identifier referring to the compiled plan this query is a part of.'\n\n    UNION ALL\n    SELECT N'SQL Handle',\n           N'VARBINARY(64)',\n           N'An arbitrary identifier referring to a batch or stored procedure that this query is a part of.'\n\n    UNION ALL\n    SELECT N'Query Hash',\n           N'BINARY(8)',\n           N'A hash of the query. Queries with the same query hash have similar logic but only differ by literal values or database.'\n\n    UNION ALL\n    SELECT N'Warnings',\n           N'VARCHAR(MAX)',\n           N'A list of individual warnings generated by this query.' ;\n\n\n           \n    /* Configuration table description */\n    SELECT N'Frequent Execution Threshold' AS [Configuration Parameter] ,\n           N'100' AS [Default Value] ,\n           N'Executions / Minute' AS [Unit of Measure] ,\n           N'Executions / Minute before a \"Frequent Execution Threshold\" warning is triggered.' AS [Description]\n\n    UNION ALL\n    SELECT N'Parameter Sniffing Variance Percent' ,\n           N'30' ,\n           N'Percent' ,\n           N'Variance required between min/max values and average values before a \"Parameter Sniffing\" warning is triggered. Applies to worker time and returned rows.'\n\n    UNION ALL\n    SELECT N'Parameter Sniffing IO Threshold' ,\n           N'100,000' ,\n           N'Logical reads' ,\n           N'Minimum number of average logical reads before parameter sniffing checks are evaluated.'\n\n    UNION ALL\n    SELECT N'Cost Threshold for Parallelism Warning' AS [Configuration Parameter] ,\n           N'10' ,\n           N'Percent' ,\n           N'Trigger a \"Nearly Parallel\" warning when a query''s cost is within X percent of the cost threshold for parallelism.'\n\n    UNION ALL\n    SELECT N'Long Running Query Warning' AS [Configuration Parameter] ,\n           N'300' ,\n           N'Seconds' ,\n           N'Triggers a \"Long Running Query Warning\" when average duration, max CPU time, or max clock time is higher than this number.'\n\n    UNION ALL\n    SELECT N'Unused Memory Grant Warning' AS [Configuration Parameter] ,\n           N'10' ,\n           N'Percent' ,\n           N'Triggers an \"Unused Memory Grant Warning\" when a query uses >= X percent of its memory grant.';\n    RETURN;\nEND;\n\n/*Validate version*/\nIF (\nSELECT\n  CASE \n     WHEN CONVERT(NVARCHAR(128), SERVERPROPERTY ('PRODUCTVERSION')) LIKE '8%' THEN 0\n     WHEN CONVERT(NVARCHAR(128), SERVERPROPERTY ('PRODUCTVERSION')) LIKE '9%' THEN 0\n\t ELSE 1\n  END \n) = 0\nBEGIN\n\tDECLARE @version_msg VARCHAR(8000); \n\tSELECT @version_msg = 'Sorry, sp_BlitzCache doesn''t work on versions of SQL prior to 2008.' + REPLICATE(CHAR(13), 7933);\n\tPRINT @version_msg;\n\tRETURN;\nEND;\n\n/* Set @Top based on sort */\nIF (\n     @Top IS NULL\n     AND LOWER(@SortOrder) IN ( 'all', 'all sort' )\n   )\n   BEGIN\n         SET @Top = 5;\n   END;\n\nIF (\n     @Top IS NULL\n     AND LOWER(@SortOrder) NOT IN ( 'all', 'all sort' )\n   )\n   BEGIN\n         SET @Top = 10;\n   END;\n\n/* validate user inputs */\nIF @Top IS NULL \n    OR @SortOrder IS NULL \n    OR @QueryFilter IS NULL \n    OR @Reanalyze IS NULL\nBEGIN\n    RAISERROR(N'Several parameters (@Top, @SortOrder, @QueryFilter, @renalyze) are required. Do not set them to NULL. Please try again.', 16, 1) WITH NOWAIT;\n    RETURN;\nEND;\n\nRAISERROR(N'Checking @MinutesBack validity.', 0, 1) WITH NOWAIT;\nIF @MinutesBack IS NOT NULL\n    BEGIN\n        IF @MinutesBack > 0\n            BEGIN\n                RAISERROR(N'Setting @MinutesBack to a negative number', 0, 1) WITH NOWAIT;\n\t\t\t\tSET @MinutesBack *=-1;\n            END;\n        IF @MinutesBack = 0\n            BEGIN\n                RAISERROR(N'@MinutesBack can''t be 0, setting to -1', 0, 1) WITH NOWAIT;\n\t\t\t\tSET @MinutesBack = -1;\n            END;\n    END;\n\n\nRAISERROR(N'Creating temp tables for results and warnings.', 0, 1) WITH NOWAIT;\n\nIF OBJECT_ID('tempdb.dbo.##bou_BlitzCacheResults') IS NULL\nBEGIN\n    CREATE TABLE ##bou_BlitzCacheResults (\n        SPID INT,\n        ID INT IDENTITY(1,1),\n        CheckID INT,\n        Priority TINYINT,\n        FindingsGroup VARCHAR(50),\n        Finding VARCHAR(200),\n        URL VARCHAR(200),\n        Details VARCHAR(4000)\n    );\nEND;\n\nIF OBJECT_ID('tempdb.dbo.##bou_BlitzCacheProcs') IS NULL\nBEGIN\n    CREATE TABLE ##bou_BlitzCacheProcs (\n        SPID INT ,\n        QueryType NVARCHAR(258),\n        DatabaseName sysname,\n        AverageCPU DECIMAL(38,4),\n        AverageCPUPerMinute DECIMAL(38,4),\n        TotalCPU DECIMAL(38,4),\n        PercentCPUByType MONEY,\n        PercentCPU MONEY,\n        AverageDuration DECIMAL(38,4),\n        TotalDuration DECIMAL(38,4),\n        PercentDuration MONEY,\n        PercentDurationByType MONEY,\n        AverageReads BIGINT,\n        TotalReads BIGINT,\n        PercentReads MONEY,\n        PercentReadsByType MONEY,\n        ExecutionCount BIGINT,\n        PercentExecutions MONEY,\n        PercentExecutionsByType MONEY,\n        ExecutionsPerMinute MONEY,\n        TotalWrites BIGINT,\n        AverageWrites MONEY,\n        PercentWrites MONEY,\n        PercentWritesByType MONEY,\n        WritesPerMinute MONEY,\n        PlanCreationTime DATETIME,\n\t\tPlanCreationTimeHours AS DATEDIFF(HOUR, PlanCreationTime, SYSDATETIME()),\n        LastExecutionTime DATETIME,\n        PlanHandle VARBINARY(64),\n\t\t[Remove Plan Handle From Cache] AS \n\t\t\tCASE WHEN [PlanHandle] IS NOT NULL \n\t\t\tTHEN 'DBCC FREEPROCCACHE (' + CONVERT(VARCHAR(128), [PlanHandle], 1) + ');'\n\t\t\tELSE 'N/A' END,\n\t\tSqlHandle VARBINARY(64),\n\t\t\t[Remove SQL Handle From Cache] AS \n\t\t\tCASE WHEN [SqlHandle] IS NOT NULL \n\t\t\tTHEN 'DBCC FREEPROCCACHE (' + CONVERT(VARCHAR(128), [SqlHandle], 1) + ');'\n\t\t\tELSE 'N/A' END,\n\t\t[SQL Handle More Info] AS \n\t\t\tCASE WHEN [SqlHandle] IS NOT NULL \n\t\t\tTHEN 'EXEC sp_BlitzCache @OnlySqlHandles = ''' + CONVERT(VARCHAR(128), [SqlHandle], 1) + '''; '\n\t\t\tELSE 'N/A' END,\n\t\tQueryHash BINARY(8),\n\t\t[Query Hash More Info] AS \n\t\t\tCASE WHEN [QueryHash] IS NOT NULL \n\t\t\tTHEN 'EXEC sp_BlitzCache @OnlyQueryHashes = ''' + CONVERT(VARCHAR(32), [QueryHash], 1) + '''; '\n\t\t\tELSE 'N/A' END,\n        QueryPlanHash BINARY(8),\n        StatementStartOffset INT,\n        StatementEndOffset INT,\n        MinReturnedRows BIGINT,\n        MaxReturnedRows BIGINT,\n        AverageReturnedRows MONEY,\n        TotalReturnedRows BIGINT,\n        LastReturnedRows BIGINT,\n\t\tMinGrantKB BIGINT,\n\t\tMaxGrantKB BIGINT,\n\t\tMinUsedGrantKB BIGINT, \n\t\tMaxUsedGrantKB BIGINT,\n\t\tPercentMemoryGrantUsed MONEY,\n\t\tAvgMaxMemoryGrant MONEY,\n\t\tMinSpills BIGINT,\n\t\tMaxSpills BIGINT,\n\t\tTotalSpills BIGINT,\n\t\tAvgSpills MONEY,\n        QueryText NVARCHAR(MAX),\n        QueryPlan XML,\n        /* these next four columns are the total for the type of query.\n            don't actually use them for anything apart from math by type.\n            */\n        TotalWorkerTimeForType BIGINT,\n        TotalElapsedTimeForType BIGINT,\n        TotalReadsForType BIGINT,\n        TotalExecutionCountForType BIGINT,\n        TotalWritesForType BIGINT,\n        NumberOfPlans INT,\n        NumberOfDistinctPlans INT,\n        SerialDesiredMemory FLOAT,\n        SerialRequiredMemory FLOAT,\n        CachedPlanSize FLOAT,\n        CompileTime FLOAT,\n        CompileCPU FLOAT ,\n        CompileMemory FLOAT ,\n        min_worker_time BIGINT,\n        max_worker_time BIGINT,\n        is_forced_plan BIT,\n        is_forced_parameterized BIT,\n        is_cursor BIT,\n\t\tis_optimistic_cursor BIT,\n\t\tis_forward_only_cursor BIT,\n\t\tis_cursor_dynamic BIT,\n        is_parallel BIT,\n\t\tis_forced_serial BIT,\n\t\tis_key_lookup_expensive BIT,\n\t\tkey_lookup_cost FLOAT,\n\t\tis_remote_query_expensive BIT,\n\t\tremote_query_cost FLOAT,\n        frequent_execution BIT,\n        parameter_sniffing BIT,\n        unparameterized_query BIT,\n        near_parallel BIT,\n        plan_warnings BIT,\n        plan_multiple_plans BIT,\n        long_running BIT,\n        downlevel_estimator BIT,\n        implicit_conversions BIT,\n        busy_loops BIT,\n        tvf_join BIT,\n        tvf_estimate BIT,\n        compile_timeout BIT,\n        compile_memory_limit_exceeded BIT,\n        warning_no_join_predicate BIT,\n        QueryPlanCost FLOAT,\n        missing_index_count INT,\n        unmatched_index_count INT,\n        min_elapsed_time BIGINT,\n        max_elapsed_time BIGINT,\n        age_minutes MONEY,\n        age_minutes_lifetime MONEY,\n        is_trivial BIT,\n\t\ttrace_flags_session VARCHAR(1000),\n\t\tis_unused_grant BIT,\n\t\tfunction_count INT,\n\t\tclr_function_count INT,\n\t\tis_table_variable BIT,\n\t\tno_stats_warning BIT,\n\t\trelop_warnings BIT,\n\t\tis_table_scan BIT,\n\t    backwards_scan BIT,\n\t    forced_index BIT,\n\t    forced_seek BIT,\n\t    forced_scan BIT,\n\t\tcolumnstore_row_mode BIT,\n\t\tis_computed_scalar BIT ,\n\t\tis_sort_expensive BIT,\n\t\tsort_cost FLOAT,\n\t\tis_computed_filter BIT,\n\t\top_name VARCHAR(100) NULL,\n\t\tindex_insert_count INT NULL,\n\t\tindex_update_count INT NULL,\n\t\tindex_delete_count INT NULL,\n\t\tcx_insert_count INT NULL,\n\t\tcx_update_count INT NULL,\n\t\tcx_delete_count INT NULL,\n\t\ttable_insert_count INT NULL,\n\t\ttable_update_count INT NULL,\n\t\ttable_delete_count INT NULL,\n\t\tindex_ops AS (index_insert_count + index_update_count + index_delete_count + \n\t\t\t  cx_insert_count + cx_update_count + cx_delete_count +\n\t\t\t  table_insert_count + table_update_count + table_delete_count),\n\t\tis_row_level BIT,\n\t\tis_spatial BIT,\n\t\tindex_dml BIT,\n\t\ttable_dml BIT,\n\t\tlong_running_low_cpu BIT,\n\t\tlow_cost_high_cpu BIT,\n\t\tstale_stats BIT, \n\t\tis_adaptive BIT,\n\t\tindex_spool_cost FLOAT,\n\t\tindex_spool_rows FLOAT,\n\t\tis_spool_expensive BIT,\n\t\tis_spool_more_rows BIT,\n\t\testimated_rows FLOAT,\n\t\tis_bad_estimate BIT, \n\t\tis_paul_white_electric BIT,\n\t\tis_row_goal BIT,\n\t\tis_big_spills BIT,\n\t\timplicit_conversion_info XML,\n\t\tcached_execution_parameters XML,\n\t\tmissing_indexes XML,\n        SetOptions VARCHAR(MAX),\n        Warnings VARCHAR(MAX)\n    );\nEND;\n\nDECLARE @DurationFilter_i INT,\n\t\t@MinMemoryPerQuery INT,\n        @msg NVARCHAR(4000) ;\n\n\nIF @BringThePain = 1\n   BEGIN\n   RAISERROR(N'You have chosen to bring the pain. Setting top to 2147483647.', 0, 1) WITH NOWAIT;\n   SET @Top = 2147483647;\n   END; \n\n/* Change duration from seconds to milliseconds */\nIF @DurationFilter IS NOT NULL\n  BEGIN\n  RAISERROR(N'Converting Duration Filter to milliseconds', 0, 1) WITH NOWAIT;\n  SET @DurationFilter_i = CAST((@DurationFilter * 1000.0) AS INT);\n  END; \n\nRAISERROR(N'Checking database validity', 0, 1) WITH NOWAIT;\nSET @DatabaseName = LTRIM(RTRIM(@DatabaseName)) ;\nIF (DB_ID(@DatabaseName)) IS NULL AND @DatabaseName <> ''\nBEGIN\n   RAISERROR('The database you specified does not exist. Please check the name and try again.', 16, 1);\n   RETURN;\nEND;\nIF (SELECT DATABASEPROPERTYEX(@DatabaseName, 'Status')) <> 'ONLINE'\nBEGIN\n   RAISERROR('The database you specified is not readable. Please check the name and try again. Better yet, check your server.', 16, 1);\n   RETURN;\nEND;\n\nSELECT @MinMemoryPerQuery = CONVERT(INT, c.value) FROM sys.configurations AS c WHERE c.name = 'min memory per query (KB)';\n\nSET @SortOrder = LOWER(@SortOrder);\nSET @SortOrder = REPLACE(REPLACE(@SortOrder, 'average', 'avg'), '.', '');\nSET @SortOrder = REPLACE(@SortOrder, 'executions per minute', 'avg executions');\nSET @SortOrder = REPLACE(@SortOrder, 'executions / minute', 'avg executions');\nSET @SortOrder = REPLACE(@SortOrder, 'xpm', 'avg executions');\nSET @SortOrder = REPLACE(@SortOrder, 'recent compilations', 'compiles');\n\nRAISERROR(N'Checking sort order', 0, 1) WITH NOWAIT;\nIF @SortOrder NOT IN ('cpu', 'avg cpu', 'reads', 'avg reads', 'writes', 'avg writes',\n                       'duration', 'avg duration', 'executions', 'avg executions',\n                       'compiles', 'memory grant', 'avg memory grant',\n\t\t\t\t\t   'spills', 'avg spills', 'all', 'all avg')\n  BEGIN\n  RAISERROR(N'Invalid sort order chosen, reverting to cpu', 0, 1) WITH NOWAIT;\n  SET @SortOrder = 'cpu';\n  END; \n\nSELECT @OutputDatabaseName = QUOTENAME(@OutputDatabaseName),\n       @OutputSchemaName   = QUOTENAME(@OutputSchemaName),\n       @OutputTableName    = QUOTENAME(@OutputTableName);\n\nSET @QueryFilter = LOWER(@QueryFilter);\n\nIF LEFT(@QueryFilter, 3) NOT IN ('all', 'sta', 'pro', 'fun')\n  BEGIN\n  RAISERROR(N'Invalid query filter chosen. Reverting to all.', 0, 1) WITH NOWAIT;\n  SET @QueryFilter = 'all';\n  END;\n\nIF @SkipAnalysis = 1\n  BEGIN\n  RAISERROR(N'Skip Analysis set to 1, hiding Summary', 0, 1) WITH NOWAIT;\n  SET @HideSummary = 1;\n  END; \n\nIF @Reanalyze = 1 AND OBJECT_ID('tempdb..##bou_BlitzCacheResults') IS NULL\n  BEGIN\n  RAISERROR(N'##bou_BlitzCacheResults does not exist, can''t reanalyze', 0, 1) WITH NOWAIT;\n  SET @Reanalyze = 0;\n  END;\n\nIF @Reanalyze = 0\n  BEGIN\n  RAISERROR(N'Cleaning up old warnings for your SPID', 0, 1) WITH NOWAIT;\n  DELETE ##bou_BlitzCacheResults\n    WHERE SPID = @@SPID\n\tOPTION (RECOMPILE) ;\n  RAISERROR(N'Cleaning up old plans for your SPID', 0, 1) WITH NOWAIT;\n  DELETE ##bou_BlitzCacheProcs\n    WHERE SPID = @@SPID\n\tOPTION (RECOMPILE) ;\n  END;  \n\nIF @Reanalyze = 1 \n\tBEGIN\n\tRAISERROR(N'Reanalyzing current data, skipping to results', 0, 1) WITH NOWAIT;\n    GOTO Results;\n\tEND;\n\nIF @SortOrder IN ('all', 'all avg')\n\tBEGIN\n\tRAISERROR(N'Checking all sort orders, please be patient', 0, 1) WITH NOWAIT;\n    GOTO AllSorts;\n\tEND;\n\n\nRAISERROR(N'Creating temp tables for internal processing', 0, 1) WITH NOWAIT;\nIF OBJECT_ID('tempdb..#only_query_hashes') IS NOT NULL\n    DROP TABLE #only_query_hashes ;\n\nIF OBJECT_ID('tempdb..#ignore_query_hashes') IS NOT NULL\n    DROP TABLE #ignore_query_hashes ;\n\nIF OBJECT_ID('tempdb..#only_sql_handles') IS NOT NULL\n    DROP TABLE #only_sql_handles ;\n\nIF OBJECT_ID('tempdb..#ignore_sql_handles') IS NOT NULL\n    DROP TABLE #ignore_sql_handles ;\n   \nIF OBJECT_ID('tempdb..#p') IS NOT NULL\n    DROP TABLE #p;\n\nIF OBJECT_ID ('tempdb..#checkversion') IS NOT NULL\n    DROP TABLE #checkversion;\n\nIF OBJECT_ID ('tempdb..#configuration') IS NOT NULL\n    DROP TABLE #configuration;\n\nIF OBJECT_ID ('tempdb..#stored_proc_info') IS NOT NULL\n    DROP TABLE #stored_proc_info;\n\nIF OBJECT_ID ('tempdb..#plan_creation') IS NOT NULL\n    DROP TABLE #plan_creation;\n\nIF OBJECT_ID ('tempdb..#est_rows') IS NOT NULL\n    DROP TABLE #est_rows;\n\nIF OBJECT_ID ('tempdb..#plan_cost') IS NOT NULL\n    DROP TABLE #plan_cost;\n\nIF OBJECT_ID ('tempdb..#proc_costs') IS NOT NULL\n    DROP TABLE #proc_costs;\n\nIF OBJECT_ID ('tempdb..#stats_agg') IS NOT NULL\n    DROP TABLE #stats_agg;\n\nIF OBJECT_ID ('tempdb..#trace_flags') IS NOT NULL\n    DROP TABLE #trace_flags;\n\nIF OBJECT_ID('tempdb..#variable_info') IS NOT NULL\n    DROP TABLE #variable_info\n\nIF OBJECT_ID('tempdb..#conversion_info') IS NOT NULL\n    DROP TABLE #conversion_info\n\n\nIF OBJECT_ID('tempdb..#missing_index_xml') IS NOT NULL\n    DROP TABLE #missing_index_xml\n\nIF OBJECT_ID('tempdb..#missing_index_schema') IS NOT NULL\n    DROP TABLE #missing_index_schema\n\nIF OBJECT_ID('tempdb..#missing_index_usage') IS NOT NULL\n    DROP TABLE #missing_index_usage\n\nIF OBJECT_ID('tempdb..#missing_index_detail') IS NOT NULL\n    DROP TABLE #missing_index_detail\n\nIF OBJECT_ID('tempdb..#missing_index_pretty') IS NOT NULL\n    DROP TABLE #missing_index_pretty\n\n\nCREATE TABLE #only_query_hashes (\n    query_hash BINARY(8)\n);\n\nCREATE TABLE #ignore_query_hashes (\n    query_hash BINARY(8)\n);\n\nCREATE TABLE #only_sql_handles (\n    sql_handle VARBINARY(64)\n);\n\nCREATE TABLE #ignore_sql_handles (\n    sql_handle VARBINARY(64)\n);\n\nCREATE TABLE #p (\n    SqlHandle VARBINARY(64),\n    TotalCPU BIGINT,\n    TotalDuration BIGINT,\n    TotalReads BIGINT,\n    TotalWrites BIGINT,\n    ExecutionCount BIGINT\n);\n\nCREATE TABLE #checkversion (\n    version NVARCHAR(128),\n    common_version AS SUBSTRING(version, 1, CHARINDEX('.', version) + 1 ),\n    major AS PARSENAME(CONVERT(VARCHAR(32), version), 4),\n    minor AS PARSENAME(CONVERT(VARCHAR(32), version), 3),\n    build AS PARSENAME(CONVERT(VARCHAR(32), version), 2),\n    revision AS PARSENAME(CONVERT(VARCHAR(32), version), 1)\n);\n\nCREATE TABLE #configuration (\n    parameter_name VARCHAR(100),\n    value DECIMAL(38,0)\n);\n\nCREATE TABLE #plan_creation\n(\n    percent_24 DECIMAL(5, 2),\n    percent_4 DECIMAL(5, 2),\n    percent_1 DECIMAL(5, 2),\n\ttotal_plans INT,\n    SPID INT\n);\n\nCREATE TABLE #est_rows\n(\n    QueryHash BINARY(8),\n    estimated_rows FLOAT\n);\n\nCREATE TABLE #plan_cost\n(\n    QueryPlanCost FLOAT,\n    SqlHandle VARBINARY(64),\n    QueryHash BINARY(8),\n    QueryPlanHash BINARY(8)\n);\n\nCREATE TABLE #proc_costs\n(\n    PlanTotalQuery FLOAT,\n    PlanHandle VARBINARY(64),\n    SqlHandle VARBINARY(64)\n);\n\nCREATE TABLE #stats_agg\n(\n    SqlHandle VARBINARY(64),\n\tLastUpdate DATETIME2(7),\n    ModificationCount INT,\n    SamplingPercent FLOAT,\n    [Statistics] NVARCHAR(258),\n    [Table] NVARCHAR(258),\n    [Schema] NVARCHAR(258),\n    [Database] NVARCHAR(258),\n);\n\nCREATE TABLE #trace_flags\n(\n    SqlHandle VARBINARY(64),\n    QueryHash BINARY(8),\n    global_trace_flags VARCHAR(1000),\n    session_trace_flags VARCHAR(1000)\n);\n\nCREATE TABLE #stored_proc_info\n(\n    SPID INT,\n\tSqlHandle VARBINARY(64),\n    QueryHash BINARY(8),\n    variable_name NVARCHAR(258),\n    variable_datatype NVARCHAR(258),\n\tconverted_column_name NVARCHAR(258),\n    compile_time_value NVARCHAR(258),\n    proc_name NVARCHAR(1000),\n    column_name NVARCHAR(258),\n    converted_to NVARCHAR(258)\n);\n\nCREATE TABLE #variable_info\n(\n    SPID INT,\n    QueryHash BINARY(8),\n    SqlHandle VARBINARY(64),\n    proc_name NVARCHAR(1000),\n    variable_name NVARCHAR(258),\n    variable_datatype NVARCHAR(258),\n    compile_time_value NVARCHAR(258)\n);\n\nCREATE TABLE #conversion_info\n(\n    SPID INT,\n    QueryHash BINARY(8),\n    SqlHandle VARBINARY(64),\n    proc_name NVARCHAR(258),\n    expression NVARCHAR(4000),\n    at_charindex AS CHARINDEX('@', expression),\n    bracket_charindex AS CHARINDEX(']', expression, CHARINDEX('@', expression)) - CHARINDEX('@', expression),\n    comma_charindex AS CHARINDEX(',', expression) + 1,\n    second_comma_charindex AS\n        CHARINDEX(',', expression, CHARINDEX(',', expression) + 1) - CHARINDEX(',', expression) - 1,\n    equal_charindex AS CHARINDEX('=', expression) + 1,\n    paren_charindex AS CHARINDEX('(', expression) + 1,\n    comma_paren_charindex AS\n        CHARINDEX(',', expression, CHARINDEX('(', expression) + 1) - CHARINDEX('(', expression) - 1,\n    convert_implicit_charindex AS CHARINDEX('=CONVERT_IMPLICIT', expression)\n);\n\n\nCREATE TABLE #missing_index_xml\n(\n    QueryHash BINARY(8),\n    SqlHandle VARBINARY(64),\n    impact FLOAT,\n    index_xml XML\n);\n\n\nCREATE TABLE #missing_index_schema\n(\n    QueryHash BINARY(8),\n    SqlHandle VARBINARY(64),\n    impact FLOAT,\n    database_name NVARCHAR(128),\n    schema_name NVARCHAR(128),\n    table_name NVARCHAR(128),\n    index_xml XML\n);\n\n\nCREATE TABLE #missing_index_usage\n(\n    QueryHash BINARY(8),\n    SqlHandle VARBINARY(64),\n    impact FLOAT,\n    database_name NVARCHAR(128),\n    schema_name NVARCHAR(128),\n    table_name NVARCHAR(128),\n\tusage NVARCHAR(128),\n    index_xml XML\n);\n\n\nCREATE TABLE #missing_index_detail\n(\n    QueryHash BINARY(8),\n    SqlHandle VARBINARY(64),\n    impact FLOAT,\n    database_name NVARCHAR(128),\n    schema_name NVARCHAR(128),\n    table_name NVARCHAR(128),\n    usage NVARCHAR(128),\n    column_name NVARCHAR(128)\n);\n\n\nCREATE TABLE #missing_index_pretty\n(\n    QueryHash BINARY(8),\n    SqlHandle VARBINARY(64),\n    impact FLOAT,\n    database_name NVARCHAR(128),\n    schema_name NVARCHAR(128),\n    table_name NVARCHAR(128),\n\tequality NVARCHAR(MAX),\n\tinequality NVARCHAR(MAX),\n\t[include] NVARCHAR(MAX),\n\tdetails AS N'/* '\n\t           + CHAR(10) \n\t\t\t   + N'The Query Processor estimates that implementing the following index could improve the query cost by ' \n\t\t\t   + CONVERT(NVARCHAR(30), impact)\n\t\t\t   + '%.'\n\t\t\t   + CHAR(10)\n\t\t\t   + N'*/'\n\t\t\t   + CHAR(10) + CHAR(13) \n\t\t\t   + N'/* '\n\t\t\t   + CHAR(10)\n\t\t\t   + N'USE '\n\t\t\t   + database_name\n\t\t\t   + CHAR(10)\n\t\t\t   + N'GO'\n\t\t\t   + CHAR(10) + CHAR(13)\n\t\t\t   + N'CREATE NONCLUSTERED INDEX ix_'\n\t\t\t   + ISNULL(REPLACE(REPLACE(REPLACE(equality,'[', ''), ']', ''),   ', ', '_'), '')\n\t\t\t   + ISNULL(REPLACE(REPLACE(REPLACE(inequality,'[', ''), ']', ''), ', ', '_'), '')\n\t\t\t   + CASE WHEN [include] IS NOT NULL THEN + N'Includes' ELSE N'' END\n\t\t\t   + CHAR(10)\n\t\t\t   + N' ON '\n\t\t\t   + schema_name\n\t\t\t   + N'.'\n\t\t\t   + table_name\n\t\t\t   + N' (' + \n\t\t\t   + CASE WHEN equality IS NOT NULL \n\t\t\t\t\t  THEN equality\n\t\t\t\t\t\t+ CASE WHEN inequality IS NOT NULL\n\t\t\t\t\t\t\t   THEN N', ' + inequality\n\t\t\t\t\t\t\t   ELSE N''\n\t\t\t\t\t\t  END\n\t\t\t\t\t ELSE inequality\n\t\t\t\t END\t\t\t   \n\t\t\t   + N')' \n\t\t\t   + CHAR(10)\n\t\t\t   + CASE WHEN include IS NOT NULL\n\t\t\t\t\t  THEN N'INCLUDE (' + include + N')'\n\t\t\t\t\t  ELSE N''\n\t\t\t\t END\n\t\t\t   + CHAR(10)\n\t\t\t   + N'GO'\n\t\t\t   + CHAR(10)\n\t\t\t   + N'*/'\n);\n\nRAISERROR(N'Checking plan cache age', 0, 1) WITH NOWAIT;\nWITH x AS (\nSELECT SUM(CASE WHEN DATEDIFF(HOUR, deqs.creation_time, SYSDATETIME()) <= 24 THEN 1 ELSE 0 END) AS [plans_24],\n\t   SUM(CASE WHEN DATEDIFF(HOUR, deqs.creation_time, SYSDATETIME()) <= 4 THEN 1 ELSE 0 END) AS [plans_4],\n\t   SUM(CASE WHEN DATEDIFF(HOUR, deqs.creation_time, SYSDATETIME()) <= 1 THEN 1 ELSE 0 END) AS [plans_1],\n\t   COUNT(deqs.creation_time) AS [total_plans]\nFROM sys.dm_exec_query_stats AS deqs\n)\nINSERT INTO #plan_creation ( percent_24, percent_4, percent_1, total_plans, SPID )\nSELECT CONVERT(DECIMAL(3,2), NULLIF(x.plans_24, 0) / (1. * NULLIF(x.total_plans, 0))) * 100 AS [percent_24],\n\t   CONVERT(DECIMAL(3,2), NULLIF(x.plans_4 , 0) / (1. * NULLIF(x.total_plans, 0))) * 100 AS [percent_4],\n\t   CONVERT(DECIMAL(3,2), NULLIF(x.plans_1 , 0) / (1. * NULLIF(x.total_plans, 0))) * 100 AS [percent_1],\n\t   x.total_plans,\n\t   @@SPID AS SPID\nFROM x\nOPTION (RECOMPILE) ;\n\n\nSET @OnlySqlHandles = LTRIM(RTRIM(@OnlySqlHandles)) ;\nSET @OnlyQueryHashes = LTRIM(RTRIM(@OnlyQueryHashes)) ;\nSET @IgnoreQueryHashes = LTRIM(RTRIM(@IgnoreQueryHashes)) ;\n\nDECLARE @individual VARCHAR(100) ;\n\nIF (@OnlySqlHandles IS NOT NULL AND @IgnoreSqlHandles IS NOT NULL)\nBEGIN\nRAISERROR('You shouldn''t need to ignore and filter on SqlHandle at the same time.', 0, 1) WITH NOWAIT;\nRETURN;\nEND;\n\nIF (@StoredProcName IS NOT NULL AND (@OnlySqlHandles IS NOT NULL OR @IgnoreSqlHandles IS NOT NULL))\nBEGIN\nRAISERROR('You can''t filter on stored procedure name and SQL Handle.', 0, 1) WITH NOWAIT;\nRETURN;\nEND;\n\nIF @OnlySqlHandles IS NOT NULL\n    AND LEN(@OnlySqlHandles) > 0\nBEGIN\n    RAISERROR(N'Processing SQL Handles', 0, 1) WITH NOWAIT;\n\tSET @individual = '';\n\n    WHILE LEN(@OnlySqlHandles) > 0\n    BEGIN\n        IF PATINDEX('%,%', @OnlySqlHandles) > 0\n        BEGIN  \n               SET @individual = SUBSTRING(@OnlySqlHandles, 0, PATINDEX('%,%',@OnlySqlHandles)) ;\n               \n               INSERT INTO #only_sql_handles\n               SELECT CAST('' AS XML).value('xs:hexBinary( substring(sql:variable(\"@individual\"), sql:column(\"t.pos\")) )', 'varbinary(max)')\n               FROM (SELECT CASE SUBSTRING(@individual, 1, 2) WHEN '0x' THEN 3 ELSE 0 END) AS t(pos)\n\t\t\t   OPTION (RECOMPILE) ;\n               \n               --SELECT CAST(SUBSTRING(@individual, 1, 2) AS BINARY(8));\n\n               SET @OnlySqlHandles = SUBSTRING(@OnlySqlHandles, LEN(@individual + ',') + 1, LEN(@OnlySqlHandles)) ;\n        END;\n        ELSE\n        BEGIN\n               SET @individual = @OnlySqlHandles;\n               SET @OnlySqlHandles = NULL;\n\n               INSERT INTO #only_sql_handles\n               SELECT CAST('' AS XML).value('xs:hexBinary( substring(sql:variable(\"@individual\"), sql:column(\"t.pos\")) )', 'varbinary(max)')\n               FROM (SELECT CASE SUBSTRING(@individual, 1, 2) WHEN '0x' THEN 3 ELSE 0 END) AS t(pos)\n\t\t\t   OPTION (RECOMPILE) ;\n\n               --SELECT CAST(SUBSTRING(@individual, 1, 2) AS VARBINARY(MAX)) ;\n        END;\n    END;\nEND;    \n\nIF @IgnoreSqlHandles IS NOT NULL\n    AND LEN(@IgnoreSqlHandles) > 0\nBEGIN\n    RAISERROR(N'Processing SQL Handles To Ignore', 0, 1) WITH NOWAIT;\n\tSET @individual = '';\n\n    WHILE LEN(@IgnoreSqlHandles) > 0\n    BEGIN\n        IF PATINDEX('%,%', @IgnoreSqlHandles) > 0\n        BEGIN  \n               SET @individual = SUBSTRING(@IgnoreSqlHandles, 0, PATINDEX('%,%',@IgnoreSqlHandles)) ;\n               \n               INSERT INTO #ignore_sql_handles\n               SELECT CAST('' AS XML).value('xs:hexBinary( substring(sql:variable(\"@individual\"), sql:column(\"t.pos\")) )', 'varbinary(max)')\n               FROM (SELECT CASE SUBSTRING(@individual, 1, 2) WHEN '0x' THEN 3 ELSE 0 END) AS t(pos)\n\t\t\t   OPTION (RECOMPILE) ;\n               \n               --SELECT CAST(SUBSTRING(@individual, 1, 2) AS BINARY(8));\n\n               SET @IgnoreSqlHandles = SUBSTRING(@IgnoreSqlHandles, LEN(@individual + ',') + 1, LEN(@IgnoreSqlHandles)) ;\n        END;\n        ELSE\n        BEGIN\n               SET @individual = @IgnoreSqlHandles;\n               SET @IgnoreSqlHandles = NULL;\n\n               INSERT INTO #ignore_sql_handles\n               SELECT CAST('' AS XML).value('xs:hexBinary( substring(sql:variable(\"@individual\"), sql:column(\"t.pos\")) )', 'varbinary(max)')\n               FROM (SELECT CASE SUBSTRING(@individual, 1, 2) WHEN '0x' THEN 3 ELSE 0 END) AS t(pos)\n\t\t\t   OPTION (RECOMPILE) ;\n\n               --SELECT CAST(SUBSTRING(@individual, 1, 2) AS VARBINARY(MAX)) ;\n        END;\n    END;\nEND;  \n\nIF @StoredProcName IS NOT NULL AND @StoredProcName <> N''\n\nBEGIN\n\tRAISERROR(N'Setting up filter for stored procedure name', 0, 1) WITH NOWAIT;\n\tINSERT #only_sql_handles\n\t        ( sql_handle )\n\tSELECT  ISNULL(deps.sql_handle, CONVERT(VARBINARY(64),'0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'))\n\tFROM sys.dm_exec_procedure_stats AS deps\n\tWHERE OBJECT_NAME(deps.object_id, deps.database_id) = @StoredProcName\n\tOPTION (RECOMPILE) ;\n\n\t\tIF (SELECT COUNT(*) FROM #only_sql_handles) = 0\n\t\t\tBEGIN\n\t\t\tRAISERROR(N'No information for that stored procedure was found.', 0, 1) WITH NOWAIT;\n\t\t\tRETURN;\n\t\t\tEND;\n\nEND;\n\n\n\nIF ((@OnlyQueryHashes IS NOT NULL AND LEN(@OnlyQueryHashes) > 0)\n    OR (@IgnoreQueryHashes IS NOT NULL AND LEN(@IgnoreQueryHashes) > 0))\n   AND LEFT(@QueryFilter, 3) IN ('pro', 'fun')\nBEGIN\n   RAISERROR('You cannot limit by query hash and filter by stored procedure', 16, 1);\n   RETURN;\nEND;\n\n/* If the user is attempting to limit by query hash, set up the\n   #only_query_hashes temp table. This will be used to narrow down\n   results.\n\n   Just a reminder: Using @OnlyQueryHashes will ignore stored\n   procedures and triggers.\n */\nIF @OnlyQueryHashes IS NOT NULL\n   AND LEN(@OnlyQueryHashes) > 0\nBEGIN\n\tRAISERROR(N'Setting up filter for Query Hashes', 0, 1) WITH NOWAIT;\n    SET @individual = '';\n\n   WHILE LEN(@OnlyQueryHashes) > 0\n   BEGIN\n        IF PATINDEX('%,%', @OnlyQueryHashes) > 0\n        BEGIN  \n               SET @individual = SUBSTRING(@OnlyQueryHashes, 0, PATINDEX('%,%',@OnlyQueryHashes)) ;\n               \n               INSERT INTO #only_query_hashes\n               SELECT CAST('' AS XML).value('xs:hexBinary( substring(sql:variable(\"@individual\"), sql:column(\"t.pos\")) )', 'varbinary(max)')\n               FROM (SELECT CASE SUBSTRING(@individual, 1, 2) WHEN '0x' THEN 3 ELSE 0 END) AS t(pos)\n\t\t\t   OPTION (RECOMPILE) ;\n               \n               --SELECT CAST(SUBSTRING(@individual, 1, 2) AS BINARY(8));\n\n               SET @OnlyQueryHashes = SUBSTRING(@OnlyQueryHashes, LEN(@individual + ',') + 1, LEN(@OnlyQueryHashes)) ;\n        END;\n        ELSE\n        BEGIN\n               SET @individual = @OnlyQueryHashes;\n               SET @OnlyQueryHashes = NULL;\n\n               INSERT INTO #only_query_hashes\n               SELECT CAST('' AS XML).value('xs:hexBinary( substring(sql:variable(\"@individual\"), sql:column(\"t.pos\")) )', 'varbinary(max)')\n               FROM (SELECT CASE SUBSTRING(@individual, 1, 2) WHEN '0x' THEN 3 ELSE 0 END) AS t(pos)\n\t\t\t   OPTION (RECOMPILE) ;\n\n               --SELECT CAST(SUBSTRING(@individual, 1, 2) AS VARBINARY(MAX)) ;\n        END;\n   END;\nEND;\n\n/* If the user is setting up a list of query hashes to ignore, those\n   values will be inserted into #ignore_query_hashes. This is used to\n   exclude values from query results.\n\n   Just a reminder: Using @IgnoreQueryHashes will ignore stored\n   procedures and triggers.\n */\nIF @IgnoreQueryHashes IS NOT NULL\n   AND LEN(@IgnoreQueryHashes) > 0\nBEGIN\n\tRAISERROR(N'Setting up filter to ignore query hashes', 0, 1) WITH NOWAIT;\n   SET @individual = '' ;\n\n   WHILE LEN(@IgnoreQueryHashes) > 0\n   BEGIN\n        IF PATINDEX('%,%', @IgnoreQueryHashes) > 0\n        BEGIN  \n               SET @individual = SUBSTRING(@IgnoreQueryHashes, 0, PATINDEX('%,%',@IgnoreQueryHashes)) ;\n               \n               INSERT INTO #ignore_query_hashes\n               SELECT CAST('' AS XML).value('xs:hexBinary( substring(sql:variable(\"@individual\"), sql:column(\"t.pos\")) )', 'varbinary(max)')\n               FROM (SELECT CASE SUBSTRING(@individual, 1, 2) WHEN '0x' THEN 3 ELSE 0 END) AS t(pos) \n\t\t\t   OPTION (RECOMPILE) ;\n               \n               SET @IgnoreQueryHashes = SUBSTRING(@IgnoreQueryHashes, LEN(@individual + ',') + 1, LEN(@IgnoreQueryHashes)) ;\n        END;\n        ELSE\n        BEGIN\n               SET @individual = @IgnoreQueryHashes ;\n               SET @IgnoreQueryHashes = NULL ;\n\n               INSERT INTO #ignore_query_hashes\n               SELECT CAST('' AS XML).value('xs:hexBinary( substring(sql:variable(\"@individual\"), sql:column(\"t.pos\")) )', 'varbinary(max)')\n               FROM (SELECT CASE SUBSTRING(@individual, 1, 2) WHEN '0x' THEN 3 ELSE 0 END) AS t(pos) \n\t\t\t   OPTION (RECOMPILE) ;\n        END;\n   END;\nEND;\n\nIF @ConfigurationDatabaseName IS NOT NULL\nBEGIN\n   RAISERROR(N'Reading values from Configuration Database', 0, 1) WITH NOWAIT;\n   DECLARE @config_sql NVARCHAR(MAX) = N'INSERT INTO #configuration SELECT parameter_name, value FROM '\n        + QUOTENAME(@ConfigurationDatabaseName)\n        + '.' + QUOTENAME(@ConfigurationSchemaName)\n        + '.' + QUOTENAME(@ConfigurationTableName)\n        + ' ; ' ;\n   EXEC(@config_sql);\nEND;\n\nRAISERROR(N'Setting up variables', 0, 1) WITH NOWAIT;\nDECLARE @sql NVARCHAR(MAX) = N'',\n        @insert_list NVARCHAR(MAX) = N'',\n        @plans_triggers_select_list NVARCHAR(MAX) = N'',\n        @body NVARCHAR(MAX) = N'',\n        @body_where NVARCHAR(MAX) = N'WHERE 1 = 1 ' + @nl,\n        @body_order NVARCHAR(MAX) = N'ORDER BY #sortable# DESC OPTION (RECOMPILE) ',\n        \n        @q NVARCHAR(1) = N'''',\n        @pv VARCHAR(20),\n        @pos TINYINT,\n        @v DECIMAL(6,2),\n        @build INT;\n\n\nRAISERROR (N'Determining SQL Server version.',0,1) WITH NOWAIT;\n\nINSERT INTO #checkversion (version)\nSELECT CAST(SERVERPROPERTY('ProductVersion') AS NVARCHAR(128))\nOPTION (RECOMPILE);\n\n\nSELECT @v = common_version ,\n       @build = build\nFROM   #checkversion\nOPTION (RECOMPILE);\n\nIF (@SortOrder IN ('memory grant', 'avg memory grant')) \nAND ((@v < 11)\nOR (@v = 11 AND @build < 6020) \nOR (@v = 12 AND @build < 5000) \nOR (@v = 13 AND @build < 1601))\nBEGIN\n   RAISERROR('Your version of SQL does not support sorting by memory grant or average memory grant. Please use another sort order.', 16, 1);\n   RETURN;\nEND;\n\nIF (@SortOrder IN ('spills', 'avg spills')) \nAND (@v < 14)\nBEGIN\n   RAISERROR('Your version of SQL does not support sorting by spills or average spills. Please use another sort order.', 16, 1);\n   RETURN;\nEND;\n\nIF ((LEFT(@QueryFilter, 3) = 'fun') AND (@v < 13))\nBEGIN\n   RAISERROR('Your version of SQL does not support filtering by functions. Please use another filter.', 16, 1);\n   RETURN;\nEND;\n\nRAISERROR (N'Creating dynamic SQL based on SQL Server version.',0,1) WITH NOWAIT;\n\nSET @insert_list += N'\nINSERT INTO ##bou_BlitzCacheProcs (SPID, QueryType, DatabaseName, AverageCPU, TotalCPU, AverageCPUPerMinute, PercentCPUByType, PercentDurationByType,\n                    PercentReadsByType, PercentExecutionsByType, AverageDuration, TotalDuration, AverageReads, TotalReads, ExecutionCount,\n                    ExecutionsPerMinute, TotalWrites, AverageWrites, PercentWritesByType, WritesPerMinute, PlanCreationTime,\n                    LastExecutionTime, StatementStartOffset, StatementEndOffset, MinReturnedRows, MaxReturnedRows, AverageReturnedRows, TotalReturnedRows,\n                    LastReturnedRows, MinGrantKB, MaxGrantKB, MinUsedGrantKB, MaxUsedGrantKB, PercentMemoryGrantUsed, AvgMaxMemoryGrant, MinSpills, MaxSpills, TotalSpills, AvgSpills, \n\t\t\t\t\tQueryText, QueryPlan, TotalWorkerTimeForType, TotalElapsedTimeForType, TotalReadsForType,\n                    TotalExecutionCountForType, TotalWritesForType, SqlHandle, PlanHandle, QueryHash, QueryPlanHash,\n                    min_worker_time, max_worker_time, is_parallel, min_elapsed_time, max_elapsed_time, age_minutes, age_minutes_lifetime) ' ;\n\nSET @body += N'\nFROM   (SELECT TOP (@Top) x.*, xpa.*,\n               CAST((CASE WHEN DATEDIFF(mi, cached_time, GETDATE()) > 0 AND execution_count > 1\n                          THEN DATEDIFF(mi, cached_time, GETDATE()) \n                          ELSE NULL END) as MONEY) as age_minutes,\n               CAST((CASE WHEN DATEDIFF(mi, cached_time, last_execution_time) > 0 AND execution_count > 1\n                          THEN DATEDIFF(mi, cached_time, last_execution_time) \n                          ELSE Null END) as MONEY) as age_minutes_lifetime\n        FROM   sys.#view# x\n               CROSS APPLY (SELECT * FROM sys.dm_exec_plan_attributes(x.plan_handle) AS ixpa \n                            WHERE ixpa.attribute = ''dbid'') AS xpa ' + @nl ;\n\nSET @body += N'        WHERE  1 = 1 ' +  @nl ;\n\n\nIF @IgnoreSystemDBs = 1\n    BEGIN\n\tRAISERROR(N'Ignoring system databases by default', 0, 1) WITH NOWAIT;\n\tSET @body += N'               AND COALESCE(DB_NAME(CAST(xpa.value AS INT)), '''') NOT IN (''master'', ''model'', ''msdb'', ''tempdb'', ''32767'') AND COALESCE(DB_NAME(CAST(xpa.value AS INT)), '''') NOT IN (SELECT name FROM sys.databases WHERE is_distributor = 1)' + @nl ;\n\tEND; \n\nIF @DatabaseName IS NOT NULL OR @DatabaseName <> ''\n\tBEGIN \n    RAISERROR(N'Filtering database name chosen', 0, 1) WITH NOWAIT;\n\tSET @body += N'               AND CAST(xpa.value AS BIGINT) = DB_ID('\n                 + QUOTENAME(@DatabaseName, N'''')\n                 + N') ' + @nl;\n\tEND; \n\nIF (SELECT COUNT(*) FROM #only_sql_handles) > 0\nBEGIN\n    RAISERROR(N'Including only chosen SQL Handles', 0, 1) WITH NOWAIT;\n\tSET @body += N'               AND EXISTS(SELECT 1/0 FROM #only_sql_handles q WHERE q.sql_handle = x.sql_handle) ' + @nl ;\nEND;      \n\nIF (SELECT COUNT(*) FROM #ignore_sql_handles) > 0\nBEGIN\n    RAISERROR(N'Including only chosen SQL Handles', 0, 1) WITH NOWAIT;\n\tSET @body += N'               AND NOT EXISTS(SELECT 1/0 FROM #ignore_sql_handles q WHERE q.sql_handle = x.sql_handle) ' + @nl ;\nEND;    \n\nIF (SELECT COUNT(*) FROM #only_query_hashes) > 0\n   AND (SELECT COUNT(*) FROM #ignore_query_hashes) = 0\n   AND (SELECT COUNT(*) FROM #only_sql_handles) = 0\n   AND (SELECT COUNT(*) FROM #ignore_sql_handles) = 0\nBEGIN\n    RAISERROR(N'Including only chosen Query Hashes', 0, 1) WITH NOWAIT;\n\tSET @body += N'               AND EXISTS(SELECT 1/0 FROM #only_query_hashes q WHERE q.query_hash = x.query_hash) ' + @nl ;\nEND;\n\n/* filtering for query hashes */\nIF (SELECT COUNT(*) FROM #ignore_query_hashes) > 0\n   AND (SELECT COUNT(*) FROM #only_query_hashes) = 0\nBEGIN\n    RAISERROR(N'Excluding chosen Query Hashes', 0, 1) WITH NOWAIT;\n\tSET @body += N'               AND NOT EXISTS(SELECT 1/0 FROM #ignore_query_hashes iq WHERE iq.query_hash = x.query_hash) ' + @nl ;\nEND;\n/* end filtering for query hashes */\n\n\nIF @DurationFilter IS NOT NULL\n    BEGIN \n\tRAISERROR(N'Setting duration filter', 0, 1) WITH NOWAIT;\n\tSET @body += N'       AND (total_elapsed_time / 1000.0) / execution_count > @min_duration ' + @nl ;\n\tEND; \n\nIF @MinutesBack IS NOT NULL\n\tBEGIN\n\tRAISERROR(N'Setting minutes back filter', 0, 1) WITH NOWAIT;\n\tSET @body += N'       AND x.last_execution_time >= DATEADD(MINUTE, @min_back, GETDATE()) ' + @nl ;\n\tEND;\n\n/* Apply the sort order here to only grab relevant plans.\n   This should make it faster to process since we'll be pulling back fewer\n   plans for processing.\n */\nRAISERROR(N'Applying chosen sort order', 0, 1) WITH NOWAIT;\nSELECT @body += N'        ORDER BY ' +\n                CASE @SortOrder  WHEN N'cpu' THEN N'total_worker_time'\n                                 WHEN N'reads' THEN N'total_logical_reads'\n                                 WHEN N'writes' THEN N'total_logical_writes'\n                                 WHEN N'duration' THEN N'total_elapsed_time'\n                                 WHEN N'executions' THEN N'execution_count'\n                                 WHEN N'compiles' THEN N'cached_time'\n\t\t\t\t\t\t\t\t WHEN N'memory grant' THEN N'max_grant_kb'\n\t\t\t\t\t\t\t\t WHEN N'spills' THEN N'max_spills'\n                                 /* And now the averages */\n                                 WHEN N'avg cpu' THEN N'total_worker_time / execution_count'\n                                 WHEN N'avg reads' THEN N'total_logical_reads / execution_count'\n                                 WHEN N'avg writes' THEN N'total_logical_writes / execution_count'\n                                 WHEN N'avg duration' THEN N'total_elapsed_time / execution_count'\n\t\t\t\t\t\t\t\t WHEN N'avg memory grant' THEN N'CASE WHEN max_grant_kb = 0 THEN 0 ELSE max_grant_kb / execution_count END'\n                                 WHEN N'avg spills' THEN N'CASE WHEN total_spills = 0 THEN 0 ELSE total_spills / execution_count END'\n\t\t\t\t\t\t\t\t WHEN N'avg executions' THEN 'CASE WHEN execution_count = 0 THEN 0\n            WHEN COALESCE(CAST((CASE WHEN DATEDIFF(mi, cached_time, GETDATE()) > 0 AND execution_count > 1\n                          THEN DATEDIFF(mi, cached_time, GETDATE())\n                          ELSE NULL END) as MONEY), CAST((CASE WHEN DATEDIFF(mi, cached_time, last_execution_time) > 0 AND execution_count > 1\n                          THEN DATEDIFF(mi, cached_time, last_execution_time)\n                          ELSE Null END) as MONEY), 0) = 0 THEN 0\n            ELSE CAST((1.00 * execution_count / COALESCE(CAST((CASE WHEN DATEDIFF(mi, cached_time, GETDATE()) > 0 AND execution_count > 1\n                          THEN DATEDIFF(mi, cached_time, GETDATE())\n                          ELSE NULL END) as MONEY), CAST((CASE WHEN DATEDIFF(mi, cached_time, last_execution_time) > 0 AND execution_count > 1\n                          THEN DATEDIFF(mi, cached_time, last_execution_time)\n                          ELSE Null END) as MONEY))) AS money)\n            END '\n                END + N' DESC ' + @nl ;\n\n\n                          \nSET @body += N') AS qs \n\t   CROSS JOIN(SELECT SUM(execution_count) AS t_TotalExecs,\n                         SUM(CAST(total_elapsed_time AS BIGINT) / 1000.0) AS t_TotalElapsed,\n                         SUM(CAST(total_worker_time AS BIGINT) / 1000.0) AS t_TotalWorker,\n                         SUM(CAST(total_logical_reads AS BIGINT)) AS t_TotalReads,\n                         SUM(CAST(total_logical_writes AS BIGINT)) AS t_TotalWrites\n                  FROM   sys.#view#) AS t\n       CROSS APPLY sys.dm_exec_plan_attributes(qs.plan_handle) AS pa\n       CROSS APPLY sys.dm_exec_sql_text(qs.sql_handle) AS st\n       CROSS APPLY sys.dm_exec_query_plan(qs.plan_handle) AS qp ' + @nl ;\n\nSET @body_where += N'       AND pa.attribute = ' + QUOTENAME('dbid', @q ) + @nl ;\n\n\n\nSET @plans_triggers_select_list += N'\nSELECT TOP (@Top)\n       @@SPID ,\n       ''Procedure or Function: '' \n\t   + QUOTENAME(COALESCE(OBJECT_SCHEMA_NAME(qs.object_id, qs.database_id),''''))\n\t   + ''.''\n\t   + QUOTENAME(COALESCE(OBJECT_NAME(qs.object_id, qs.database_id),'''')) AS QueryType,\n       COALESCE(DB_NAME(database_id), CAST(pa.value AS sysname), ''-- N/A --'') AS DatabaseName,\n       (total_worker_time / 1000.0) / execution_count AS AvgCPU ,\n       (total_worker_time / 1000.0) AS TotalCPU ,\n       CASE WHEN total_worker_time = 0 THEN 0\n            WHEN COALESCE(age_minutes, DATEDIFF(mi, qs.cached_time, qs.last_execution_time), 0) = 0 THEN 0\n            ELSE CAST((total_worker_time / 1000.0) / COALESCE(age_minutes, DATEDIFF(mi, qs.cached_time, qs.last_execution_time)) AS MONEY)\n            END AS AverageCPUPerMinute ,\n       CASE WHEN t.t_TotalWorker = 0 THEN 0\n            ELSE CAST(ROUND(100.00 * (total_worker_time / 1000.0) / t.t_TotalWorker, 2) AS MONEY)\n            END AS PercentCPUByType,\n       CASE WHEN t.t_TotalElapsed = 0 THEN 0\n            ELSE CAST(ROUND(100.00 * (total_elapsed_time / 1000.0) / t.t_TotalElapsed, 2) AS MONEY)\n            END AS PercentDurationByType,\n       CASE WHEN t.t_TotalReads = 0 THEN 0\n            ELSE CAST(ROUND(100.00 * total_logical_reads / t.t_TotalReads, 2) AS MONEY)\n            END AS PercentReadsByType,\n       CASE WHEN t.t_TotalExecs = 0 THEN 0\n            ELSE CAST(ROUND(100.00 * execution_count / t.t_TotalExecs, 2) AS MONEY)\n            END AS PercentExecutionsByType,\n       (total_elapsed_time / 1000.0) / execution_count AS AvgDuration ,\n       (total_elapsed_time / 1000.0) AS TotalDuration ,\n       total_logical_reads / execution_count AS AvgReads ,\n       total_logical_reads AS TotalReads ,\n       execution_count AS ExecutionCount ,\n       CASE WHEN execution_count = 0 THEN 0\n            WHEN COALESCE(age_minutes, DATEDIFF(mi, qs.cached_time, qs.last_execution_time), 0) = 0 THEN 0\n            ELSE CAST((1.00 * execution_count / COALESCE(age_minutes, DATEDIFF(mi, qs.cached_time, qs.last_execution_time))) AS money)\n            END AS ExecutionsPerMinute ,\n       total_logical_writes AS TotalWrites ,\n       total_logical_writes / execution_count AS AverageWrites ,\n       CASE WHEN t.t_TotalWrites = 0 THEN 0\n            ELSE CAST(ROUND(100.00 * total_logical_writes / t.t_TotalWrites, 2) AS MONEY)\n            END AS PercentWritesByType,\n       CASE WHEN total_logical_writes = 0 THEN 0\n            WHEN COALESCE(age_minutes, DATEDIFF(mi, qs.cached_time, qs.last_execution_time), 0) = 0 THEN 0\n            ELSE CAST((1.00 * total_logical_writes / COALESCE(age_minutes, DATEDIFF(mi, qs.cached_time, qs.last_execution_time), 0)) AS money)\n            END AS WritesPerMinute,\n       qs.cached_time AS PlanCreationTime,\n       qs.last_execution_time AS LastExecutionTime,\n       NULL AS StatementStartOffset,\n       NULL AS StatementEndOffset,\n       NULL AS MinReturnedRows,\n       NULL AS MaxReturnedRows,\n       NULL AS AvgReturnedRows,\n       NULL AS TotalReturnedRows,\n       NULL AS LastReturnedRows,\n       NULL AS MinGrantKB,\n       NULL AS MaxGrantKB,\n       NULL AS MinUsedGrantKB, \n\t   NULL AS MaxUsedGrantKB,\n\t   NULL AS PercentMemoryGrantUsed, \n\t   NULL AS AvgMaxMemoryGrant,'\n\n\t\tIF @v >=14\n    BEGIN\n        RAISERROR(N'Getting spill information for newer versions of SQL', 0, 1) WITH NOWAIT;\n\t\tSET @plans_triggers_select_list += N'\n           min_spills AS MinSpills,\n           max_spills AS MaxSpills,\n           total_spills AS TotalSpills,\n\t\t   CAST(ISNULL(NULLIF(( total_spills * 1. ), 0) / NULLIF(execution_count, 0), 0) AS MONEY) AS AvgSpills, ';\n    END;\n    ELSE\n    BEGIN\n        RAISERROR(N'Substituting NULLs for spill columns in older versions of SQL', 0, 1) WITH NOWAIT;\n\t\tSET @plans_triggers_select_list += N'\n           NULL AS MinSpills,\n           NULL AS MaxSpills,\n           NULL AS TotalSpills, \n\t\t   NULL AS AvgSpills, ' ;\n    END;\t\t       \n\t     \n\t\tSET @plans_triggers_select_list +=  \n\t N'st.text AS QueryText ,\n       query_plan AS QueryPlan,\n       t.t_TotalWorker,\n       t.t_TotalElapsed,\n       t.t_TotalReads,\n       t.t_TotalExecs,\n       t.t_TotalWrites,\n       qs.sql_handle AS SqlHandle,\n       qs.plan_handle AS PlanHandle,\n       NULL AS QueryHash,\n       NULL AS QueryPlanHash,\n       qs.min_worker_time / 1000.0,\n       qs.max_worker_time / 1000.0,\n       CASE WHEN qp.query_plan.value(''declare namespace p=\"http://schemas.microsoft.com/sqlserver/2004/07/showplan\";max(//p:RelOp/@Parallel)'', ''float'')  > 0 THEN 1 ELSE 0 END,\n       qs.min_elapsed_time / 1000.0,\n       qs.max_elapsed_time / 1000.0,\n       age_minutes, \n       age_minutes_lifetime ';\n\n\nIF LEFT(@QueryFilter, 3) IN ('all', 'sta')\nBEGIN\n    SET @sql += @insert_list;\n    \n    SET @sql += N'\n    SELECT TOP (@Top)\n           @@SPID ,\n           ''Statement'' AS QueryType,\n           COALESCE(DB_NAME(CAST(pa.value AS INT)), ''-- N/A --'') AS DatabaseName,\n           (total_worker_time / 1000.0) / execution_count AS AvgCPU ,\n           (total_worker_time / 1000.0) AS TotalCPU ,\n           CASE WHEN total_worker_time = 0 THEN 0\n                WHEN COALESCE(age_minutes, DATEDIFF(mi, qs.creation_time, qs.last_execution_time), 0) = 0 THEN 0\n                ELSE CAST((total_worker_time / 1000.0) / COALESCE(age_minutes, DATEDIFF(mi, qs.creation_time, qs.last_execution_time)) AS MONEY)\n                END AS AverageCPUPerMinute ,\n           CASE WHEN t.t_TotalWorker = 0 THEN 0\n                ELSE CAST(ROUND(100.00 * total_worker_time / t.t_TotalWorker, 2) AS MONEY)\n                END AS PercentCPUByType,\n           CASE WHEN t.t_TotalElapsed = 0 THEN 0\n                ELSE CAST(ROUND(100.00 * total_elapsed_time / t.t_TotalElapsed, 2) AS MONEY)\n                END AS PercentDurationByType,\n           CASE WHEN t.t_TotalReads = 0 THEN 0\n                ELSE CAST(ROUND(100.00 * total_logical_reads / t.t_TotalReads, 2) AS MONEY)\n                END AS PercentReadsByType,\n           CAST(ROUND(100.00 * execution_count / t.t_TotalExecs, 2) AS MONEY) AS PercentExecutionsByType,\n           (total_elapsed_time / 1000.0) / execution_count AS AvgDuration ,\n           (total_elapsed_time / 1000.0) AS TotalDuration ,\n           total_logical_reads / execution_count AS AvgReads ,\n           total_logical_reads AS TotalReads ,\n           execution_count AS ExecutionCount ,\n           CASE WHEN execution_count = 0 THEN 0\n                WHEN COALESCE(age_minutes, DATEDIFF(mi, qs.creation_time, qs.last_execution_time), 0) = 0 THEN 0\n                ELSE CAST((1.00 * execution_count / COALESCE(age_minutes, DATEDIFF(mi, qs.creation_time, qs.last_execution_time))) AS money)\n                END AS ExecutionsPerMinute ,\n           total_logical_writes AS TotalWrites ,\n           total_logical_writes / execution_count AS AverageWrites ,\n           CASE WHEN t.t_TotalWrites = 0 THEN 0\n                ELSE CAST(ROUND(100.00 * total_logical_writes / t.t_TotalWrites, 2) AS MONEY)\n                END AS PercentWritesByType,\n           CASE WHEN total_logical_writes = 0 THEN 0\n                WHEN COALESCE(age_minutes, DATEDIFF(mi, qs.creation_time, qs.last_execution_time), 0) = 0 THEN 0\n                ELSE CAST((1.00 * total_logical_writes / COALESCE(age_minutes, DATEDIFF(mi, qs.creation_time, qs.last_execution_time), 0)) AS money)\n                END AS WritesPerMinute,\n           qs.creation_time AS PlanCreationTime,\n           qs.last_execution_time AS LastExecutionTime,\n           qs.statement_start_offset AS StatementStartOffset,\n           qs.statement_end_offset AS StatementEndOffset, ';\n    \n    IF (@v >= 11) OR (@v >= 10.5 AND @build >= 2500)\n    BEGIN\n        RAISERROR(N'Adding additional info columns for newer versions of SQL', 0, 1) WITH NOWAIT;\n\t\tSET @sql += N'\n           qs.min_rows AS MinReturnedRows,\n           qs.max_rows AS MaxReturnedRows,\n           CAST(qs.total_rows as MONEY) / execution_count AS AvgReturnedRows,\n           qs.total_rows AS TotalReturnedRows,\n           qs.last_rows AS LastReturnedRows, ' ;\n    END;\n    ELSE\n    BEGIN\n\t\tRAISERROR(N'Substituting NULLs for more info columns in older versions of SQL', 0, 1) WITH NOWAIT;\n        SET @sql += N'\n           NULL AS MinReturnedRows,\n           NULL AS MaxReturnedRows,\n           NULL AS AvgReturnedRows,\n           NULL AS TotalReturnedRows,\n           NULL AS LastReturnedRows, ' ;\n    END;\n\n    IF (@v = 11 AND @build >= 6020) OR (@v = 12 AND @build >= 5000) OR (@v = 13 AND @build >= 1601)\n\n    BEGIN\n        RAISERROR(N'Getting memory grant information for newer versions of SQL', 0, 1) WITH NOWAIT;\n\t\tSET @sql += N'\n           min_grant_kb AS MinGrantKB,\n           max_grant_kb AS MaxGrantKB,\n           min_used_grant_kb AS MinUsedGrantKB,\n           max_used_grant_kb AS MaxUsedGrantKB,\n           CAST(ISNULL(NULLIF(( max_used_grant_kb * 1.00 ), 0) / NULLIF(min_grant_kb, 0), 0) * 100. AS MONEY) AS PercentMemoryGrantUsed,\n\t\t   CAST(ISNULL(NULLIF(( max_grant_kb * 1. ), 0) / NULLIF(execution_count, 0), 0) AS MONEY) AS AvgMaxMemoryGrant, ';\n    END;\n    ELSE\n    BEGIN\n        RAISERROR(N'Substituting NULLs for memory grant columns in older versions of SQL', 0, 1) WITH NOWAIT;\n\t\tSET @sql += N'\n           NULL AS MinGrantKB,\n           NULL AS MaxGrantKB,\n           NULL AS MinUsedGrantKB, \n\t\t   NULL AS MaxUsedGrantKB,\n\t\t   NULL AS PercentMemoryGrantUsed, \n\t\t   NULL AS AvgMaxMemoryGrant, ' ;\n    END;\n\n\t\tIF @v >=14\n    BEGIN\n        RAISERROR(N'Getting spill information for newer versions of SQL', 0, 1) WITH NOWAIT;\n\t\tSET @sql += N'\n           min_spills AS MinSpills,\n           max_spills AS MaxSpills,\n           total_spills AS TotalSpills,\n\t\t   CAST(ISNULL(NULLIF(( total_spills * 1. ), 0) / NULLIF(execution_count, 0), 0) AS MONEY) AS AvgSpills,';\n    END;\n    ELSE\n    BEGIN\n        RAISERROR(N'Substituting NULLs for spill columns in older versions of SQL', 0, 1) WITH NOWAIT;\n\t\tSET @sql += N'\n           NULL AS MinSpills,\n           NULL AS MaxSpills,\n           NULL AS TotalSpills, \n\t\t   NULL AS AvgSpills, ' ;\n    END;\t\t       \n    \n    SET @sql += N'\n           SUBSTRING(st.text, ( qs.statement_start_offset / 2 ) + 1, ( ( CASE qs.statement_end_offset\n                                                                            WHEN -1 THEN DATALENGTH(st.text)\n                                                                            ELSE qs.statement_end_offset\n                                                                          END - qs.statement_start_offset ) / 2 ) + 1) AS QueryText ,\n           query_plan AS QueryPlan,\n           t.t_TotalWorker,\n           t.t_TotalElapsed,\n           t.t_TotalReads,\n           t.t_TotalExecs,\n           t.t_TotalWrites,\n           qs.sql_handle AS SqlHandle,\n           qs.plan_handle AS PlanHandle,\n           qs.query_hash AS QueryHash,\n           qs.query_plan_hash AS QueryPlanHash,\n           qs.min_worker_time / 1000.0,\n           qs.max_worker_time / 1000.0,\n           CASE WHEN qp.query_plan.value(''declare namespace p=\"http://schemas.microsoft.com/sqlserver/2004/07/showplan\";max(//p:RelOp/@Parallel)'', ''float'')  > 0 THEN 1 ELSE 0 END,\n           qs.min_elapsed_time / 1000.0,\n           qs.max_worker_time  / 1000.0,\n           age_minutes,\n           age_minutes_lifetime ';\n    \n    SET @sql += REPLACE(REPLACE(@body, '#view#', 'dm_exec_query_stats'), 'cached_time', 'creation_time') ;\n    \n    SET @sql += REPLACE(@body_where, 'cached_time', 'creation_time') ;\n    \n    SET @sql += @body_order + @nl + @nl + @nl;\n\n    IF @SortOrder = 'compiles'\n    BEGIN\n        RAISERROR(N'Sorting by compiles', 0, 1) WITH NOWAIT;\n\t\tSET @sql = REPLACE(@sql, '#sortable#', 'creation_time');\n    END;\nEND;\n\n\nIF (@QueryFilter = 'all' \n   AND (SELECT COUNT(*) FROM #only_query_hashes) = 0 \n   AND (SELECT COUNT(*) FROM #ignore_query_hashes) = 0) \n   AND (@SortOrder NOT IN ('memory grant', 'avg memory grant'))\n   OR (LEFT(@QueryFilter, 3) = 'pro')\nBEGIN\n    SET @sql += @insert_list;\n    SET @sql += REPLACE(@plans_triggers_select_list, '#query_type#', 'Stored Procedure') ;\n\n    SET @sql += REPLACE(@body, '#view#', 'dm_exec_procedure_stats') ; \n    SET @sql += @body_where ;\n\n    IF @IgnoreSystemDBs = 1\n       SET @sql += N' AND COALESCE(DB_NAME(database_id), CAST(pa.value AS sysname), '''') NOT IN (''master'', ''model'', ''msdb'', ''tempdb'', ''32767'') AND COALESCE(DB_NAME(database_id), CAST(pa.value AS sysname), '''') NOT IN (SELECT name FROM sys.databases WHERE is_distributor = 1)' + @nl ;\n\n    SET @sql += @body_order + @nl + @nl + @nl ;\nEND;\n\nIF (@v >= 13\n   AND @QueryFilter = 'all'\n   AND (SELECT COUNT(*) FROM #only_query_hashes) = 0 \n   AND (SELECT COUNT(*) FROM #ignore_query_hashes) = 0) \n   AND (@SortOrder NOT IN ('memory grant', 'avg memory grant'))\n   AND (@SortOrder NOT IN ('spills', 'avg spills'))\n   OR (LEFT(@QueryFilter, 3) = 'fun')\nBEGIN\n    SET @sql += @insert_list;\n    SET @sql += REPLACE(REPLACE(@plans_triggers_select_list, '#query_type#', 'Function')\n\t\t\t, N'\n           min_spills AS MinSpills,\n           max_spills AS MaxSpills,\n           total_spills AS TotalSpills,\n\t\t   CAST(ISNULL(NULLIF(( total_spills * 1. ), 0) / NULLIF(execution_count, 0), 0) AS MONEY) AS AvgSpills, ', \n\t\t   N'\n           NULL AS MinSpills,\n           NULL AS MaxSpills,\n           NULL AS TotalSpills, \n\t\t   NULL AS AvgSpills, ') ;\n\n    SET @sql += REPLACE(@body, '#view#', 'dm_exec_function_stats') ; \n    SET @sql += @body_where ;\n\n    IF @IgnoreSystemDBs = 1\n       SET @sql += N' AND COALESCE(DB_NAME(database_id), CAST(pa.value AS sysname), '''') NOT IN (''master'', ''model'', ''msdb'', ''tempdb'', ''32767'') AND COALESCE(DB_NAME(database_id), CAST(pa.value AS sysname), '''') NOT IN (SELECT name FROM sys.databases WHERE is_distributor = 1)' + @nl ;\n\n    SET @sql += @body_order + @nl + @nl + @nl ;\nEND;\n\n\n/*******************************************************************************\n *\n * Because the trigger execution count in SQL Server 2008R2 and earlier is not\n * correct, we ignore triggers for these versions of SQL Server. If you'd like\n * to include trigger numbers, just know that the ExecutionCount,\n * PercentExecutions, and ExecutionsPerMinute are wildly inaccurate for\n * triggers on these versions of SQL Server.\n *\n * This is why we can't have nice things.\n *\n ******************************************************************************/\nIF (@UseTriggersAnyway = 1 OR @v >= 11)\n   AND (SELECT COUNT(*) FROM #only_query_hashes) = 0\n   AND (SELECT COUNT(*) FROM #ignore_query_hashes) = 0\n   AND (@QueryFilter = 'all')\n   AND (@SortOrder NOT IN ('memory grant', 'avg memory grant'))\nBEGIN\n   RAISERROR (N'Adding SQL to collect trigger stats.',0,1) WITH NOWAIT;\n\n   /* Trigger level information from the plan cache */\n   SET @sql += @insert_list ;\n\n   SET @sql += REPLACE(@plans_triggers_select_list, '#query_type#', 'Trigger') ;\n\n   SET @sql += REPLACE(@body, '#view#', 'dm_exec_trigger_stats') ;\n\n   SET @sql += @body_where ;\n\n   IF @IgnoreSystemDBs = 1\n      SET @sql += N' AND COALESCE(DB_NAME(database_id), CAST(pa.value AS sysname), '''') NOT IN (''master'', ''model'', ''msdb'', ''tempdb'', ''32767'') AND COALESCE(DB_NAME(database_id), CAST(pa.value AS sysname), '''') NOT IN (SELECT name FROM sys.databases WHERE is_distributor = 1)' + @nl ;\n   \n   SET @sql += @body_order + @nl + @nl + @nl ;\nEND;\n\nDECLARE @sort NVARCHAR(MAX);\n\nSELECT @sort = CASE @SortOrder  WHEN N'cpu' THEN N'total_worker_time'\n                                WHEN N'reads' THEN N'total_logical_reads'\n                                WHEN N'writes' THEN N'total_logical_writes'\n                                WHEN N'duration' THEN N'total_elapsed_time'\n                                WHEN N'executions' THEN N'execution_count'\n                                WHEN N'compiles' THEN N'cached_time'\n\t\t\t\t\t\t\t\tWHEN N'memory grant' THEN N'max_grant_kb'\n\t\t\t\t\t\t\t\tWHEN N'spills' THEN N'max_spills'\n                                /* And now the averages */\n                                WHEN N'avg cpu' THEN N'total_worker_time / execution_count'\n                                WHEN N'avg reads' THEN N'total_logical_reads / execution_count'\n                                WHEN N'avg writes' THEN N'total_logical_writes / execution_count'\n                                WHEN N'avg duration' THEN N'total_elapsed_time / execution_count'\n\t\t\t\t\t\t\t\tWHEN N'avg memory grant' THEN N'CASE WHEN max_grant_kb = 0 THEN 0 ELSE max_grant_kb / execution_count END'\n                                WHEN N'avg spills' THEN N'CASE WHEN total_spills = 0 THEN 0 ELSE total_spills / execution_count END'\n                                WHEN N'avg executions' THEN N'CASE WHEN execution_count = 0 THEN 0\n            WHEN COALESCE(age_minutes, age_minutes_lifetime, 0) = 0 THEN 0\n            ELSE CAST((1.00 * execution_count / COALESCE(age_minutes, age_minutes_lifetime)) AS money)\n            END'\n               END ;\n\nSELECT @sql = REPLACE(@sql, '#sortable#', @sort);\n\nSET @sql += N'\nINSERT INTO #p (SqlHandle, TotalCPU, TotalReads, TotalDuration, TotalWrites, ExecutionCount)\nSELECT  SqlHandle,\n        TotalCPU,\n        TotalReads,\n        TotalDuration,\n        TotalWrites,\n        ExecutionCount\nFROM    (SELECT  SqlHandle,\n                 TotalCPU,\n                 TotalReads,\n                 TotalDuration,\n                 TotalWrites,\n                 ExecutionCount,\n                 ROW_NUMBER() OVER (PARTITION BY SqlHandle ORDER BY #sortable# DESC) AS rn\n         FROM    ##bou_BlitzCacheProcs) AS x\nWHERE x.rn = 1\nOPTION (RECOMPILE);\n';\n\nSELECT @sort = CASE @SortOrder  WHEN N'cpu' THEN N'TotalCPU'\n                                WHEN N'reads' THEN N'TotalReads'\n                                WHEN N'writes' THEN N'TotalWrites'\n                                WHEN N'duration' THEN N'TotalDuration'\n                                WHEN N'executions' THEN N'ExecutionCount'\n                                WHEN N'compiles' THEN N'PlanCreationTime'\n\t\t\t\t\t\t\t\tWHEN N'memory grant' THEN N'MaxGrantKB'\n\t\t\t\t\t\t\t\tWHEN N'spills' THEN N'MaxSpills'\n                                /* And now the averages */\n                                WHEN N'avg cpu' THEN N'TotalCPU / ExecutionCount'\n                                WHEN N'avg reads' THEN N'TotalReads / ExecutionCount'\n                                WHEN N'avg writes' THEN N'TotalWrites / ExecutionCount'\n                                WHEN N'avg duration' THEN N'TotalDuration / ExecutionCount'\n\t\t\t\t\t\t\t\tWHEN N'avg memory grant' THEN N'AvgMaxMemoryGrant'\n                                WHEN N'avg spills' THEN N'AvgSpills'\n                                WHEN N'avg executions' THEN N'CASE WHEN ExecutionCount = 0 THEN 0\n            WHEN COALESCE(age_minutes, age_minutes_lifetime, 0) = 0 THEN 0\n            ELSE CAST((1.00 * ExecutionCount / COALESCE(age_minutes, age_minutes_lifetime)) AS money)\n            END'\n               END ;\n\nSELECT @sql = REPLACE(@sql, '#sortable#', @sort);\n\n\nIF @Debug = 1\n    BEGIN\n        PRINT SUBSTRING(@sql, 0, 4000);\n        PRINT SUBSTRING(@sql, 4000, 8000);\n        PRINT SUBSTRING(@sql, 8000, 12000);\n        PRINT SUBSTRING(@sql, 12000, 16000);\n        PRINT SUBSTRING(@sql, 16000, 20000);\n        PRINT SUBSTRING(@sql, 20000, 24000);\n        PRINT SUBSTRING(@sql, 24000, 28000);\n        PRINT SUBSTRING(@sql, 28000, 32000);\n        PRINT SUBSTRING(@sql, 32000, 36000);\n        PRINT SUBSTRING(@sql, 36000, 40000);\n    END;\n\nIF @Reanalyze = 0\nBEGIN\n    RAISERROR('Collecting execution plan information.', 0, 1) WITH NOWAIT;\n\n    EXEC sp_executesql @sql, N'@Top INT, @min_duration INT, @min_back INT', @Top, @DurationFilter_i, @MinutesBack;\nEND;\n\n\n/* Update ##bou_BlitzCacheProcs to get Stored Proc info \n * This should get totals for all statements in a Stored Proc\n */\nRAISERROR(N'Attempting to aggregate stored proc info from separate statements', 0, 1) WITH NOWAIT;\n;WITH agg AS (\n    SELECT \n        b.SqlHandle,\n        SUM(b.MinReturnedRows) AS MinReturnedRows,\n        SUM(b.MaxReturnedRows) AS MaxReturnedRows,\n        SUM(b.AverageReturnedRows) AS AverageReturnedRows,\n        SUM(b.TotalReturnedRows) AS TotalReturnedRows,\n        SUM(b.LastReturnedRows) AS LastReturnedRows,\n\t\tSUM(b.MinGrantKB) AS MinGrantKB,\n\t\tSUM(b.MaxGrantKB) AS MaxGrantKB,\n\t\tSUM(b.MinUsedGrantKB) AS MinUsedGrantKB,\n\t\tSUM(b.MaxUsedGrantKB) AS MaxUsedGrantKB \n    FROM ##bou_BlitzCacheProcs b\n    WHERE b.SPID = @@SPID\n\tAND b.QueryHash IS NOT NULL\n    GROUP BY b.SqlHandle\n)\nUPDATE b\n    SET \n        b.MinReturnedRows     = b2.MinReturnedRows,\n        b.MaxReturnedRows     = b2.MaxReturnedRows,\n        b.AverageReturnedRows = b2.AverageReturnedRows,\n        b.TotalReturnedRows   = b2.TotalReturnedRows,\n        b.LastReturnedRows    = b2.LastReturnedRows,\n\t\tb.MinGrantKB\t\t  = b2.MinGrantKB,\n\t\tb.MaxGrantKB\t\t  = b2.MaxGrantKB,\n\t\tb.MinUsedGrantKB\t  = b2.MinUsedGrantKB,\n\t\tb.MaxUsedGrantKB      = b2.MaxUsedGrantKB\nFROM ##bou_BlitzCacheProcs b\nJOIN agg b2\nON b2.SqlHandle = b.SqlHandle\nWHERE b.QueryHash IS NULL\nAND b.SPID = @@SPID\nOPTION (RECOMPILE) ;\n\n/* Compute the total CPU, etc across our active set of the plan cache.\n * Yes, there's a flaw - this doesn't include anything outside of our @Top\n * metric.\n */\nRAISERROR('Computing CPU, duration, read, and write metrics', 0, 1) WITH NOWAIT;\nDECLARE @total_duration BIGINT,\n        @total_cpu BIGINT,\n        @total_reads BIGINT,\n        @total_writes BIGINT,\n        @total_execution_count BIGINT;\n\nSELECT  @total_cpu = SUM(TotalCPU),\n        @total_duration = SUM(TotalDuration),\n        @total_reads = SUM(TotalReads),\n        @total_writes = SUM(TotalWrites),\n        @total_execution_count = SUM(ExecutionCount)\nFROM    #p\nOPTION (RECOMPILE) ;\n\nDECLARE @cr NVARCHAR(1) = NCHAR(13);\nDECLARE @lf NVARCHAR(1) = NCHAR(10);\nDECLARE @tab NVARCHAR(1) = NCHAR(9);\n\n/* Update CPU percentage for stored procedures */\nRAISERROR(N'Update CPU percentage for stored procedures', 0, 1) WITH NOWAIT;\nUPDATE ##bou_BlitzCacheProcs\nSET     PercentCPU = y.PercentCPU,\n        PercentDuration = y.PercentDuration,\n        PercentReads = y.PercentReads,\n        PercentWrites = y.PercentWrites,\n        PercentExecutions = y.PercentExecutions,\n        ExecutionsPerMinute = y.ExecutionsPerMinute,\n        /* Strip newlines and tabs. Tabs are replaced with multiple spaces\n           so that the later whitespace trim will completely eliminate them\n         */\n        QueryText = REPLACE(REPLACE(REPLACE(QueryText, @cr, ' '), @lf, ' '), @tab, '  ')\nFROM (\n    SELECT  PlanHandle,\n            CASE @total_cpu WHEN 0 THEN 0\n                 ELSE CAST((100. * TotalCPU) / @total_cpu AS MONEY) END AS PercentCPU,\n            CASE @total_duration WHEN 0 THEN 0\n                 ELSE CAST((100. * TotalDuration) / @total_duration AS MONEY) END AS PercentDuration,\n            CASE @total_reads WHEN 0 THEN 0\n                 ELSE CAST((100. * TotalReads) / @total_reads AS MONEY) END AS PercentReads,\n            CASE @total_writes WHEN 0 THEN 0\n                 ELSE CAST((100. * TotalWrites) / @total_writes AS MONEY) END AS PercentWrites,\n            CASE @total_execution_count WHEN 0 THEN 0\n                 ELSE CAST((100. * ExecutionCount) / @total_execution_count AS MONEY) END AS PercentExecutions,\n            CASE DATEDIFF(mi, PlanCreationTime, LastExecutionTime)\n                WHEN 0 THEN 0\n                ELSE CAST((1.00 * ExecutionCount / DATEDIFF(mi, PlanCreationTime, LastExecutionTime)) AS MONEY)\n            END AS ExecutionsPerMinute\n    FROM (\n        SELECT  PlanHandle,\n                TotalCPU,\n                TotalDuration,\n                TotalReads,\n                TotalWrites,\n                ExecutionCount,\n                PlanCreationTime,\n                LastExecutionTime\n        FROM    ##bou_BlitzCacheProcs\n        WHERE   PlanHandle IS NOT NULL\n\t\tAND SPID = @@SPID\n        GROUP BY PlanHandle,\n                TotalCPU,\n                TotalDuration,\n                TotalReads,\n                TotalWrites,\n                ExecutionCount,\n                PlanCreationTime,\n                LastExecutionTime\n    ) AS x\n) AS y\nWHERE ##bou_BlitzCacheProcs.PlanHandle = y.PlanHandle\n      AND ##bou_BlitzCacheProcs.PlanHandle IS NOT NULL\n\t  AND ##bou_BlitzCacheProcs.SPID = @@SPID\nOPTION (RECOMPILE) ;\n\n\nRAISERROR(N'Gather percentage information from grouped results', 0, 1) WITH NOWAIT;\nUPDATE ##bou_BlitzCacheProcs\nSET     PercentCPU = y.PercentCPU,\n        PercentDuration = y.PercentDuration,\n        PercentReads = y.PercentReads,\n        PercentWrites = y.PercentWrites,\n        PercentExecutions = y.PercentExecutions,\n        ExecutionsPerMinute = y.ExecutionsPerMinute,\n        /* Strip newlines and tabs. Tabs are replaced with multiple spaces\n           so that the later whitespace trim will completely eliminate them\n         */\n        QueryText = REPLACE(REPLACE(REPLACE(QueryText, @cr, ' '), @lf, ' '), @tab, '  ')\nFROM (\n    SELECT  DatabaseName,\n            SqlHandle,\n            QueryHash,\n            CASE @total_cpu WHEN 0 THEN 0\n                 ELSE CAST((100. * TotalCPU) / @total_cpu AS MONEY) END AS PercentCPU,\n            CASE @total_duration WHEN 0 THEN 0\n                 ELSE CAST((100. * TotalDuration) / @total_duration AS MONEY) END AS PercentDuration,\n            CASE @total_reads WHEN 0 THEN 0\n                 ELSE CAST((100. * TotalReads) / @total_reads AS MONEY) END AS PercentReads,\n            CASE @total_writes WHEN 0 THEN 0\n                 ELSE CAST((100. * TotalWrites) / @total_writes AS MONEY) END AS PercentWrites,\n            CASE @total_execution_count WHEN 0 THEN 0\n                 ELSE CAST((100. * ExecutionCount) / @total_execution_count AS MONEY) END AS PercentExecutions,\n            CASE  DATEDIFF(mi, PlanCreationTime, LastExecutionTime)\n                WHEN 0 THEN 0\n                ELSE CAST((1.00 * ExecutionCount / DATEDIFF(mi, PlanCreationTime, LastExecutionTime)) AS MONEY)\n            END AS ExecutionsPerMinute\n    FROM (\n        SELECT  DatabaseName,\n                SqlHandle,\n                QueryHash,\n                TotalCPU,\n                TotalDuration,\n                TotalReads,\n                TotalWrites,\n                ExecutionCount,\n                PlanCreationTime,\n                LastExecutionTime\n        FROM    ##bou_BlitzCacheProcs\n\t\tWHERE SPID = @@SPID\n        GROUP BY DatabaseName,\n                SqlHandle,\n                QueryHash,\n                TotalCPU,\n                TotalDuration,\n                TotalReads,\n                TotalWrites,\n                ExecutionCount,\n                PlanCreationTime,\n                LastExecutionTime\n    ) AS x\n) AS y\nWHERE   ##bou_BlitzCacheProcs.SqlHandle = y.SqlHandle\n        AND ##bou_BlitzCacheProcs.QueryHash = y.QueryHash\n        AND ##bou_BlitzCacheProcs.DatabaseName = y.DatabaseName\n        AND ##bou_BlitzCacheProcs.PlanHandle IS NULL\nOPTION (RECOMPILE) ;\n\n\n\n/* Testing using XML nodes to speed up processing */\nRAISERROR(N'Begin XML nodes processing', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\nSELECT  QueryHash ,\n        SqlHandle ,\n\t\tPlanHandle,\n        q.n.query('.') AS statement\nINTO    #statements\nFROM    ##bou_BlitzCacheProcs p\n        CROSS APPLY p.QueryPlan.nodes('//p:StmtSimple') AS q(n) \nWHERE p.SPID = @@SPID\nOPTION (RECOMPILE) ;\n\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\nINSERT #statements\nSELECT  QueryHash ,\n        SqlHandle ,\n\t\tPlanHandle,\n        q.n.query('.') AS statement\nFROM    ##bou_BlitzCacheProcs p\n        CROSS APPLY p.QueryPlan.nodes('//p:StmtCursor') AS q(n) \nWHERE p.SPID = @@SPID\nOPTION (RECOMPILE) ;\n\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\nSELECT  QueryHash ,\n        SqlHandle ,\n        q.n.query('.') AS query_plan\nINTO    #query_plan\nFROM    #statements p\n        CROSS APPLY p.statement.nodes('//p:QueryPlan') AS q(n) \nOPTION (RECOMPILE) ;\n\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\nSELECT  QueryHash ,\n        SqlHandle ,\n        q.n.query('.') AS relop\nINTO    #relop\nFROM    #query_plan p\n        CROSS APPLY p.query_plan.nodes('//p:RelOp') AS q(n) \nOPTION (RECOMPILE) ;\n\n\n\n-- high level plan stuff\nRAISERROR(N'Gathering high level plan information', 0, 1) WITH NOWAIT;\nUPDATE  ##bou_BlitzCacheProcs\nSET     NumberOfDistinctPlans = distinct_plan_count,\n        NumberOfPlans = number_of_plans ,\n        plan_multiple_plans = CASE WHEN distinct_plan_count < number_of_plans THEN 1 END\nFROM (\n        SELECT  COUNT(DISTINCT QueryHash) AS distinct_plan_count,\n                COUNT(QueryHash) AS number_of_plans,\n                QueryHash\n        FROM    ##bou_BlitzCacheProcs\n\t\tWHERE SPID = @@SPID\n        GROUP BY QueryHash\n) AS x\nWHERE ##bou_BlitzCacheProcs.QueryHash = x.QueryHash\nOPTION (RECOMPILE) ;\n\n-- statement level checks\nRAISERROR(N'Performing compile timeout checks', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\nUPDATE b\nSET     compile_timeout = 1 \nFROM    #statements s\nJOIN ##bou_BlitzCacheProcs b\nON  s.QueryHash = b.QueryHash\nAND SPID = @@SPID\nWHERE statement.exist('/p:StmtSimple/@StatementOptmEarlyAbortReason[.=\"TimeOut\"]') = 1\nOPTION (RECOMPILE);\n\nRAISERROR(N'Performing compile memory limit exceeded checks', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\nUPDATE b\nSET     compile_memory_limit_exceeded = 1 \nFROM    #statements s\nJOIN ##bou_BlitzCacheProcs b\nON  s.QueryHash = b.QueryHash\nAND SPID = @@SPID\nWHERE statement.exist('/p:StmtSimple/@StatementOptmEarlyAbortReason[.=\"MemoryLimitExceeded\"]') = 1\nOPTION (RECOMPILE);\n\nRAISERROR(N'Performing unparameterized query checks', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p),\nunparameterized_query AS (\n\tSELECT s.QueryHash,\n\t\t   unparameterized_query = CASE WHEN statement.exist('//p:StmtSimple[@StatementOptmLevel[.=\"FULL\"]]/p:QueryPlan/p:ParameterList') = 1 AND\n                                             statement.exist('//p:StmtSimple[@StatementOptmLevel[.=\"FULL\"]]/p:QueryPlan/p:ParameterList/p:ColumnReference') = 0 THEN 1\n                                        WHEN statement.exist('//p:StmtSimple[@StatementOptmLevel[.=\"FULL\"]]/p:QueryPlan/p:ParameterList') = 0 AND\n                                             statement.exist('//p:StmtSimple[@StatementOptmLevel[.=\"FULL\"]]/*/p:RelOp/descendant::p:ScalarOperator/p:Identifier/p:ColumnReference[contains(@Column, \"@\")]') = 1 THEN 1\n                                   END\n\tFROM #statements AS s\n\t\t\t)\nUPDATE b\nSET b.unparameterized_query = u.unparameterized_query\nFROM ##bou_BlitzCacheProcs b\nJOIN unparameterized_query u\nON  u.QueryHash = b.QueryHash\nAND SPID = @@SPID\nWHERE u.unparameterized_query = 1\nOPTION (RECOMPILE);\n\n\nRAISERROR(N'Performing index DML checks', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p),\nindex_dml AS (\n\tSELECT\ts.QueryHash,\t\n\t\t\tindex_dml = CASE WHEN statement.exist('//p:StmtSimple/@StatementType[.=\"CREATE INDEX\"]') = 1 THEN 1\n\t\t\t\t\t\t\t WHEN statement.exist('//p:StmtSimple/@StatementType[.=\"DROP INDEX\"]') = 1 THEN 1\n\t\t\t\t\t\tEND\n\tFROM    #statements s\n\t\t\t)\n\tUPDATE b\n\t\tSET b.index_dml = i.index_dml\n\tFROM ##bou_BlitzCacheProcs AS b\n\tJOIN index_dml i\n\tON i.QueryHash = b.QueryHash\n\tWHERE i.index_dml = 1\n\tAND b.SPID = @@SPID\n\tOPTION (RECOMPILE);\n\nRAISERROR(N'Performing table DML checks', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p),\ntable_dml AS (\n\tSELECT s.QueryHash,\t\t\t\n\t\t   table_dml = CASE WHEN statement.exist('//p:StmtSimple/@StatementType[.=\"CREATE TABLE\"]') = 1 THEN 1\n\t\t\t\t\t\t\tWHEN statement.exist('//p:StmtSimple/@StatementType[.=\"DROP OBJECT\"]') = 1 THEN 1\n\t\t\t\t\t\t\tEND\n\t\t FROM #statements AS s\n\t\t )\n\tUPDATE b\n\t\tSET b.table_dml = t.table_dml\n\tFROM ##bou_BlitzCacheProcs AS b\n\tJOIN table_dml t\n\tON t.QueryHash = b.QueryHash\n\tWHERE t.table_dml = 1\n\tAND b.SPID = @@SPID\n\tOPTION (RECOMPILE);\n\n\nRAISERROR(N'Gathering row estimates', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES ('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p )\nINSERT INTO #est_rows\nSELECT DISTINCT \n\t\tCONVERT(BINARY(8), RIGHT('0000000000000000' + SUBSTRING(c.n.value('@QueryHash', 'VARCHAR(18)'), 3, 18), 16), 2) AS QueryHash,\n\t\tc.n.value('(/p:StmtSimple/@StatementEstRows)[1]', 'FLOAT') AS estimated_rows\nFROM   #statements AS s\nCROSS APPLY s.statement.nodes('/p:StmtSimple') AS c(n)\nWHERE  c.n.exist('/p:StmtSimple[@StatementEstRows > 0]') = 1;\n\n\tUPDATE b\n\t\tSET b.estimated_rows = er.estimated_rows\n\tFROM ##bou_BlitzCacheProcs AS b\n\tJOIN #est_rows er\n\tON er.QueryHash = b.QueryHash\n\tWHERE b.SPID = @@SPID\n\tAND b.QueryType = 'Statement'\n\tOPTION (RECOMPILE);\n\nRAISERROR(N'Gathering trivial plans', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES ( 'http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p )\nUPDATE b\nSET b.is_trivial = 1\nFROM ##bou_BlitzCacheProcs AS b\nJOIN (\nSELECT  s.SqlHandle\nFROM    #statements AS s\nJOIN    (   SELECT  r.SqlHandle\n            FROM    #relop AS r\n            WHERE   r.relop.exist('//p:RelOp[contains(@LogicalOp, \"Scan\")]') = 1 ) AS r\n    ON r.SqlHandle = s.SqlHandle\nWHERE   s.statement.exist('//p:StmtSimple[@StatementOptmLevel[.=\"TRIVIAL\"]]/p:QueryPlan/p:ParameterList') = 1\n) AS s\nON b.SqlHandle = s.SqlHandle\nOPTION (RECOMPILE);\n\n\n--Gather costs\nRAISERROR(N'Gathering statement costs', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\nINSERT INTO #plan_cost\nSELECT  DISTINCT\n\t\tstatement.value('sum(/p:StmtSimple/@StatementSubTreeCost)', 'float') QueryPlanCost,\n\t\ts.SqlHandle,\n\t\tCONVERT(BINARY(8), RIGHT('0000000000000000' + SUBSTRING(q.n.value('@QueryHash', 'VARCHAR(18)'), 3, 18), 16), 2) AS QueryHash,\n\t\tCONVERT(BINARY(8), RIGHT('0000000000000000' + SUBSTRING(q.n.value('@QueryPlanHash', 'VARCHAR(18)'), 3, 18), 16), 2) AS QueryPlanHash\nFROM #statements s\nCROSS APPLY s.statement.nodes('/p:StmtSimple') AS q(n)\nWHERE statement.value('sum(/p:StmtSimple/@StatementSubTreeCost)', 'float') > 0\nOPTION (RECOMPILE);\n\nRAISERROR(N'Updating statement costs', 0, 1) WITH NOWAIT;\nWITH pc AS (\n\tSELECT SUM(DISTINCT pc.QueryPlanCost) AS QueryPlanCostSum, pc.QueryHash, pc.QueryPlanHash\n\tFROM #plan_cost AS pc\n\tGROUP BY pc.QueryHash, pc.QueryPlanHash\n)\n\tUPDATE b\n\t\tSET b.QueryPlanCost = ISNULL(pc.QueryPlanCostSum, 0)\n\t\tFROM pc\n\t\tJOIN ##bou_BlitzCacheProcs b\n\t\tON b.QueryPlanHash = pc.QueryPlanHash\n\t\tOR b.QueryHash = pc.QueryHash\n\t\tWHERE b.QueryType NOT LIKE '%Procedure%'\n\tOPTION (RECOMPILE);\n\nIF EXISTS (\nSELECT 1\nFROM ##bou_BlitzCacheProcs AS b\nWHERE b.QueryType LIKE 'Procedure%'\n)\n\nBEGIN\n\nRAISERROR(N'Gathering stored procedure costs', 0, 1) WITH NOWAIT;\n;WITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\n, QueryCost AS (\n  SELECT\n\tDISTINCT\n    statement.value('sum(/p:StmtSimple/@StatementSubTreeCost)', 'float') AS SubTreeCost,\n    s.PlanHandle,\n\ts.SqlHandle\n  FROM #statements AS s\n  WHERE PlanHandle IS NOT NULL\n)\n, QueryCostUpdate AS (\n  SELECT\n\tSUM(qc.SubTreeCost) OVER (PARTITION BY SqlHandle, PlanHandle) PlanTotalQuery,\n    qc.PlanHandle,\n    qc.SqlHandle\n  FROM QueryCost qc\n)\nINSERT INTO #proc_costs\nSELECT qcu.PlanTotalQuery, PlanHandle, SqlHandle\nFROM QueryCostUpdate AS qcu\nOPTION (RECOMPILE);\n\n\nUPDATE b\n    SET b.QueryPlanCost = ca.PlanTotalQuery\nFROM ##bou_BlitzCacheProcs AS b\nCROSS APPLY (\n\t\tSELECT TOP 1 PlanTotalQuery \n\t\tFROM #proc_costs qcu \n\t\tWHERE qcu.PlanHandle = b.PlanHandle \n\t\tORDER BY PlanTotalQuery DESC\n) ca\nWHERE b.QueryType LIKE 'Procedure%'\nAND b.SPID = @@SPID\nOPTION (RECOMPILE);\n\nEND;\n\nUPDATE b\nSET b.QueryPlanCost = 0.0\nFROM ##bou_BlitzCacheProcs b\nWHERE b.QueryPlanCost IS NULL\nAND b.SPID = @@SPID\nOPTION (RECOMPILE);\n\nRAISERROR(N'Checking for plan warnings', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\nUPDATE  ##bou_BlitzCacheProcs\nSET plan_warnings = 1\nFROM    #query_plan qp\nWHERE   qp.SqlHandle = ##bou_BlitzCacheProcs.SqlHandle\nAND SPID = @@SPID\nAND query_plan.exist('/p:QueryPlan/p:Warnings') = 1\nOPTION (RECOMPILE);\n\nRAISERROR(N'Checking for implicit conversion', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\nUPDATE  ##bou_BlitzCacheProcs\nSET implicit_conversions = 1\nFROM    #query_plan qp\nWHERE   qp.SqlHandle = ##bou_BlitzCacheProcs.SqlHandle\nAND SPID = @@SPID\nAND query_plan.exist('/p:QueryPlan/p:Warnings/p:PlanAffectingConvert/@Expression[contains(., \"CONVERT_IMPLICIT\")]') = 1\nOPTION (RECOMPILE);\n\n-- operator level checks\nRAISERROR(N'Performing busy loops checks', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\nUPDATE p\nSET    busy_loops = CASE WHEN (x.estimated_executions / 100.0) > x.estimated_rows THEN 1 END \nFROM   ##bou_BlitzCacheProcs p\n       JOIN (\n            SELECT qs.SqlHandle,\n                   relop.value('sum(/p:RelOp/@EstimateRows)', 'float') AS estimated_rows ,\n                   relop.value('sum(/p:RelOp/@EstimateRewinds)', 'float') + relop.value('sum(/p:RelOp/@EstimateRebinds)', 'float') + 1.0 AS estimated_executions \n            FROM   #relop qs\n       ) AS x ON p.SqlHandle = x.SqlHandle\nWHERE SPID = @@SPID\nOPTION (RECOMPILE);\n\nRAISERROR(N'Performing TVF join check', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\nUPDATE p\nSET    p.tvf_join = CASE WHEN x.tvf_join = 1 THEN 1 END\nFROM   ##bou_BlitzCacheProcs p\n       JOIN (\n\t\t\tSELECT r.SqlHandle,\n\t\t\t\t   1 AS tvf_join\n\t\t\tFROM #relop AS r\n\t\t\tWHERE r.relop.exist('//p:RelOp[(@LogicalOp[.=\"Table-valued function\"])]') = 1\n\t\t\tAND   r.relop.exist('//p:RelOp[contains(@LogicalOp, \"Join\")]') = 1\n       ) AS x ON p.SqlHandle = x.SqlHandle\nWHERE SPID = @@SPID\nOPTION (RECOMPILE);\n\nRAISERROR(N'Checking for operator warnings', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\n, x AS (\nSELECT r.SqlHandle,\n\t   c.n.exist('//p:Warnings[(@NoJoinPredicate[.=\"1\"])]') AS warning_no_join_predicate,\n\t   c.n.exist('//p:ColumnsWithNoStatistics') AS no_stats_warning ,\n\t   c.n.exist('//p:Warnings') AS relop_warnings\nFROM #relop AS r\nCROSS APPLY r.relop.nodes('/p:RelOp/p:Warnings') AS c(n)\n)\nUPDATE p\nSET\t   p.warning_no_join_predicate = x.warning_no_join_predicate,\n\t   p.no_stats_warning = x.no_stats_warning,\n\t   p.relop_warnings = x.relop_warnings\nFROM ##bou_BlitzCacheProcs AS p\nJOIN x ON x.SqlHandle = p.SqlHandle\nAND SPID = @@SPID\nOPTION (RECOMPILE);\n\n\nRAISERROR(N'Checking for table variables', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\n, x AS (\nSELECT r.SqlHandle,\n\t   c.n.value('substring(@Table, 2, 1)','VARCHAR(100)') AS first_char\nFROM   #relop r\nCROSS APPLY r.relop.nodes('//p:Object') AS c(n)\n)\nUPDATE p\nSET\t   is_table_variable = 1\nFROM ##bou_BlitzCacheProcs AS p\nJOIN x ON x.SqlHandle = p.SqlHandle\nAND SPID = @@SPID\nWHERE x.first_char = '@'\nOPTION (RECOMPILE);\n\nRAISERROR(N'Checking for functions', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\n, x AS (\nSELECT qs.SqlHandle,\n\t   n.fn.value('count(distinct-values(//p:UserDefinedFunction[not(@IsClrFunction)]))', 'INT') AS function_count,\n\t   n.fn.value('count(distinct-values(//p:UserDefinedFunction[@IsClrFunction = \"1\"]))', 'INT') AS clr_function_count\nFROM   #relop qs\nCROSS APPLY relop.nodes('/p:RelOp/p:ComputeScalar/p:DefinedValues/p:DefinedValue/p:ScalarOperator') n(fn)\n)\nUPDATE p\nSET\t   p.function_count = x.function_count,\n\t   p.clr_function_count = x.clr_function_count\nFROM ##bou_BlitzCacheProcs AS p\nJOIN x ON x.SqlHandle = p.SqlHandle\nAND SPID = @@SPID\nOPTION (RECOMPILE);\n\n\nRAISERROR(N'Checking for expensive key lookups', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\nUPDATE ##bou_BlitzCacheProcs\nSET key_lookup_cost = x.key_lookup_cost\nFROM (\nSELECT \n       qs.SqlHandle,\n\t   MAX(relop.value('sum(/p:RelOp/@EstimatedTotalSubtreeCost)', 'float')) AS key_lookup_cost\nFROM   #relop qs\nWHERE [relop].exist('/p:RelOp/p:IndexScan[(@Lookup[.=\"1\"])]') = 1\nGROUP BY qs.SqlHandle\n) AS x\nWHERE ##bou_BlitzCacheProcs.SqlHandle = x.SqlHandle\nAND SPID = @@SPID\nOPTION (RECOMPILE);\n\n\nRAISERROR(N'Checking for expensive remote queries', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\nUPDATE ##bou_BlitzCacheProcs\nSET remote_query_cost = x.remote_query_cost\nFROM (\nSELECT \n       qs.SqlHandle,\n\t   MAX(relop.value('sum(/p:RelOp/@EstimatedTotalSubtreeCost)', 'float')) AS remote_query_cost\nFROM   #relop qs\nWHERE [relop].exist('/p:RelOp[(@PhysicalOp[contains(., \"Remote\")])]') = 1\nGROUP BY qs.SqlHandle\n) AS x\nWHERE ##bou_BlitzCacheProcs.SqlHandle = x.SqlHandle\nAND SPID = @@SPID\nOPTION (RECOMPILE);\n\nRAISERROR(N'Checking for expensive sorts', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\nUPDATE ##bou_BlitzCacheProcs\nSET sort_cost = y.max_sort_cost \nFROM (\n\tSELECT x.SqlHandle, MAX((x.sort_io + x.sort_cpu)) AS max_sort_cost\n\tFROM (\n\t\tSELECT \n\t\t       qs.SqlHandle,\n\t\t\t   relop.value('sum(/p:RelOp/@EstimateIO)', 'float') AS sort_io,\n\t\t\t   relop.value('sum(/p:RelOp/@EstimateCPU)', 'float') AS sort_cpu\n\t\tFROM   #relop qs\n\t\tWHERE [relop].exist('/p:RelOp[(@PhysicalOp[.=\"Sort\"])]') = 1\n\t\t) AS x\n\tGROUP BY x.SqlHandle\n\t) AS y\nWHERE ##bou_BlitzCacheProcs.SqlHandle = y.SqlHandle\nAND SPID = @@SPID\nOPTION (RECOMPILE);\n\nRAISERROR(N'Checking for Optimistic cursors', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\nUPDATE b\nSET b.is_optimistic_cursor =  1\nFROM ##bou_BlitzCacheProcs b\nJOIN #statements AS qs\nON b.SqlHandle = qs.SqlHandle\nCROSS APPLY qs.statement.nodes('/p:StmtCursor') AS n1(fn)\nWHERE SPID = @@SPID\nAND n1.fn.exist('//p:CursorPlan/@CursorConcurrency[.=\"Optimistic\"]') = 1\nOPTION (RECOMPILE);\n\n\nRAISERROR(N'Checking if cursor is Forward Only', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\nUPDATE b\nSET b.is_forward_only_cursor = 1\nFROM ##bou_BlitzCacheProcs b\nJOIN #statements AS qs\nON b.SqlHandle = qs.SqlHandle\nCROSS APPLY qs.statement.nodes('/p:StmtCursor') AS n1(fn)\nWHERE SPID = @@SPID\nAND n1.fn.exist('//p:CursorPlan/@ForwardOnly[.=\"true\"]') = 1\nOPTION (RECOMPILE);\n\n\nRAISERROR(N'Checking for Dynamic cursors', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\nUPDATE b\nSET b.is_cursor_dynamic =  1\nFROM ##bou_BlitzCacheProcs b\nJOIN #statements AS qs\nON b.SqlHandle = qs.SqlHandle\nCROSS APPLY qs.statement.nodes('/p:StmtCursor') AS n1(fn)\nWHERE SPID = @@SPID\nAND n1.fn.exist('//p:CursorPlan/@CursorActualType[.=\"Dynamic\"]') = 1\nOPTION (RECOMPILE);\n\n\n\nRAISERROR(N'Checking for bad scans and plan forcing', 0, 1) WITH NOWAIT;\n;WITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\nUPDATE b\nSET \nb.is_table_scan = x.is_table_scan,\nb.backwards_scan = x.backwards_scan,\nb.forced_index = x.forced_index,\nb.forced_seek = x.forced_seek,\nb.forced_scan = x.forced_scan\nFROM ##bou_BlitzCacheProcs b\nJOIN (\nSELECT \n       qs.SqlHandle,\n\t   0 AS is_table_scan,\n\t   q.n.exist('@ScanDirection[.=\"BACKWARD\"]') AS backwards_scan,\n\t   q.n.value('@ForcedIndex', 'bit') AS forced_index,\n\t   q.n.value('@ForceSeek', 'bit') AS forced_seek,\n\t   q.n.value('@ForceScan', 'bit') AS forced_scan\nFROM   #relop qs\nCROSS APPLY qs.relop.nodes('//p:IndexScan') AS q(n)\nUNION ALL\nSELECT \n       qs.SqlHandle,\n\t   1 AS is_table_scan,\n\t   q.n.exist('@ScanDirection[.=\"BACKWARD\"]') AS backwards_scan,\n\t   q.n.value('@ForcedIndex', 'bit') AS forced_index,\n\t   q.n.value('@ForceSeek', 'bit') AS forced_seek,\n\t   q.n.value('@ForceScan', 'bit') AS forced_scan\nFROM   #relop qs\nCROSS APPLY qs.relop.nodes('//p:TableScan') AS q(n)\n) AS x ON b.SqlHandle = x.SqlHandle\nWHERE SPID = @@SPID\nOPTION (RECOMPILE);\n\n\nRAISERROR(N'Checking for computed columns that reference scalar UDFs', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\nUPDATE ##bou_BlitzCacheProcs\nSET is_computed_scalar = x.computed_column_function\nFROM (\nSELECT qs.SqlHandle,\n\t   n.fn.value('count(distinct-values(//p:UserDefinedFunction[not(@IsClrFunction)]))', 'INT') AS computed_column_function\nFROM   #relop qs\nCROSS APPLY relop.nodes('/p:RelOp/p:ComputeScalar/p:DefinedValues/p:DefinedValue/p:ScalarOperator') n(fn)\nWHERE n.fn.exist('/p:RelOp/p:ComputeScalar/p:DefinedValues/p:DefinedValue/p:ColumnReference[(@ComputedColumn[.=\"1\"])]') = 1\n) AS x\nWHERE ##bou_BlitzCacheProcs.SqlHandle = x.SqlHandle\nAND SPID = @@SPID\nOPTION (RECOMPILE);\n\n\nRAISERROR(N'Checking for filters that reference scalar UDFs', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\nUPDATE ##bou_BlitzCacheProcs\nSET is_computed_filter = x.filter_function\nFROM (\nSELECT \nr.SqlHandle, \nc.n.value('count(distinct-values(//p:UserDefinedFunction[not(@IsClrFunction)]))', 'INT') AS filter_function\nFROM #relop AS r\nCROSS APPLY r.relop.nodes('/p:RelOp/p:Filter/p:Predicate/p:ScalarOperator/p:Compare/p:ScalarOperator/p:UserDefinedFunction') c(n) \n) x\nWHERE ##bou_BlitzCacheProcs.SqlHandle = x.SqlHandle\nAND SPID = @@SPID\nOPTION (RECOMPILE);\n\nRAISERROR(N'Checking modification queries that hit lots of indexes', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p),\t\nIndexOps AS \n(\n\tSELECT \n\tr.QueryHash,\n\tc.n.value('@PhysicalOp', 'VARCHAR(100)') AS op_name,\n\tc.n.exist('@PhysicalOp[.=\"Index Insert\"]') AS ii,\n\tc.n.exist('@PhysicalOp[.=\"Index Update\"]') AS iu,\n\tc.n.exist('@PhysicalOp[.=\"Index Delete\"]') AS id,\n\tc.n.exist('@PhysicalOp[.=\"Clustered Index Insert\"]') AS cii,\n\tc.n.exist('@PhysicalOp[.=\"Clustered Index Update\"]') AS ciu,\n\tc.n.exist('@PhysicalOp[.=\"Clustered Index Delete\"]') AS cid,\n\tc.n.exist('@PhysicalOp[.=\"Table Insert\"]') AS ti,\n\tc.n.exist('@PhysicalOp[.=\"Table Update\"]') AS tu,\n\tc.n.exist('@PhysicalOp[.=\"Table Delete\"]') AS td\n\tFROM #relop AS r\n\tCROSS APPLY r.relop.nodes('/p:RelOp') c(n)\n\tOUTER APPLY r.relop.nodes('/p:RelOp/p:ScalarInsert/p:Object') q(n)\n\tOUTER APPLY r.relop.nodes('/p:RelOp/p:Update/p:Object') o2(n)\n\tOUTER APPLY r.relop.nodes('/p:RelOp/p:SimpleUpdate/p:Object') o3(n)\n), iops AS \n(\n\t\tSELECT\tios.QueryHash,\n\t\tSUM(CONVERT(TINYINT, ios.ii)) AS index_insert_count,\n\t\tSUM(CONVERT(TINYINT, ios.iu)) AS index_update_count,\n\t\tSUM(CONVERT(TINYINT, ios.id)) AS index_delete_count,\n\t\tSUM(CONVERT(TINYINT, ios.cii)) AS cx_insert_count,\n\t\tSUM(CONVERT(TINYINT, ios.ciu)) AS cx_update_count,\n\t\tSUM(CONVERT(TINYINT, ios.cid)) AS cx_delete_count,\n\t\tSUM(CONVERT(TINYINT, ios.ti)) AS table_insert_count,\n\t\tSUM(CONVERT(TINYINT, ios.tu)) AS table_update_count,\n\t\tSUM(CONVERT(TINYINT, ios.td)) AS table_delete_count\n\t\tFROM IndexOps AS ios\n\t\tWHERE ios.op_name IN ('Index Insert', 'Index Delete', 'Index Update', \n\t\t\t\t\t\t\t  'Clustered Index Insert', 'Clustered Index Delete', 'Clustered Index Update', \n\t\t\t\t\t\t\t  'Table Insert', 'Table Delete', 'Table Update')\n\t\tGROUP BY ios.QueryHash) \nUPDATE b\nSET b.index_insert_count = iops.index_insert_count,\n\tb.index_update_count = iops.index_update_count,\n\tb.index_delete_count = iops.index_delete_count,\n\tb.cx_insert_count = iops.cx_insert_count,\n\tb.cx_update_count = iops.cx_update_count,\n\tb.cx_delete_count = iops.cx_delete_count,\n\tb.table_insert_count = iops.table_insert_count,\n\tb.table_update_count = iops.table_update_count,\n\tb.table_delete_count = iops.table_delete_count\nFROM ##bou_BlitzCacheProcs AS b\nJOIN iops ON  iops.QueryHash = b.QueryHash\nWHERE SPID = @@SPID\nOPTION (RECOMPILE);\n\nRAISERROR(N'Checking for Spatial index use', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\nUPDATE ##bou_BlitzCacheProcs\nSET is_spatial = x.is_spatial\nFROM (\nSELECT qs.SqlHandle,\n\t   1 AS is_spatial\nFROM   #relop qs\nCROSS APPLY relop.nodes('/p:RelOp//p:Object') n(fn)\nWHERE n.fn.exist('(@IndexKind[.=\"Spatial\"])') = 1\n) AS x\nWHERE ##bou_BlitzCacheProcs.SqlHandle = x.SqlHandle\nAND SPID = @@SPID\nOPTION (RECOMPILE);\n\nRAISERROR('Checking for wonky Index Spools', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES (\n    'http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p )\n, selects\nAS ( SELECT s.QueryHash\n     FROM   #statements AS s\n     WHERE  s.statement.exist('/p:StmtSimple/@StatementType[.=\"SELECT\"]') = 1 )\n, spools\nAS ( SELECT DISTINCT r.QueryHash,\n\t   c.n.value('@EstimateRows', 'FLOAT') AS estimated_rows,\n       c.n.value('@EstimateIO', 'FLOAT') AS estimated_io,\n       c.n.value('@EstimateCPU', 'FLOAT') AS estimated_cpu,\n       c.n.value('@EstimateRewinds', 'FLOAT') AS estimated_rewinds\nFROM   #relop AS r\nJOIN   selects AS s\nON s.QueryHash = r.QueryHash\nCROSS APPLY r.relop.nodes('/p:RelOp') AS c(n)\nWHERE  r.relop.exist('/p:RelOp[@PhysicalOp=\"Index Spool\" and @LogicalOp=\"Eager Spool\"]') = 1\n)\nUPDATE b\n\t\tSET b.index_spool_rows = sp.estimated_rows,\n\t\t\tb.index_spool_cost = ((sp.estimated_io * sp.estimated_cpu) * CASE sp.estimated_rewinds WHEN 0 THEN 1 ELSE sp.estimated_rewinds END)\nFROM ##bou_BlitzCacheProcs b\nJOIN spools sp\nON sp.QueryHash = b.QueryHash\nOPTION (RECOMPILE);\n\n\n/* 2012+ only */\nIF @v >= 11\nBEGIN\n\n\tRAISERROR(N'Checking for forced serialization', 0, 1) WITH NOWAIT;\n\tWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\n\tUPDATE  ##bou_BlitzCacheProcs\n\tSET is_forced_serial = 1\n\tFROM    #query_plan qp\n\tWHERE   qp.SqlHandle = ##bou_BlitzCacheProcs.SqlHandle\n\tAND SPID = @@SPID\n\tAND query_plan.exist('/p:QueryPlan/@NonParallelPlanReason') = 1\n\tAND (##bou_BlitzCacheProcs.is_parallel = 0 OR ##bou_BlitzCacheProcs.is_parallel IS NULL)\n\tOPTION (RECOMPILE);\n\t\n\t\n\tRAISERROR(N'Checking for ColumnStore queries operating in Row Mode instead of Batch Mode', 0, 1) WITH NOWAIT;\n\tWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\n\tUPDATE ##bou_BlitzCacheProcs\n\tSET columnstore_row_mode = x.is_row_mode\n\tFROM (\n\tSELECT \n\t       qs.SqlHandle,\n\t\t   relop.exist('/p:RelOp[(@EstimatedExecutionMode[.=\"Row\"])]') AS is_row_mode\n\tFROM   #relop qs\n\tWHERE [relop].exist('/p:RelOp/p:IndexScan[(@Storage[.=\"ColumnStore\"])]') = 1\n\t) AS x\n\tWHERE ##bou_BlitzCacheProcs.SqlHandle = x.SqlHandle\n\tAND SPID = @@SPID\n\tOPTION (RECOMPILE);\n\nEND;\n\n/* 2014+ only */\nIF @v >= 12\nBEGIN\n    RAISERROR('Checking for downlevel cardinality estimators being used on SQL Server 2014.', 0, 1) WITH NOWAIT;\n\n    WITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\n    UPDATE  p\n    SET     downlevel_estimator = CASE WHEN statement.value('min(//p:StmtSimple/@CardinalityEstimationModelVersion)', 'int') < (@v * 10) THEN 1 END\n    FROM    ##bou_BlitzCacheProcs p\n            JOIN #statements s ON p.QueryHash = s.QueryHash \n\tWHERE SPID = @@SPID\n\tOPTION (RECOMPILE);\nEND ;\n\n/* 2016+ only */\nIF @v >= 13\nBEGIN\n    RAISERROR('Checking for row level security in 2016 only', 0, 1) WITH NOWAIT;\n\n    WITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\n    UPDATE  p\n    SET     p.is_row_level = 1\n    FROM    ##bou_BlitzCacheProcs p\n            JOIN #statements s ON p.QueryHash = s.QueryHash \n\tWHERE SPID = @@SPID\n\tAND statement.exist('/p:StmtSimple/@SecurityPolicyApplied[.=\"true\"]') = 1\n\tOPTION (RECOMPILE);\nEND ;\n\n/* 2017+ only */\nIF @v >= 14\nBEGIN\n\nRAISERROR('Gathering stats information', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\nINSERT INTO #stats_agg\nSELECT qp.SqlHandle,\n\t   x.c.value('@LastUpdate', 'DATETIME2(7)') AS LastUpdate,\n\t   x.c.value('@ModificationCount', 'INT') AS ModificationCount,\n\t   x.c.value('@SamplingPercent', 'FLOAT') AS SamplingPercent,\n\t   x.c.value('@Statistics', 'NVARCHAR(258)') AS [Statistics], \n\t   x.c.value('@Table', 'NVARCHAR(258)') AS [Table], \n\t   x.c.value('@Schema', 'NVARCHAR(258)') AS [Schema], \n\t   x.c.value('@Database', 'NVARCHAR(258)') AS [Database]\nFROM #query_plan AS qp\nCROSS APPLY qp.query_plan.nodes('//p:OptimizerStatsUsage/p:StatisticsInfo') x (c)\nOPTION (RECOMPILE);\n\nRAISERROR('Checking for stale stats', 0, 1) WITH NOWAIT;\nWITH  stale_stats AS (\n\tSELECT sa.SqlHandle\n\tFROM #stats_agg AS sa\n\tGROUP BY sa.SqlHandle\n\tHAVING MAX(sa.LastUpdate) <= DATEADD(DAY, -7, SYSDATETIME())\n\tAND AVG(sa.ModificationCount) >= 100000\n)\nUPDATE b\nSET stale_stats = 1\nFROM ##bou_BlitzCacheProcs b\nJOIN stale_stats os\nON b.SqlHandle = os.SqlHandle\nAND b.SPID = @@SPID\nOPTION (RECOMPILE);\n\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p),\naj AS (\n\tSELECT \n\t\t\tSqlHandle\n\tFROM #relop AS r\n\tCROSS APPLY r.relop.nodes('//p:RelOp') x(c)\n\tWHERE x.c.exist('@IsAdaptive[.=1]') = 1\n)\nUPDATE b\nSET b.is_adaptive = 1\nFROM ##bou_BlitzCacheProcs b\nJOIN aj\nON b.SqlHandle = aj.SqlHandle\nAND b.SPID = @@SPID\nOPTION (RECOMPILE);\n\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p),\nrow_goals AS(\nSELECT qs.QueryHash\nFROM   #relop qs\nWHERE relop.value('sum(/p:RelOp/@EstimateRowsWithoutRowGoal)', 'float') > 0\n)\nUPDATE b\nSET b.is_row_goal = 1\nFROM ##bou_BlitzCacheProcs b\nJOIN row_goals\nON b.QueryHash = row_goals.QueryHash\nAND b.SPID = @@SPID\nOPTION (RECOMPILE);\n\n\nEND;\n\n-- query level checks\nRAISERROR(N'Performing query level checks', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\nUPDATE  ##bou_BlitzCacheProcs\nSET     missing_index_count = query_plan.value('count(//p:QueryPlan/p:MissingIndexes/p:MissingIndexGroup)', 'int') ,\n\t\tunmatched_index_count = query_plan.value('count(//p:QueryPlan/p:UnmatchedIndexes/p:Parameterization/p:Object)', 'int') ,\n        SerialDesiredMemory = query_plan.value('sum(//p:QueryPlan/p:MemoryGrantInfo/@SerialDesiredMemory)', 'float') ,\n        SerialRequiredMemory = query_plan.value('sum(//p:QueryPlan/p:MemoryGrantInfo/@SerialRequiredMemory)', 'float'),\n        CachedPlanSize = query_plan.value('sum(//p:QueryPlan/@CachedPlanSize)', 'float') ,\n        CompileTime = query_plan.value('sum(//p:QueryPlan/@CompileTime)', 'float') ,\n        CompileCPU = query_plan.value('sum(//p:QueryPlan/@CompileCPU)', 'float') ,\n        CompileMemory = query_plan.value('sum(//p:QueryPlan/@CompileMemory)', 'float')\nFROM    #query_plan qp\nWHERE   qp.QueryHash = ##bou_BlitzCacheProcs.QueryHash\nAND SPID = @@SPID\nOPTION (RECOMPILE);\n\n\n/* END Testing using XML nodes to speed up processing */\nRAISERROR(N'Gathering additional plan level information', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\nUPDATE ##bou_BlitzCacheProcs\nSET NumberOfDistinctPlans = distinct_plan_count,\n    NumberOfPlans = number_of_plans,\n    plan_multiple_plans = CASE WHEN distinct_plan_count < number_of_plans THEN 1 END \nFROM (\nSELECT COUNT(DISTINCT QueryHash) AS distinct_plan_count,\n       COUNT(QueryHash) AS number_of_plans,\n       QueryHash\nFROM   ##bou_BlitzCacheProcs\nWHERE SPID = @@SPID\nGROUP BY QueryHash\n) AS x\nWHERE ##bou_BlitzCacheProcs.QueryHash = x.QueryHash \nOPTION (RECOMPILE);\n\n/* Update to grab stored procedure name for individual statements */\nRAISERROR(N'Attempting to get stored procedure name for individual statements', 0, 1) WITH NOWAIT;\nUPDATE  p\nSET     QueryType = QueryType + ' (parent ' +\n                    + QUOTENAME(OBJECT_SCHEMA_NAME(s.object_id, s.database_id))\n                    + '.'\n                    + QUOTENAME(OBJECT_NAME(s.object_id, s.database_id)) + ')'\nFROM    ##bou_BlitzCacheProcs p\n        JOIN sys.dm_exec_procedure_stats s ON p.SqlHandle = s.sql_handle\nWHERE   QueryType = 'Statement'\nAND SPID = @@SPID\nOPTION (RECOMPILE);\n\n/* Trace Flag Checks 2014 SP2 and 2016 SP1 only)*/\nIF @v >= 11\nBEGIN\nRAISERROR(N'Trace flag checks', 0, 1) WITH NOWAIT;\n;WITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\n, tf_pretty AS (\nSELECT  qp.QueryHash,\n\t\tqp.SqlHandle,\n\t\tq.n.value('@Value', 'INT') AS trace_flag,\n\t\tq.n.value('@Scope', 'VARCHAR(10)') AS scope\nFROM    #query_plan qp\nCROSS APPLY qp.query_plan.nodes('/p:QueryPlan/p:TraceFlags/p:TraceFlag') AS q(n)\n)\nINSERT INTO #trace_flags\nSELECT DISTINCT tf1.SqlHandle , tf1.QueryHash,\n    STUFF((\n          SELECT DISTINCT ', ' + CONVERT(VARCHAR(5), tf2.trace_flag)\n          FROM  tf_pretty AS tf2 \n          WHERE tf1.SqlHandle = tf2.SqlHandle \n\t\t  AND tf1.QueryHash = tf2.QueryHash\n\t\t  AND tf2.scope = 'Global'\n        FOR XML PATH(N'')), 1, 2, N''\n      ) AS global_trace_flags,\n    STUFF((\n          SELECT DISTINCT ', ' + CONVERT(VARCHAR(5), tf2.trace_flag)\n          FROM  tf_pretty AS tf2 \n          WHERE tf1.SqlHandle = tf2.SqlHandle \n\t\t  AND tf1.QueryHash = tf2.QueryHash\n\t\t  AND tf2.scope = 'Session'\n        FOR XML PATH(N'')), 1, 2, N''\n      ) AS session_trace_flags\nFROM tf_pretty AS tf1\nOPTION (RECOMPILE);\n\nUPDATE p\nSET    p.trace_flags_session = tf.session_trace_flags\nFROM   ##bou_BlitzCacheProcs p\nJOIN #trace_flags tf ON tf.QueryHash = p.QueryHash \nWHERE SPID = @@SPID\nOPTION (RECOMPILE);\nEND;\n\n\nRAISERROR(N'Is Paul White Electric?', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p),\nis_paul_white_electric AS (\nSELECT 1 AS [is_paul_white_electric], \nr.SqlHandle\nFROM #relop AS r\nCROSS APPLY r.relop.nodes('//p:RelOp') c(n)\nWHERE c.n.exist('@PhysicalOp[.=\"Switch\"]') = 1\n)\nUPDATE b\nSET    b.is_paul_white_electric = ipwe.is_paul_white_electric\nFROM   ##bou_BlitzCacheProcs AS b\nJOIN is_paul_white_electric ipwe \nON ipwe.SqlHandle = b.SqlHandle \nWHERE b.SPID = @@SPID\nOPTION (RECOMPILE);\n\nIF EXISTS ( SELECT 1 \n\t\t\tFROM ##bou_BlitzCacheProcs AS bbcp \n\t\t\tWHERE bbcp.implicit_conversions = 1 \n\t\t\tOR bbcp.QueryType LIKE '%Procedure or Function: %')\nBEGIN\n\nRAISERROR(N'Getting information about implicit conversions and stored proc parameters', 0, 1) WITH NOWAIT;\n\nRAISERROR(N'Getting variable info', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES ( 'http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p )\nINSERT #variable_info ( SPID, QueryHash, SqlHandle, proc_name, variable_name, variable_datatype, compile_time_value )\nSELECT      DISTINCT @@SPID,\n            qp.QueryHash,\n            qp.SqlHandle,\n            b.QueryType AS proc_name,\n            q.n.value('@Column', 'NVARCHAR(258)') AS variable_name,\n            q.n.value('@ParameterDataType', 'NVARCHAR(258)') AS variable_datatype,\n            q.n.value('@ParameterCompiledValue', 'NVARCHAR(258)') AS compile_time_value\nFROM        #query_plan AS qp\nJOIN        ##bou_BlitzCacheProcs AS b\nON (b.QueryType = 'adhoc' AND b.QueryHash = qp.QueryHash)\nOR \t(b.QueryType <> 'adhoc' AND b.SqlHandle = qp.SqlHandle)\nCROSS APPLY qp.query_plan.nodes('//p:QueryPlan/p:ParameterList/p:ColumnReference') AS q(n)\nWHERE  b.SPID = @@SPID\nOPTION (RECOMPILE);\n\nRAISERROR(N'Getting conversion info', 0, 1) WITH NOWAIT;\nWITH XMLNAMESPACES ( 'http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p )\nINSERT #conversion_info ( SPID, QueryHash, SqlHandle, proc_name, expression )\nSELECT      DISTINCT @@SPID,\n            qp.QueryHash,\n            qp.SqlHandle,\n            b.QueryType AS proc_name,\n            qq.c.value('@Expression', 'NVARCHAR(4000)') AS expression\nFROM        #query_plan AS qp\nJOIN        ##bou_BlitzCacheProcs AS b\nON (b.QueryType = 'adhoc' AND b.QueryHash = qp.QueryHash)\nOR \t(b.QueryType <> 'adhoc' AND b.SqlHandle = qp.SqlHandle)\nCROSS APPLY qp.query_plan.nodes('//p:QueryPlan/p:Warnings/p:PlanAffectingConvert') AS qq(c)\nWHERE       qq.c.exist('@ConvertIssue[.=\"Seek Plan\"]') = 1\n            AND qp.QueryHash IS NOT NULL\n            AND b.implicit_conversions = 1\nAND b.SPID = @@SPID\nOPTION (RECOMPILE);\n\nRAISERROR(N'Parsing conversion info', 0, 1) WITH NOWAIT;\nINSERT #stored_proc_info ( SPID, SqlHandle, QueryHash, proc_name, variable_name, variable_datatype, converted_column_name, column_name, converted_to, compile_time_value )\nSELECT @@SPID AS SPID,\n       ci.SqlHandle,\n       ci.QueryHash,\n       REPLACE(REPLACE(REPLACE(ci.proc_name, ')', ''), 'Statement (parent ', ''), 'Procedure or Function: ', '') AS proc_name,\n       CASE WHEN ci.at_charindex > 0\n                 AND ci.bracket_charindex > 0 \n\t\t\tTHEN SUBSTRING(ci.expression, ci.at_charindex, ci.bracket_charindex)\n            ELSE N'**no_variable**'\n       END AS variable_name,\n\t   N'**no_variable**' AS variable_datatype,\n       CASE WHEN ci.at_charindex = 0\n                 AND ci.comma_charindex > 0\n                 AND ci.second_comma_charindex > 0 \n\t\t\tTHEN SUBSTRING(ci.expression, ci.comma_charindex, ci.second_comma_charindex)\n            ELSE N'**no_column**'\n       END AS converted_column_name,\n       CASE WHEN ci.at_charindex = 0\n                 AND ci.equal_charindex > 0 \n\t\t\t\t AND ci.convert_implicit_charindex = 0\n\t\t\tTHEN SUBSTRING(ci.expression, ci.equal_charindex, 4000)\n\t\t\tWHEN ci.at_charindex = 0\n                 AND ci.equal_charindex > 0 \n\t\t\t\t AND ci.convert_implicit_charindex > 0\n\t\t\tTHEN SUBSTRING(ci.expression, 0, ci.equal_charindex -1)\n            WHEN ci.at_charindex > 0\n                 AND ci.comma_charindex > 0\n                 AND ci.second_comma_charindex > 0 \n\t\t\tTHEN SUBSTRING(ci.expression, ci.comma_charindex, ci.second_comma_charindex)\n            ELSE N'**no_column **'\n       END AS column_name,\n       CASE WHEN ci.paren_charindex > 0\n                 AND ci.comma_paren_charindex > 0 \n\t\t\tTHEN SUBSTRING(ci.expression, ci.paren_charindex, ci.comma_paren_charindex)\n       END AS converted_to,\n       CASE WHEN ci.at_charindex = 0\n                 AND ci.convert_implicit_charindex = 0\n                 AND ci.proc_name = 'Statement' \n\t\t\tTHEN SUBSTRING(ci.expression, ci.equal_charindex, 4000)\n            ELSE '**idk_man**'\n       END AS compile_time_value\nFROM   #conversion_info AS ci\nOPTION (RECOMPILE);\n\n\n\nRAISERROR(N'Updating variables inserted procs', 0, 1) WITH NOWAIT;\nUPDATE sp\nSET sp.variable_datatype = vi.variable_datatype,\n\tsp.compile_time_value = vi.compile_time_value\nFROM   #stored_proc_info AS sp\nJOIN #variable_info AS vi\nON (sp.proc_name = 'adhoc' AND sp.QueryHash = vi.QueryHash)\nOR \t(sp.proc_name <> 'adhoc' AND sp.SqlHandle = vi.SqlHandle)\nAND sp.variable_name = vi.variable_name\nOPTION (RECOMPILE);\n\n\nRAISERROR(N'Inserting variables for other procs', 0, 1) WITH NOWAIT;\nINSERT #stored_proc_info \n\t\t( SPID, SqlHandle, QueryHash, variable_name, variable_datatype, compile_time_value, proc_name )\nSELECT vi.SPID, vi.SqlHandle, vi.QueryHash, vi.variable_name, vi.variable_datatype, vi.compile_time_value, REPLACE(REPLACE(REPLACE(vi.proc_name, ')', ''), 'Statement (parent ', ''), 'Procedure or Function: ', '') AS proc_name\nFROM #variable_info AS vi\nWHERE NOT EXISTS\n(\n\tSELECT * \n\tFROM   #stored_proc_info AS sp\n\tWHERE (sp.proc_name = 'adhoc' AND sp.QueryHash = vi.QueryHash)\n\tOR \t(sp.proc_name <> 'adhoc' AND sp.SqlHandle = vi.SqlHandle)\n)\nOPTION (RECOMPILE);\n\n\nRAISERROR(N'Updating procs', 0, 1) WITH NOWAIT;\nUPDATE s\nSET    s.variable_datatype = CASE WHEN s.variable_datatype LIKE '%(%)%' THEN\n                                      LEFT(s.variable_datatype, CHARINDEX('(', s.variable_datatype) - 1)\n\t\t\t\t\t\t\t\t  ELSE s.variable_datatype\n                             END,\n       s.converted_to = CASE WHEN s.converted_to LIKE '%(%)%' THEN\n                                 LEFT(s.converted_to, CHARINDEX('(', s.converted_to) - 1)\n                             ELSE s.converted_to\n                        END,\n\t   s.compile_time_value = CASE WHEN s.compile_time_value LIKE '%(%)%' THEN\n\t\t\t\t\t\t\t\t\t\tSUBSTRING(s.compile_time_value, \n\t\t\t\t\t\t\t\t\t\t\t\t\tCHARINDEX('(', s.compile_time_value) + 1,\n\t\t\t\t\t\t\t\t\t\t\t\t\tCHARINDEX(')', s.compile_time_value) - 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t- CHARINDEX('(', s.compile_time_value)\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\tWHEN variable_datatype NOT IN ('bit', 'tinyint', 'smallint', 'int', 'bigint') \n\t\t\t\t\t\t\t\t\t\tAND s.variable_datatype NOT LIKE '%binary%' \n\t\t\t\t\t\t\t\t\t\tAND s.compile_time_value NOT LIKE 'N''%'''\n\t\t\t\t\t\t\t\t\t\tAND s.compile_time_value NOT LIKE '''%''' THEN\n\t\t\t\t\t\t\t\t\t\tQUOTENAME(compile_time_value, '''')\n\t\t\t\t\t\t\t\t\tELSE s.compile_time_value \n\t\t\t\t\t\t\t  END\nFROM   #stored_proc_info AS s\nOPTION (RECOMPILE);\n\nRAISERROR(N'Updating conversion XML', 0, 1) WITH NOWAIT;\nWITH precheck AS (\nSELECT spi.SPID,\n\t   spi.SqlHandle,\n\t   spi.proc_name,\n\t\t\tCONVERT(XML, \n\t\t\tN'<ClickMe><![CDATA['\n\t\t\t+ @nl\n\t\t\t+ CASE WHEN spi.proc_name <> 'Statement' \n\t\t\t\t   THEN N'The stored procedure ' + spi.proc_name \n\t\t\t\t   ELSE N'This ad hoc statement' \n\t\t\t  END\n\t\t\t+ N' had the following implicit conversions: '\n\t\t\t+ CHAR(10)\n\t\t\t+ STUFF((\n\t\t\t\tSELECT DISTINCT \n\t\t\t\t\t\t@nl\n\t\t\t\t\t\t+ CASE WHEN spi2.variable_name <> N'**no_variable**'\n\t\t\t\t\t\t\t   THEN N'The variable '\n\t\t\t\t\t\t\t   WHEN spi2.variable_name = N'**no_variable**' AND (spi2.column_name = spi2.converted_column_name OR spi2.column_name LIKE '%CONVERT_IMPLICIT%')\n\t\t\t\t\t\t\t   THEN N'The compiled value '\n\t\t\t\t\t\t\t   WHEN spi2.column_name LIKE '%Expr%'\n\t\t\t\t\t\t\t   THEN 'The expression '\n\t\t\t\t\t\t\t   ELSE N'The column '\n\t\t\t\t\t\t  END \n\t\t\t\t\t\t+ CASE WHEN spi2.variable_name <> N'**no_variable**'\n\t\t\t\t\t\t\t   THEN spi2.variable_name\n\t\t\t\t\t\t\t   WHEN spi2.variable_name = N'**no_variable**' AND (spi2.column_name = spi2.converted_column_name OR spi2.column_name LIKE '%CONVERT_IMPLICIT%')\n\t\t\t\t\t\t\t   THEN spi2.compile_time_value\n\n\t\t\t\t\t\t\t   ELSE spi2.column_name\n\t\t\t\t\t\t  END \n\t\t\t\t\t\t+ N' has a data type of '\n\t\t\t\t\t\t+ CASE WHEN spi2.variable_datatype = N'**no_variable**' THEN spi2.converted_to\n\t\t\t\t\t\t\t   ELSE spi2.variable_datatype \n\t\t\t\t\t\t  END\n\t\t\t\t\t\t+ N' which caused implicit conversion on the column '\n\t\t\t\t\t\t+ CASE WHEN spi2.column_name LIKE N'%CONVERT_IMPLICIT%'\n\t\t\t\t\t\t\t   THEN spi2.converted_column_name\n\t\t\t\t\t\t\t   WHEN spi2.column_name = N'**no_column**'\n\t\t\t\t\t\t\t   THEN spi2.converted_column_name\n\t\t\t\t\t\t\t   WHEN spi2.converted_column_name = N'**no_column**'\n\t\t\t\t\t\t\t   THEN spi2.column_name\n\t\t\t\t\t\t\t   WHEN spi2.column_name <> spi2.converted_column_name\n\t\t\t\t\t\t\t   THEN spi2.converted_column_name\n\t\t\t\t\t\t\t   ELSE spi2.column_name\n\t\t\t\t\t\t  END\n\t\t\t\t\t\t+ CASE WHEN spi2.variable_name = N'**no_variable**' AND (spi2.column_name = spi2.converted_column_name OR spi2.column_name LIKE '%CONVERT_IMPLICIT%')\n\t\t\t\t\t\t\t   THEN N''\n\t\t\t\t\t\t\t   WHEN spi2.column_name LIKE '%Expr%'\n\t\t\t\t\t\t\t   THEN N''\n\t\t\t\t\t\t\t   WHEN spi2.compile_time_value NOT IN ('**declared in proc**', '**idk_man**')\n\t\t\t\t\t\t\t   AND spi2.compile_time_value <> spi2.column_name\n\t\t\t\t\t\t\t   THEN ' with the value ' + RTRIM(spi2.compile_time_value)\n\t\t\t\t\t\t\tELSE N''\n\t\t\t\t\t\t END \n\t\t\t\t\t\t+ '.'\n\t\t\t\tFROM #stored_proc_info AS spi2\n\t\t\t\tWHERE spi.SqlHandle = spi2.SqlHandle\n\t\t\t\tFOR XML PATH(N''), TYPE).value(N'.[1]', N'NVARCHAR(MAX)'), 1, 1, N'')\n\t\t\t+ CHAR(10)\n\t\t\t+ N']]></ClickMe>'\n\t\t\t) AS implicit_conversion_info\nFROM #stored_proc_info AS spi\nGROUP BY spi.SPID, spi.SqlHandle, spi.proc_name\n)\nUPDATE b\nSET b.implicit_conversion_info = pk.implicit_conversion_info\nFROM ##bou_BlitzCacheProcs AS b\nJOIN precheck pk\nON pk.SqlHandle = b.SqlHandle\nAND pk.SPID = b.SPID\nOPTION (RECOMPILE);\n\nRAISERROR(N'Updating cached parameter XML', 0, 1) WITH NOWAIT;\nWITH precheck AS (\nSELECT spi.SPID,\n\t   spi.SqlHandle,\n\t   spi.proc_name,\nCONVERT(XML, \n\t\t\tN'<ClickMe><![CDATA['\n\t\t\t+ @nl\n\t\t\t+ N'EXEC ' \n\t\t\t+ spi.proc_name \n\t\t\t+ N' '\n\t\t\t+ STUFF((\n\t\t\t\tSELECT DISTINCT N', ' \n\t\t\t\t\t\t+ CASE WHEN spi2.variable_name <> N'**no_variable**' AND spi2.compile_time_value <> N'**idk_man**'\n\t\t\t\t\t\t\t\tTHEN spi2.variable_name + N' = '\n\t\t\t\t\t\t\t\tELSE @nl + N' We could not find any cached parameter values for this stored proc. ' \n\t\t\t\t\t\t  END\n\t\t\t\t\t\t+ CASE WHEN spi2.variable_name = N'**no_variable**' OR spi2.compile_time_value = N'**idk_man**'\n\t\t\t\t\t\t\t   THEN @nl + N' Possible reasons include declared variables inside the procedure, recompile hints, etc. '\n\t\t\t\t\t\t\t   WHEN spi2.compile_time_value = N'NULL' \n\t\t\t\t\t\t\t   THEN spi2.compile_time_value \n\t\t\t\t\t\t\t   ELSE RTRIM(spi2.compile_time_value)\n\t\t\t\t\t\t  END\n\t\t\t\tFROM #stored_proc_info AS spi2\n\t\t\t\tWHERE spi.SqlHandle = spi2.SqlHandle\n\t\t\t\tAND spi2.proc_name <> N'Statement'\n\t\t\t\tFOR XML PATH(N''), TYPE).value(N'.[1]', N'NVARCHAR(MAX)'), 1, 1, N'')\n\t\t\t+ @nl\n\t\t\t+ N']]></ClickMe>'\n\t\t\t) AS cached_execution_parameters\nFROM #stored_proc_info AS spi\nGROUP BY spi.SPID, spi.SqlHandle, spi.proc_name\n) \nUPDATE b\nSET b.cached_execution_parameters = pk.cached_execution_parameters\nFROM ##bou_BlitzCacheProcs AS b\nJOIN precheck pk\nON pk.SqlHandle = b.SqlHandle\nAND pk.SPID = b.SPID\nOPTION (RECOMPILE);\n\n\nEND; --End implicit conversion information gathering\n\nUPDATE b\nSET b.implicit_conversion_info = CASE WHEN b.implicit_conversion_info IS NULL THEN '<?NoNeedToClickMe -- N/A --?>' ELSE b.implicit_conversion_info END,\n\tb.cached_execution_parameters = CASE WHEN b.cached_execution_parameters IS NULL THEN '<?NoNeedToClickMe -- N/A --?>' ELSE b.cached_execution_parameters END\nFROM ##bou_BlitzCacheProcs AS b\nWHERE b.SPID = @@SPID\nOPTION (RECOMPILE);\n\n/*Begin Missing Index*/\n\nIF EXISTS \n\t(SELECT 1 FROM ##bou_BlitzCacheProcs AS bbcp WHERE bbcp.missing_index_count > 0 AND bbcp.SPID = @@SPID)\n\tBEGIN\n\t\n\t\tWITH XMLNAMESPACES ( 'http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p )\n\t\tINSERT \t#missing_index_xml\n\t\tSELECT qp.QueryHash,\n\t\t       qp.SqlHandle,\n\t\t       c.mg.value('@Impact', 'FLOAT') AS Impact,\n\t\t\t   c.mg.query('.') AS cmg\n\t\tFROM   #query_plan AS qp\n\t\tCROSS APPLY qp.query_plan.nodes('//p:MissingIndexes/p:MissingIndexGroup') AS c(mg)\n\t\tWHERE  qp.QueryHash IS NOT NULL\n\t\tAND c.mg.value('@Impact', 'FLOAT') > 70.0\n\t\tOPTION(RECOMPILE);\n\t\t\n\t\tWITH XMLNAMESPACES ( 'http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p )\n\t\tINSERT #missing_index_schema\n\t\tSELECT mix.QueryHash, mix.SqlHandle, mix.impact,\n\t\t       c.mi.value('@Database', 'NVARCHAR(128)') ,\n\t\t       c.mi.value('@Schema', 'NVARCHAR(128)') ,\n\t\t       c.mi.value('@Table', 'NVARCHAR(128)') ,\n\t\t\t   c.mi.query('.')\n\t\tFROM #missing_index_xml AS mix\n\t\tCROSS APPLY mix.index_xml.nodes('//p:MissingIndex') AS c(mi)\n\t\tOPTION(RECOMPILE);\n\t\t\n\t\tWITH XMLNAMESPACES ( 'http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p )\n\t\tINSERT #missing_index_usage\n\t\tSELECT ms.QueryHash, ms.SqlHandle, ms.impact, ms.database_name, ms.schema_name, ms.table_name,\n\t\t\t\tc.cg.value('@Usage', 'NVARCHAR(128)'),\n\t\t\t\tc.cg.query('.')\n\t\tFROM #missing_index_schema ms\n\t\tCROSS APPLY ms.index_xml.nodes('//p:ColumnGroup') AS c(cg)\n\t\tOPTION(RECOMPILE);\n\t\t\n\t\tWITH XMLNAMESPACES ( 'http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p )\n\t\tINSERT #missing_index_detail\n\t\tSELECT miu.QueryHash,\n\t\t       miu.SqlHandle,\n\t\t       miu.impact,\n\t\t       miu.database_name,\n\t\t       miu.schema_name,\n\t\t       miu.table_name,\n\t\t       miu.usage,\n\t\t       c.c.value('@Name', 'NVARCHAR(128)')\n\t\tFROM #missing_index_usage AS miu\n\t\tCROSS APPLY miu.index_xml.nodes('//p:Column') AS c(c)\n\t\tOPTION (RECOMPILE);\n\t\t\n\t\tINSERT #missing_index_pretty\n\t\tSELECT m.QueryHash, m.SqlHandle, m.impact, m.database_name, m.schema_name, m.table_name\n\t\t, STUFF((   SELECT DISTINCT N', ' + ISNULL(m2.column_name, '') AS column_name\n\t\t                 FROM   #missing_index_detail AS m2\n\t\t                 WHERE  m2.usage = 'EQUALITY'\n\t\t\t\t\t\t AND m.QueryHash = m2.QueryHash\n\t\t\t\t\t\t AND m.SqlHandle = m2.SqlHandle\n\t\t\t\t\t\t AND m.impact = m2.impact\n\t\t\t\t\t\t AND m.database_name = m2.database_name\n\t\t\t\t\t\t AND m.schema_name = m2.schema_name\n\t\t\t\t\t\t AND m.table_name = m2.table_name\n\t\t                 FOR XML PATH(N''), TYPE ).value(N'.[1]', N'NVARCHAR(MAX)'), 1, 2, N'') AS equality\n\t\t, STUFF((   SELECT DISTINCT N', ' + ISNULL(m2.column_name, '') AS column_name\n\t\t                 FROM   #missing_index_detail AS m2\n\t\t                 WHERE  m2.usage = 'INEQUALITY'\n\t\t\t\t\t\t AND m.QueryHash = m2.QueryHash\n\t\t\t\t\t\t AND m.SqlHandle = m2.SqlHandle\n\t\t\t\t\t\t AND m.impact = m2.impact\n\t\t\t\t\t\t AND m.database_name = m2.database_name\n\t\t\t\t\t\t AND m.schema_name = m2.schema_name\n\t\t\t\t\t\t AND m.table_name = m2.table_name\n\t\t                 FOR XML PATH(N''), TYPE ).value(N'.[1]', N'NVARCHAR(MAX)'), 1, 2, N'') AS inequality\n\t\t, STUFF((   SELECT DISTINCT N', ' + ISNULL(m2.column_name, '') AS column_name\n\t\t                 FROM   #missing_index_detail AS m2\n\t\t                 WHERE  m2.usage = 'INCLUDE'\n\t\t\t\t\t\t AND m.QueryHash = m2.QueryHash\n\t\t\t\t\t\t AND m.SqlHandle = m2.SqlHandle\n\t\t\t\t\t\t AND m.impact = m2.impact\n\t\t\t\t\t\t AND m.database_name = m2.database_name\n\t\t\t\t\t\t AND m.schema_name = m2.schema_name\n\t\t\t\t\t\t AND m.table_name = m2.table_name\n\t\t                 FOR XML PATH(N''), TYPE ).value(N'.[1]', N'NVARCHAR(MAX)'), 1, 2, N'') AS [include]\n\t\tFROM #missing_index_detail AS m\n\t\tGROUP BY m.QueryHash, m.SqlHandle, m.impact, m.database_name, m.schema_name, m.table_name\n\t\tOPTION (RECOMPILE);\n\t\t\n\t\tWITH missing AS (\n\t\tSELECT mip.QueryHash,\n\t\t       mip.SqlHandle, \n\t\t\t   CONVERT(XML,\n\t\t\t   N'<MissingIndexes><![CDATA['\n\t\t\t   + CHAR(10) + CHAR(13)\n\t\t\t   + STUFF((   SELECT CHAR(10) + CHAR(13) + ISNULL(mip2.details, '') AS details\n\t\t                   FROM   #missing_index_pretty AS mip2\n\t\t\t\t\t\t   WHERE mip.QueryHash = mip2.QueryHash\n\t\t\t\t\t\t   AND mip.SqlHandle = mip2.SqlHandle\n\t\t\t\t\t\t   GROUP BY mip2.details\n\t\t                   ORDER BY MAX(mip2.impact) DESC\n\t\t\t\t\t\t   FOR XML PATH(N''), TYPE ).value(N'.[1]', N'NVARCHAR(MAX)'), 1, 2, N'') \n\t\t\t   + CHAR(10) + CHAR(13)\n\t\t\t   + N']]></MissingIndexes>' \n\t\t\t   ) AS full_details\n\t\tFROM #missing_index_pretty AS mip\n\t\tGROUP BY mip.QueryHash, mip.SqlHandle, mip.impact\n\t\t\t\t\t\t)\n\t\tUPDATE bbcp\n\t\t\tSET bbcp.missing_indexes = m.full_details\n\t\tFROM ##bou_BlitzCacheProcs AS bbcp\n\t\tJOIN missing AS m\n\t\tON m.SqlHandle = bbcp.SqlHandle\n\t\tAND SPID = @@SPID\n\t\tOPTION (RECOMPILE);\n\n\t\n\tEND\n\n\tUPDATE b\n\tSET b.missing_indexes = \n\t\tCASE WHEN b.missing_indexes IS NULL \n\t\t\t THEN '<?NoNeedToClickMe -- N/A --?>' \n\t\t\t ELSE b.missing_indexes \n\t\tEND\n\tFROM ##bou_BlitzCacheProcs AS b\n\tWHERE b.SPID = @@SPID\n\tOPTION (RECOMPILE);\n\n/*End Missing Index*/\n\n\n\nIF @SkipAnalysis = 1\n    BEGIN\n\tRAISERROR(N'Skipping analysis, going to results', 0, 1) WITH NOWAIT; \n\tGOTO Results ;\n\tEND; \n\n\n/* Set configuration values */\nRAISERROR(N'Setting configuration values', 0, 1) WITH NOWAIT;\nDECLARE @execution_threshold INT = 1000 ,\n        @parameter_sniffing_warning_pct TINYINT = 30,\n        /* This is in average reads */\n        @parameter_sniffing_io_threshold BIGINT = 100000 ,\n        @ctp_threshold_pct TINYINT = 10,\n        @long_running_query_warning_seconds BIGINT = 300 * 1000 ,\n\t\t@memory_grant_warning_percent INT = 10;\n\nIF EXISTS (SELECT 1/0 FROM #configuration WHERE 'frequent execution threshold' = LOWER(parameter_name))\nBEGIN\n    SELECT @execution_threshold = CAST(value AS INT)\n    FROM   #configuration\n    WHERE  'frequent execution threshold' = LOWER(parameter_name) ;\n\n    SET @msg = ' Setting \"frequent execution threshold\" to ' + CAST(@execution_threshold AS VARCHAR(10)) ;\n\n    RAISERROR(@msg, 0, 1) WITH NOWAIT;\nEND;\n\nIF EXISTS (SELECT 1/0 FROM #configuration WHERE 'parameter sniffing variance percent' = LOWER(parameter_name))\nBEGIN\n    SELECT @parameter_sniffing_warning_pct = CAST(value AS TINYINT)\n    FROM   #configuration\n    WHERE  'parameter sniffing variance percent' = LOWER(parameter_name) ;\n\n    SET @msg = ' Setting \"parameter sniffing variance percent\" to ' + CAST(@parameter_sniffing_warning_pct AS VARCHAR(3)) ;\n\n    RAISERROR(@msg, 0, 1) WITH NOWAIT;\nEND;\n\nIF EXISTS (SELECT 1/0 FROM #configuration WHERE 'parameter sniffing io threshold' = LOWER(parameter_name))\nBEGIN\n    SELECT @parameter_sniffing_io_threshold = CAST(value AS BIGINT)\n    FROM   #configuration\n    WHERE 'parameter sniffing io threshold' = LOWER(parameter_name) ;\n\n    SET @msg = ' Setting \"parameter sniffing io threshold\" to ' + CAST(@parameter_sniffing_io_threshold AS VARCHAR(10));\n\n    RAISERROR(@msg, 0, 1) WITH NOWAIT;\nEND;\n\nIF EXISTS (SELECT 1/0 FROM #configuration WHERE 'cost threshold for parallelism warning' = LOWER(parameter_name))\nBEGIN\n    SELECT @ctp_threshold_pct = CAST(value AS TINYINT)\n    FROM   #configuration\n    WHERE 'cost threshold for parallelism warning' = LOWER(parameter_name) ;\n\n    SET @msg = ' Setting \"cost threshold for parallelism warning\" to ' + CAST(@ctp_threshold_pct AS VARCHAR(3));\n\n    RAISERROR(@msg, 0, 1) WITH NOWAIT;\nEND;\n\nIF EXISTS (SELECT 1/0 FROM #configuration WHERE 'long running query warning (seconds)' = LOWER(parameter_name))\nBEGIN\n    SELECT @long_running_query_warning_seconds = CAST(value * 1000 AS BIGINT)\n    FROM   #configuration\n    WHERE 'long running query warning (seconds)' = LOWER(parameter_name) ;\n\n    SET @msg = ' Setting \"long running query warning (seconds)\" to ' + CAST(@long_running_query_warning_seconds AS VARCHAR(10));\n\n    RAISERROR(@msg, 0, 1) WITH NOWAIT;\nEND;\n\nIF EXISTS (SELECT 1/0 FROM #configuration WHERE 'unused memory grant' = LOWER(parameter_name))\nBEGIN\n    SELECT @memory_grant_warning_percent = CAST(value AS INT)\n    FROM   #configuration\n    WHERE 'unused memory grant' = LOWER(parameter_name) ;\n\n    SET @msg = ' Setting \"unused memory grant\" to ' + CAST(@memory_grant_warning_percent AS VARCHAR(10));\n\n    RAISERROR(@msg, 0, 1) WITH NOWAIT;\nEND;\n\nDECLARE @ctp INT ;\n\nSELECT  @ctp = NULLIF(CAST(value AS INT), 0)\nFROM    sys.configurations\nWHERE   name = 'cost threshold for parallelism'\nOPTION (RECOMPILE);\n\n\n/* Update to populate checks columns */\nRAISERROR('Checking for query level SQL Server issues.', 0, 1) WITH NOWAIT;\n\nWITH XMLNAMESPACES('http://schemas.microsoft.com/sqlserver/2004/07/showplan' AS p)\nUPDATE ##bou_BlitzCacheProcs\nSET    frequent_execution = CASE WHEN ExecutionsPerMinute > @execution_threshold THEN 1 END ,\n       parameter_sniffing = CASE WHEN AverageReads > @parameter_sniffing_io_threshold\n                                      AND min_worker_time < ((1.0 - (@parameter_sniffing_warning_pct / 100.0)) * AverageCPU) THEN 1\n                                 WHEN AverageReads > @parameter_sniffing_io_threshold\n                                      AND max_worker_time > ((1.0 + (@parameter_sniffing_warning_pct / 100.0)) * AverageCPU) THEN 1\n                                 WHEN AverageReads > @parameter_sniffing_io_threshold\n                                      AND MinReturnedRows < ((1.0 - (@parameter_sniffing_warning_pct / 100.0)) * AverageReturnedRows) THEN 1\n                                 WHEN AverageReads > @parameter_sniffing_io_threshold\n                                      AND MaxReturnedRows > ((1.0 + (@parameter_sniffing_warning_pct / 100.0)) * AverageReturnedRows) THEN 1 END ,\n       near_parallel = CASE WHEN QueryPlanCost BETWEEN @ctp * (1 - (@ctp_threshold_pct / 100.0)) AND @ctp THEN 1 END,\n       long_running = CASE WHEN AverageDuration > @long_running_query_warning_seconds THEN 1\n                           WHEN max_worker_time > @long_running_query_warning_seconds THEN 1\n                           WHEN max_elapsed_time > @long_running_query_warning_seconds THEN 1 END,\n\t   is_key_lookup_expensive = CASE WHEN QueryPlanCost >= (@ctp / 2) AND key_lookup_cost >= QueryPlanCost * .5 THEN 1 END,\n\t   is_sort_expensive = CASE WHEN QueryPlanCost >= (@ctp / 2) AND sort_cost >= QueryPlanCost * .5 THEN 1 END,\n\t   is_remote_query_expensive = CASE WHEN remote_query_cost >= QueryPlanCost * .05 THEN 1 END,\n\t   is_forced_serial = CASE WHEN is_forced_serial = 1 THEN 1 END,\n\t   is_unused_grant = CASE WHEN PercentMemoryGrantUsed <= @memory_grant_warning_percent AND MinGrantKB > @MinMemoryPerQuery THEN 1 END,\n\t   long_running_low_cpu = CASE WHEN AverageDuration > AverageCPU * 4 THEN 1 END,\n\t   low_cost_high_cpu = CASE WHEN QueryPlanCost < @ctp AND AverageCPU > 500. AND QueryPlanCost * 10 < AverageCPU THEN 1 END,\n\t   is_spool_expensive = CASE WHEN QueryPlanCost > (@ctp / 2) AND index_spool_cost >= QueryPlanCost * .1 THEN 1 END,\n\t   is_spool_more_rows = CASE WHEN index_spool_rows >= (AverageReturnedRows / ISNULL(NULLIF(ExecutionCount, 0), 1)) THEN 1 END,\n\t   is_bad_estimate = CASE WHEN AverageReturnedRows > 0 AND (estimated_rows * 1000 < AverageReturnedRows OR estimated_rows > AverageReturnedRows * 1000) THEN 1 END,\n\t   is_big_spills = CASE WHEN (AvgSpills / 128.) > 499. THEN 1 END\nWHERE SPID = @@SPID\nOPTION (RECOMPILE);\n\n\n\nRAISERROR('Checking for forced parameterization and cursors.', 0, 1) WITH NOWAIT;\n\n/* Set options checks */\nUPDATE p\n       SET is_forced_parameterized = CASE WHEN (CAST(pa.value AS INT) & 131072 = 131072) THEN 1 END ,\n       is_forced_plan = CASE WHEN (CAST(pa.value AS INT) & 4 = 4) THEN 1 END ,\n       SetOptions = SUBSTRING(\n                    CASE WHEN (CAST(pa.value AS INT) & 1 = 1) THEN ', ANSI_PADDING' ELSE '' END +\n                    CASE WHEN (CAST(pa.value AS INT) & 8 = 8) THEN ', CONCAT_NULL_YIELDS_NULL' ELSE '' END +\n                    CASE WHEN (CAST(pa.value AS INT) & 16 = 16) THEN ', ANSI_WARNINGS' ELSE '' END +\n                    CASE WHEN (CAST(pa.value AS INT) & 32 = 32) THEN ', ANSI_NULLS' ELSE '' END +\n                    CASE WHEN (CAST(pa.value AS INT) & 64 = 64) THEN ', QUOTED_IDENTIFIER' ELSE '' END +\n                    CASE WHEN (CAST(pa.value AS INT) & 4096 = 4096) THEN ', ARITH_ABORT' ELSE '' END +\n                    CASE WHEN (CAST(pa.value AS INT) & 8192 = 8191) THEN ', NUMERIC_ROUNDABORT' ELSE '' END \n                    , 2, 200000)\nFROM   ##bou_BlitzCacheProcs p\n       CROSS APPLY sys.dm_exec_plan_attributes(p.PlanHandle) pa\nWHERE  pa.attribute = 'set_options' \nAND SPID = @@SPID\nOPTION (RECOMPILE);\n\n\n/* Cursor checks */\nUPDATE p\nSET    is_cursor = CASE WHEN CAST(pa.value AS INT) <> 0 THEN 1 END\nFROM   ##bou_BlitzCacheProcs p\n       CROSS APPLY sys.dm_exec_plan_attributes(p.PlanHandle) pa\nWHERE  pa.attribute LIKE '%cursor%' \nAND SPID = @@SPID\nOPTION (RECOMPILE);\n\nUPDATE p\nSET    is_cursor = 1\nFROM   ##bou_BlitzCacheProcs p\nWHERE QueryHash = 0x0000000000000000\nOR QueryPlanHash = 0x0000000000000000\nAND SPID = @@SPID\nOPTION (RECOMPILE);\n\n\n\nRAISERROR('Populating Warnings column', 0, 1) WITH NOWAIT;\n/* Populate warnings */\nUPDATE ##bou_BlitzCacheProcs\nSET    Warnings = SUBSTRING(\n                  CASE WHEN warning_no_join_predicate = 1 THEN ', No Join Predicate' ELSE '' END +\n                  CASE WHEN compile_timeout = 1 THEN ', Compilation Timeout' ELSE '' END +\n                  CASE WHEN compile_memory_limit_exceeded = 1 THEN ', Compile Memory Limit Exceeded' ELSE '' END +\n                  CASE WHEN busy_loops = 1 THEN ', Busy Loops' ELSE '' END +\n                  CASE WHEN is_forced_plan = 1 THEN ', Forced Plan' ELSE '' END +\n                  CASE WHEN is_forced_parameterized = 1 THEN ', Forced Parameterization' ELSE '' END +\n                  CASE WHEN unparameterized_query = 1 THEN ', Unparameterized Query' ELSE '' END +\n                  CASE WHEN missing_index_count > 0 THEN ', Missing Indexes (' + CAST(missing_index_count AS VARCHAR(3)) + ')' ELSE '' END +\n                  CASE WHEN unmatched_index_count > 0 THEN ', Unmatched Indexes (' + CAST(unmatched_index_count AS VARCHAR(3)) + ')' ELSE '' END +                  \n                  CASE WHEN is_cursor = 1 THEN ', Cursor' \n\t\t\t\t\t\t\t+ CASE WHEN is_optimistic_cursor = 1 THEN '; optimistic' ELSE '' END\n\t\t\t\t\t\t\t+ CASE WHEN is_forward_only_cursor = 0 THEN '; not forward only' ELSE '' END\n\t\t\t\t\t\t\t+ CASE WHEN is_cursor_dynamic = 1 THEN '; dynamic' ELSE '' END\t\t\n\t\t\t\t  ELSE '' END +\n                  CASE WHEN is_parallel = 1 THEN ', Parallel' ELSE '' END +\n                  CASE WHEN near_parallel = 1 THEN ', Nearly Parallel' ELSE '' END +\n                  CASE WHEN frequent_execution = 1 THEN ', Frequent Execution' ELSE '' END +\n                  CASE WHEN plan_warnings = 1 THEN ', Plan Warnings' ELSE '' END +\n                  CASE WHEN parameter_sniffing = 1 THEN ', Parameter Sniffing' ELSE '' END +\n                  CASE WHEN long_running = 1 THEN ', Long Running Query' ELSE '' END +\n                  CASE WHEN downlevel_estimator = 1 THEN ', Downlevel CE' ELSE '' END +\n                  CASE WHEN implicit_conversions = 1 THEN ', Implicit Conversions' ELSE '' END +\n                  CASE WHEN tvf_join = 1 THEN ', Function Join' ELSE '' END +\n                  CASE WHEN plan_multiple_plans = 1 THEN ', Multiple Plans' ELSE '' END +\n                  CASE WHEN is_trivial = 1 THEN ', Trivial Plans' ELSE '' END +\n\t\t\t\t  CASE WHEN is_forced_serial = 1 THEN ', Forced Serialization' ELSE '' END +\n\t\t\t\t  CASE WHEN is_key_lookup_expensive = 1 THEN ', Expensive Key Lookup' ELSE '' END +\n\t\t\t\t  CASE WHEN is_remote_query_expensive = 1 THEN ', Expensive Remote Query' ELSE '' END + \n\t\t\t\t  CASE WHEN trace_flags_session IS NOT NULL THEN ', Session Level Trace Flag(s) Enabled: ' + trace_flags_session ELSE '' END +\n\t\t\t\t  CASE WHEN is_unused_grant = 1 THEN ', Unused Memory Grant' ELSE '' END +\n\t\t\t\t  CASE WHEN function_count > 0 THEN ', Calls ' + CONVERT(VARCHAR(10), function_count) + ' function(s)' ELSE '' END + \n\t\t\t\t  CASE WHEN clr_function_count > 0 THEN ', Calls ' + CONVERT(VARCHAR(10), clr_function_count) + ' CLR function(s)' ELSE '' END + \n\t\t\t\t  CASE WHEN PlanCreationTimeHours <= 4 THEN ', Plan created last 4hrs' ELSE '' END +\n\t\t\t\t  CASE WHEN is_table_variable = 1 THEN ', Table Variables' ELSE '' END +\n\t\t\t\t  CASE WHEN no_stats_warning = 1 THEN ', Columns With No Statistics' ELSE '' END +\n\t\t\t\t  CASE WHEN relop_warnings = 1 THEN ', Operator Warnings' ELSE '' END  + \n\t\t\t\t  CASE WHEN is_table_scan = 1 THEN ', Table Scans' ELSE '' END  + \n\t\t\t\t  CASE WHEN backwards_scan = 1 THEN ', Backwards Scans' ELSE '' END  + \n\t\t\t\t  CASE WHEN forced_index = 1 THEN ', Forced Indexes' ELSE '' END  + \n\t\t\t\t  CASE WHEN forced_seek = 1 THEN ', Forced Seeks' ELSE '' END  + \n\t\t\t\t  CASE WHEN forced_scan = 1 THEN ', Forced Scans' ELSE '' END  +\n\t\t\t\t  CASE WHEN columnstore_row_mode = 1 THEN ', ColumnStore Row Mode ' ELSE '' END +\n\t\t\t\t  CASE WHEN is_computed_scalar = 1 THEN ', Computed Column UDF ' ELSE '' END  +\n\t\t\t\t  CASE WHEN is_sort_expensive = 1 THEN ', Expensive Sort' ELSE '' END +\n\t\t\t\t  CASE WHEN is_computed_filter = 1 THEN ', Filter UDF' ELSE '' END +\n\t\t\t\t  CASE WHEN index_ops >= 5 THEN ', >= 5 Indexes Modified' ELSE '' END +\n\t\t\t\t  CASE WHEN is_row_level = 1 THEN ', Row Level Security' ELSE '' END + \n\t\t\t\t  CASE WHEN is_spatial = 1 THEN ', Spatial Index' ELSE '' END + \n\t\t\t\t  CASE WHEN index_dml = 1 THEN ', Index DML' ELSE '' END +\n\t\t\t\t  CASE WHEN table_dml = 1 THEN ', Table DML' ELSE '' END +\n\t\t\t\t  CASE WHEN low_cost_high_cpu = 1 THEN ', Low Cost High CPU' ELSE '' END + \n\t\t\t\t  CASE WHEN long_running_low_cpu = 1 THEN + ', Long Running With Low CPU' ELSE '' END +\n\t\t\t\t  CASE WHEN stale_stats = 1 THEN + ', Statistics used have > 100k modifications in the last 7 days' ELSE '' END +\n\t\t\t\t  CASE WHEN is_adaptive = 1 THEN + ', Adaptive Joins' ELSE '' END +\n\t\t\t\t  CASE WHEN is_spool_expensive = 1 THEN + ', Expensive Index Spool' ELSE '' END +\n\t\t\t\t  CASE WHEN is_spool_more_rows = 1 THEN + ', Large Index Row Spool' ELSE '' END +\n\t\t\t\t  CASE WHEN is_bad_estimate = 1 THEN + ', Row estimate mismatch' ELSE '' END  +\n\t\t\t\t  CASE WHEN is_paul_white_electric = 1 THEN ', SWITCH!' ELSE '' END + \n\t\t\t\t  CASE WHEN is_row_goal = 1 THEN ', Row Goals' ELSE '' END + \n                  CASE WHEN is_big_spills = 1 THEN ', >500mb spills' ELSE '' END\n\t\t\t\t  , 2, 200000) \nWHERE SPID = @@SPID\nOPTION (RECOMPILE);\n\n\nRAISERROR('Populating Warnings column for stored procedures', 0, 1) WITH NOWAIT;\nWITH statement_warnings AS \n\t(\nSELECT  DISTINCT\n\t\tSqlHandle,\n\t\tWarnings = SUBSTRING(\n                  CASE WHEN warning_no_join_predicate = 1 THEN ', No Join Predicate' ELSE '' END +\n                  CASE WHEN compile_timeout = 1 THEN ', Compilation Timeout' ELSE '' END +\n                  CASE WHEN compile_memory_limit_exceeded = 1 THEN ', Compile Memory Limit Exceeded' ELSE '' END +\n                  CASE WHEN busy_loops = 1 THEN ', Busy Loops' ELSE '' END +\n                  CASE WHEN is_forced_plan = 1 THEN ', Forced Plan' ELSE '' END +\n                  CASE WHEN is_forced_parameterized = 1 THEN ', Forced Parameterization' ELSE '' END +\n                  --CASE WHEN unparameterized_query = 1 THEN ', Unparameterized Query' ELSE '' END +\n                  CASE WHEN missing_index_count > 0 THEN ', Missing Indexes (' + CONVERT(VARCHAR(10), (SELECT SUM(b2.missing_index_count) FROM ##bou_BlitzCacheProcs AS b2 WHERE b2.SqlHandle = b.SqlHandle AND b2.QueryHash IS NOT NULL) ) + ')' ELSE '' END +\n                  CASE WHEN unmatched_index_count > 0 THEN ', Unmatched Indexes (' + CONVERT(VARCHAR(10), (SELECT SUM(b2.unmatched_index_count) FROM ##bou_BlitzCacheProcs AS b2 WHERE b2.SqlHandle = b.SqlHandle AND b2.QueryHash IS NOT NULL) ) + ')' ELSE '' END +                  \n                  CASE WHEN is_cursor = 1 THEN ', Cursor' \n\t\t\t\t\t\t\t+ CASE WHEN is_optimistic_cursor = 1 THEN '; optimistic' ELSE '' END\n\t\t\t\t\t\t\t+ CASE WHEN is_forward_only_cursor = 0 THEN '; not forward only' ELSE '' END\n\t\t\t\t\t\t\t+ CASE WHEN is_cursor_dynamic = 1 THEN '; dynamic' ELSE '' END\t\t\t\t\t\t\t\t\n\t\t\t\t  ELSE '' END +\n                  CASE WHEN is_parallel = 1 THEN ', Parallel' ELSE '' END +\n                  CASE WHEN near_parallel = 1 THEN ', Nearly Parallel' ELSE '' END +\n                  CASE WHEN frequent_execution = 1 THEN ', Frequent Execution' ELSE '' END +\n                  CASE WHEN plan_warnings = 1 THEN ', Plan Warnings' ELSE '' END +\n                  CASE WHEN parameter_sniffing = 1 THEN ', Parameter Sniffing' ELSE '' END +\n                  CASE WHEN long_running = 1 THEN ', Long Running Query' ELSE '' END +\n                  CASE WHEN downlevel_estimator = 1 THEN ', Downlevel CE' ELSE '' END +\n                  CASE WHEN implicit_conversions = 1 THEN ', Implicit Conversions' ELSE '' END +\n                  CASE WHEN tvf_join = 1 THEN ', Function Join' ELSE '' END +\n                  CASE WHEN plan_multiple_plans = 1 THEN ', Multiple Plans' ELSE '' END +\n                  CASE WHEN is_trivial = 1 THEN ', Trivial Plans' ELSE '' END +\n\t\t\t\t  CASE WHEN is_forced_serial = 1 THEN ', Forced Serialization' ELSE '' END +\n\t\t\t\t  CASE WHEN is_key_lookup_expensive = 1 THEN ', Expensive Key Lookup' ELSE '' END +\n\t\t\t\t  CASE WHEN is_remote_query_expensive = 1 THEN ', Expensive Remote Query' ELSE '' END + \n\t\t\t\t  CASE WHEN trace_flags_session IS NOT NULL THEN ', Session Level Trace Flag(s) Enabled: ' + trace_flags_session ELSE '' END +\n\t\t\t\t  CASE WHEN is_unused_grant = 1 THEN ', Unused Memory Grant' ELSE '' END +\n\t\t\t\t  CASE WHEN function_count > 0 THEN ', Calls ' + CONVERT(VARCHAR(10), (SELECT SUM(b2.function_count) FROM ##bou_BlitzCacheProcs AS b2 WHERE b2.SqlHandle = b.SqlHandle AND b2.QueryHash IS NOT NULL) ) + ' function(s)' ELSE '' END + \n\t\t\t\t  CASE WHEN clr_function_count > 0 THEN ', Calls ' + CONVERT(VARCHAR(10), (SELECT SUM(b2.clr_function_count) FROM ##bou_BlitzCacheProcs AS b2 WHERE b2.SqlHandle = b.SqlHandle AND b2.QueryHash IS NOT NULL) ) + ' CLR function(s)' ELSE '' END + \n\t\t\t\t  CASE WHEN PlanCreationTimeHours <= 4 THEN ', Plan created last 4hrs' ELSE '' END +\n\t\t\t\t  CASE WHEN is_table_variable = 1 THEN ', Table Variables' ELSE '' END +\n\t\t\t\t  CASE WHEN no_stats_warning = 1 THEN ', Columns With No Statistics' ELSE '' END +\n\t\t\t\t  CASE WHEN relop_warnings = 1 THEN ', Operator Warnings' ELSE '' END  + \n\t\t\t\t  CASE WHEN is_table_scan = 1 THEN ', Table Scans' ELSE '' END  + \n\t\t\t\t  CASE WHEN backwards_scan = 1 THEN ', Backwards Scans' ELSE '' END  + \n\t\t\t\t  CASE WHEN forced_index = 1 THEN ', Forced Indexes' ELSE '' END  + \n\t\t\t\t  CASE WHEN forced_seek = 1 THEN ', Forced Seeks' ELSE '' END  + \n\t\t\t\t  CASE WHEN forced_scan = 1 THEN ', Forced Scans' ELSE '' END  +\n\t\t\t\t  CASE WHEN columnstore_row_mode = 1 THEN ', ColumnStore Row Mode ' ELSE '' END +\n\t\t\t\t  CASE WHEN is_computed_scalar = 1 THEN ', Computed Column UDF ' ELSE '' END  +\n\t\t\t\t  CASE WHEN is_sort_expensive = 1 THEN ', Expensive Sort' ELSE '' END +\n\t\t\t\t  CASE WHEN is_computed_filter = 1 THEN ', Filter UDF' ELSE '' END +\n\t\t\t\t  CASE WHEN index_ops >= 5 THEN ', >= 5 Indexes Modified' ELSE '' END +\n\t\t\t\t  CASE WHEN is_row_level = 1 THEN ', Row Level Security' ELSE '' END + \n\t\t\t\t  CASE WHEN is_spatial = 1 THEN ', Spatial Index' ELSE '' END +\n\t\t\t\t  CASE WHEN index_dml = 1 THEN ', Index DML' ELSE '' END +\n\t\t\t\t  CASE WHEN table_dml = 1 THEN ', Table DML' ELSE '' END + \n\t\t\t\t  CASE WHEN low_cost_high_cpu = 1 THEN ', Low Cost High CPU' ELSE '' END + \n\t\t\t\t  CASE WHEN long_running_low_cpu = 1 THEN + ', Long Running With Low CPU' ELSE '' END + \n\t\t\t\t  CASE WHEN stale_stats = 1 THEN + ', Statistics used have > 100k modifications in the last 7 days' ELSE '' END +\n\t\t\t\t  CASE WHEN is_adaptive = 1 THEN + ', Adaptive Joins' ELSE '' END +\n\t\t\t\t  CASE WHEN is_spool_expensive = 1 THEN + ', Expensive Index Spool' ELSE '' END +\n\t\t\t\t  CASE WHEN is_spool_more_rows = 1 THEN + ', Large Index Row Spool' ELSE '' END +\n\t\t\t\t  CASE WHEN is_bad_estimate = 1 THEN + ', Row estimate mismatch' ELSE '' END  +\n\t\t\t\t  CASE WHEN is_paul_white_electric = 1 THEN ', SWITCH!' ELSE '' END + \n\t\t\t\t  CASE WHEN is_row_goal = 1 THEN ', Row Goals' ELSE '' END + \n                  CASE WHEN is_big_spills = 1 THEN ', >500mb spills' ELSE '' END\n                  , 2, 200000) \nFROM ##bou_BlitzCacheProcs b\nWHERE SPID = @@SPID\nAND QueryType LIKE 'Statement (parent%'\n\t)\nUPDATE b\nSET b.Warnings = s.Warnings\nFROM ##bou_BlitzCacheProcs AS b\nJOIN statement_warnings s\nON b.SqlHandle = s.SqlHandle\nWHERE QueryType LIKE 'Procedure or Function%'\nAND SPID = @@SPID\nOPTION (RECOMPILE);\n\nRAISERROR('Checking for plans with >128 levels of nesting', 0, 1) WITH NOWAIT;\t\nWITH plan_handle AS (\nSELECT b.PlanHandle\nFROM ##bou_BlitzCacheProcs b\n   CROSS APPLY sys.dm_exec_text_query_plan(b.PlanHandle, 0, -1) tqp\n   CROSS APPLY sys.dm_exec_query_plan(b.PlanHandle) qp\n   WHERE tqp.encrypted = 0\n   AND b.SPID = @@SPID\n   AND (qp.query_plan IS NULL\n\t\t\tAND tqp.query_plan IS NOT NULL)\n)\nUPDATE b\nSET Warnings = ISNULL('Your query plan is >128 levels of nested nodes, and can''t be converted to XML. Use SELECT * FROM sys.dm_exec_text_query_plan('+ CONVERT(VARCHAR(128), ph.PlanHandle, 1) + ', 0, -1) to get more information' \n                        , 'We couldn''t find a plan for this query. Possible reasons for this include dynamic SQL, RECOMPILE hints, and encrypted code.')\nFROM ##bou_BlitzCacheProcs b\nLEFT JOIN plan_handle ph ON\nb.PlanHandle = ph.PlanHandle\nWHERE b.QueryPlan IS NULL\nAND b.SPID = @@SPID\nOPTION (RECOMPILE);\t\t\t  \n\nRAISERROR('Checking for plans with no warnings', 0, 1) WITH NOWAIT;\t\nUPDATE ##bou_BlitzCacheProcs\nSET Warnings = 'No warnings detected.'\nWHERE Warnings = '' OR\tWarnings IS NULL\nAND SPID = @@SPID\nOPTION (RECOMPILE);\n\n\nResults:\nIF @OutputDatabaseName IS NOT NULL\n   AND @OutputSchemaName IS NOT NULL\n   AND @OutputTableName IS NOT NULL\nBEGIN\n    RAISERROR('Writing results to table.', 0, 1) WITH NOWAIT;\n\n    /* send results to a table */\n    DECLARE @insert_sql NVARCHAR(MAX) = N'' ;\n\n    SET @insert_sql = 'USE '\n        + @OutputDatabaseName\n        + '; IF EXISTS(SELECT * FROM '\n        + @OutputDatabaseName\n        + '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''\n        + @OutputSchemaName\n        + ''') AND NOT EXISTS (SELECT * FROM '\n        + @OutputDatabaseName\n        + '.INFORMATION_SCHEMA.TABLES WHERE QUOTENAME(TABLE_SCHEMA) = '''\n        + @OutputSchemaName + ''' AND QUOTENAME(TABLE_NAME) = '''\n        + @OutputTableName + ''') CREATE TABLE '\n        + @OutputSchemaName + '.'\n        + @OutputTableName\n        + N'(ID bigint NOT NULL IDENTITY(1,1),\n          ServerName NVARCHAR(258),\n\t\t  CheckDate DATETIMEOFFSET,\n          Version NVARCHAR(258),\n          QueryType NVARCHAR(258),\n          Warnings varchar(max),\n          DatabaseName sysname,\n          SerialDesiredMemory float,\n          SerialRequiredMemory float,\n          AverageCPU bigint,\n          TotalCPU bigint,\n          PercentCPUByType money,\n          CPUWeight money,\n          AverageDuration bigint,\n          TotalDuration bigint,\n          DurationWeight money,\n          PercentDurationByType money,\n          AverageReads bigint,\n          TotalReads bigint,\n          ReadWeight money,\n          PercentReadsByType money,\n          AverageWrites bigint,\n          TotalWrites bigint,\n          WriteWeight money,\n          PercentWritesByType money,\n          ExecutionCount bigint,\n          ExecutionWeight money,\n          PercentExecutionsByType money,' + N'\n          ExecutionsPerMinute money,\n          PlanCreationTime datetime,\n\t\t  PlanCreationTimeHours AS DATEDIFF(HOUR, PlanCreationTime, SYSDATETIME()),\n          LastExecutionTime datetime,\n\t\t  PlanHandle varbinary(64),\n\t\t  [Remove Plan Handle From Cache] AS \n\t\t\tCASE WHEN [PlanHandle] IS NOT NULL \n\t\t\tTHEN ''DBCC FREEPROCCACHE ('' + CONVERT(VARCHAR(128), [PlanHandle], 1) + '');''\n\t\t\tELSE ''N/A'' END,\n\t\t  SqlHandle varbinary(64),\n\t\t\t[Remove SQL Handle From Cache] AS \n\t\t\tCASE WHEN [SqlHandle] IS NOT NULL \n\t\t\tTHEN ''DBCC FREEPROCCACHE ('' + CONVERT(VARCHAR(128), [SqlHandle], 1) + '');''\n\t\t\tELSE ''N/A'' END,\n\t\t  [SQL Handle More Info] AS \n\t\t\tCASE WHEN [SqlHandle] IS NOT NULL \n\t\t\tTHEN ''EXEC sp_BlitzCache @OnlySqlHandles = '''''' + CONVERT(VARCHAR(128), [SqlHandle], 1) + ''''''; ''\n\t\t\tELSE ''N/A'' END,\n\t\t  QueryHash binary(8),\n\t\t  [Query Hash More Info] AS \n\t\t\tCASE WHEN [QueryHash] IS NOT NULL \n\t\t\tTHEN ''EXEC sp_BlitzCache @OnlyQueryHashes = '''''' + CONVERT(VARCHAR(32), [QueryHash], 1) + ''''''; ''\n\t\t\tELSE ''N/A'' END,\n          QueryPlanHash binary(8),\n          StatementStartOffset int,\n          StatementEndOffset int,\n          MinReturnedRows bigint,\n          MaxReturnedRows bigint,\n          AverageReturnedRows money,\n          TotalReturnedRows bigint,\n          QueryText nvarchar(max),\n          QueryPlan xml,\n          NumberOfPlans int,\n          NumberOfDistinctPlans int,\n\t\t  MinGrantKB BIGINT,\n\t\t  MaxGrantKB BIGINT,\n\t\t  MinUsedGrantKB BIGINT, \n\t\t  MaxUsedGrantKB BIGINT,\n\t\t  PercentMemoryGrantUsed MONEY,\n\t\t  AvgMaxMemoryGrant MONEY,\n\t\t  MinSpills BIGINT,\n\t\t  MaxSpills BIGINT,\n\t\t  TotalSpills BIGINT,\n\t\t  AvgSpills MONEY,\n\t\t  QueryPlanCost FLOAT,\n          CONSTRAINT [PK_' +CAST(NEWID() AS NCHAR(36)) + '] PRIMARY KEY CLUSTERED(ID))';\n\n    \t\tIF @Debug = 1\n\t\t\tBEGIN\n\t\t\t    PRINT SUBSTRING(@insert_sql, 0, 4000);\n\t\t\t    PRINT SUBSTRING(@insert_sql, 4000, 8000);\n\t\t\t    PRINT SUBSTRING(@insert_sql, 8000, 12000);\n\t\t\t    PRINT SUBSTRING(@insert_sql, 12000, 16000);\n\t\t\t    PRINT SUBSTRING(@insert_sql, 16000, 20000);\n\t\t\t    PRINT SUBSTRING(@insert_sql, 20000, 24000);\n\t\t\t    PRINT SUBSTRING(@insert_sql, 24000, 28000);\n\t\t\t    PRINT SUBSTRING(@insert_sql, 28000, 32000);\n\t\t\t    PRINT SUBSTRING(@insert_sql, 32000, 36000);\n\t\t\t    PRINT SUBSTRING(@insert_sql, 36000, 40000);\n\t\t\tEND;\n\n\tEXEC sp_executesql @insert_sql ;\n\n    IF @CheckDateOverride IS NULL\n        BEGIN\n        SET @CheckDateOverride = SYSDATETIMEOFFSET();\n        END\n\n\n    SET @insert_sql =N' IF EXISTS(SELECT * FROM '\n          + @OutputDatabaseName\n          + N'.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''\n          + @OutputSchemaName + N''') '\n          + 'INSERT '\n          + @OutputDatabaseName + '.'\n          + @OutputSchemaName + '.'\n          + @OutputTableName\n          + N' (ServerName, CheckDate, Version, QueryType, DatabaseName, AverageCPU, TotalCPU, PercentCPUByType, CPUWeight, AverageDuration, TotalDuration, DurationWeight, PercentDurationByType, AverageReads, TotalReads, ReadWeight, PercentReadsByType, '\n          + N' AverageWrites, TotalWrites, WriteWeight, PercentWritesByType, ExecutionCount, ExecutionWeight, PercentExecutionsByType, '\n          + N' ExecutionsPerMinute, PlanCreationTime, LastExecutionTime, PlanHandle, SqlHandle, QueryHash, StatementStartOffset, StatementEndOffset, MinReturnedRows, MaxReturnedRows, AverageReturnedRows, TotalReturnedRows, QueryText, QueryPlan, NumberOfPlans, NumberOfDistinctPlans, Warnings, '\n          + N' SerialRequiredMemory, SerialDesiredMemory, MinGrantKB, MaxGrantKB, MinUsedGrantKB, MaxUsedGrantKB, PercentMemoryGrantUsed, AvgMaxMemoryGrant, MinSpills, MaxSpills, TotalSpills, AvgSpills, QueryPlanCost ) '\n          + N'SELECT TOP (@Top) '\n          + QUOTENAME(CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128)), N'''') + N', @CheckDateOverride, '\n          + QUOTENAME(CAST(SERVERPROPERTY('ProductVersion') AS NVARCHAR(128)), N'''') + ', '\n          + N' QueryType, DatabaseName, AverageCPU, TotalCPU, PercentCPUByType, PercentCPU, AverageDuration, TotalDuration, PercentDuration, PercentDurationByType, AverageReads, TotalReads, PercentReads, PercentReadsByType, '\n          + N' AverageWrites, TotalWrites, PercentWrites, PercentWritesByType, ExecutionCount, PercentExecutions, PercentExecutionsByType, '\n          + N' ExecutionsPerMinute, PlanCreationTime, LastExecutionTime, PlanHandle, SqlHandle, QueryHash, StatementStartOffset, StatementEndOffset, MinReturnedRows, MaxReturnedRows, AverageReturnedRows, TotalReturnedRows, QueryText, QueryPlan, NumberOfPlans, NumberOfDistinctPlans, Warnings, '\n          + N' SerialRequiredMemory, SerialDesiredMemory, MinGrantKB, MaxGrantKB, MinUsedGrantKB, MaxUsedGrantKB, PercentMemoryGrantUsed, AvgMaxMemoryGrant, MinSpills, MaxSpills, TotalSpills, AvgSpills, QueryPlanCost '\n          + N' FROM ##bou_BlitzCacheProcs '\n\t\t  + N' WHERE 1=1 ';\n   \n   IF @MinimumExecutionCount IS NOT NULL\n      BEGIN\n\t\tSET @insert_sql += N' AND ExecutionCount >= @MinimumExecutionCount ';\n\t  END;\n\n   IF @MinutesBack IS NOT NULL\n      BEGIN\n\t\tSET @insert_sql += N' AND LastExecutionTime >= DATEADD(MINUTE, @min_back, GETDATE() ) ';\n\t  END;\n\n\tSET @insert_sql += N' AND SPID = @@SPID ';\n          \n    SELECT @insert_sql += N' ORDER BY ' + CASE @SortOrder WHEN 'cpu' THEN N' TotalCPU '\n                                                    WHEN N'reads' THEN N' TotalReads '\n                                                    WHEN N'writes' THEN N' TotalWrites '\n                                                    WHEN N'duration' THEN N' TotalDuration '\n                                                    WHEN N'executions' THEN N' ExecutionCount '\n                                                    WHEN N'compiles' THEN N' PlanCreationTime '\n\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN N'memory grant' THEN N' MaxGrantKB'\n\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN N'spills' THEN N' MaxSpills'\n                                                    WHEN N'avg cpu' THEN N' AverageCPU'\n                                                    WHEN N'avg reads' THEN N' AverageReads'\n                                                    WHEN N'avg writes' THEN N' AverageWrites'\n                                                    WHEN N'avg duration' THEN N' AverageDuration'\n                                                    WHEN N'avg executions' THEN N' ExecutionsPerMinute'\n\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN N'avg memory grant' THEN N' AvgMaxMemoryGrant'\n\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN 'avg spills' THEN N' AvgSpills'\n                                                    END + N' DESC ';\n\n    SET @insert_sql += N' OPTION (RECOMPILE) ; ';    \n    \n    \tIF @Debug = 1\n\t\tBEGIN\n\t\t    PRINT SUBSTRING(@insert_sql, 0, 4000);\n\t\t    PRINT SUBSTRING(@insert_sql, 4000, 8000);\n\t\t    PRINT SUBSTRING(@insert_sql, 8000, 12000);\n\t\t    PRINT SUBSTRING(@insert_sql, 12000, 16000);\n\t\t    PRINT SUBSTRING(@insert_sql, 16000, 20000);\n\t\t    PRINT SUBSTRING(@insert_sql, 20000, 24000);\n\t\t    PRINT SUBSTRING(@insert_sql, 24000, 28000);\n\t\t    PRINT SUBSTRING(@insert_sql, 28000, 32000);\n\t\t    PRINT SUBSTRING(@insert_sql, 32000, 36000);\n\t\t    PRINT SUBSTRING(@insert_sql, 36000, 40000);\n\t\tEND;\n\n    EXEC sp_executesql @insert_sql, N'@Top INT, @min_duration INT, @min_back INT, @CheckDateOverride DATETIMEOFFSET, @MinimumExecutionCount INT', @Top, @DurationFilter_i, @MinutesBack, @CheckDateOverride, @MinimumExecutionCount;\n\n    RETURN;\nEND;\nELSE IF @ExportToExcel = 1\nBEGIN\n    RAISERROR('Displaying results with Excel formatting (no plans).', 0, 1) WITH NOWAIT;\n\n    /* excel output */\n    UPDATE ##bou_BlitzCacheProcs\n    SET QueryText = SUBSTRING(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(QueryText)),' ','<>'),'><',''),'<>',' '), 1, 32000)\n\tOPTION(RECOMPILE);\n\n    SET @sql = N'\n    SELECT  TOP (@Top)\n            DatabaseName AS [Database Name],\n            QueryPlanCost AS [Cost],\n            QueryText,\n            QueryType AS [Query Type],\n            Warnings,\n            ExecutionCount,\n            ExecutionsPerMinute AS [Executions / Minute],\n            PercentExecutions AS [Execution Weight],\n            PercentExecutionsByType AS [% Executions (Type)],\n            SerialDesiredMemory AS [Serial Desired Memory],\n            SerialRequiredMemory AS [Serial Required Memory],\n            TotalCPU AS [Total CPU (ms)],\n            AverageCPU AS [Avg CPU (ms)],\n            PercentCPU AS [CPU Weight],\n            PercentCPUByType AS [% CPU (Type)],\n            TotalDuration AS [Total Duration (ms)],\n            AverageDuration AS [Avg Duration (ms)],\n            PercentDuration AS [Duration Weight],\n            PercentDurationByType AS [% Duration (Type)],\n            TotalReads AS [Total Reads],\n            AverageReads AS [Average Reads],\n            PercentReads AS [Read Weight],\n            PercentReadsByType AS [% Reads (Type)],\n            TotalWrites AS [Total Writes],\n            AverageWrites AS [Average Writes],\n            PercentWrites AS [Write Weight],\n            PercentWritesByType AS [% Writes (Type)],\n            TotalReturnedRows,\n            AverageReturnedRows,\n            MinReturnedRows,\n            MaxReturnedRows,\n\t\t    MinGrantKB,\n\t\t    MaxGrantKB,\n\t\t    MinUsedGrantKB, \n\t\t    MaxUsedGrantKB,\n\t\t    PercentMemoryGrantUsed,\n\t\t\tAvgMaxMemoryGrant,\n\t\t\tMinSpills, \n\t\t\tMaxSpills, \n\t\t\tTotalSpills, \n\t\t\tAvgSpills,\n            NumberOfPlans,\n            NumberOfDistinctPlans,\n            PlanCreationTime AS [Created At],\n            LastExecutionTime AS [Last Execution],\n            StatementStartOffset,\n            StatementEndOffset,\n\t\t\tPlanHandle AS [Plan Handle],  \n\t\t\tSqlHandle AS [SQL Handle],  \n            QueryHash,\n            QueryPlanHash,\n            COALESCE(SetOptions, '''') AS [SET Options]\n    FROM    ##bou_BlitzCacheProcs\n    WHERE   1 = 1 \n\tAND SPID = @@SPID ' + @nl;\n\n    IF @MinimumExecutionCount IS NOT NULL\n      BEGIN\n\t\tSET @sql += N' AND ExecutionCount >= @minimumExecutionCount ';\n\t  END;\n\t\n   IF @MinutesBack IS NOT NULL\n      BEGIN\n\t\tSET @sql += N' AND LastExecutionTime >= DATEADD(MINUTE, @min_back, GETDATE() ) ';\n\t  END;\n\n\tSELECT @sql += N' ORDER BY ' + CASE @SortOrder WHEN N'cpu' THEN N' TotalCPU '\n                              WHEN N'reads' THEN N' TotalReads '\n                              WHEN N'writes' THEN N' TotalWrites '\n                              WHEN N'duration' THEN N' TotalDuration '\n                              WHEN N'executions' THEN N' ExecutionCount '\n                              WHEN N'compiles' THEN N' PlanCreationTime '\n\t\t\t\t\t\t\t  WHEN N'memory grant' THEN N' MaxGrantKB'\n\t\t\t\t\t\t\t  WHEN N'spills' THEN N' MaxSpills'\n                              WHEN N'avg cpu' THEN N' AverageCPU'\n                              WHEN N'avg reads' THEN N' AverageReads'\n                              WHEN N'avg writes' THEN N' AverageWrites'\n                              WHEN N'avg duration' THEN N' AverageDuration'\n                              WHEN N'avg executions' THEN N' ExecutionsPerMinute'\n\t\t\t\t\t\t\t  WHEN N'avg memory grant' THEN N' AvgMaxMemoryGrant'\n\t\t\t\t\t\t\t  WHEN N'avg spills' THEN N' AvgSpills'\n                              END + N' DESC ';\n\n    SET @sql += N' OPTION (RECOMPILE) ; ';\n\n\tIF @Debug = 1\n\tBEGIN\n\t    PRINT SUBSTRING(@sql, 0, 4000);\n\t    PRINT SUBSTRING(@sql, 4000, 8000);\n\t    PRINT SUBSTRING(@sql, 8000, 12000);\n\t    PRINT SUBSTRING(@sql, 12000, 16000);\n\t    PRINT SUBSTRING(@sql, 16000, 20000);\n\t    PRINT SUBSTRING(@sql, 20000, 24000);\n\t    PRINT SUBSTRING(@sql, 24000, 28000);\n\t    PRINT SUBSTRING(@sql, 28000, 32000);\n\t    PRINT SUBSTRING(@sql, 32000, 36000);\n\t    PRINT SUBSTRING(@sql, 36000, 40000);\n\tEND;\n\n    EXEC sp_executesql @sql, N'@Top INT, @min_duration INT, @min_back INT, @minimumExecutionCount INT', @Top, @DurationFilter_i, @MinutesBack, @MinimumExecutionCount;\nEND;\n\n\nRAISERROR('Displaying analysis of plan cache.', 0, 1) WITH NOWAIT;\n\nDECLARE @columns NVARCHAR(MAX) = N'' ;\n\nIF @ExpertMode = 0\nBEGIN\n    RAISERROR(N'Returning ExpertMode = 0', 0, 1) WITH NOWAIT;\n\tSET @columns = N' DatabaseName AS [Database],\n    QueryPlanCost AS [Cost],\n    QueryText AS [Query Text],\n    QueryType AS [Query Type],\n    Warnings AS [Warnings],\n\tQueryPlan AS [Query Plan],\n\tmissing_indexes AS [Missing Indexes],\n\timplicit_conversion_info AS [Implicit Conversion Info],\n\tcached_execution_parameters AS [Cached Execution Parameters],\n    ExecutionCount AS [# Executions],\n    ExecutionsPerMinute AS [Executions / Minute],\n    PercentExecutions AS [Execution Weight],\n    TotalCPU AS [Total CPU (ms)],\n    AverageCPU AS [Avg CPU (ms)],\n    PercentCPU AS [CPU Weight],\n    TotalDuration AS [Total Duration (ms)],\n    AverageDuration AS [Avg Duration (ms)],\n    PercentDuration AS [Duration Weight],\n    TotalReads AS [Total Reads],\n    AverageReads AS [Avg Reads],\n    PercentReads AS [Read Weight],\n    TotalWrites AS [Total Writes],\n    AverageWrites AS [Avg Writes],\n    PercentWrites AS [Write Weight],\n    AverageReturnedRows AS [Average Rows],\n\tMinGrantKB AS [Minimum Memory Grant KB],\n\tMaxGrantKB AS [Maximum Memory Grant KB],\n\tMinUsedGrantKB AS [Minimum Used Grant KB], \n\tMaxUsedGrantKB AS [Maximum Used Grant KB],\n\tAvgMaxMemoryGrant AS [Average Max Memory Grant],\n\tMinSpills AS [Min Spills],\n\tMaxSpills AS [Max Spills],\n\tTotalSpills AS [Total Spills],\n\tAvgSpills AS [Avg Spills],\n    PlanCreationTime AS [Created At],\n    LastExecutionTime AS [Last Execution],\n\tPlanHandle AS [Plan Handle], \n\tSqlHandle AS [SQL Handle], \n    COALESCE(SetOptions, '''') AS [SET Options] ';\nEND;\nELSE\nBEGIN\n    SET @columns = N' DatabaseName AS [Database],\n\t\tQueryPlanCost AS [Cost],\n        QueryText AS [Query Text],\n        QueryType AS [Query Type],\n        Warnings AS [Warnings], \n\t\tQueryPlan AS [Query Plan], \n\t\tmissing_indexes AS [Missing Indexes],\n\t\timplicit_conversion_info AS [Implicit Conversion Info],\n\t\tcached_execution_parameters AS [Cached Execution Parameters], ' + @nl;\n\n    IF @ExpertMode = 2 /* Opserver */\n    BEGIN\n        RAISERROR(N'Returning Expert Mode = 2', 0, 1) WITH NOWAIT;\n\t\tSET @columns += N'        \n\t\t\t\t  SUBSTRING(\n                  CASE WHEN warning_no_join_predicate = 1 THEN '', 20'' ELSE '''' END +\n                  CASE WHEN compile_timeout = 1 THEN '', 18'' ELSE '''' END +\n                  CASE WHEN compile_memory_limit_exceeded = 1 THEN '', 19'' ELSE '''' END +\n                  CASE WHEN busy_loops = 1 THEN '', 16'' ELSE '''' END +\n                  CASE WHEN is_forced_plan = 1 THEN '', 3'' ELSE '''' END +\n                  CASE WHEN is_forced_parameterized > 0 THEN '', 5'' ELSE '''' END +\n                  CASE WHEN unparameterized_query = 1 THEN '', 23'' ELSE '''' END +\n                  CASE WHEN missing_index_count > 0 THEN '', 10'' ELSE '''' END +\n                  CASE WHEN unmatched_index_count > 0 THEN '', 22'' ELSE '''' END +                  \n                  CASE WHEN is_cursor = 1 THEN '', 4'' ELSE '''' END +\n                  CASE WHEN is_parallel = 1 THEN '', 6'' ELSE '''' END +\n                  CASE WHEN near_parallel = 1 THEN '', 7'' ELSE '''' END +\n                  CASE WHEN frequent_execution = 1 THEN '', 1'' ELSE '''' END +\n                  CASE WHEN plan_warnings = 1 THEN '', 8'' ELSE '''' END +\n                  CASE WHEN parameter_sniffing = 1 THEN '', 2'' ELSE '''' END +\n                  CASE WHEN long_running = 1 THEN '', 9'' ELSE '''' END +\n                  CASE WHEN downlevel_estimator = 1 THEN '', 13'' ELSE '''' END +\n                  CASE WHEN implicit_conversions = 1 THEN '', 14'' ELSE '''' END +\n                  CASE WHEN tvf_join = 1 THEN '', 17'' ELSE '''' END +\n                  CASE WHEN plan_multiple_plans = 1 THEN '', 21'' ELSE '''' END +\n                  CASE WHEN unmatched_index_count > 0 THEN '', 22'' ELSE '''' END + \n                  CASE WHEN is_trivial = 1 THEN '', 24'' ELSE '''' END + \n\t\t\t\t  CASE WHEN is_forced_serial = 1 THEN '', 25'' ELSE '''' END +\n                  CASE WHEN is_key_lookup_expensive = 1 THEN '', 26'' ELSE '''' END +\n\t\t\t\t  CASE WHEN is_remote_query_expensive = 1 THEN '', 28'' ELSE '''' END + \n\t\t\t\t  CASE WHEN trace_flags_session IS NOT NULL THEN '', 29'' ELSE '''' END + \n\t\t\t\t  CASE WHEN is_unused_grant = 1 THEN '', 30'' ELSE '''' END +\n\t\t\t\t  CASE WHEN function_count > 0 THEN '', 31'' ELSE '''' END +\n\t\t\t\t  CASE WHEN clr_function_count > 0 THEN '', 32'' ELSE '''' END +\n\t\t\t\t  CASE WHEN PlanCreationTimeHours <= 4 THEN '', 33'' ELSE '''' END +\n\t\t\t\t  CASE WHEN is_table_variable = 1 THEN '', 34'' ELSE '''' END  + \n\t\t\t\t  CASE WHEN no_stats_warning = 1 THEN '', 35'' ELSE '''' END  +\n\t\t\t\t  CASE WHEN relop_warnings = 1 THEN '', 36'' ELSE '''' END +\n\t\t\t\t  CASE WHEN is_table_scan = 1 THEN '', 37'' ELSE '''' END +\n\t\t\t\t  CASE WHEN backwards_scan = 1 THEN '', 38'' ELSE '''' END + \n\t\t\t\t  CASE WHEN forced_index = 1 THEN '', 39'' ELSE '''' END +\n\t\t\t\t  CASE WHEN forced_seek = 1 OR forced_scan = 1 THEN '', 40'' ELSE '''' END +\n\t\t\t\t  CASE WHEN columnstore_row_mode = 1 THEN '', 41'' ELSE '''' END + \n\t\t\t\t  CASE WHEN is_computed_scalar = 1 THEN '', 42'' ELSE '''' END +\n\t\t\t\t  CASE WHEN is_sort_expensive = 1 THEN '', 43'' ELSE '''' END +\n\t\t\t\t  CASE WHEN is_computed_filter = 1 THEN '', 44'' ELSE '''' END + \n\t\t\t\t  CASE WHEN index_ops >= 5 THEN  '', 45'' ELSE '''' END +\n\t\t\t\t  CASE WHEN is_row_level = 1 THEN  '', 46'' ELSE '''' END +\n\t\t\t\t  CASE WHEN is_spatial = 1 THEN '', 47'' ELSE '''' END +\n\t\t\t\t  CASE WHEN index_dml = 1 THEN '', 48'' ELSE '''' END +\n\t\t\t\t  CASE WHEN table_dml = 1 THEN '', 49'' ELSE '''' END + \n\t\t\t\t  CASE WHEN long_running_low_cpu = 1 THEN '', 50'' ELSE '''' END +\n\t\t\t\t  CASE WHEN low_cost_high_cpu = 1 THEN '', 51'' ELSE '''' END + \n\t\t\t\t  CASE WHEN stale_stats = 1 THEN '', 52'' ELSE '''' END +\n\t\t\t\t  CASE WHEN is_adaptive = 1 THEN '', 53'' ELSE '''' END\t+\n\t\t\t\t  CASE WHEN is_spool_expensive = 1 THEN + '', 54'' ELSE '''' END +\n\t\t\t\t  CASE WHEN is_spool_more_rows = 1 THEN + '', 55'' ELSE '''' END  +\n\t\t\t\t  CASE WHEN is_bad_estimate = 1 THEN + '', 56'' ELSE '''' END  +\n\t\t\t\t  CASE WHEN is_paul_white_electric = 1 THEN '', 57'' ELSE '''' END + \n\t\t\t\t  CASE WHEN is_row_goal = 1 THEN '', 58'' ELSE '''' END + \n                  CASE WHEN is_big_spills = 1 THEN '', 59'' ELSE '''' END\n\t\t\t\t  , 2, 200000) AS opserver_warning , ' + @nl ;\n    END;\n    \n    SET @columns += N'        ExecutionCount AS [# Executions],\n        ExecutionsPerMinute AS [Executions / Minute],\n        PercentExecutions AS [Execution Weight],\n        SerialDesiredMemory AS [Serial Desired Memory],\n        SerialRequiredMemory AS [Serial Required Memory],\n        TotalCPU AS [Total CPU (ms)],\n        AverageCPU AS [Avg CPU (ms)],\n        PercentCPU AS [CPU Weight],\n        TotalDuration AS [Total Duration (ms)],\n        AverageDuration AS [Avg Duration (ms)],\n        PercentDuration AS [Duration Weight],\n        TotalReads AS [Total Reads],\n        AverageReads AS [Average Reads],\n        PercentReads AS [Read Weight],\n        TotalWrites AS [Total Writes],\n        AverageWrites AS [Average Writes],\n        PercentWrites AS [Write Weight],\n        PercentExecutionsByType AS [% Executions (Type)],\n        PercentCPUByType AS [% CPU (Type)],\n        PercentDurationByType AS [% Duration (Type)],\n        PercentReadsByType AS [% Reads (Type)],\n        PercentWritesByType AS [% Writes (Type)],\n        TotalReturnedRows AS [Total Rows],\n        AverageReturnedRows AS [Avg Rows],\n        MinReturnedRows AS [Min Rows],\n        MaxReturnedRows AS [Max Rows],\n\t\tMinGrantKB AS [Minimum Memory Grant KB],\n\t\tMaxGrantKB AS [Maximum Memory Grant KB],\n\t\tMinUsedGrantKB AS [Minimum Used Grant KB], \n\t\tMaxUsedGrantKB AS [Maximum Used Grant KB],\n\t\tAvgMaxMemoryGrant AS [Average Max Memory Grant],\n\t\tMinSpills AS [Min Spills],\n\t\tMaxSpills AS [Max Spills],\n\t\tTotalSpills AS [Total Spills],\n\t\tAvgSpills AS [Avg Spills],\n        NumberOfPlans AS [# Plans],\n        NumberOfDistinctPlans AS [# Distinct Plans],\n        PlanCreationTime AS [Created At],\n        LastExecutionTime AS [Last Execution],\n        CachedPlanSize AS [Cached Plan Size (KB)],\n        CompileTime AS [Compile Time (ms)],\n        CompileCPU AS [Compile CPU (ms)],\n        CompileMemory AS [Compile memory (KB)],\n        COALESCE(SetOptions, '''') AS [SET Options],\n\t\tPlanHandle AS [Plan Handle], \n\t\tSqlHandle AS [SQL Handle], \n\t\t[SQL Handle More Info],\n        QueryHash AS [Query Hash],\n\t\t[Query Hash More Info],\n        QueryPlanHash AS [Query Plan Hash],\n        StatementStartOffset,\n        StatementEndOffset,\n\t\t[Remove Plan Handle From Cache],\n\t\t[Remove SQL Handle From Cache]';\nEND;\n\n\n\nSET @sql = N'\nSELECT  TOP (@Top) ' + @columns + @nl + N'\nFROM    ##bou_BlitzCacheProcs\nWHERE   SPID = @spid ' + @nl;\n\nIF @MinimumExecutionCount IS NOT NULL\n\tBEGIN\n\t\tSET @sql += N' AND ExecutionCount >= @minimumExecutionCount ' + @nl;\n\tEND;\n\nIF @MinutesBack IS NOT NULL\n    BEGIN\n\t\tSET @sql += N' AND LastExecutionTime >= DATEADD(MINUTE, @min_back, GETDATE() ) ' + @nl;\n    END;\n\nSELECT @sql += N' ORDER BY ' + CASE @SortOrder WHEN  N'cpu' THEN N' TotalCPU '\n                                                WHEN N'reads' THEN N' TotalReads '\n                                                WHEN N'writes' THEN N' TotalWrites '\n                                                WHEN N'duration' THEN N' TotalDuration '\n                                                WHEN N'executions' THEN N' ExecutionCount '\n                                                WHEN N'compiles' THEN N' PlanCreationTime '\n\t\t\t\t\t\t\t\t\t\t\t\tWHEN N'memory grant' THEN N' MaxGrantKB'\n\t\t\t\t\t\t\t\t\t\t\t\tWHEN N'spills' THEN N' MaxSpills'\n                                                WHEN N'avg cpu' THEN N' AverageCPU'\n                                                WHEN N'avg reads' THEN N' AverageReads'\n                                                WHEN N'avg writes' THEN N' AverageWrites'\n                                                WHEN N'avg duration' THEN N' AverageDuration'\n                                                WHEN N'avg executions' THEN N' ExecutionsPerMinute'\n\t\t\t\t\t\t\t\t\t\t\t\tWHEN N'avg memory grant' THEN N' AvgMaxMemoryGrant'\n\t\t\t\t\t\t\t\t\t\t\t\tWHEN N'avg spills' THEN N' AvgSpills'\n                               END + N' DESC ';\nSET @sql += N' OPTION (RECOMPILE) ; ';\n\nIF @Debug = 1\n    BEGIN\n        PRINT SUBSTRING(@sql, 0, 4000);\n        PRINT SUBSTRING(@sql, 4000, 8000);\n        PRINT SUBSTRING(@sql, 8000, 12000);\n        PRINT SUBSTRING(@sql, 12000, 16000);\n        PRINT SUBSTRING(@sql, 16000, 20000);\n        PRINT SUBSTRING(@sql, 20000, 24000);\n        PRINT SUBSTRING(@sql, 24000, 28000);\n        PRINT SUBSTRING(@sql, 28000, 32000);\n        PRINT SUBSTRING(@sql, 32000, 36000);\n        PRINT SUBSTRING(@sql, 36000, 40000);\n    END;\n\nEXEC sp_executesql @sql, N'@Top INT, @spid INT, @minimumExecutionCount INT, @min_back INT', @Top, @@SPID, @MinimumExecutionCount, @MinutesBack;\n\nIF @HideSummary = 0 AND @ExportToExcel = 0\nBEGIN\n    IF @Reanalyze = 0\n    BEGIN\n        RAISERROR('Building query plan summary data.', 0, 1) WITH NOWAIT;\n\n        /* Build summary data */\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs\n                   WHERE frequent_execution = 1\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    1,\n                    100,\n                    'Execution Pattern',\n                    'Frequently Executed Queries',\n                    'http://brentozar.com/blitzcache/frequently-executed-queries/',\n                    'Queries are being executed more than '\n                    + CAST (@execution_threshold AS VARCHAR(5))\n                    + ' times per minute. This can put additional load on the server, even when queries are lightweight.') ;\n\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs\n                   WHERE  parameter_sniffing = 1\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    2,\n                    50,\n                    'Parameterization',\n                    'Parameter Sniffing',\n                    'http://brentozar.com/blitzcache/parameter-sniffing/',\n                    'There are signs of parameter sniffing (wide variance in rows return or time to execute). Investigate query patterns and tune code appropriately.') ;\n\n        /* Forced execution plans */\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs\n                   WHERE  is_forced_plan = 1\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    3,\n                    5,\n                    'Parameterization',\n                    'Forced Plans',\n                    'http://brentozar.com/blitzcache/forced-plans/',\n                    'Execution plans have been compiled with forced plans, either through FORCEPLAN, plan guides, or forced parameterization. This will make general tuning efforts less effective.');\n\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs\n                   WHERE  is_cursor = 1\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    4,\n                    200,\n                    'Cursors',\n                    'Cursors',\n                    'http://brentozar.com/blitzcache/cursors-found-slow-queries/',\n                    'There are cursors in the plan cache. This is neither good nor bad, but it is a thing. Cursors are weird in SQL Server.');\n\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs\n                   WHERE  is_cursor = 1\n\t\t\t\t   AND is_optimistic_cursor = 1\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    4,\n                    200,\n                    'Cursors',\n                    'Optimistic Cursors',\n                    'http://brentozar.com/blitzcache/cursors-found-slow-queries/',\n                    'There are optimistic cursors in the plan cache, which can harm performance.');\n\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs\n                   WHERE  is_cursor = 1\n\t\t\t\t   AND is_forward_only_cursor = 0\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    4,\n                    200,\n                    'Cursors',\n                    'Non-forward Only Cursors',\n                    'http://brentozar.com/blitzcache/cursors-found-slow-queries/',\n                    'There are non-forward only cursors in the plan cache, which can harm performance.');\n\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs\n                   WHERE  is_cursor = 1\n\t\t\t\t   AND is_cursor_dynamic = 1\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    4,\n                    200,\n                    'Cursors',\n                    'Dynamic Cursors',\n                    'http://brentozar.com/blitzcache/cursors-found-slow-queries/',\n                    'Dynamic Cursors inhibit parallelism!.');\n\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs\n                   WHERE  is_forced_parameterized = 1\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    5,\n                    50,\n                    'Parameterization',\n                    'Forced Parameterization',\n                    'http://brentozar.com/blitzcache/forced-parameterization/',\n                    'Execution plans have been compiled with forced parameterization.') ;\n\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs p\n                   WHERE  p.is_parallel = 1\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    6,\n                    200,\n                    'Execution Plans',\n                    'Parallelism',\n                    'http://brentozar.com/blitzcache/parallel-plans-detected/',\n                    'Parallel plans detected. These warrant investigation, but are neither good nor bad.') ;\n\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs p\n                   WHERE  near_parallel = 1\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    7,\n                    200,\n                    'Execution Plans',\n                    'Nearly Parallel',\n                    'http://brentozar.com/blitzcache/query-cost-near-cost-threshold-parallelism/',\n                    'Queries near the cost threshold for parallelism. These may go parallel when you least expect it.') ;\n\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs p\n                   WHERE  plan_warnings = 1\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    8,\n                    50,\n                    'Execution Plans',\n                    'Query Plan Warnings',\n                    'http://brentozar.com/blitzcache/query-plan-warnings/',\n                    'Warnings detected in execution plans. SQL Server is telling you that something bad is going on that requires your attention.') ;\n\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs p\n                   WHERE  long_running = 1\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    9,\n                    50,\n                    'Performance',\n                    'Long Running Queries',\n                    'http://brentozar.com/blitzcache/long-running-queries/',\n                    'Long running queries have been found. These are queries with an average duration longer than '\n                    + CAST(@long_running_query_warning_seconds / 1000 / 1000 AS VARCHAR(5))\n                    + ' second(s). These queries should be investigated for additional tuning options.') ;\n\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs p\n                   WHERE  p.missing_index_count > 0\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    10,\n                    50,\n                    'Performance',\n                    'Missing Index Request',\n                    'http://brentozar.com/blitzcache/missing-index-request/',\n                    'Queries found with missing indexes.');\n\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs p\n                   WHERE  p.downlevel_estimator = 1\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    13,\n                    200,\n                    'Cardinality',\n                    'Legacy Cardinality Estimator in Use',\n                    'http://brentozar.com/blitzcache/legacy-cardinality-estimator/',\n                    'A legacy cardinality estimator is being used by one or more queries. Investigate whether you need to be using this cardinality estimator. This may be caused by compatibility levels, global trace flags, or query level trace flags.');\n\n        IF EXISTS (SELECT 1/0\n                   FROM ##bou_BlitzCacheProcs p\n                   WHERE implicit_conversions = 1\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    14,\n                    50,\n                    'Performance',\n                    'Implicit Conversions',\n                    'http://brentozar.com/go/implicit',\n                    'One or more queries are comparing two fields that are not of the same data type.') ;\n\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs\n                   WHERE  busy_loops = 1\n\t\t\t\t   AND SPID = @@SPID)\n        INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n        VALUES (@@SPID,\n                16,\n                10,\n                'Performance',\n                'Frequently executed operators',\n                'http://brentozar.com/blitzcache/busy-loops/',\n                'Operations have been found that are executed 100 times more often than the number of rows returned by each iteration. This is an indicator that something is off in query execution.');\n\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs\n                   WHERE  tvf_join = 1\n\t\t\t\t   AND SPID = @@SPID)\n        INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n        VALUES (@@SPID,\n                17,\n                50,\n                'Performance',\n                'Joining to table valued functions',\n                'http://brentozar.com/blitzcache/tvf-join/',\n                'Execution plans have been found that join to table valued functions (TVFs). TVFs produce inaccurate estimates of the number of rows returned and can lead to any number of query plan problems.');\n\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs\n                   WHERE  compile_timeout = 1\n\t\t\t\t   AND SPID = @@SPID)\n        INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n        VALUES (@@SPID,\n                18,\n                50,\n                'Execution Plans',\n                'Compilation timeout',\n                'http://brentozar.com/blitzcache/compilation-timeout/',\n                'Query compilation timed out for one or more queries. SQL Server did not find a plan that meets acceptable performance criteria in the time allotted so the best guess was returned. There is a very good chance that this plan isn''t even below average - it''s probably terrible.');\n\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs\n                   WHERE  compile_memory_limit_exceeded = 1\n\t\t\t\t   AND SPID = @@SPID)\n        INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n        VALUES (@@SPID,\n                19,\n                50,\n                'Execution Plans',\n                'Compilation memory limit exceeded',\n                'http://brentozar.com/blitzcache/compile-memory-limit-exceeded/',\n                'The optimizer has a limited amount of memory available. One or more queries are complex enough that SQL Server was unable to allocate enough memory to fully optimize the query. A best fit plan was found, and it''s probably terrible.');\n\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs\n                   WHERE  warning_no_join_predicate = 1\n\t\t\t\t   AND SPID = @@SPID)\n        INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n        VALUES (@@SPID,\n                20,\n                10,\n                'Execution Plans',\n                'No join predicate',\n                'http://brentozar.com/blitzcache/no-join-predicate/',\n                'Operators in a query have no join predicate. This means that all rows from one table will be matched with all rows from anther table producing a Cartesian product. That''s a whole lot of rows. This may be your goal, but it''s important to investigate why this is happening.');\n\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs\n                   WHERE  plan_multiple_plans = 1\n\t\t\t\t   AND SPID = @@SPID)\n        INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n        VALUES (@@SPID,\n                21,\n                200,\n                'Execution Plans',\n                'Multiple execution plans',\n                'http://brentozar.com/blitzcache/multiple-plans/',\n                'Queries exist with multiple execution plans (as determined by query_plan_hash). Investigate possible ways to parameterize these queries or otherwise reduce the plan count.');\n\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs\n                   WHERE  unmatched_index_count > 0\n\t\t\t\t   AND SPID = @@SPID)\n        INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n        VALUES (@@SPID,\n                22,\n                100,\n                'Performance',\n                'Unmatched indexes',\n                'http://brentozar.com/blitzcache/unmatched-indexes',\n                'An index could have been used, but SQL Server chose not to use it - likely due to parameterization and filtered indexes.');\n\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs\n                   WHERE  unparameterized_query = 1\n\t\t\t\t   AND SPID = @@SPID)\n        INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n        VALUES (@@SPID,\n                23,\n                100,\n                'Parameterization',\n                'Unparameterized queries',\n                'http://brentozar.com/blitzcache/unparameterized-queries',\n                'Unparameterized queries found. These could be ad hoc queries, data exploration, or queries using \"OPTIMIZE FOR UNKNOWN\".');\n\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs\n                   WHERE  is_trivial = 1\n\t\t\t\t   AND SPID = @@SPID)\n        INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n        VALUES (@@SPID,\n                24,\n                100,\n                'Execution Plans',\n                'Trivial Plans',\n                'http://brentozar.com/blitzcache/trivial-plans',\n                'Trivial plans get almost no optimization. If you''re finding these in the top worst queries, something may be going wrong.');\n    \n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs p\n                   WHERE  p.is_forced_serial= 1\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    25,\n                    10,\n                    'Execution Plans',\n                    'Forced Serialization',\n                    'http://www.brentozar.com/blitzcache/forced-serialization/',\n                    'Something in your plan is forcing a serial query. Further investigation is needed if this is not by design.') ;\t\n\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs p\n                   WHERE  p.is_key_lookup_expensive= 1\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    26,\n                    100,\n                    'Execution Plans',\n                    'Expensive Key Lookups',\n                    'http://www.brentozar.com/blitzcache/expensive-key-lookups/',\n                    'There''s a key lookup in your plan that costs >=50% of the total plan cost.') ;\t\n\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs p\n                   WHERE  p.is_remote_query_expensive= 1\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    28,\n                    100,\n                    'Execution Plans',\n                    'Expensive Remote Query',\n                    'http://www.brentozar.com/blitzcache/expensive-remote-query/',\n                    'There''s a remote query in your plan that costs >=50% of the total plan cost.') ;\n\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs p\n                   WHERE  p.trace_flags_session IS NOT NULL\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    29,\n                    100,\n                    'Trace Flags',\n                    'Session Level Trace Flags Enabled',\n                    'https://www.brentozar.com/blitz/trace-flags-enabled-globally/',\n                    'Someone is enabling session level Trace Flags in a query.') ;\n\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs p\n                   WHERE  p.is_unused_grant IS NOT NULL\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    30,\n                    100,\n                    'Unused memory grants',\n                    'Queries are asking for more memory than they''re using',\n                    'https://www.brentozar.com/blitzcache/unused-memory-grants/',\n                    'Queries have large unused memory grants. This can cause concurrency issues, if queries are waiting a long time to get memory to run.') ;\n\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs p\n                   WHERE  p.function_count > 0\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    31,\n                    100,\n                    'Compute Scalar That References A Function',\n                    'This could be trouble if you''re using Scalar Functions or MSTVFs',\n                    'https://www.brentozar.com/blitzcache/compute-scalar-functions/',\n                    'Both of these will force queries to run serially, run at least once per row, and may result in poor cardinality estimates.') ;\n\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs p\n                   WHERE  p.clr_function_count > 0\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    32,\n                    100,\n                    'Compute Scalar That References A CLR Function',\n                    'This could be trouble if your CLR functions perform data access',\n                    'https://www.brentozar.com/blitzcache/compute-scalar-functions/',\n                    'May force queries to run serially, run at least once per row, and may result in poor cardinlity estimates.') ;\n\n\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs p\n                   WHERE  p.is_table_variable = 1\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    33,\n                    100,\n                    'Table Variables detected',\n                    'Beware nasty side effects',\n                    'https://www.brentozar.com/blitzcache/table-variables/',\n                    'All modifications are single threaded, and selects have really low row estimates.') ;\n\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs p\n                   WHERE  p.no_stats_warning = 1\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    35,\n                    100,\n                    'Columns with no statistics',\n                    'Poor cardinality estimates may ensue',\n                    'https://www.brentozar.com/blitzcache/columns-no-statistics/',\n                    'Sometimes this happens with indexed views, other times because auto create stats is turned off.') ;\n\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs p\n                   WHERE  p.relop_warnings = 1\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    36,\n                    100,\n                    'Operator Warnings',\n                    'SQL is throwing operator level plan warnings',\n                    'http://brentozar.com/blitzcache/query-plan-warnings/',\n                    'Check the plan for more details.') ;\n\n        IF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs p\n                   WHERE  p.is_table_scan = 1\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    37,\n                    100,\n                    'Table Scans',\n                    'Your database has HEAPs',\n                    'https://www.brentozar.com/archive/2012/05/video-heaps/',\n                    'This may not be a problem. Run sp_BlitzIndex for more information.') ;\n        \n\t\tIF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs p\n                   WHERE  p.backwards_scan = 1\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    38,\n                    100,\n                    'Backwards Scans',\n                    'Indexes are being read backwards',\n                    'https://www.brentozar.com/blitzcache/backwards-scans/',\n                    'This isn''t always a problem. They can cause serial zones in plans, and may need an index to match sort order.') ;\n\n\t\tIF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs p\n                   WHERE  p.forced_index = 1\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    39,\n                    100,\n                    'Index forcing',\n                    'Someone is using hints to force index usage',\n                    'https://www.brentozar.com/blitzcache/optimizer-forcing/',\n                    'This can cause inefficient plans, and will prevent missing index requests.') ;\n\n\t\tIF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs p\n                   WHERE  p.forced_seek = 1\n\t\t\t\t   OR p.forced_scan = 1\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    40,\n                    100,\n                    'Seek/Scan forcing',\n                    'Someone is using hints to force index seeks/scans',\n                    'https://www.brentozar.com/blitzcache/optimizer-forcing/',\n                    'This can cause inefficient plans by taking seek vs scan choice away from the optimizer.') ;\n\n\t\tIF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs p\n                   WHERE  p.columnstore_row_mode = 1\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    41,\n                    100,\n                    'ColumnStore indexes operating in Row Mode',\n                    'Batch Mode is optimal for ColumnStore indexes',\n                    'https://www.brentozar.com/blitzcache/columnstore-indexes-operating-row-mode/',\n                    'ColumnStore indexes operating in Row Mode indicate really poor query choices.') ;\n\n\t\tIF EXISTS (SELECT 1/0\n                   FROM   ##bou_BlitzCacheProcs p\n                   WHERE  p.is_computed_scalar = 1\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    42,\n                    50,\n                    'Computed Columns Referencing Scalar UDFs',\n                    'This makes a whole lot of stuff run serially',\n                    'https://www.brentozar.com/blitzcache/computed-columns-referencing-functions/',\n                    'This can cause a whole mess of bad serializartion problems.') ;\n\n        IF EXISTS (SELECT 1/0\n                    FROM   ##bou_BlitzCacheProcs p\n                    WHERE  p.is_sort_expensive = 1\n  \t\t\t\t\tAND SPID = @@SPID)\n             INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n             VALUES (@@SPID,\n                     43,\n                     100,\n                     'Execution Plans',\n                     'Expensive Sort',\n                     'http://www.brentozar.com/blitzcache/expensive-sorts/',\n                     'There''s a sort in your plan that costs >=50% of the total plan cost.') ;\n\n        IF EXISTS (SELECT 1/0\n                    FROM   ##bou_BlitzCacheProcs p\n                    WHERE  p.is_computed_filter = 1\n  \t\t\t\t\tAND SPID = @@SPID)\n             INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n             VALUES (@@SPID,\n                     44,\n                     50,\n                     'Filters Referencing Scalar UDFs',\n                     'This forces serialization',\n                     'https://www.brentozar.com/blitzcache/compute-scalar-functions/',\n                     'Someone put a Scalar UDF in the WHERE clause!') ;\n\n        IF EXISTS (SELECT 1/0\n                    FROM   ##bou_BlitzCacheProcs p\n                    WHERE  p.index_ops >= 5\n  \t\t\t\t\tAND SPID = @@SPID)\n             INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n             VALUES (@@SPID,\n                     45,\n                     100,\n                     'Many Indexes Modified',\n                     'Write Queries Are Hitting >= 5 Indexes',\n                     'https://www.brentozar.com/blitzcache/many-indexes-modified/',\n                     'This can cause lots of hidden I/O -- Run sp_BlitzIndex for more information.') ;\n\n        IF EXISTS (SELECT 1/0\n                    FROM   ##bou_BlitzCacheProcs p\n                    WHERE  p.is_row_level = 1\n  \t\t\t\t\tAND SPID = @@SPID)\n             INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n             VALUES (@@SPID,\n                     46,\n                     100,\n                     'Plan Confusion',\n                     'Row Level Security is in use',\n                     'https://www.brentozar.com/blitzcache/row-level-security/',\n                     'You may see a lot of confusing junk in your query plan.') ;\n\n        IF EXISTS (SELECT 1/0\n                    FROM   ##bou_BlitzCacheProcs p\n                    WHERE  p.is_spatial = 1\n  \t\t\t\t\tAND SPID = @@SPID)\n             INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n             VALUES (@@SPID,\n                     47,\n                     200,\n                     'Spatial Abuse',\n                     'You hit a Spatial Index',\n                     'https://www.brentozar.com/blitzcache/spatial-indexes/',\n                     'Purely informational.') ;\n\n        IF EXISTS (SELECT 1/0\n                    FROM   ##bou_BlitzCacheProcs p\n                    WHERE  p.index_dml = 1\n  \t\t\t\t\tAND SPID = @@SPID)\n             INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n             VALUES (@@SPID,\n                     48,\n                     150,\n                     'Index DML',\n                     'Indexes were created or dropped',\n                     'https://www.brentozar.com/blitzcache/index-dml/',\n                     'This can cause recompiles and stuff.') ;\n\n        IF EXISTS (SELECT 1/0\n                    FROM   ##bou_BlitzCacheProcs p\n                    WHERE  p.table_dml = 1\n  \t\t\t\t\tAND SPID = @@SPID)\n             INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n             VALUES (@@SPID,\n                     49,\n                     150,\n                     'Table DML',\n                     'Tables were created or dropped',\n                     'https://www.brentozar.com/blitzcache/table-dml/',\n                     'This can cause recompiles and stuff.') ;\n\n        IF EXISTS (SELECT 1/0\n                    FROM   ##bou_BlitzCacheProcs p\n                    WHERE  p.long_running_low_cpu = 1\n  \t\t\t\t\tAND SPID = @@SPID)\n             INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n             VALUES (@@SPID,\n                     50,\n                     150,\n                     'Long Running Low CPU',\n                     'You have a query that runs for much longer than it uses CPU',\n                     'https://www.brentozar.com/blitzcache/long-running-low-cpu/',\n                     'This can be a sign of blocking, linked servers, or poor client application code (ASYNC_NETWORK_IO).') ;\n\n        IF EXISTS (SELECT 1/0\n                    FROM   ##bou_BlitzCacheProcs p\n                    WHERE  p.low_cost_high_cpu = 1\n  \t\t\t\t\tAND SPID = @@SPID)\n             INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n             VALUES (@@SPID,\n                     51,\n                     150,\n                     'Low Cost Query With High CPU',\n                     'You have a low cost query that uses a lot of CPU',\n                     'https://www.brentozar.com/blitzcache/low-cost-high-cpu/',\n                     'This can be a sign of functions or Dynamic SQL that calls black-box code.') ;\n\n        IF EXISTS (SELECT 1/0\n                    FROM   ##bou_BlitzCacheProcs p\n                    WHERE  p.stale_stats = 1\n  \t\t\t\t\tAND SPID = @@SPID)\n             INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n             VALUES (@@SPID,\n                     52,\n                     150,\n                     'Biblical Statistics',\n                     'Statistics used in queries are >7 days old with >100k modifications',\n                     'https://www.brentozar.com/blitzcache/stale-statistics/',\n                     'Ever heard of updating statistics?') ;\n\n        IF EXISTS (SELECT 1/0\n                    FROM   ##bou_BlitzCacheProcs p\n                    WHERE  p.is_adaptive = 1\n  \t\t\t\t\tAND SPID = @@SPID)\n             INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n             VALUES (@@SPID,\n                     53,\n                     150,\n                     'Adaptive joins',\n                     'This is pretty cool -- you''re living in the future.',\n                     'https://www.brentozar.com/blitzcache/adaptive-joins/',\n                     'Joe Sack rules.') ;\t\n\n        IF EXISTS (SELECT 1/0\n                    FROM   ##bou_BlitzCacheProcs p\n                    WHERE  p.is_spool_expensive = 1\n  \t\t\t\t\t)\n             INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n             VALUES (@@SPID,\n                     54,\n                     150,\n                     'Expensive Index Spool',\n                     'You have an index spool, this is usually a sign that there''s an index missing somewhere.',\n                     'https://www.brentozar.com/blitzcache/eager-index-spools/',\n                     'Check operator predicates and output for index definition guidance') ;\t\n\n        IF EXISTS (SELECT 1/0\n                    FROM   ##bou_BlitzCacheProcs p\n                    WHERE  p.is_spool_more_rows = 1\n  \t\t\t\t\t)\n             INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n             VALUES (@@SPID,\n                     55,\n                     150,\n                     'Index Spools Many Rows',\n                     'You have an index spool that spools more rows than the query returns',\n                     'https://www.brentozar.com/blitzcache/eager-index-spools/',\n                     'Check operator predicates and output for index definition guidance') ;\n\t\t\t\t\t \n        IF EXISTS (SELECT 1/0\n                    FROM   ##bou_BlitzCacheProcs p\n                    WHERE  p.is_bad_estimate = 1\n  \t\t\t\t\t)\n             INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n             VALUES (@@SPID,\n                     56,\n                     100,\n                     'Potentially bad cardinality estimates',\n                     'Estimated rows are different from average rows by a factor of 10000',\n                     'https://www.brentozar.com/blitzcache/bad-estimates/',\n                     'This may indicate a performance problem if mismatches occur regularly') ;\t\n\t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\t \t\t\t\t \n        IF EXISTS (SELECT 1/0\n                    FROM   ##bou_BlitzCacheProcs p\n                    WHERE  p.is_paul_white_electric = 1\n  \t\t\t\t\t)\n             INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n             VALUES (@@SPID,\n                     998,\n                     200,\n                     'Is Paul White Electric?',\n                     'This query has a Switch operator in it!',\n                     'http://sqlblog.com/blogs/paul_white/archive/2013/06/11/hello-operator-my-switch-is-bored.aspx',\n                     'You should email this query plan to Paul: SQLkiwi at gmail dot com') ;\t\n\n\t\tIF @v >= 14\n\t\t\tBEGIN\t\n\n\t\t\t\tINSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n\t\t\t\tSELECT \n\t\t\t\t@@SPID,\n\t\t\t\t999,\n\t\t\t\t200,\n\t\t\t\t'Database Level Statistics',\n\t\t\t\t'The database ' + sa.[Database] + ' last had a stats update on '  + CONVERT(NVARCHAR(10), CONVERT(DATE, MAX(sa.LastUpdate))) + ' and has ' + CONVERT(NVARCHAR(10), AVG(sa.ModificationCount)) + ' modifications on average.' AS [Finding],\n\t\t\t\t'https://www.brentozar.com/blitzcache/stale-statistics/' AS URL,\n\t\t\t\t'Consider updating statistics more frequently,' AS [Details]\n\t\t\t\tFROM #stats_agg AS sa\n\t\t\t\tGROUP BY sa.[Database]\n\t\t\t\tHAVING MAX(sa.LastUpdate) <= DATEADD(DAY, -7, SYSDATETIME())\n\t\t\t\tAND AVG(sa.ModificationCount) >= 100000;\n\n        IF EXISTS (SELECT 1/0\n                    FROM   ##bou_BlitzCacheProcs p\n                    WHERE  p.is_row_goal = 1\n  \t\t\t\t\t)\n             INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n             VALUES (@@SPID,\n                     58,\n                     200,\n                     'Row Goals',\n                     'This query had row goals introduced',\n                     'https://www.brentozar.com/archive/2018/01/sql-server-2017-cu3-adds-optimizer-row-goal-information-query-plans/',\n                     'This can be good or bad, and should be investigated for high read queries') ;\t\n\n        IF EXISTS (SELECT 1/0\n                    FROM   ##bou_BlitzCacheProcs p\n                    WHERE  p.is_big_spills = 1\n  \t\t\t\t\t)\n             INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n             VALUES (@@SPID,\n                     59,\n                     100,\n                     'tempdb Spills',\n                     'This query spills >500mb to tempdb on average',\n                     'https://www.brentozar.com/blitzcache/tempdb-spills/',\n                     'One way or another, this query didn''t get enough memory') ;\t\n\n\n\t\t\tEND; \n\n\n        IF EXISTS (SELECT 1/0\n                   FROM   #plan_creation p\n                   WHERE (p.percent_24 > 0)\n\t\t\t\t   AND SPID = @@SPID)\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            SELECT SPID,\n                    999,\n                    254,\n                    'Plan Cache Information',\n                    'You have ' + CONVERT(NVARCHAR(10), ISNULL(p.total_plans, 0)) \n\t\t\t\t\t\t\t\t+ ' total plans in your cache, with ' \n\t\t\t\t\t\t\t\t+ CONVERT(NVARCHAR(10), ISNULL(p.percent_24, 0)) \n\t\t\t\t\t\t\t\t+ '% plans created in the past 24 hours, ' \n\t\t\t\t\t\t\t\t+ CONVERT(NVARCHAR(10), ISNULL(p.percent_4, 0)) \n\t\t\t\t\t\t\t\t+ '% created in the past 4 hours, and ' \n\t\t\t\t\t\t\t\t+ CONVERT(NVARCHAR(10), ISNULL(p.percent_1, 0)) \n\t\t\t\t\t\t\t\t+ '% created in the past 1 hour.',\n                    '',\n                    'If these percentages are high, it may be a sign of memory pressure or plan cache instability.'\n\t\t\tFROM   #plan_creation p\t;\n\t\t\n\t\tIF @v >= 11\n\t\tBEGIN\t\n        IF EXISTS (SELECT 1/0\n                   FROM   #trace_flags AS tf \n                   WHERE  tf.global_trace_flags IS NOT NULL\n\t\t\t\t   )\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    1000,\n                    255,\n                    'Global Trace Flags Enabled',\n                    'You have Global Trace Flags enabled on your server',\n                    'https://www.brentozar.com/blitz/trace-flags-enabled-globally/',\n                    'You have the following Global Trace Flags enabled: ' + (SELECT TOP 1 tf.global_trace_flags FROM #trace_flags AS tf WHERE tf.global_trace_flags IS NOT NULL)) ;\n\t\tEND; \n\n        IF NOT EXISTS (SELECT 1/0\n\t\t\t\t\t   FROM   ##bou_BlitzCacheResults AS bcr\n                       WHERE  bcr.Priority = 2147483646\n\t\t\t\t      )\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    2147483646,\n                    255,\n                    'Need more help?' ,\n                    'Paste your plan on the internet!',\n                    'http://pastetheplan.com',\n                    'This makes it easy to share plans and post them to Q&A sites like https://dba.stackexchange.com/!') ;\n\n\n\n        IF NOT EXISTS (SELECT 1/0\n\t\t\t\t\t   FROM   ##bou_BlitzCacheResults AS bcr\n                       WHERE  bcr.Priority = 2147483647\n\t\t\t\t      )\n            INSERT INTO ##bou_BlitzCacheResults (SPID, CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (@@SPID,\n                    2147483647,\n                    255,\n                    'Thanks for using sp_BlitzCache!' ,\n                    'From Your Community Volunteers',\n                    'http://FirstResponderKit.org',\n                    'We hope you found this tool useful. Current version: ' + @Version + ' released on ' + CONVERT(NVARCHAR(30), @VersionDate) + '.') ;\n\t\n\t\tEND;            \n    \n\t\n    SELECT  Priority,\n            FindingsGroup,\n            Finding,\n            URL,\n            Details,\n            CheckID\n    FROM    ##bou_BlitzCacheResults\n    WHERE   SPID = @@SPID\n    GROUP BY Priority,\n            FindingsGroup,\n            Finding,\n            URL,\n            Details,\n            CheckID\n    ORDER BY Priority ASC, CheckID ASC\n    OPTION (RECOMPILE);\nEND;\n\nIF @Debug = 1\n    BEGIN\n\t\t\n\t\tSELECT '##bou_BlitzCacheResults' AS table_name, *\n\t\tFROM   ##bou_BlitzCacheResults\n\t\tOPTION ( RECOMPILE );\n\t\t\n\t\tSELECT '##bou_BlitzCacheProcs' AS table_name, *\n\t\tFROM   ##bou_BlitzCacheProcs\n\t\tOPTION ( RECOMPILE );\n\t\t\n\t\tSELECT '#statements' AS table_name,  *\n\t\tFROM #statements AS s\n\t\tOPTION (RECOMPILE);\n\n\t\tSELECT '#query_plan' AS table_name,  *\n\t\tFROM #query_plan AS qp\n\t\tOPTION (RECOMPILE);\n\t\t\n\t\tSELECT '#relop' AS table_name,  *\n\t\tFROM #relop AS r\n\t\tOPTION (RECOMPILE);\n\n\t\tSELECT '#only_query_hashes' AS table_name, *\n\t\tFROM   #only_query_hashes\n\t\tOPTION ( RECOMPILE );\n\t\t\n\t\tSELECT '#ignore_query_hashes' AS table_name, *\n\t\tFROM   #ignore_query_hashes\n\t\tOPTION ( RECOMPILE );\n\t\t\n\t\tSELECT '#only_sql_handles' AS table_name, *\n\t\tFROM   #only_sql_handles\n\t\tOPTION ( RECOMPILE );\n\t\t\n\t\tSELECT '#ignore_sql_handles' AS table_name, *\n\t\tFROM   #ignore_sql_handles\n\t\tOPTION ( RECOMPILE );\n\t\t\n\t\tSELECT '#p' AS table_name, *\n\t\tFROM   #p\n\t\tOPTION ( RECOMPILE );\n\t\t\n\t\tSELECT '#checkversion' AS table_name, *\n\t\tFROM   #checkversion\n\t\tOPTION ( RECOMPILE );\n\t\t\n\t\tSELECT '#configuration' AS table_name, *\n\t\tFROM   #configuration\n\t\tOPTION ( RECOMPILE );\n\t\t\n\t\tSELECT '#stored_proc_info' AS table_name, *\n\t\tFROM   #stored_proc_info\n\t\tOPTION ( RECOMPILE );\n\n\t\tSELECT '#conversion_info' AS table_name, *\n\t\tFROM #conversion_info AS ci\n\t\tOPTION ( RECOMPILE );\n\t\t\n\t\tSELECT '#variable_info' AS table_name, *\n\t\tFROM #variable_info AS vi\n\t\tOPTION ( RECOMPILE );\n\t\t\n\t\tSELECT '#plan_creation' AS table_name, *\n\t\tFROM   #plan_creation\n\t\tOPTION ( RECOMPILE );\n\t\t\n\t\tSELECT '#plan_cost' AS table_name, *\n\t\tFROM   #plan_cost\n\t\tOPTION ( RECOMPILE );\n\t\t\n\t\tSELECT '#proc_costs' AS table_name, *\n\t\tFROM   #proc_costs\n\t\tOPTION ( RECOMPILE );\n\t\t\n\t\tSELECT '#stats_agg' AS table_name, *\n\t\tFROM   #stats_agg\n\t\tOPTION ( RECOMPILE );\n\t\t\n\t\tSELECT '#trace_flags' AS table_name, *\n\t\tFROM   #trace_flags\n\t\tOPTION ( RECOMPILE );\n\n    END;\n\n\nRETURN; --Avoid going into the AllSort GOTO\n\n/*Begin code to sort by all*/\nAllSorts:\nRAISERROR('Beginning all sort loop', 0, 1) WITH NOWAIT;\n\n\nIF (\n     @Top > 10\n     AND @BringThePain = 0\n   )\n   BEGIN\n         RAISERROR(\n\t\t\t\t  '\t\t  \n\t\t  You''ve chosen a value greater than 10 to sort the whole plan cache by. \n\t\t  That can take a long time and harm performance. \n\t\t  Please choose a number <= 10, or set @BringThePain = 1 to signify you understand this might be a bad idea.\n\t\t          ', 0, 1) WITH NOWAIT;\n         RETURN;\n   END;\n\n\nIF OBJECT_ID('tempdb..#checkversion_allsort') IS NULL\n   BEGIN\n         CREATE TABLE #checkversion_allsort\n         (\n           version NVARCHAR(128),\n           common_version AS SUBSTRING(version, 1, CHARINDEX('.', version) + 1),\n           major AS PARSENAME(CONVERT(VARCHAR(32), version), 4),\n           minor AS PARSENAME(CONVERT(VARCHAR(32), version), 3),\n           build AS PARSENAME(CONVERT(VARCHAR(32), version), 2),\n           revision AS PARSENAME(CONVERT(VARCHAR(32), version), 1)\n         );\n\n         INSERT INTO #checkversion_allsort\n                (version)\n         SELECT CAST(SERVERPROPERTY('ProductVersion') AS NVARCHAR(128))\n         OPTION ( RECOMPILE );\n   END;\n\n\nSELECT  @v = common_version,\n        @build = build\nFROM    #checkversion_allsort\nOPTION  ( RECOMPILE );\n\nIF OBJECT_ID('tempdb.. #bou_allsort') IS NULL\n   BEGIN\n         CREATE TABLE #bou_allsort\n         (\n           Id INT IDENTITY(1, 1),\n           DatabaseName VARCHAR(128),\n           Cost FLOAT,\n           QueryText NVARCHAR(MAX),\n           QueryType NVARCHAR(258),\n           Warnings VARCHAR(MAX),\n\t\t   QueryPlan XML,\n\t\t   missing_indexes XML,\n\t\t   implicit_conversion_info XML,\n\t\t   cached_execution_parameters XML,\n           ExecutionCount BIGINT,\n           ExecutionsPerMinute MONEY,\n           ExecutionWeight MONEY,\n           TotalCPU BIGINT,\n           AverageCPU BIGINT,\n           CPUWeight MONEY,\n           TotalDuration BIGINT,\n           AverageDuration BIGINT,\n           DurationWeight MONEY,\n           TotalReads BIGINT,\n           AverageReads BIGINT,\n           ReadWeight MONEY,\n           TotalWrites BIGINT,\n           AverageWrites BIGINT,\n           WriteWeight MONEY,\n           AverageReturnedRows MONEY,\n           MinGrantKB BIGINT,\n           MaxGrantKB BIGINT,\n           MinUsedGrantKB BIGINT,\n           MaxUsedGrantKB BIGINT,\n           AvgMaxMemoryGrant MONEY,\n\t\t   MinSpills BIGINT,\n\t\t   MaxSpills BIGINT,\n\t\t   TotalSpills BIGINT,\n\t\t   AvgSpills MONEY,\n           PlanCreationTime DATETIME,\n           LastExecutionTime DATETIME,\n           PlanHandle VARBINARY(64),\n           SqlHandle VARBINARY(64),\n           SetOptions VARCHAR(MAX),\n           Pattern NVARCHAR(20)\n         );\n   END;\n\nDECLARE @AllSortSql NVARCHAR(MAX) = N'';\nDECLARE @MemGrant BIT;\nSELECT  @MemGrant = CASE WHEN (\n                                ( @v < 11 )\n                                OR (\n                                     @v = 11\n                                     AND @build < 6020\n                                   )\n                                OR (\n                                     @v = 12\n                                     AND @build < 5000\n                                   )\n                                OR (\n                                     @v = 13\n                                     AND @build < 1601\n                                   )\n                              ) THEN 0\n                         ELSE 1\n                    END;\n\nDECLARE @Spills BIT;\nSELECT @Spills = CASE WHEN (@v >= 14) THEN 1 ELSE 0 END\n\t\t \n\nIF LOWER(@SortOrder) = 'all'\nBEGIN\nRAISERROR('Beginning for ALL', 0, 1) WITH NOWAIT;\nSET @AllSortSql += N'\n\t\t\t\t\tDECLARE @ISH NVARCHAR(MAX) = N''''\n\n\t\t\t\t\tINSERT #bou_allsort (\tDatabaseName, Cost, QueryText, QueryType, Warnings, QueryPlan, missing_indexes, implicit_conversion_info, cached_execution_parameters, ExecutionCount, ExecutionsPerMinute, ExecutionWeight, \n\t\t\t\t\t\t\t\t\t\t\tTotalCPU, AverageCPU, CPUWeight, TotalDuration, AverageDuration, DurationWeight, TotalReads, AverageReads, \n\t\t\t\t\t\t\t\t\t\t\tReadWeight, TotalWrites, AverageWrites, WriteWeight, AverageReturnedRows, MinGrantKB, MaxGrantKB, MinUsedGrantKB, \n\t\t\t\t\t\t\t\t\t\t\tMaxUsedGrantKB, AvgMaxMemoryGrant, MinSpills, MaxSpills, TotalSpills, AvgSpills, PlanCreationTime, LastExecutionTime, PlanHandle, SqlHandle, SetOptions ) \t\t\t\t\t \n\t\t\t\t\t \n\t\t\t\t\t EXEC sp_BlitzCache @ExpertMode = 0, @HideSummary = 1, @Top = @i_Top, @SortOrder = ''cpu'', @DatabaseName = @i_DatabaseName WITH RECOMPILE;\n\t\t\t\t\t \n\t\t\t\t\t UPDATE #bou_allsort SET Pattern = ''cpu'' WHERE Pattern IS NULL OPTION(RECOMPILE);\n\n\t\t\t\t\t SELECT TOP 1 @ISH = STUFF((SELECT DISTINCT N'','' + CONVERT(NVARCHAR(MAX),b2.SqlHandle, 1) FROM #bou_allsort AS b2 FOR XML PATH(N''''), TYPE).value(N''.[1]'', N''NVARCHAR(MAX)''), 1, 1, N'''') OPTION(RECOMPILE);\n\n\t\t\t\t\tINSERT #bou_allsort (\tDatabaseName, Cost, QueryText, QueryType, Warnings, QueryPlan, missing_indexes, implicit_conversion_info, cached_execution_parameters, ExecutionCount, ExecutionsPerMinute, ExecutionWeight, \n\t\t\t\t\t\t\t\t\t\t\tTotalCPU, AverageCPU, CPUWeight, TotalDuration, AverageDuration, DurationWeight, TotalReads, AverageReads, \n\t\t\t\t\t\t\t\t\t\t\tReadWeight, TotalWrites, AverageWrites, WriteWeight, AverageReturnedRows, MinGrantKB, MaxGrantKB, MinUsedGrantKB, \n\t\t\t\t\t\t\t\t\t\t\tMaxUsedGrantKB, AvgMaxMemoryGrant, MinSpills, MaxSpills, TotalSpills, AvgSpills, PlanCreationTime, LastExecutionTime, PlanHandle, SqlHandle, SetOptions )\t\t\t\t\t \n\t\t\t\t\t \n\t\t\t\t\t EXEC sp_BlitzCache @ExpertMode = 0, @HideSummary = 1, @Top = @i_Top, @SortOrder = ''reads'', @IgnoreSqlHandles = @ISH, @DatabaseName = @i_DatabaseName WITH RECOMPILE;\n\t\t\t\t\t \n\t\t\t\t\t UPDATE #bou_allsort SET Pattern = ''reads'' WHERE Pattern IS NULL OPTION(RECOMPILE);\n\n\t\t\t\t\t SELECT TOP 1 @ISH = STUFF((SELECT DISTINCT N'','' + CONVERT(NVARCHAR(MAX),b2.SqlHandle, 1) FROM #bou_allsort AS b2 FOR XML PATH(N''''), TYPE).value(N''.[1]'', N''NVARCHAR(MAX)''), 1, 1, N'''') OPTION(RECOMPILE);\n\n\t\t\t\t\tINSERT #bou_allsort (\tDatabaseName, Cost, QueryText, QueryType, Warnings, QueryPlan, missing_indexes, implicit_conversion_info, cached_execution_parameters, ExecutionCount, ExecutionsPerMinute, ExecutionWeight, \n\t\t\t\t\t\t\t\t\t\t\tTotalCPU, AverageCPU, CPUWeight, TotalDuration, AverageDuration, DurationWeight, TotalReads, AverageReads, \n\t\t\t\t\t\t\t\t\t\t\tReadWeight, TotalWrites, AverageWrites, WriteWeight, AverageReturnedRows, MinGrantKB, MaxGrantKB, MinUsedGrantKB, \n\t\t\t\t\t\t\t\t\t\t\tMaxUsedGrantKB, AvgMaxMemoryGrant, MinSpills, MaxSpills, TotalSpills, AvgSpills, PlanCreationTime, LastExecutionTime, PlanHandle, SqlHandle, SetOptions )\t\t \n\t\t\t\t\t \n\t\t\t\t\t EXEC sp_BlitzCache @ExpertMode = 0, @HideSummary = 1, @Top = @i_Top, @SortOrder = ''writes'', @IgnoreSqlHandles = @ISH, @DatabaseName = @i_DatabaseName WITH RECOMPILE;\n\t\t\t\t\t \n\t\t\t\t\t UPDATE #bou_allsort SET Pattern = ''writes'' WHERE Pattern IS NULL OPTION(RECOMPILE);\n\n\t\t\t\t\t SELECT TOP 1 @ISH = STUFF((SELECT DISTINCT N'','' + CONVERT(NVARCHAR(MAX),b2.SqlHandle, 1) FROM #bou_allsort AS b2 FOR XML PATH(N''''), TYPE).value(N''.[1]'', N''NVARCHAR(MAX)''), 1, 1, N'''') OPTION(RECOMPILE);\n\n\t\t\t\t\tINSERT #bou_allsort (\tDatabaseName, Cost, QueryText, QueryType, Warnings, QueryPlan, missing_indexes, implicit_conversion_info, cached_execution_parameters, ExecutionCount, ExecutionsPerMinute, ExecutionWeight, \n\t\t\t\t\t\t\t\t\t\t\tTotalCPU, AverageCPU, CPUWeight, TotalDuration, AverageDuration, DurationWeight, TotalReads, AverageReads, \n\t\t\t\t\t\t\t\t\t\t\tReadWeight, TotalWrites, AverageWrites, WriteWeight, AverageReturnedRows, MinGrantKB, MaxGrantKB, MinUsedGrantKB, \n\t\t\t\t\t\t\t\t\t\t\tMaxUsedGrantKB, AvgMaxMemoryGrant, MinSpills, MaxSpills, TotalSpills, AvgSpills, PlanCreationTime, LastExecutionTime, PlanHandle, SqlHandle, SetOptions )\t\t\t\t \n\t\t\t\t\t \n\t\t\t\t\t EXEC sp_BlitzCache @ExpertMode = 0, @HideSummary = 1, @Top = @i_Top, @SortOrder = ''duration'', @IgnoreSqlHandles = @ISH, @DatabaseName = @i_DatabaseName WITH RECOMPILE;\n\t\t\t\t\t \n\t\t\t\t\t UPDATE #bou_allsort SET Pattern = ''duration'' WHERE Pattern IS NULL OPTION(RECOMPILE);\n\n\t\t\t\t\t SELECT TOP 1 @ISH = STUFF((SELECT DISTINCT N'','' + CONVERT(NVARCHAR(MAX),b2.SqlHandle, 1) FROM #bou_allsort AS b2 FOR XML PATH(N''''), TYPE).value(N''.[1]'', N''NVARCHAR(MAX)''), 1, 1, N'''') OPTION(RECOMPILE);\n\n\t\t\t\t\tINSERT #bou_allsort (\tDatabaseName, Cost, QueryText, QueryType, Warnings, QueryPlan, missing_indexes, implicit_conversion_info, cached_execution_parameters, ExecutionCount, ExecutionsPerMinute, ExecutionWeight, \n\t\t\t\t\t\t\t\t\t\t\tTotalCPU, AverageCPU, CPUWeight, TotalDuration, AverageDuration, DurationWeight, TotalReads, AverageReads, \n\t\t\t\t\t\t\t\t\t\t\tReadWeight, TotalWrites, AverageWrites, WriteWeight, AverageReturnedRows, MinGrantKB, MaxGrantKB, MinUsedGrantKB, \n\t\t\t\t\t\t\t\t\t\t\tMaxUsedGrantKB, AvgMaxMemoryGrant, MinSpills, MaxSpills, TotalSpills, AvgSpills, PlanCreationTime, LastExecutionTime, PlanHandle, SqlHandle, SetOptions )\t\t\t\t \n\t\t\t\t\t \n\t\t\t\t\t EXEC sp_BlitzCache @ExpertMode = 0, @HideSummary = 1, @Top = @i_Top, @SortOrder = ''executions'', @IgnoreSqlHandles = @ISH, @DatabaseName = @i_DatabaseName WITH RECOMPILE;\n\t\t\t\t\t \n\t\t\t\t\t UPDATE #bou_allsort SET Pattern = ''executions'' WHERE Pattern IS NULL OPTION(RECOMPILE);\n\t\t\t\t\t \n\t\t\t\t\t '; \n\t\t\t\t\t\n\t\t\t\t\tIF @MemGrant = 0\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tIF @ExportToExcel = 1\n\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\tSET @AllSortSql += N'  UPDATE #bou_allsort \n\t\t\t\t\t\t\t\t\t\t\t\t   SET \n\t\t\t\t\t\t\t\t\t\t\t\t\tQueryPlan = NULL,\n\t\t\t\t\t\t\t\t\t\t\t\t\timplicit_conversion_info = NULL, \n\t\t\t\t\t\t\t\t\t\t\t\t\tcached_execution_parameters = NULL,\n\t\t\t\t\t\t\t\t\t\t\t\t\tmissing_indexes = NULL\n\t\t\t\t\t\t\t\t\t\t\t\t   OPTION (RECOMPILE);\n\n\t\t\t\t\t\t\t\t\t\t\t\t   UPDATE ##bou_BlitzCacheProcs\n\t\t\t\t\t\t\t\t\t\t\t\t   SET QueryText = SUBSTRING(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(QueryText)),'' '',''<>''),''><'',''''),''<>'','' ''), 1, 32000)\n\t\t\t\t\t\t\t\t\t\t\t\t   OPTION(RECOMPILE);';\n\t\t\t\t\t\tEND; \n\t\t\t\t\tSET @AllSortSql += N'  SELECT DatabaseName, Cost, QueryText, QueryType, Warnings, QueryPlan, missing_indexes, implicit_conversion_info, cached_execution_parameters,ExecutionCount, ExecutionsPerMinute, ExecutionWeight, \n\t\t\t\t\t\t\t\t\t\t   TotalCPU, AverageCPU, CPUWeight, TotalDuration, AverageDuration, DurationWeight, TotalReads, AverageReads, \n\t\t\t\t\t\t\t\t\t\t   ReadWeight, TotalWrites, AverageWrites, WriteWeight, AverageReturnedRows, MinGrantKB, MaxGrantKB, MinUsedGrantKB, \n\t\t\t\t\t\t\t\t\t\t   MaxUsedGrantKB, AvgMaxMemoryGrant, MinSpills, MaxSpills, TotalSpills, AvgSpills, PlanCreationTime, LastExecutionTime, PlanHandle, SqlHandle, SetOptions \n\t\t\t\t\t\t\t\t\t\t   FROM #bou_allsort \n\t\t\t\t\t\t\t\t\t\t   ORDER BY Id \n\t\t\t\t\t\t\t\t\t\t   OPTION(RECOMPILE);  ';\n\t\t\t\t\tEND; \n\t\t\t\t\t\n\t\t\t\t\tIF @MemGrant = 1\n\t\t\t\t\tBEGIN \n\t\t\t\t\tSET @AllSortSql += N' SELECT TOP 1 @ISH = STUFF((SELECT DISTINCT N'','' + CONVERT(NVARCHAR(MAX),b2.SqlHandle, 1) FROM #bou_allsort AS b2 FOR XML PATH(N''''), TYPE).value(N''.[1]'', N''NVARCHAR(MAX)''), 1, 1, N'''') OPTION(RECOMPILE);\n\t\t\t\t\t\n\t\t\t\t\tINSERT #bou_allsort (\tDatabaseName, Cost, QueryText, QueryType, Warnings, QueryPlan, missing_indexes, implicit_conversion_info, cached_execution_parameters, ExecutionCount, ExecutionsPerMinute, ExecutionWeight, \n\t\t\t\t\t\t\t\t\t\t\tTotalCPU, AverageCPU, CPUWeight, TotalDuration, AverageDuration, DurationWeight, TotalReads, AverageReads, \n\t\t\t\t\t\t\t\t\t\t\tReadWeight, TotalWrites, AverageWrites, WriteWeight, AverageReturnedRows, MinGrantKB, MaxGrantKB, MinUsedGrantKB, \n\t\t\t\t\t\t\t\t\t\t\tMaxUsedGrantKB, AvgMaxMemoryGrant, MinSpills, MaxSpills, TotalSpills, AvgSpills, PlanCreationTime, LastExecutionTime, PlanHandle, SqlHandle, SetOptions )\t\t\t \n\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t  EXEC sp_BlitzCache @ExpertMode = 0, @HideSummary = 1, @Top = @i_Top, @SortOrder = ''memory grant'', @IgnoreSqlHandles = @ISH, @DatabaseName = @i_DatabaseName WITH RECOMPILE;\n\t\t\t\t\t \t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t  UPDATE #bou_allsort SET Pattern = ''memory grant'' WHERE Pattern IS NULL OPTION(RECOMPILE);';\n\t\t\t\t\t\tIF @ExportToExcel = 1\n\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\tSET @AllSortSql += N'  UPDATE #bou_allsort \n\t\t\t\t\t\t\t\t\t\t\t\t   SET \n\t\t\t\t\t\t\t\t\t\t\t\t\tQueryPlan = NULL,\n\t\t\t\t\t\t\t\t\t\t\t\t\timplicit_conversion_info = NULL, \n\t\t\t\t\t\t\t\t\t\t\t\t\tcached_execution_parameters = NULL, \n\t\t\t\t\t\t\t\t\t\t\t\t\tmissing_indexes = NULL\n\t\t\t\t\t\t\t\t\t\t\t\t   OPTION (RECOMPILE);\n\n\t\t\t\t\t\t\t\t\t\t\t\t   UPDATE ##bou_BlitzCacheProcs\n\t\t\t\t\t\t\t\t\t\t\t\t   SET QueryText = SUBSTRING(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(QueryText)),'' '',''<>''),''><'',''''),''<>'','' ''), 1, 32000)\n\t\t\t\t\t\t\t\t\t\t\t\t   OPTION(RECOMPILE);';\n\t\t\t\t\t\tEND; \n\t\t\t\t\tSET @AllSortSql += N' SELECT DatabaseName, Cost, QueryText, QueryType, Warnings, QueryPlan, missing_indexes, implicit_conversion_info, cached_execution_parameters,ExecutionCount, ExecutionsPerMinute, ExecutionWeight, \n\t\t\t\t\t\t\t\t\t\t  TotalCPU, AverageCPU, CPUWeight, TotalDuration, AverageDuration, DurationWeight, TotalReads, AverageReads, \n\t\t\t\t\t\t\t\t\t\t  ReadWeight, TotalWrites, AverageWrites, WriteWeight, AverageReturnedRows, MinGrantKB, MaxGrantKB, MinUsedGrantKB, \n\t\t\t\t\t\t\t\t\t\t  MaxUsedGrantKB, AvgMaxMemoryGrant, MinSpills, MaxSpills, TotalSpills, AvgSpills, PlanCreationTime, LastExecutionTime, PlanHandle, SqlHandle, SetOptions  \n\t\t\t\t\t\t\t\t\t\t  FROM #bou_allsort \n\t\t\t\t\t\t\t\t\t\t  ORDER BY Id \n\t\t\t\t\t\t\t\t\t\t  OPTION(RECOMPILE);  ';\n\t\t\t\t    END;\n\n\t\t\t\t\tIF @Spills = 0\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tIF @ExportToExcel = 1\n\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\tSET @AllSortSql += N'  UPDATE #bou_allsort \n\t\t\t\t\t\t\t\t\t\t\t\t   SET \n\t\t\t\t\t\t\t\t\t\t\t\t\tQueryPlan = NULL,\n\t\t\t\t\t\t\t\t\t\t\t\t\timplicit_conversion_info = NULL, \n\t\t\t\t\t\t\t\t\t\t\t\t\tcached_execution_parameters = NULL,\n\t\t\t\t\t\t\t\t\t\t\t\t\tmissing_indexes = NULL\n\t\t\t\t\t\t\t\t\t\t\t\t   OPTION (RECOMPILE);\n\n\t\t\t\t\t\t\t\t\t\t\t\t   UPDATE ##bou_BlitzCacheProcs\n\t\t\t\t\t\t\t\t\t\t\t\t   SET QueryText = SUBSTRING(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(QueryText)),'' '',''<>''),''><'',''''),''<>'','' ''), 1, 32000)\n\t\t\t\t\t\t\t\t\t\t\t\t   OPTION(RECOMPILE);';\n\t\t\t\t\t\tEND; \n\t\t\t\t\tSET @AllSortSql += N'  SELECT DatabaseName, Cost, QueryText, QueryType, Warnings, QueryPlan, missing_indexes, implicit_conversion_info, cached_execution_parameters,ExecutionCount, ExecutionsPerMinute, ExecutionWeight, \n\t\t\t\t\t\t\t\t\t\t   TotalCPU, AverageCPU, CPUWeight, TotalDuration, AverageDuration, DurationWeight, TotalReads, AverageReads, \n\t\t\t\t\t\t\t\t\t\t   ReadWeight, TotalWrites, AverageWrites, WriteWeight, AverageReturnedRows, MinGrantKB, MaxGrantKB, MinUsedGrantKB, \n\t\t\t\t\t\t\t\t\t\t   MaxUsedGrantKB, AvgMaxMemoryGrant, MinSpills, MaxSpills, TotalSpills, AvgSpills, PlanCreationTime, LastExecutionTime, PlanHandle, SqlHandle, SetOptions \n\t\t\t\t\t\t\t\t\t\t   FROM #bou_allsort \n\t\t\t\t\t\t\t\t\t\t   ORDER BY Id \n\t\t\t\t\t\t\t\t\t\t   OPTION(RECOMPILE);  ';\n\t\t\t\t\tEND; \n\t\t\t\t\t\n\t\t\t\t\tIF @Spills = 1\n\t\t\t\t\tBEGIN \n\t\t\t\t\tSET @AllSortSql += N' SELECT TOP 1 @ISH = STUFF((SELECT DISTINCT N'','' + CONVERT(NVARCHAR(MAX),b2.SqlHandle, 1) FROM #bou_allsort AS b2 FOR XML PATH(N''''), TYPE).value(N''.[1]'', N''NVARCHAR(MAX)''), 1, 1, N'''') OPTION(RECOMPILE);\n\t\t\t\t\t\n\t\t\t\t\tINSERT #bou_allsort (\tDatabaseName, Cost, QueryText, QueryType, Warnings, QueryPlan, missing_indexes, implicit_conversion_info, cached_execution_parameters, ExecutionCount, ExecutionsPerMinute, ExecutionWeight, \n\t\t\t\t\t\t\t\t\t\t\tTotalCPU, AverageCPU, CPUWeight, TotalDuration, AverageDuration, DurationWeight, TotalReads, AverageReads, \n\t\t\t\t\t\t\t\t\t\t\tReadWeight, TotalWrites, AverageWrites, WriteWeight, AverageReturnedRows, MinGrantKB, MaxGrantKB, MinUsedGrantKB, \n\t\t\t\t\t\t\t\t\t\t\tMaxUsedGrantKB, AvgMaxMemoryGrant, MinSpills, MaxSpills, TotalSpills, AvgSpills, PlanCreationTime, LastExecutionTime, PlanHandle, SqlHandle, SetOptions )\t\t\t \n\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t  EXEC sp_BlitzCache @ExpertMode = 0, @HideSummary = 1, @Top = @i_Top, @SortOrder = ''spills'', @IgnoreSqlHandles = @ISH, @DatabaseName = @i_DatabaseName WITH RECOMPILE;\n\t\t\t\t\t \t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t  UPDATE #bou_allsort SET Pattern = ''memory grant'' WHERE Pattern IS NULL OPTION(RECOMPILE);';\n\t\t\t\t\t\tIF @ExportToExcel = 1\n\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\tSET @AllSortSql += N'  UPDATE #bou_allsort \n\t\t\t\t\t\t\t\t\t\t\t\t   SET \n\t\t\t\t\t\t\t\t\t\t\t\t\tQueryPlan = NULL,\n\t\t\t\t\t\t\t\t\t\t\t\t\timplicit_conversion_info = NULL, \n\t\t\t\t\t\t\t\t\t\t\t\t\tcached_execution_parameters = NULL, \n\t\t\t\t\t\t\t\t\t\t\t\t\tmissing_indexes = NULL\n\t\t\t\t\t\t\t\t\t\t\t\t   OPTION (RECOMPILE);\n\n\t\t\t\t\t\t\t\t\t\t\t\t   UPDATE ##bou_BlitzCacheProcs\n\t\t\t\t\t\t\t\t\t\t\t\t   SET QueryText = SUBSTRING(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(QueryText)),'' '',''<>''),''><'',''''),''<>'','' ''), 1, 32000)\n\t\t\t\t\t\t\t\t\t\t\t\t   OPTION(RECOMPILE);';\n\t\t\t\t\t\tEND; \n\t\t\t\t\tSET @AllSortSql += N' SELECT DatabaseName, Cost, QueryText, QueryType, Warnings, QueryPlan, missing_indexes, implicit_conversion_info, cached_execution_parameters,ExecutionCount, ExecutionsPerMinute, ExecutionWeight, \n\t\t\t\t\t\t\t\t\t\t  TotalCPU, AverageCPU, CPUWeight, TotalDuration, AverageDuration, DurationWeight, TotalReads, AverageReads, \n\t\t\t\t\t\t\t\t\t\t  ReadWeight, TotalWrites, AverageWrites, WriteWeight, AverageReturnedRows, MinGrantKB, MaxGrantKB, MinUsedGrantKB, \n\t\t\t\t\t\t\t\t\t\t  MaxUsedGrantKB, AvgMaxMemoryGrant, MinSpills, MaxSpills, TotalSpills, AvgSpills, PlanCreationTime, LastExecutionTime, PlanHandle, SqlHandle, SetOptions  \n\t\t\t\t\t\t\t\t\t\t  FROM #bou_allsort \n\t\t\t\t\t\t\t\t\t\t  ORDER BY Id \n\t\t\t\t\t\t\t\t\t\t  OPTION(RECOMPILE);  ';\n\t\t\t\t    END;\n\t\t\t\t\nEND; \t\t\t\n\n\nIF LOWER(@SortOrder) = 'all avg'\nBEGIN \nRAISERROR('Beginning for ALL AVG', 0, 1) WITH NOWAIT;\nSET @AllSortSql += N' \n\t\t\t\t\tDECLARE @ISH NVARCHAR(MAX) = N'''' \n\t\t\t\t\t\n\t\t\t\t\tINSERT #bou_allsort (\tDatabaseName, Cost, QueryText, QueryType, Warnings, QueryPlan, missing_indexes, implicit_conversion_info, cached_execution_parameters, ExecutionCount, ExecutionsPerMinute, ExecutionWeight, \n\t\t\t\t\t\t\t\t\t\t\tTotalCPU, AverageCPU, CPUWeight, TotalDuration, AverageDuration, DurationWeight, TotalReads, AverageReads, \n\t\t\t\t\t\t\t\t\t\t\tReadWeight, TotalWrites, AverageWrites, WriteWeight, AverageReturnedRows, MinGrantKB, MaxGrantKB, MinUsedGrantKB, \n\t\t\t\t\t\t\t\t\t\t\tMaxUsedGrantKB, AvgMaxMemoryGrant, MinSpills, MaxSpills, TotalSpills, AvgSpills, PlanCreationTime, LastExecutionTime, PlanHandle, SqlHandle, SetOptions )\t\t\t \n\t\t\t\t\t\n\t\t\t\t\t EXEC sp_BlitzCache @ExpertMode = 0, @HideSummary = 1, @Top = @i_Top, @SortOrder = ''avg cpu'', @DatabaseName = @i_DatabaseName WITH RECOMPILE;\n\t\t\t\t\t \n\t\t\t\t\t UPDATE #bou_allsort SET Pattern = ''avg cpu'' WHERE Pattern IS NULL OPTION(RECOMPILE);\n\n\t\t\t\t\t SELECT TOP 1 @ISH = STUFF((SELECT DISTINCT N'','' + CONVERT(NVARCHAR(MAX),b2.SqlHandle, 1) FROM #bou_allsort AS b2 FOR XML PATH(N''''), TYPE).value(N''.[1]'', N''NVARCHAR(MAX)''), 1, 1, N'''') OPTION(RECOMPILE);\n\n\t\t\t\t\tINSERT #bou_allsort (\tDatabaseName, Cost, QueryText, QueryType, Warnings, QueryPlan, missing_indexes, implicit_conversion_info, cached_execution_parameters, ExecutionCount, ExecutionsPerMinute, ExecutionWeight, \n\t\t\t\t\t\t\t\t\t\t\tTotalCPU, AverageCPU, CPUWeight, TotalDuration, AverageDuration, DurationWeight, TotalReads, AverageReads, \n\t\t\t\t\t\t\t\t\t\t\tReadWeight, TotalWrites, AverageWrites, WriteWeight, AverageReturnedRows, MinGrantKB, MaxGrantKB, MinUsedGrantKB, \n\t\t\t\t\t\t\t\t\t\t\tMaxUsedGrantKB, AvgMaxMemoryGrant, MinSpills, MaxSpills, TotalSpills, AvgSpills, PlanCreationTime, LastExecutionTime, PlanHandle, SqlHandle, SetOptions )\t\t \n\t\t\t\t\t \n\t\t\t\t\t EXEC sp_BlitzCache @ExpertMode = 0, @HideSummary = 1, @Top = @i_Top, @SortOrder = ''avg reads'', @IgnoreSqlHandles = @ISH, @DatabaseName = @i_DatabaseName WITH RECOMPILE;\n\t\t\t\t\t \n\t\t\t\t\t UPDATE #bou_allsort SET Pattern = ''avg reads'' WHERE Pattern IS NULL OPTION(RECOMPILE);\n\n\t\t\t\t\t SELECT TOP 1 @ISH = STUFF((SELECT DISTINCT N'','' + CONVERT(NVARCHAR(MAX),b2.SqlHandle, 1) FROM #bou_allsort AS b2 FOR XML PATH(N''''), TYPE).value(N''.[1]'', N''NVARCHAR(MAX)''), 1, 1, N'''') OPTION(RECOMPILE);\n\n\t\t\t\t\tINSERT #bou_allsort (\tDatabaseName, Cost, QueryText, QueryType, Warnings, QueryPlan, missing_indexes, implicit_conversion_info, cached_execution_parameters, ExecutionCount, ExecutionsPerMinute, ExecutionWeight, \n\t\t\t\t\t\t\t\t\t\t\tTotalCPU, AverageCPU, CPUWeight, TotalDuration, AverageDuration, DurationWeight, TotalReads, AverageReads, \n\t\t\t\t\t\t\t\t\t\t\tReadWeight, TotalWrites, AverageWrites, WriteWeight, AverageReturnedRows, MinGrantKB, MaxGrantKB, MinUsedGrantKB, \n\t\t\t\t\t\t\t\t\t\t\tMaxUsedGrantKB, AvgMaxMemoryGrant, MinSpills, MaxSpills, TotalSpills, AvgSpills, PlanCreationTime, LastExecutionTime, PlanHandle, SqlHandle, SetOptions )\t \n\t\t\t\t\t\n\t\t\t\t\t EXEC sp_BlitzCache @ExpertMode = 0, @HideSummary = 1, @Top = @i_Top, @SortOrder = ''avg writes'', @IgnoreSqlHandles = @ISH, @DatabaseName = @i_DatabaseName WITH RECOMPILE;\n\t\t\t\t\t \n\t\t\t\t\t UPDATE #bou_allsort SET Pattern = ''avg writes'' WHERE Pattern IS NULL OPTION(RECOMPILE);\n\n\t\t\t\t\t SELECT TOP 1 @ISH = STUFF((SELECT DISTINCT N'','' + CONVERT(NVARCHAR(MAX),b2.SqlHandle, 1) FROM #bou_allsort AS b2 FOR XML PATH(N''''), TYPE).value(N''.[1]'', N''NVARCHAR(MAX)''), 1, 1, N'''') OPTION(RECOMPILE);\n\n\t\t\t\t\tINSERT #bou_allsort (\tDatabaseName, Cost, QueryText, QueryType, Warnings, QueryPlan, missing_indexes, implicit_conversion_info, cached_execution_parameters, ExecutionCount, ExecutionsPerMinute, ExecutionWeight, \n\t\t\t\t\t\t\t\t\t\t\tTotalCPU, AverageCPU, CPUWeight, TotalDuration, AverageDuration, DurationWeight, TotalReads, AverageReads, \n\t\t\t\t\t\t\t\t\t\t\tReadWeight, TotalWrites, AverageWrites, WriteWeight, AverageReturnedRows, MinGrantKB, MaxGrantKB, MinUsedGrantKB, \n\t\t\t\t\t\t\t\t\t\t\tMaxUsedGrantKB, AvgMaxMemoryGrant, MinSpills, MaxSpills, TotalSpills, AvgSpills, PlanCreationTime, LastExecutionTime, PlanHandle, SqlHandle, SetOptions )\n\t\t\t\t\t \n\t\t\t\t\t EXEC sp_BlitzCache @ExpertMode = 0, @HideSummary = 1, @Top = @i_Top, @SortOrder = ''avg duration'', @IgnoreSqlHandles = @ISH, @DatabaseName = @i_DatabaseName WITH RECOMPILE;\n\t\t\t\t\t \n\t\t\t\t\t UPDATE #bou_allsort SET Pattern = ''avg duration'' WHERE Pattern IS NULL OPTION(RECOMPILE);\n\n\t\t\t\t\t SELECT TOP 1 @ISH = STUFF((SELECT DISTINCT N'','' + CONVERT(NVARCHAR(MAX),b2.SqlHandle, 1) FROM #bou_allsort AS b2 FOR XML PATH(N''''), TYPE).value(N''.[1]'', N''NVARCHAR(MAX)''), 1, 1, N'''') OPTION(RECOMPILE);\n\n\t\t\t\t\tINSERT #bou_allsort (\tDatabaseName, Cost, QueryText, QueryType, Warnings, QueryPlan, missing_indexes, implicit_conversion_info, cached_execution_parameters, ExecutionCount, ExecutionsPerMinute, ExecutionWeight, \n\t\t\t\t\t\t\t\t\t\t\tTotalCPU, AverageCPU, CPUWeight, TotalDuration, AverageDuration, DurationWeight, TotalReads, AverageReads, \n\t\t\t\t\t\t\t\t\t\t\tReadWeight, TotalWrites, AverageWrites, WriteWeight, AverageReturnedRows, MinGrantKB, MaxGrantKB, MinUsedGrantKB, \n\t\t\t\t\t\t\t\t\t\t\tMaxUsedGrantKB, AvgMaxMemoryGrant, MinSpills, MaxSpills, TotalSpills, AvgSpills, PlanCreationTime, LastExecutionTime, PlanHandle, SqlHandle, SetOptions )\t\t\t \n\t\t\t\t\t \n\t\t\t\t\t EXEC sp_BlitzCache @ExpertMode = 0, @HideSummary = 1, @Top = @i_Top, @SortOrder = ''avg executions'', @IgnoreSqlHandles = @ISH, @DatabaseName = @i_DatabaseName WITH RECOMPILE;\n\t\t\t\t\t \n\t\t\t\t\t UPDATE #bou_allsort SET Pattern = ''avg executions'' WHERE Pattern IS NULL OPTION(RECOMPILE);\n\t\t\t\t\t \n\t\t\t\t\t ';\n\t\t\t\t\t \n\t\t\t\t\tIF @MemGrant = 0\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tIF @ExportToExcel = 1\n\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\tSET @AllSortSql += N'  UPDATE #bou_allsort \n\t\t\t\t\t\t\t\t\t\t\t\t   SET \n\t\t\t\t\t\t\t\t\t\t\t\t\tQueryPlan = NULL,\n\t\t\t\t\t\t\t\t\t\t\t\t\timplicit_conversion_info = NULL, \n\t\t\t\t\t\t\t\t\t\t\t\t\tcached_execution_parameters = NULL, \n\t\t\t\t\t\t\t\t\t\t\t\t\tmissing_indexes = NULL\n\t\t\t\t\t\t\t\t\t\t\t\t   OPTION (RECOMPILE);\n\n\t\t\t\t\t\t\t\t\t\t\t\t   UPDATE ##bou_BlitzCacheProcs\n\t\t\t\t\t\t\t\t\t\t\t\t   SET QueryText = SUBSTRING(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(QueryText)),'' '',''<>''),''><'',''''),''<>'','' ''), 1, 32000)\n\t\t\t\t\t\t\t\t\t\t\t\t   OPTION(RECOMPILE);';\n\t\t\t\t\t\tEND;  \n\t\t\t\t\tSET @AllSortSql += N'  SELECT DatabaseName, Cost, QueryText, QueryType, Warnings, QueryPlan, missing_indexes, implicit_conversion_info, cached_execution_parameters,ExecutionCount, ExecutionsPerMinute, ExecutionWeight, \n\t\t\t\t\t\t\t\t\t\t   TotalCPU, AverageCPU, CPUWeight, TotalDuration, AverageDuration, DurationWeight, TotalReads, AverageReads, \n\t\t\t\t\t\t\t\t\t\t   ReadWeight, TotalWrites, AverageWrites, WriteWeight, AverageReturnedRows, MinGrantKB, MaxGrantKB, MinUsedGrantKB, \n\t\t\t\t\t\t\t\t\t\t   MaxUsedGrantKB, AvgMaxMemoryGrant, MinSpills, MaxSpills, TotalSpills, AvgSpills, PlanCreationTime, LastExecutionTime, PlanHandle, SqlHandle, SetOptions \n\t\t\t\t\t\t\t\t\t\t   FROM #bou_allsort \n\t\t\t\t\t\t\t\t\t\t   ORDER BY Id \n\t\t\t\t\t\t\t\t\t\t   OPTION(RECOMPILE);  ';\n\t\t\t\t\tEND; \n\t\t\t\t\t\n\t\t\t\t\tIF @MemGrant = 1\n\t\t\t\t\tBEGIN \n\t\t\t\t\tSET @AllSortSql += N' SELECT TOP 1 @ISH = STUFF((SELECT DISTINCT N'','' + CONVERT(NVARCHAR(MAX),b2.SqlHandle, 1) FROM #bou_allsort AS b2 FOR XML PATH(N''''), TYPE).value(N''.[1]'', N''NVARCHAR(MAX)''), 1, 1, N'''') OPTION(RECOMPILE);\n\t\t\t\t\t\n\t\t\t\t\t\tINSERT #bou_allsort (\tDatabaseName, Cost, QueryText, QueryType, Warnings, QueryPlan, missing_indexes, implicit_conversion_info, cached_execution_parameters, ExecutionCount, ExecutionsPerMinute, ExecutionWeight, \n\t\t\t\t\t\t\t\t\t\t\tTotalCPU, AverageCPU, CPUWeight, TotalDuration, AverageDuration, DurationWeight, TotalReads, AverageReads, \n\t\t\t\t\t\t\t\t\t\t\tReadWeight, TotalWrites, AverageWrites, WriteWeight, AverageReturnedRows, MinGrantKB, MaxGrantKB, MinUsedGrantKB, \n\t\t\t\t\t\t\t\t\t\t\tMaxUsedGrantKB, AvgMaxMemoryGrant, MinSpills, MaxSpills, TotalSpills, AvgSpills, PlanCreationTime, LastExecutionTime, PlanHandle, SqlHandle, SetOptions )\t\t\t \n\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t  EXEC sp_BlitzCache @ExpertMode = 0, @HideSummary = 1, @Top = @i_Top, @SortOrder = ''avg memory grant'', @IgnoreSqlHandles = @ISH, @DatabaseName = @i_DatabaseName WITH RECOMPILE;\n\t\t\t\t\t \t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t  UPDATE #bou_allsort SET Pattern = ''avg memory grant'' WHERE Pattern IS NULL OPTION(RECOMPILE);';\n\t\t\t\t\t\tIF @ExportToExcel = 1\n\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\tSET @AllSortSql += N'  UPDATE #bou_allsort \n\t\t\t\t\t\t\t\t\t\t\t\t   SET \n\t\t\t\t\t\t\t\t\t\t\t\t\tQueryPlan = NULL,\n\t\t\t\t\t\t\t\t\t\t\t\t\timplicit_conversion_info = NULL, \n\t\t\t\t\t\t\t\t\t\t\t\t\tcached_execution_parameters = NULL, \n\t\t\t\t\t\t\t\t\t\t\t\t\tmissing_indexes = NULL\n\t\t\t\t\t\t\t\t\t\t\t\t   OPTION (RECOMPILE);\n\n\t\t\t\t\t\t\t\t\t\t\t\t   UPDATE ##bou_BlitzCacheProcs\n\t\t\t\t\t\t\t\t\t\t\t\t   SET QueryText = SUBSTRING(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(QueryText)),'' '',''<>''),''><'',''''),''<>'','' ''), 1, 32000)\n\t\t\t\t\t\t\t\t\t\t\t\t   OPTION(RECOMPILE);';\n\t\t\t\t\t\tEND; \n\t\t\t\t\tSET @AllSortSql += N' SELECT DatabaseName, Cost, QueryText, QueryType, Warnings, QueryPlan, missing_indexes, implicit_conversion_info, cached_execution_parameters,ExecutionCount, ExecutionsPerMinute, ExecutionWeight, \n\t\t\t\t\t\t\t\t\t\t  TotalCPU, AverageCPU, CPUWeight, TotalDuration, AverageDuration, DurationWeight, TotalReads, AverageReads, \n\t\t\t\t\t\t\t\t\t\t  ReadWeight, TotalWrites, AverageWrites, WriteWeight, AverageReturnedRows, MinGrantKB, MaxGrantKB, MinUsedGrantKB, \n\t\t\t\t\t\t\t\t\t\t  MaxUsedGrantKB, AvgMaxMemoryGrant, MinSpills, MaxSpills, TotalSpills, AvgSpills, PlanCreationTime, LastExecutionTime, PlanHandle, SqlHandle, SetOptions \n\t\t\t\t\t\t\t\t\t\t  FROM #bou_allsort \n\t\t\t\t\t\t\t\t\t\t  ORDER BY Id \n\t\t\t\t\t\t\t\t\t\t  OPTION(RECOMPILE);  ';\n\t\t\t\t    END;\n\n\t\t\t\t\tIF @Spills = 0\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tIF @ExportToExcel = 1\n\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\tSET @AllSortSql += N'  UPDATE #bou_allsort \n\t\t\t\t\t\t\t\t\t\t\t\t   SET \n\t\t\t\t\t\t\t\t\t\t\t\t\tQueryPlan = NULL,\n\t\t\t\t\t\t\t\t\t\t\t\t\timplicit_conversion_info = NULL, \n\t\t\t\t\t\t\t\t\t\t\t\t\tcached_execution_parameters = NULL, \n\t\t\t\t\t\t\t\t\t\t\t\t\tmissing_indexes = NULL\n\t\t\t\t\t\t\t\t\t\t\t\t   OPTION (RECOMPILE);\n\n\t\t\t\t\t\t\t\t\t\t\t\t   UPDATE ##bou_BlitzCacheProcs\n\t\t\t\t\t\t\t\t\t\t\t\t   SET QueryText = SUBSTRING(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(QueryText)),'' '',''<>''),''><'',''''),''<>'','' ''), 1, 32000)\n\t\t\t\t\t\t\t\t\t\t\t\t   OPTION(RECOMPILE);';\n\t\t\t\t\t\tEND;  \n\t\t\t\t\tSET @AllSortSql += N'  SELECT DatabaseName, Cost, QueryText, QueryType, Warnings, QueryPlan, missing_indexes, implicit_conversion_info, cached_execution_parameters,ExecutionCount, ExecutionsPerMinute, ExecutionWeight, \n\t\t\t\t\t\t\t\t\t\t   TotalCPU, AverageCPU, CPUWeight, TotalDuration, AverageDuration, DurationWeight, TotalReads, AverageReads, \n\t\t\t\t\t\t\t\t\t\t   ReadWeight, TotalWrites, AverageWrites, WriteWeight, AverageReturnedRows, MinGrantKB, MaxGrantKB, MinUsedGrantKB, \n\t\t\t\t\t\t\t\t\t\t   MaxUsedGrantKB, AvgMaxMemoryGrant, MinSpills, MaxSpills, TotalSpills, AvgSpills, PlanCreationTime, LastExecutionTime, PlanHandle, SqlHandle, SetOptions \n\t\t\t\t\t\t\t\t\t\t   FROM #bou_allsort \n\t\t\t\t\t\t\t\t\t\t   ORDER BY Id \n\t\t\t\t\t\t\t\t\t\t   OPTION(RECOMPILE);  ';\n\t\t\t\t\tEND; \n\t\t\t\t\t\n\t\t\t\t\tIF @Spills = 1\n\t\t\t\t\tBEGIN \n\t\t\t\t\tSET @AllSortSql += N' SELECT TOP 1 @ISH = STUFF((SELECT DISTINCT N'','' + CONVERT(NVARCHAR(MAX),b2.SqlHandle, 1) FROM #bou_allsort AS b2 FOR XML PATH(N''''), TYPE).value(N''.[1]'', N''NVARCHAR(MAX)''), 1, 1, N'''') OPTION(RECOMPILE);\n\t\t\t\t\t\n\t\t\t\t\t\tINSERT #bou_allsort (\tDatabaseName, Cost, QueryText, QueryType, Warnings, QueryPlan, missing_indexes, implicit_conversion_info, cached_execution_parameters, ExecutionCount, ExecutionsPerMinute, ExecutionWeight, \n\t\t\t\t\t\t\t\t\t\t\tTotalCPU, AverageCPU, CPUWeight, TotalDuration, AverageDuration, DurationWeight, TotalReads, AverageReads, \n\t\t\t\t\t\t\t\t\t\t\tReadWeight, TotalWrites, AverageWrites, WriteWeight, AverageReturnedRows, MinGrantKB, MaxGrantKB, MinUsedGrantKB, \n\t\t\t\t\t\t\t\t\t\t\tMaxUsedGrantKB, AvgMaxMemoryGrant, MinSpills, MaxSpills, TotalSpills, AvgSpills, PlanCreationTime, LastExecutionTime, PlanHandle, SqlHandle, SetOptions )\t\t\t \n\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t  EXEC sp_BlitzCache @ExpertMode = 0, @HideSummary = 1, @Top = @i_Top, @SortOrder = ''avg spills'', @IgnoreSqlHandles = @ISH, @DatabaseName = @i_DatabaseName WITH RECOMPILE;\n\t\t\t\t\t \t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t  UPDATE #bou_allsort SET Pattern = ''avg memory grant'' WHERE Pattern IS NULL OPTION(RECOMPILE);';\n\t\t\t\t\t\tIF @ExportToExcel = 1\n\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\tSET @AllSortSql += N'  UPDATE #bou_allsort \n\t\t\t\t\t\t\t\t\t\t\t\t   SET \n\t\t\t\t\t\t\t\t\t\t\t\t\tQueryPlan = NULL,\n\t\t\t\t\t\t\t\t\t\t\t\t\timplicit_conversion_info = NULL, \n\t\t\t\t\t\t\t\t\t\t\t\t\tcached_execution_parameters = NULL, \n\t\t\t\t\t\t\t\t\t\t\t\t\tmissing_indexes = NULL\n\t\t\t\t\t\t\t\t\t\t\t\t   OPTION (RECOMPILE);\n\n\t\t\t\t\t\t\t\t\t\t\t\t   UPDATE ##bou_BlitzCacheProcs\n\t\t\t\t\t\t\t\t\t\t\t\t   SET QueryText = SUBSTRING(REPLACE(REPLACE(REPLACE(LTRIM(RTRIM(QueryText)),'' '',''<>''),''><'',''''),''<>'','' ''), 1, 32000)\n\t\t\t\t\t\t\t\t\t\t\t\t   OPTION(RECOMPILE);';\n\t\t\t\t\t\tEND; \n\t\t\t\t\tSET @AllSortSql += N' SELECT DatabaseName, Cost, QueryText, QueryType, Warnings, QueryPlan, missing_indexes, implicit_conversion_info, cached_execution_parameters,ExecutionCount, ExecutionsPerMinute, ExecutionWeight, \n\t\t\t\t\t\t\t\t\t\t  TotalCPU, AverageCPU, CPUWeight, TotalDuration, AverageDuration, DurationWeight, TotalReads, AverageReads, \n\t\t\t\t\t\t\t\t\t\t  ReadWeight, TotalWrites, AverageWrites, WriteWeight, AverageReturnedRows, MinGrantKB, MaxGrantKB, MinUsedGrantKB, \n\t\t\t\t\t\t\t\t\t\t  MaxUsedGrantKB, AvgMaxMemoryGrant, MinSpills, MaxSpills, TotalSpills, AvgSpills, PlanCreationTime, LastExecutionTime, PlanHandle, SqlHandle, SetOptions \n\t\t\t\t\t\t\t\t\t\t  FROM #bou_allsort \n\t\t\t\t\t\t\t\t\t\t  ORDER BY Id \n\t\t\t\t\t\t\t\t\t\t  OPTION(RECOMPILE);  ';\n\t\t\t\t    END;\nEND;\n\n\t\t\t\t\tIF @Debug = 1\n\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t    PRINT SUBSTRING(@AllSortSql, 0, 4000);\n\t\t\t\t\t\t    PRINT SUBSTRING(@AllSortSql, 4000, 8000);\n\t\t\t\t\t\t    PRINT SUBSTRING(@AllSortSql, 8000, 12000);\n\t\t\t\t\t\t    PRINT SUBSTRING(@AllSortSql, 12000, 16000);\n\t\t\t\t\t\t    PRINT SUBSTRING(@AllSortSql, 16000, 20000);\n\t\t\t\t\t\t    PRINT SUBSTRING(@AllSortSql, 20000, 24000);\n\t\t\t\t\t\t    PRINT SUBSTRING(@AllSortSql, 24000, 28000);\n\t\t\t\t\t\t    PRINT SUBSTRING(@AllSortSql, 28000, 32000);\n\t\t\t\t\t\t    PRINT SUBSTRING(@AllSortSql, 32000, 36000);\n\t\t\t\t\t\t    PRINT SUBSTRING(@AllSortSql, 36000, 40000);\n\t\t\t\t\t\tEND;\n\n\t\t\t\t\tEXEC sys.sp_executesql @stmt = @AllSortSql, @params = N'@i_DatabaseName NVARCHAR(128), @i_Top INT', @i_DatabaseName = @DatabaseName, @i_Top = @Top;\n\n\n/*End of AllSort section*/\n\nEND; /*Final End*/\n\nGO\nIF OBJECT_ID('dbo.sp_BlitzFirst') IS NULL\n  EXEC ('CREATE PROCEDURE dbo.sp_BlitzFirst AS RETURN 0;')\nGO\n\n\nALTER PROCEDURE [dbo].[sp_BlitzFirst]\n    @LogMessage NVARCHAR(4000) = NULL ,\n    @Help TINYINT = 0 ,\n    @AsOf DATETIMEOFFSET = NULL ,\n    @ExpertMode TINYINT = 0 ,\n    @Seconds INT = 5 ,\n    @OutputType VARCHAR(20) = 'TABLE' ,\n    @OutputServerName NVARCHAR(256) = NULL ,\n    @OutputDatabaseName NVARCHAR(256) = NULL ,\n    @OutputSchemaName NVARCHAR(256) = NULL ,\n    @OutputTableName NVARCHAR(256) = NULL ,\n    @OutputTableNameFileStats NVARCHAR(256) = NULL ,\n    @OutputTableNamePerfmonStats NVARCHAR(256) = NULL ,\n    @OutputTableNameWaitStats NVARCHAR(256) = NULL ,\n    @OutputTableNameBlitzCache NVARCHAR(256) = NULL ,\n    @OutputTableRetentionDays TINYINT = 7 ,\n    @OutputXMLasNVARCHAR TINYINT = 0 ,\n    @FilterPlansByDatabase VARCHAR(MAX) = NULL ,\n    @CheckProcedureCache TINYINT = 0 ,\n    @FileLatencyThresholdMS INT = 100 ,\n    @SinceStartup TINYINT = 0 ,\n    @ShowSleepingSPIDs TINYINT = 0 ,\n    @LogMessageCheckID INT = 38,\n    @LogMessagePriority TINYINT = 1,\n    @LogMessageFindingsGroup VARCHAR(50) = 'Logged Message',\n    @LogMessageFinding VARCHAR(200) = 'Logged from sp_BlitzFirst',\n    @LogMessageURL VARCHAR(200) = '',\n    @LogMessageCheckDate DATETIMEOFFSET = NULL,\n    @Debug BIT = 0,\n    @VersionDate DATETIME = NULL OUTPUT\n    WITH EXECUTE AS CALLER, RECOMPILE\nAS\nBEGIN\nSET NOCOUNT ON;\nSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\nDECLARE @Version VARCHAR(30);\nSET @Version = '6.2';\nSET @VersionDate = '20180201';\n\n\nIF @Help = 1 PRINT '\nsp_BlitzFirst from http://FirstResponderKit.org\n\t\nThis script gives you a prioritized list of why your SQL Server is slow right now.\n\nThis is not an overall health check - for that, check out sp_Blitz.\n\nTo learn more, visit http://FirstResponderKit.org where you can download new\nversions for free, watch training videos on how it works, get more info on\nthe findings, contribute your own code, and more.\n\nKnown limitations of this version:\n - Only Microsoft-supported versions of SQL Server. Sorry, 2005 and 2000. It\n   may work just fine on 2005, and if it does, hug your parents. Just don''t\n   file support issues if it breaks.\n - If a temp table called #CustomPerfmonCounters exists for any other session,\n   but not our session, this stored proc will fail with an error saying the\n   temp table #CustomPerfmonCounters does not exist.\n - @OutputServerName is not functional yet.\n - If @OutputDatabaseName, SchemaName, TableName, etc are quoted with brackets,\n   the write to table may silently fail. Look, I never said I was good at this.\n\nUnknown limitations of this version:\n - None. Like Zombo.com, the only limit is yourself.\n\nChanges - for the full list of improvements and fixes in this version, see:\nhttps://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/\n\n\nMIT License\n\nCopyright (c) 2017 Brent Ozar Unlimited\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n'\n\n\nRAISERROR('Setting up configuration variables',10,1) WITH NOWAIT;\nDECLARE @StringToExecute NVARCHAR(MAX),\n    @ParmDefinitions NVARCHAR(4000),\n    @Parm1 NVARCHAR(4000),\n    @OurSessionID INT,\n    @LineFeed NVARCHAR(10),\n    @StockWarningHeader NVARCHAR(500),\n    @StockWarningFooter NVARCHAR(100),\n    @StockDetailsHeader NVARCHAR(100),\n    @StockDetailsFooter NVARCHAR(100),\n    @StartSampleTime DATETIMEOFFSET,\n    @FinishSampleTime DATETIMEOFFSET,\n\t@FinishSampleTimeWaitFor DATETIME,\n    @ServiceName sysname,\n    @OutputTableNameFileStats_View NVARCHAR(256),\n    @OutputTableNamePerfmonStats_View NVARCHAR(256),\n    @OutputTableNameWaitStats_View NVARCHAR(256),\n    @OutputTableNameWaitStats_Categories NVARCHAR(256),\n    @ObjectFullName NVARCHAR(2000),\n\t@BlitzWho NVARCHAR(MAX) = N'EXEC dbo.sp_BlitzWho @ShowSleepingSPIDs = ' + CONVERT(NVARCHAR(1), @ShowSleepingSPIDs) + N';',\n    @BlitzCacheMinutesBack INT,\n    @BlitzCacheSortOrder VARCHAR(50),\n    @UnquotedOutputServerName NVARCHAR(256) = @OutputServerName ,\n    @UnquotedOutputDatabaseName NVARCHAR(256) = @OutputDatabaseName ,\n    @UnquotedOutputSchemaName NVARCHAR(256) = @OutputSchemaName ;\n\n/* Sanitize our inputs */\nSELECT\n    @OutputTableNameFileStats_View = QUOTENAME(@OutputTableNameFileStats + '_Deltas'),\n    @OutputTableNamePerfmonStats_View = QUOTENAME(@OutputTableNamePerfmonStats + '_Deltas'),\n    @OutputTableNameWaitStats_View = QUOTENAME(@OutputTableNameWaitStats + '_Deltas'),\n    @OutputTableNameWaitStats_Categories = QUOTENAME(@OutputTableNameWaitStats + '_Categories');\n\nSELECT\n    @OutputDatabaseName = QUOTENAME(@OutputDatabaseName),\n    @OutputSchemaName = QUOTENAME(@OutputSchemaName),\n    @OutputTableName = QUOTENAME(@OutputTableName),\n    @OutputTableNameFileStats = QUOTENAME(@OutputTableNameFileStats),\n    @OutputTableNamePerfmonStats = QUOTENAME(@OutputTableNamePerfmonStats),\n    @OutputTableNameWaitStats = QUOTENAME(@OutputTableNameWaitStats),\n    /* @OutputTableNameBlitzCache = QUOTENAME(@OutputTableNameBlitzCache),  We purposely don't sanitize this because sp_BlitzCache will */\n    @LineFeed = CHAR(13) + CHAR(10),\n    @StartSampleTime = SYSDATETIMEOFFSET(),\n    @FinishSampleTime = DATEADD(ss, @Seconds, SYSDATETIMEOFFSET()),\n\t@FinishSampleTimeWaitFor = DATEADD(ss, @Seconds, GETDATE()),\n    @OurSessionID = @@SPID;\n\nIF @LogMessage IS NOT NULL\n    BEGIN\n\n    RAISERROR('Saving LogMessage to table',10,1) WITH NOWAIT;\n\n    /* Try to set the output table parameters if they don't exist */\n    IF @OutputSchemaName IS NULL AND @OutputTableName IS NULL AND @OutputDatabaseName IS NULL\n        BEGIN\n            SET @OutputSchemaName = N'[dbo]';\n            SET @OutputTableName = N'[BlitzFirst]';\n\n            /* Look for the table in the current database */\n            SELECT TOP 1 @OutputDatabaseName = QUOTENAME(TABLE_CATALOG)\n                FROM INFORMATION_SCHEMA.TABLES\n                WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'BlitzFirst';\n\n            IF @OutputDatabaseName IS NULL AND EXISTS (SELECT * FROM sys.databases WHERE name = 'DBAtools')\n                SET @OutputDatabaseName = '[DBAtools]';\n\n        END\n\n    IF @OutputDatabaseName IS NULL OR @OutputSchemaName IS NULL OR @OutputTableName IS NULL\n            OR NOT EXISTS ( SELECT *\n                     FROM   sys.databases\n                     WHERE  QUOTENAME([name]) = @OutputDatabaseName)\n\t\tBEGIN\n        RAISERROR('We have a hard time logging a message without a valid @OutputDatabaseName, @OutputSchemaName, and @OutputTableName to log it to.', 0, 1) WITH NOWAIT;\n\t\tRETURN;\n        END\n    IF @LogMessageCheckDate IS NULL\n        SET @LogMessageCheckDate = SYSDATETIMEOFFSET();\n    SET @StringToExecute = N' IF EXISTS(SELECT * FROM '\n        + @OutputDatabaseName\n        + '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''\n        + @OutputSchemaName + ''') INSERT '\n        + @OutputDatabaseName + '.'\n        + @OutputSchemaName + '.'\n        + @OutputTableName\n        + ' (ServerName, CheckDate, CheckID, Priority, FindingsGroup, Finding, Details, URL) VALUES( '''\n        + CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))\n        + ''', ''' + CONVERT(NVARCHAR(100), @LogMessageCheckDate, 121) + ''', @LogMessageCheckID, @LogMessagePriority, @LogMessageFindingsGroup, @LogMessageFinding, @LogMessage, @LogMessageURL)'\n\n    EXECUTE sp_executesql @StringToExecute, \n        N'@LogMessageCheckID INT, @LogMessagePriority TINYINT, @LogMessageFindingsGroup VARCHAR(50), @LogMessageFinding VARCHAR(200), @LogMessage NVARCHAR(4000), @LogMessageCheckDate DATETIMEOFFSET, @LogMessageURL VARCHAR(200)',\n        @LogMessageCheckID, @LogMessagePriority, @LogMessageFindingsGroup, @LogMessageFinding, @LogMessage, @LogMessageCheckDate, @LogMessageURL;\n\n    RAISERROR('LogMessage saved to table. We have made a note of your activity. Keep up the good work.',10,1) WITH NOWAIT;\n\n    RETURN;\n    END\n\nIF @SinceStartup = 1\n    SELECT @Seconds = 0, @ExpertMode = 1;\n\nIF @Seconds = 0 AND CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) = 'SQL Azure'\n    SELECT @StartSampleTime = DATEADD(ms, AVG(-wait_time_ms), SYSDATETIMEOFFSET()), @FinishSampleTime = SYSDATETIMEOFFSET()\n        FROM sys.dm_os_wait_stats w\n        WHERE wait_type IN ('BROKER_TASK_STOP','DIRTY_PAGE_POLL','HADR_FILESTREAM_IOMGR_IOCOMPLETION','LAZYWRITER_SLEEP',\n                            'LOGMGR_QUEUE','REQUEST_FOR_DEADLOCK_SEARCH','XE_DISPATCHER_WAIT','XE_TIMER_EVENT')\nELSE IF @Seconds = 0 AND CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) <> 'SQL Azure'\n    SELECT @StartSampleTime = DATEADD(MINUTE,DATEDIFF(MINUTE, GETDATE(), GETUTCDATE()),create_date) , @FinishSampleTime = SYSDATETIMEOFFSET()\n        FROM sys.databases\n        WHERE database_id = 2;\nELSE\n    SELECT @StartSampleTime = SYSDATETIMEOFFSET(), @FinishSampleTime = DATEADD(ss, @Seconds, SYSDATETIMEOFFSET());\n\nIF @OutputType = 'SCHEMA'\nBEGIN\n    SELECT FieldList = '[Priority] TINYINT, [FindingsGroup] VARCHAR(50), [Finding] VARCHAR(200), [URL] VARCHAR(200), [Details] NVARCHAR(4000), [HowToStopIt] NVARCHAR(MAX), [QueryPlan] XML, [QueryText] NVARCHAR(MAX)'\n\nEND\nELSE IF @AsOf IS NOT NULL AND @OutputDatabaseName IS NOT NULL AND @OutputSchemaName IS NOT NULL AND @OutputTableName IS NOT NULL\nBEGIN\n    /* They want to look into the past. */\n\n        SET @StringToExecute = N' IF EXISTS(SELECT * FROM '\n            + @OutputDatabaseName\n            + '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''\n            + @OutputSchemaName + ''') SELECT CheckDate, [Priority], [FindingsGroup], [Finding], [URL], CAST([Details] AS [XML]) AS Details,'\n            + '[HowToStopIt], [CheckID], [StartTime], [LoginName], [NTUserName], [OriginalLoginName], [ProgramName], [HostName], [DatabaseID],'\n            + '[DatabaseName], [OpenTransactionCount], [QueryPlan], [QueryText] FROM '\n            + @OutputDatabaseName + '.'\n            + @OutputSchemaName + '.'\n            + @OutputTableName\n            + ' WHERE CheckDate >= DATEADD(mi, -15, CONVERT(DATETIMEOFFSET, ''' + CAST(@AsOf AS NVARCHAR(100)) + '''))'\n            + ' AND CheckDate <= DATEADD(mi, 15, CONVERT(DATETIMEOFFSET, ''' + CAST(@AsOf AS NVARCHAR(100)) + '''))'\n            + ' /*ORDER BY CheckDate, Priority , FindingsGroup , Finding , Details*/;';\n\t\tEXEC(@StringToExecute);\n\n\nEND /* IF @AsOf IS NOT NULL AND @OutputDatabaseName IS NOT NULL AND @OutputSchemaName IS NOT NULL AND @OutputTableName IS NOT NULL */\nELSE IF @LogMessage IS NULL /* IF @OutputType = 'SCHEMA' */\nBEGIN\n    /* What's running right now? This is the first and last result set. */\n    IF @SinceStartup = 0 AND @Seconds > 0 AND @ExpertMode = 1 \n    BEGIN\n\t\tIF OBJECT_ID('master.dbo.sp_BlitzWho') IS NULL AND OBJECT_ID('dbo.sp_BlitzWho') IS NULL\n\t\tBEGIN\n\t\t\tPRINT N'sp_BlitzWho is not installed in the current database_files.  You can get a copy from http://FirstResponderKit.org'\n\t\tEND\n\t\tELSE\n\t\tBEGIN\n\t\t\tEXEC (@BlitzWho)\n\t\tEND\n    END /* IF @SinceStartup = 0 AND @Seconds > 0 AND @ExpertMode = 1   -   What's running right now? This is the first and last result set. */\n     \n\n    RAISERROR('Now starting diagnostic analysis',10,1) WITH NOWAIT;\n\n    /*\n    We start by creating #BlitzFirstResults. It's a temp table that will store\n    the results from our checks. Throughout the rest of this stored procedure,\n    we're running a series of checks looking for dangerous things inside the SQL\n    Server. When we find a problem, we insert rows into #BlitzResults. At the\n    end, we return these results to the end user.\n\n    #BlitzFirstResults has a CheckID field, but there's no Check table. As we do\n    checks, we insert data into this table, and we manually put in the CheckID.\n    We (Brent Ozar Unlimited) maintain a list of the checks by ID#. You can\n    download that from http://FirstResponderKit.org if you want to build\n    a tool that relies on the output of sp_BlitzFirst.\n    */\n\n    IF OBJECT_ID('tempdb..#BlitzFirstResults') IS NOT NULL\n        DROP TABLE #BlitzFirstResults;\n    CREATE TABLE #BlitzFirstResults\n        (\n          ID INT IDENTITY(1, 1) PRIMARY KEY CLUSTERED,\n          CheckID INT NOT NULL,\n          Priority TINYINT NOT NULL,\n          FindingsGroup VARCHAR(50) NOT NULL,\n          Finding VARCHAR(200) NOT NULL,\n          URL VARCHAR(200) NULL,\n          Details NVARCHAR(4000) NULL,\n          HowToStopIt NVARCHAR(MAX) NULL,\n          QueryPlan [XML] NULL,\n          QueryText NVARCHAR(MAX) NULL,\n          StartTime DATETIMEOFFSET NULL,\n          LoginName NVARCHAR(128) NULL,\n          NTUserName NVARCHAR(128) NULL,\n          OriginalLoginName NVARCHAR(128) NULL,\n          ProgramName NVARCHAR(128) NULL,\n          HostName NVARCHAR(128) NULL,\n          DatabaseID INT NULL,\n          DatabaseName NVARCHAR(128) NULL,\n          OpenTransactionCount INT NULL,\n          QueryStatsNowID INT NULL,\n          QueryStatsFirstID INT NULL,\n          PlanHandle VARBINARY(64) NULL,\n          DetailsInt INT NULL,\n        );\n\n    IF OBJECT_ID('tempdb..#WaitStats') IS NOT NULL\n        DROP TABLE #WaitStats;\n    CREATE TABLE #WaitStats (Pass TINYINT NOT NULL, wait_type NVARCHAR(60), wait_time_ms BIGINT, signal_wait_time_ms BIGINT, waiting_tasks_count BIGINT, SampleTime DATETIMEOFFSET);\n\n    IF OBJECT_ID('tempdb..#FileStats') IS NOT NULL\n        DROP TABLE #FileStats;\n    CREATE TABLE #FileStats (\n        ID INT IDENTITY(1, 1) PRIMARY KEY CLUSTERED,\n        Pass TINYINT NOT NULL,\n        SampleTime DATETIMEOFFSET NOT NULL,\n        DatabaseID INT NOT NULL,\n        FileID INT NOT NULL,\n        DatabaseName NVARCHAR(256) ,\n        FileLogicalName NVARCHAR(256) ,\n        TypeDesc NVARCHAR(60) ,\n        SizeOnDiskMB BIGINT ,\n        io_stall_read_ms BIGINT ,\n        num_of_reads BIGINT ,\n        bytes_read BIGINT ,\n        io_stall_write_ms BIGINT ,\n        num_of_writes BIGINT ,\n        bytes_written BIGINT,\n        PhysicalName NVARCHAR(520) ,\n        avg_stall_read_ms INT ,\n        avg_stall_write_ms INT\n    );\n\n    IF OBJECT_ID('tempdb..#QueryStats') IS NOT NULL\n        DROP TABLE #QueryStats;\n    CREATE TABLE #QueryStats (\n        ID INT IDENTITY(1, 1) PRIMARY KEY CLUSTERED,\n        Pass INT NOT NULL,\n        SampleTime DATETIMEOFFSET NOT NULL,\n        [sql_handle] VARBINARY(64),\n        statement_start_offset INT,\n        statement_end_offset INT,\n        plan_generation_num BIGINT,\n        plan_handle VARBINARY(64),\n        execution_count BIGINT,\n        total_worker_time BIGINT,\n        total_physical_reads BIGINT,\n        total_logical_writes BIGINT,\n        total_logical_reads BIGINT,\n        total_clr_time BIGINT,\n        total_elapsed_time BIGINT,\n        creation_time DATETIMEOFFSET,\n        query_hash BINARY(8),\n        query_plan_hash BINARY(8),\n        Points TINYINT\n    );\n\n    IF OBJECT_ID('tempdb..#PerfmonStats') IS NOT NULL\n        DROP TABLE #PerfmonStats;\n    CREATE TABLE #PerfmonStats (\n        ID INT IDENTITY(1, 1) PRIMARY KEY CLUSTERED,\n        Pass TINYINT NOT NULL,\n        SampleTime DATETIMEOFFSET NOT NULL,\n        [object_name] NVARCHAR(128) NOT NULL,\n        [counter_name] NVARCHAR(128) NOT NULL,\n        [instance_name] NVARCHAR(128) NULL,\n        [cntr_value] BIGINT NULL,\n        [cntr_type] INT NOT NULL,\n        [value_delta] BIGINT NULL,\n        [value_per_second] DECIMAL(18,2) NULL\n    );\n\n    IF OBJECT_ID('tempdb..#PerfmonCounters') IS NOT NULL\n        DROP TABLE #PerfmonCounters;\n    CREATE TABLE #PerfmonCounters (\n        ID INT IDENTITY(1, 1) PRIMARY KEY CLUSTERED,\n        [object_name] NVARCHAR(128) NOT NULL,\n        [counter_name] NVARCHAR(128) NOT NULL,\n        [instance_name] NVARCHAR(128) NULL\n    );\n\n    IF OBJECT_ID('tempdb..#FilterPlansByDatabase') IS NOT NULL\n        DROP TABLE #FilterPlansByDatabase;\n    CREATE TABLE #FilterPlansByDatabase (DatabaseID INT PRIMARY KEY CLUSTERED);\n\n    IF OBJECT_ID('tempdb..##WaitCategories') IS NULL\n\t\tBEGIN\n\t\t\t/* We reuse this one by default rather than recreate it every time. */\n\t\t\tCREATE TABLE ##WaitCategories\n\t\t\t(\n\t\t\t\tWaitType NVARCHAR(60) PRIMARY KEY CLUSTERED,\n\t\t\t\tWaitCategory NVARCHAR(128) NOT NULL,\n\t\t\t\tIgnorable BIT DEFAULT 0\n\t\t\t);\n\t\tEND /* IF OBJECT_ID('tempdb..##WaitCategories') IS NULL */\n\n\tIF 504 <> (SELECT COALESCE(SUM(1),0) FROM ##WaitCategories)\n\t\tBEGIN\n\t\t    TRUNCATE TABLE ##WaitCategories;\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('ASYNC_IO_COMPLETION','Other Disk IO',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('ASYNC_NETWORK_IO','Network IO',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('BACKUPIO','Other Disk IO',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('BROKER_CONNECTION_RECEIVE_TASK','Service Broker',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('BROKER_DISPATCHER','Service Broker',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('BROKER_ENDPOINT_STATE_MUTEX','Service Broker',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('BROKER_EVENTHANDLER','Service Broker',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('BROKER_FORWARDER','Service Broker',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('BROKER_INIT','Service Broker',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('BROKER_MASTERSTART','Service Broker',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('BROKER_RECEIVE_WAITFOR','User Wait',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('BROKER_REGISTERALLENDPOINTS','Service Broker',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('BROKER_SERVICE','Service Broker',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('BROKER_SHUTDOWN','Service Broker',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('BROKER_START','Service Broker',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('BROKER_TASK_SHUTDOWN','Service Broker',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('BROKER_TASK_STOP','Service Broker',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('BROKER_TASK_SUBMIT','Service Broker',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('BROKER_TO_FLUSH','Service Broker',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('BROKER_TRANSMISSION_OBJECT','Service Broker',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('BROKER_TRANSMISSION_TABLE','Service Broker',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('BROKER_TRANSMISSION_WORK','Service Broker',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('BROKER_TRANSMITTER','Service Broker',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('CHECKPOINT_QUEUE','Idle',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('CHKPT','Tran Log IO',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('CLR_AUTO_EVENT','SQL CLR',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('CLR_CRST','SQL CLR',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('CLR_JOIN','SQL CLR',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('CLR_MANUAL_EVENT','SQL CLR',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('CLR_MEMORY_SPY','SQL CLR',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('CLR_MONITOR','SQL CLR',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('CLR_RWLOCK_READER','SQL CLR',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('CLR_RWLOCK_WRITER','SQL CLR',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('CLR_SEMAPHORE','SQL CLR',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('CLR_TASK_START','SQL CLR',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('CLRHOST_STATE_ACCESS','SQL CLR',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('CMEMPARTITIONED','Memory',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('CMEMTHREAD','Memory',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('CXPACKET','Parallelism',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('CXCONSUMER','Parallelism',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('DBMIRROR_DBM_EVENT','Mirroring',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('DBMIRROR_DBM_MUTEX','Mirroring',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('DBMIRROR_EVENTS_QUEUE','Mirroring',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('DBMIRROR_SEND','Mirroring',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('DBMIRROR_WORKER_QUEUE','Mirroring',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('DBMIRRORING_CMD','Mirroring',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('DIRTY_PAGE_POLL','Other',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('DISPATCHER_QUEUE_SEMAPHORE','Other',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('DTC','Transaction',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('DTC_ABORT_REQUEST','Transaction',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('DTC_RESOLVE','Transaction',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('DTC_STATE','Transaction',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('DTC_TMDOWN_REQUEST','Transaction',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('DTC_WAITFOR_OUTCOME','Transaction',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('DTCNEW_ENLIST','Transaction',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('DTCNEW_PREPARE','Transaction',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('DTCNEW_RECOVERY','Transaction',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('DTCNEW_TM','Transaction',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('DTCNEW_TRANSACTION_ENLISTMENT','Transaction',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('DTCPNTSYNC','Transaction',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('EE_PMOLOCK','Memory',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('EXCHANGE','Parallelism',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('EXTERNAL_SCRIPT_NETWORK_IOF','Network IO',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('FCB_REPLICA_READ','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('FCB_REPLICA_WRITE','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('FT_COMPROWSET_RWLOCK','Full Text Search',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('FT_IFTS_RWLOCK','Full Text Search',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('FT_IFTS_SCHEDULER_IDLE_WAIT','Idle',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('FT_IFTSHC_MUTEX','Full Text Search',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('FT_IFTSISM_MUTEX','Full Text Search',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('FT_MASTER_MERGE','Full Text Search',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('FT_MASTER_MERGE_COORDINATOR','Full Text Search',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('FT_METADATA_MUTEX','Full Text Search',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('FT_PROPERTYLIST_CACHE','Full Text Search',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('FT_RESTART_CRAWL','Full Text Search',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('FULLTEXT GATHERER','Full Text Search',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_AG_MUTEX','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_AR_CRITICAL_SECTION_ENTRY','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_AR_MANAGER_MUTEX','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_AR_UNLOAD_COMPLETED','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_ARCONTROLLER_NOTIFICATIONS_SUBSCRIBER_LIST','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_BACKUP_BULK_LOCK','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_BACKUP_QUEUE','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_CLUSAPI_CALL','Replication',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_COMPRESSED_CACHE_SYNC','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_CONNECTIVITY_INFO','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_DATABASE_FLOW_CONTROL','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_DATABASE_VERSIONING_STATE','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_DATABASE_WAIT_FOR_RECOVERY','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_DATABASE_WAIT_FOR_RESTART','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_DATABASE_WAIT_FOR_TRANSITION_TO_VERSIONING','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_DB_COMMAND','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_DB_OP_COMPLETION_SYNC','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_DB_OP_START_SYNC','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_DBR_SUBSCRIBER','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_DBR_SUBSCRIBER_FILTER_LIST','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_DBSEEDING','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_DBSEEDING_LIST','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_DBSTATECHANGE_SYNC','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_FABRIC_CALLBACK','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_FILESTREAM_BLOCK_FLUSH','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_FILESTREAM_FILE_CLOSE','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_FILESTREAM_FILE_REQUEST','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_FILESTREAM_IOMGR','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_FILESTREAM_IOMGR_IOCOMPLETION','Replication',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_FILESTREAM_MANAGER','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_FILESTREAM_PREPROC','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_GROUP_COMMIT','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_LOGCAPTURE_SYNC','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_LOGCAPTURE_WAIT','Replication',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_LOGPROGRESS_SYNC','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_NOTIFICATION_DEQUEUE','Replication',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_NOTIFICATION_WORKER_EXCLUSIVE_ACCESS','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_NOTIFICATION_WORKER_STARTUP_SYNC','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_NOTIFICATION_WORKER_TERMINATION_SYNC','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_PARTNER_SYNC','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_READ_ALL_NETWORKS','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_RECOVERY_WAIT_FOR_CONNECTION','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_RECOVERY_WAIT_FOR_UNDO','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_REPLICAINFO_SYNC','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_SEEDING_CANCELLATION','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_SEEDING_FILE_LIST','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_SEEDING_LIMIT_BACKUPS','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_SEEDING_SYNC_COMPLETION','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_SEEDING_TIMEOUT_TASK','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_SEEDING_WAIT_FOR_COMPLETION','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_SYNC_COMMIT','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_SYNCHRONIZING_THROTTLE','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_TDS_LISTENER_SYNC','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_TDS_LISTENER_SYNC_PROCESSING','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_THROTTLE_LOG_RATE_GOVERNOR','Log Rate Governor',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_TIMER_TASK','Replication',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_TRANSPORT_DBRLIST','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_TRANSPORT_FLOW_CONTROL','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_TRANSPORT_SESSION','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_WORK_POOL','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_WORK_QUEUE','Replication',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('HADR_XRF_STACK_ACCESS','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('INSTANCE_LOG_RATE_GOVERNOR','Log Rate Governor',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('IO_COMPLETION','Other Disk IO',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('IO_QUEUE_LIMIT','Other Disk IO',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('IO_RETRY','Other Disk IO',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LATCH_DT','Latch',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LATCH_EX','Latch',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LATCH_KP','Latch',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LATCH_NL','Latch',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LATCH_SH','Latch',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LATCH_UP','Latch',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LAZYWRITER_SLEEP','Idle',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_BU','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_BU_ABORT_BLOCKERS','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_BU_LOW_PRIORITY','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_IS','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_IS_ABORT_BLOCKERS','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_IS_LOW_PRIORITY','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_IU','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_IU_ABORT_BLOCKERS','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_IU_LOW_PRIORITY','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_IX','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_IX_ABORT_BLOCKERS','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_IX_LOW_PRIORITY','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_RIn_NL','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_RIn_NL_ABORT_BLOCKERS','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_RIn_NL_LOW_PRIORITY','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_RIn_S','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_RIn_S_ABORT_BLOCKERS','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_RIn_S_LOW_PRIORITY','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_RIn_U','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_RIn_U_ABORT_BLOCKERS','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_RIn_U_LOW_PRIORITY','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_RIn_X','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_RIn_X_ABORT_BLOCKERS','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_RIn_X_LOW_PRIORITY','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_RS_S','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_RS_S_ABORT_BLOCKERS','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_RS_S_LOW_PRIORITY','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_RS_U','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_RS_U_ABORT_BLOCKERS','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_RS_U_LOW_PRIORITY','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_RX_S','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_RX_S_ABORT_BLOCKERS','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_RX_S_LOW_PRIORITY','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_RX_U','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_RX_U_ABORT_BLOCKERS','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_RX_U_LOW_PRIORITY','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_RX_X','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_RX_X_ABORT_BLOCKERS','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_RX_X_LOW_PRIORITY','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_S','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_S_ABORT_BLOCKERS','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_S_LOW_PRIORITY','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_SCH_M','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_SCH_M_ABORT_BLOCKERS','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_SCH_M_LOW_PRIORITY','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_SCH_S','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_SCH_S_ABORT_BLOCKERS','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_SCH_S_LOW_PRIORITY','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_SIU','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_SIU_ABORT_BLOCKERS','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_SIU_LOW_PRIORITY','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_SIX','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_SIX_ABORT_BLOCKERS','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_SIX_LOW_PRIORITY','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_U','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_U_ABORT_BLOCKERS','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_U_LOW_PRIORITY','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_UIX','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_UIX_ABORT_BLOCKERS','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_UIX_LOW_PRIORITY','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_X','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_X_ABORT_BLOCKERS','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LCK_M_X_LOW_PRIORITY','Lock',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LOGBUFFER','Tran Log IO',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LOGMGR','Tran Log IO',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LOGMGR_FLUSH','Tran Log IO',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LOGMGR_PMM_LOG','Tran Log IO',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LOGMGR_QUEUE','Idle',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('LOGMGR_RESERVE_APPEND','Tran Log IO',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('MEMORY_ALLOCATION_EXT','Memory',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('MEMORY_GRANT_UPDATE','Memory',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('MSQL_XACT_MGR_MUTEX','Transaction',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('MSQL_XACT_MUTEX','Transaction',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('MSSEARCH','Full Text Search',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('NET_WAITFOR_PACKET','Network IO',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('ONDEMAND_TASK_QUEUE','Idle',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PAGEIOLATCH_DT','Buffer IO',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PAGEIOLATCH_EX','Buffer IO',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PAGEIOLATCH_KP','Buffer IO',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PAGEIOLATCH_NL','Buffer IO',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PAGEIOLATCH_SH','Buffer IO',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PAGEIOLATCH_UP','Buffer IO',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PAGELATCH_DT','Buffer Latch',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PAGELATCH_EX','Buffer Latch',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PAGELATCH_KP','Buffer Latch',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PAGELATCH_NL','Buffer Latch',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PAGELATCH_SH','Buffer Latch',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PAGELATCH_UP','Buffer Latch',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('POOL_LOG_RATE_GOVERNOR','Log Rate Governor',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_ABR','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_CLOSEBACKUPMEDIA','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_CLOSEBACKUPTAPE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_CLOSEBACKUPVDIDEVICE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_CLUSAPI_CLUSTERRESOURCECONTROL','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_COCREATEINSTANCE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_COGETCLASSOBJECT','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_CREATEACCESSOR','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_DELETEROWS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_GETCOMMANDTEXT','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_GETDATA','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_GETNEXTROWS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_GETRESULT','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_GETROWSBYBOOKMARK','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_LBFLUSH','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_LBLOCKREGION','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_LBREADAT','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_LBSETSIZE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_LBSTAT','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_LBUNLOCKREGION','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_LBWRITEAT','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_QUERYINTERFACE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_RELEASE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_RELEASEACCESSOR','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_RELEASEROWS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_RELEASESESSION','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_RESTARTPOSITION','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_SEQSTRMREAD','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_SEQSTRMREADANDWRITE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_SETDATAFAILURE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_SETPARAMETERINFO','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_SETPARAMETERPROPERTIES','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_STRMLOCKREGION','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_STRMSEEKANDREAD','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_STRMSEEKANDWRITE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_STRMSETSIZE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_STRMSTAT','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_COM_STRMUNLOCKREGION','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_CONSOLEWRITE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_CREATEPARAM','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_DEBUG','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_DFSADDLINK','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_DFSLINKEXISTCHECK','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_DFSLINKHEALTHCHECK','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_DFSREMOVELINK','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_DFSREMOVEROOT','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_DFSROOTFOLDERCHECK','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_DFSROOTINIT','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_DFSROOTSHARECHECK','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_DTC_ABORT','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_DTC_ABORTREQUESTDONE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_DTC_BEGINTRANSACTION','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_DTC_COMMITREQUESTDONE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_DTC_ENLIST','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_DTC_PREPAREREQUESTDONE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_FILESIZEGET','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_FSAOLEDB_ABORTTRANSACTION','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_FSAOLEDB_COMMITTRANSACTION','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_FSAOLEDB_STARTTRANSACTION','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_FSRECOVER_UNCONDITIONALUNDO','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_GETRMINFO','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_HADR_LEASE_MECHANISM','Preemptive',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_HTTP_EVENT_WAIT','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_HTTP_REQUEST','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_LOCKMONITOR','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_MSS_RELEASE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_ODBCOPS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OLE_UNINIT','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OLEDB_ABORTORCOMMITTRAN','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OLEDB_ABORTTRAN','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OLEDB_GETDATASOURCE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OLEDB_GETLITERALINFO','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OLEDB_GETPROPERTIES','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OLEDB_GETPROPERTYINFO','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OLEDB_GETSCHEMALOCK','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OLEDB_JOINTRANSACTION','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OLEDB_RELEASE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OLEDB_SETPROPERTIES','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OLEDBOPS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_ACCEPTSECURITYCONTEXT','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_ACQUIRECREDENTIALSHANDLE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_AUTHENTICATIONOPS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_AUTHORIZATIONOPS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_AUTHZGETINFORMATIONFROMCONTEXT','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_AUTHZINITIALIZECONTEXTFROMSID','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_AUTHZINITIALIZERESOURCEMANAGER','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_BACKUPREAD','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_CLOSEHANDLE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_CLUSTEROPS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_COMOPS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_COMPLETEAUTHTOKEN','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_COPYFILE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_CREATEDIRECTORY','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_CREATEFILE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_CRYPTACQUIRECONTEXT','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_CRYPTIMPORTKEY','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_CRYPTOPS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_DECRYPTMESSAGE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_DELETEFILE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_DELETESECURITYCONTEXT','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_DEVICEIOCONTROL','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_DEVICEOPS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_DIRSVC_NETWORKOPS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_DISCONNECTNAMEDPIPE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_DOMAINSERVICESOPS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_DSGETDCNAME','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_DTCOPS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_ENCRYPTMESSAGE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_FILEOPS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_FINDFILE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_FLUSHFILEBUFFERS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_FORMATMESSAGE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_FREECREDENTIALSHANDLE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_FREELIBRARY','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_GENERICOPS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_GETADDRINFO','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_GETCOMPRESSEDFILESIZE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_GETDISKFREESPACE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_GETFILEATTRIBUTES','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_GETFILESIZE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_GETFINALFILEPATHBYHANDLE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_GETLONGPATHNAME','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_GETPROCADDRESS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_GETVOLUMENAMEFORVOLUMEMOUNTPOINT','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_GETVOLUMEPATHNAME','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_INITIALIZESECURITYCONTEXT','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_LIBRARYOPS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_LOADLIBRARY','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_LOGONUSER','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_LOOKUPACCOUNTSID','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_MESSAGEQUEUEOPS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_MOVEFILE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_NETGROUPGETUSERS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_NETLOCALGROUPGETMEMBERS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_NETUSERGETGROUPS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_NETUSERGETLOCALGROUPS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_NETUSERMODALSGET','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_NETVALIDATEPASSWORDPOLICY','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_NETVALIDATEPASSWORDPOLICYFREE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_OPENDIRECTORY','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_PDH_WMI_INIT','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_PIPEOPS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_PROCESSOPS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_QUERYCONTEXTATTRIBUTES','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_QUERYREGISTRY','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_QUERYSECURITYCONTEXTTOKEN','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_REMOVEDIRECTORY','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_REPORTEVENT','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_REVERTTOSELF','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_RSFXDEVICEOPS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_SECURITYOPS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_SERVICEOPS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_SETENDOFFILE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_SETFILEPOINTER','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_SETFILEVALIDDATA','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_SETNAMEDSECURITYINFO','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_SQLCLROPS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_SQMLAUNCH','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_VERIFYSIGNATURE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_VERIFYTRUST','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_VSSOPS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_WAITFORSINGLEOBJECT','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_WINSOCKOPS','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_WRITEFILE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_WRITEFILEGATHER','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_OS_WSASETLASTERROR','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_REENLIST','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_RESIZELOG','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_ROLLFORWARDREDO','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_ROLLFORWARDUNDO','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_SB_STOPENDPOINT','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_SERVER_STARTUP','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_SETRMINFO','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_SHAREDMEM_GETDATA','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_SNIOPEN','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_SOSHOST','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_SOSTESTING','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_SP_SERVER_DIAGNOSTICS','Preemptive',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_STARTRM','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_STREAMFCB_CHECKPOINT','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_STREAMFCB_RECOVER','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_STRESSDRIVER','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_TESTING','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_TRANSIMPORT','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_UNMARSHALPROPAGATIONTOKEN','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_VSS_CREATESNAPSHOT','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_VSS_CREATEVOLUMESNAPSHOT','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_XE_CALLBACKEXECUTE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_XE_CX_FILE_OPEN','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_XE_CX_HTTP_CALL','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_XE_DISPATCHER','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_XE_ENGINEINIT','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_XE_GETTARGETSTATE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_XE_SESSIONCOMMIT','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_XE_TARGETFINALIZE','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_XE_TARGETINIT','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_XE_TIMERRUN','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PREEMPTIVE_XETESTING','Preemptive',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PWAIT_HADR_ACTION_COMPLETED','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PWAIT_HADR_CHANGE_NOTIFIER_TERMINATION_SYNC','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PWAIT_HADR_CLUSTER_INTEGRATION','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PWAIT_HADR_FAILOVER_COMPLETED','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PWAIT_HADR_JOIN','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PWAIT_HADR_OFFLINE_COMPLETED','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PWAIT_HADR_ONLINE_COMPLETED','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PWAIT_HADR_POST_ONLINE_COMPLETED','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PWAIT_HADR_SERVER_READY_CONNECTIONS','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PWAIT_HADR_WORKITEM_COMPLETED','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PWAIT_HADRSIM','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('PWAIT_RESOURCE_SEMAPHORE_FT_PARALLEL_QUERY_SYNC','Full Text Search',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('QDS_ASYNC_QUEUE','Other',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('QDS_CLEANUP_STALE_QUERIES_TASK_MAIN_LOOP_SLEEP','Other',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('QDS_PERSIST_TASK_MAIN_LOOP_SLEEP','Other',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('QDS_SHUTDOWN_QUEUE','Other',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('QUERY_TRACEOUT','Tracing',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('REDO_THREAD_PENDING_WORK','Other',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('REPL_CACHE_ACCESS','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('REPL_HISTORYCACHE_ACCESS','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('REPL_SCHEMA_ACCESS','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('REPL_TRANFSINFO_ACCESS','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('REPL_TRANHASHTABLE_ACCESS','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('REPL_TRANTEXTINFO_ACCESS','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('REPLICA_WRITES','Replication',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('REQUEST_FOR_DEADLOCK_SEARCH','Idle',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('RESERVED_MEMORY_ALLOCATION_EXT','Memory',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('RESOURCE_SEMAPHORE','Memory',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('RESOURCE_SEMAPHORE_QUERY_COMPILE','Compilation',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('SLEEP_BPOOL_FLUSH','Idle',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('SLEEP_BUFFERPOOL_HELPLW','Idle',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('SLEEP_DBSTARTUP','Idle',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('SLEEP_DCOMSTARTUP','Idle',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('SLEEP_MASTERDBREADY','Idle',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('SLEEP_MASTERMDREADY','Idle',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('SLEEP_MASTERUPGRADED','Idle',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('SLEEP_MEMORYPOOL_ALLOCATEPAGES','Idle',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('SLEEP_MSDBSTARTUP','Idle',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('SLEEP_RETRY_VIRTUALALLOC','Idle',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('SLEEP_SYSTEMTASK','Idle',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('SLEEP_TASK','Idle',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('SLEEP_TEMPDBSTARTUP','Idle',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('SLEEP_WORKSPACE_ALLOCATEPAGE','Idle',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('SOS_SCHEDULER_YIELD','CPU',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('SP_SERVER_DIAGNOSTICS_SLEEP','Other',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('SQLCLR_APPDOMAIN','SQL CLR',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('SQLCLR_ASSEMBLY','SQL CLR',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('SQLCLR_DEADLOCK_DETECTION','SQL CLR',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('SQLCLR_QUANTUM_PUNISHMENT','SQL CLR',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('SQLTRACE_BUFFER_FLUSH','Idle',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('SQLTRACE_FILE_BUFFER','Tracing',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('SQLTRACE_FILE_READ_IO_COMPLETION','Tracing',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('SQLTRACE_FILE_WRITE_IO_COMPLETION','Tracing',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('SQLTRACE_INCREMENTAL_FLUSH_SLEEP','Idle',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('SQLTRACE_PENDING_BUFFER_WRITERS','Tracing',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('SQLTRACE_SHUTDOWN','Tracing',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('SQLTRACE_WAIT_ENTRIES','Idle',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('THREADPOOL','Worker Thread',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('TRACE_EVTNOTIF','Tracing',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('TRACEWRITE','Tracing',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('TRAN_MARKLATCH_DT','Transaction',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('TRAN_MARKLATCH_EX','Transaction',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('TRAN_MARKLATCH_KP','Transaction',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('TRAN_MARKLATCH_NL','Transaction',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('TRAN_MARKLATCH_SH','Transaction',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('TRAN_MARKLATCH_UP','Transaction',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('TRANSACTION_MUTEX','Transaction',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('UCS_SESSION_REGISTRATION','Other',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('WAIT_FOR_RESULTS','User Wait',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('WAIT_XTP_OFFLINE_CKPT_NEW_LOG','Other',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('WAITFOR','User Wait',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('WRITE_COMPLETION','Other Disk IO',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('WRITELOG','Tran Log IO',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('XACT_OWN_TRANSACTION','Transaction',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('XACT_RECLAIM_SESSION','Transaction',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('XACTLOCKINFO','Transaction',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('XACTWORKSPACE_MUTEX','Transaction',0);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('XE_DISPATCHER_WAIT','Idle',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('XE_LIVE_TARGET_TVF','Other',1);\n\t\t\tINSERT INTO ##WaitCategories(WaitType, WaitCategory, Ignorable) VALUES ('XE_TIMER_EVENT','Idle',1);\n\t\tEND /* IF SELECT SUM(1) FROM ##WaitCategories <> 504 */\n\n\n\n    IF OBJECT_ID('tempdb..#MasterFiles') IS NOT NULL\n        DROP TABLE #MasterFiles;\n    CREATE TABLE #MasterFiles (database_id INT, file_id INT, type_desc NVARCHAR(50), name NVARCHAR(255), physical_name NVARCHAR(255), size BIGINT);\n    /* Azure SQL Database doesn't have sys.master_files, so we have to build our own. */\n    IF CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) = 'SQL Azure'\n        SET @StringToExecute = 'INSERT INTO #MasterFiles (database_id, file_id, type_desc, name, physical_name, size) SELECT DB_ID(), file_id, type_desc, name, physical_name, size FROM sys.database_files;'\n    ELSE\n        SET @StringToExecute = 'INSERT INTO #MasterFiles (database_id, file_id, type_desc, name, physical_name, size) SELECT database_id, file_id, type_desc, name, physical_name, size FROM sys.master_files;'\n    EXEC(@StringToExecute);\n\n    IF @FilterPlansByDatabase IS NOT NULL\n        BEGIN\n        IF UPPER(LEFT(@FilterPlansByDatabase,4)) = 'USER'\n            BEGIN\n            INSERT INTO #FilterPlansByDatabase (DatabaseID)\n            SELECT database_id\n                FROM sys.databases\n                WHERE [name] NOT IN ('master', 'model', 'msdb', 'tempdb')\n            END\n        ELSE\n            BEGIN\n            SET @FilterPlansByDatabase = @FilterPlansByDatabase + ','\n            ;WITH a AS\n                (\n                SELECT CAST(1 AS BIGINT) f, CHARINDEX(',', @FilterPlansByDatabase) t, 1 SEQ\n                UNION ALL\n                SELECT t + 1, CHARINDEX(',', @FilterPlansByDatabase, t + 1), SEQ + 1\n                FROM a\n                WHERE CHARINDEX(',', @FilterPlansByDatabase, t + 1) > 0\n                )\n            INSERT #FilterPlansByDatabase (DatabaseID)\n                SELECT SUBSTRING(@FilterPlansByDatabase, f, t - f)\n                FROM a\n                WHERE SUBSTRING(@FilterPlansByDatabase, f, t - f) IS NOT NULL\n                OPTION (MAXRECURSION 0)\n            END\n        END\n\n\n    SET @StockWarningHeader = '<?ClickToSeeCommmand -- ' + @LineFeed + @LineFeed\n        + 'WARNING: Running this command may result in data loss or an outage.' + @LineFeed\n        + 'This tool is meant as a shortcut to help generate scripts for DBAs.' + @LineFeed\n        + 'It is not a substitute for database training and experience.' + @LineFeed\n        + 'Now, having said that, here''s the details:' + @LineFeed + @LineFeed;\n\n    SELECT @StockWarningFooter = @LineFeed + @LineFeed + '-- ?>',\n        @StockDetailsHeader = '<?ClickToSeeDetails -- ' + @LineFeed,\n        @StockDetailsFooter = @LineFeed + ' -- ?>';\n\n    /* Get the instance name to use as a Perfmon counter prefix. */\n    IF CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) = 'SQL Azure'\n        SELECT TOP 1 @ServiceName = LEFT(object_name, (CHARINDEX(':', object_name) - 1))\n        FROM sys.dm_os_performance_counters;\n    ELSE\n        BEGIN\n        SET @StringToExecute = 'INSERT INTO #PerfmonStats(object_name, Pass, SampleTime, counter_name, cntr_type) SELECT CASE WHEN @@SERVICENAME = ''MSSQLSERVER'' THEN ''SQLServer'' ELSE ''MSSQL$'' + @@SERVICENAME END, 0, SYSDATETIMEOFFSET(), ''stuffing'', 0 ;'\n        EXEC(@StringToExecute);\n        SELECT @ServiceName = object_name FROM #PerfmonStats;\n        DELETE #PerfmonStats;\n        END\n\n    /* Build a list of queries that were run in the last 10 seconds.\n       We're looking for the death-by-a-thousand-small-cuts scenario\n       where a query is constantly running, and it doesn't have that\n       big of an impact individually, but it has a ton of impact\n       overall. We're going to build this list, and then after we\n       finish our @Seconds sample, we'll compare our plan cache to\n       this list to see what ran the most. */\n\n    /* Populate #QueryStats. SQL 2005 doesn't have query hash or query plan hash. */\n    IF @CheckProcedureCache = 1 \n\tBEGIN\n\t\tRAISERROR('@CheckProcedureCache = 1, capturing first pass of plan cache',10,1) WITH NOWAIT;\n\t\tIF @@VERSION LIKE 'Microsoft SQL Server 2005%'\n\t\t\tBEGIN\n\t\t\tIF @FilterPlansByDatabase IS NULL\n\t\t\t\tBEGIN\n\t\t\t\tSET @StringToExecute = N'INSERT INTO #QueryStats ([sql_handle], Pass, SampleTime, statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, query_hash, query_plan_hash, Points)\n\t\t\t\t\t\t\t\t\t\t\tSELECT [sql_handle], 1 AS Pass, SYSDATETIMEOFFSET(), statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, NULL AS query_hash, NULL AS query_plan_hash, 0\n\t\t\t\t\t\t\t\t\t\t\tFROM sys.dm_exec_query_stats qs\n\t\t\t\t\t\t\t\t\t\t\tWHERE qs.last_execution_time >= (DATEADD(ss, -10, SYSDATETIMEOFFSET()));';\n\t\t\t\tEND\n\t\t\tELSE\n\t\t\t\tBEGIN\n\t\t\t\tSET @StringToExecute = N'INSERT INTO #QueryStats ([sql_handle], Pass, SampleTime, statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, query_hash, query_plan_hash, Points)\n\t\t\t\t\t\t\t\t\t\t\tSELECT [sql_handle], 1 AS Pass, SYSDATETIMEOFFSET(), statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, NULL AS query_hash, NULL AS query_plan_hash, 0\n\t\t\t\t\t\t\t\t\t\t\tFROM sys.dm_exec_query_stats qs\n\t\t\t\t\t\t\t\t\t\t\t\tCROSS APPLY sys.dm_exec_plan_attributes(qs.plan_handle) AS attr\n\t\t\t\t\t\t\t\t\t\t\t\tINNER JOIN #FilterPlansByDatabase dbs ON CAST(attr.value AS INT) = dbs.DatabaseID\n\t\t\t\t\t\t\t\t\t\t\tWHERE qs.last_execution_time >= (DATEADD(ss, -10, SYSDATETIMEOFFSET()))\n\t\t\t\t\t\t\t\t\t\t\t\tAND attr.attribute = ''dbid'';';\n\t\t\t\tEND\n\t\t\tEND\n\t\tELSE\n\t\t\tBEGIN\n\t\t\tIF @FilterPlansByDatabase IS NULL\n\t\t\t\tBEGIN\n\t\t\t\tSET @StringToExecute = N'INSERT INTO #QueryStats ([sql_handle], Pass, SampleTime, statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, query_hash, query_plan_hash, Points)\n\t\t\t\t\t\t\t\t\t\t\tSELECT [sql_handle], 1 AS Pass, SYSDATETIMEOFFSET(), statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, query_hash, query_plan_hash, 0\n\t\t\t\t\t\t\t\t\t\t\tFROM sys.dm_exec_query_stats qs\n\t\t\t\t\t\t\t\t\t\t\tWHERE qs.last_execution_time >= (DATEADD(ss, -10, SYSDATETIMEOFFSET()));';\n\t\t\t\tEND\n\t\t\tELSE\n\t\t\t\tBEGIN\n\t\t\t\tSET @StringToExecute = N'INSERT INTO #QueryStats ([sql_handle], Pass, SampleTime, statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, query_hash, query_plan_hash, Points)\n\t\t\t\t\t\t\t\t\t\t\tSELECT [sql_handle], 1 AS Pass, SYSDATETIMEOFFSET(), statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, query_hash, query_plan_hash, 0\n\t\t\t\t\t\t\t\t\t\t\tFROM sys.dm_exec_query_stats qs\n\t\t\t\t\t\t\t\t\t\t\tCROSS APPLY sys.dm_exec_plan_attributes(qs.plan_handle) AS attr\n\t\t\t\t\t\t\t\t\t\t\tINNER JOIN #FilterPlansByDatabase dbs ON CAST(attr.value AS INT) = dbs.DatabaseID\n\t\t\t\t\t\t\t\t\t\t\tWHERE qs.last_execution_time >= (DATEADD(ss, -10, SYSDATETIMEOFFSET()))\n\t\t\t\t\t\t\t\t\t\t\t\tAND attr.attribute = ''dbid'';';\n\t\t\t\tEND\n\t\t\tEND\n\t\tEXEC(@StringToExecute);\n\n\t\t/* Get the totals for the entire plan cache */\n\t\tINSERT INTO #QueryStats (Pass, SampleTime, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time)\n\t\tSELECT -1 AS Pass, SYSDATETIMEOFFSET(), SUM(execution_count), SUM(total_worker_time), SUM(total_physical_reads), SUM(total_logical_writes), SUM(total_logical_reads), SUM(total_clr_time), SUM(total_elapsed_time), MIN(creation_time)\n\t\t\tFROM sys.dm_exec_query_stats qs;\n    END /*IF @CheckProcedureCache = 1 */\n\n\n    IF EXISTS (SELECT *\n                    FROM tempdb.sys.all_objects obj\n                    INNER JOIN tempdb.sys.all_columns col1 ON obj.object_id = col1.object_id AND col1.name = 'object_name'\n                    INNER JOIN tempdb.sys.all_columns col2 ON obj.object_id = col2.object_id AND col2.name = 'counter_name'\n                    INNER JOIN tempdb.sys.all_columns col3 ON obj.object_id = col3.object_id AND col3.name = 'instance_name'\n                    WHERE obj.name LIKE '%CustomPerfmonCounters%')\n        BEGIN\n        SET @StringToExecute = 'INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) SELECT [object_name],[counter_name],[instance_name] FROM #CustomPerfmonCounters'\n        EXEC(@StringToExecute);\n        END\n    ELSE\n        BEGIN\n        /* Add our default Perfmon counters */\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Access Methods','Forwarded Records/sec', NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Access Methods','Page compression attempts/sec', NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Access Methods','Page Splits/sec', NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Access Methods','Skipped Ghosted Records/sec', NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Access Methods','Table Lock Escalations/sec', NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Access Methods','Worktables Created/sec', NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Page life expectancy', NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Page reads/sec', NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Page writes/sec', NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Readahead pages/sec', NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Target pages', NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Total pages', NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Databases','', NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Active Transactions','_Total')\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Databases','Log Growths', '_Total')\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Databases','Log Shrinks', '_Total')\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Databases','Transactions/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Databases','Write Transactions/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Databases','XTP Memory Used (KB)',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Exec Statistics','Distributed Query', 'Execs in progress')\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Exec Statistics','DTC calls', 'Execs in progress')\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Exec Statistics','Extended Procedures', 'Execs in progress')\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Exec Statistics','OLEDB calls', 'Execs in progress')\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':General Statistics','Active Temp Tables', NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':General Statistics','Logins/sec', NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':General Statistics','Logouts/sec', NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':General Statistics','Mars Deadlocks', NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':General Statistics','Processes blocked', NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Locks','Number of Deadlocks/sec', NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Memory Manager','Memory Grants Pending', NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':SQL Errors','Errors/sec', '_Total')\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':SQL Statistics','Batch Requests/sec', NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':SQL Statistics','Forced Parameterizations/sec', NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':SQL Statistics','Guided plan executions/sec', NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':SQL Statistics','SQL Attention rate', NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':SQL Statistics','SQL Compilations/sec', NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':SQL Statistics','SQL Re-Compilations/sec', NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Workload Group Stats','Query optimizations/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Workload Group Stats','Suboptimal plans/sec',NULL)\n        /* Below counters added by Jefferson Elias */\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Access Methods','Worktables From Cache Base',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Access Methods','Worktables From Cache Ratio',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Database pages',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Free pages',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Stolen pages',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Memory Manager','Granted Workspace Memory (KB)',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Memory Manager','Maximum Workspace Memory (KB)',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Memory Manager','Target Server Memory (KB)',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Memory Manager','Total Server Memory (KB)',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Buffer cache hit ratio',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Buffer cache hit ratio base',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Checkpoint pages/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Free list stalls/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Lazy writes/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':SQL Statistics','Auto-Param Attempts/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':SQL Statistics','Failed Auto-Params/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':SQL Statistics','Safe Auto-Params/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':SQL Statistics','Unsafe Auto-Params/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Access Methods','Workfiles Created/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':General Statistics','User Connections',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Latches','Average Latch Wait Time (ms)',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Latches','Average Latch Wait Time Base',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Latches','Latch Waits/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Latches','Total Latch Wait Time (ms)',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Locks','Average Wait Time (ms)',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Locks','Average Wait Time Base',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Locks','Lock Requests/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Locks','Lock Timeouts/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Locks','Lock Wait Time (ms)',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Locks','Lock Waits/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Transactions','Longest Transaction Running Time',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Access Methods','Full Scans/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Access Methods','Index Searches/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Buffer Manager','Page lookups/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':Cursor Manager by Type','Active cursors',NULL)\n        /* Below counters are for In-Memory OLTP (Hekaton), which have a different naming convention.\n           And yes, they actually hard-coded the version numbers into the counters.\n           For why, see: https://connect.microsoft.com/SQLServer/feedback/details/817216/xtp-perfmon-counters-should-appear-under-sql-server-perfmon-counter-group\n        */\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES ('SQL Server 2014 XTP Cursors','Expired rows removed/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES ('SQL Server 2014 XTP Cursors','Expired rows touched/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES ('SQL Server 2014 XTP Garbage Collection','Rows processed/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES ('SQL Server 2014 XTP IO Governor','Io Issued/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES ('SQL Server 2014 XTP Phantom Processor','Phantom expired rows touched/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES ('SQL Server 2014 XTP Phantom Processor','Phantom rows touched/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES ('SQL Server 2014 XTP Transaction Log','Log bytes written/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES ('SQL Server 2014 XTP Transaction Log','Log records written/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES ('SQL Server 2014 XTP Transactions','Transactions aborted by user/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES ('SQL Server 2014 XTP Transactions','Transactions aborted/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES ('SQL Server 2014 XTP Transactions','Transactions created/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES ('SQL Server 2016 XTP Cursors','Expired rows removed/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES ('SQL Server 2016 XTP Cursors','Expired rows touched/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES ('SQL Server 2016 XTP Garbage Collection','Rows processed/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES ('SQL Server 2016 XTP IO Governor','Io Issued/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES ('SQL Server 2016 XTP Phantom Processor','Phantom expired rows touched/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES ('SQL Server 2016 XTP Phantom Processor','Phantom rows touched/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES ('SQL Server 2016 XTP Transaction Log','Log bytes written/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES ('SQL Server 2016 XTP Transaction Log','Log records written/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES ('SQL Server 2016 XTP Transactions','Transactions aborted by user/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES ('SQL Server 2016 XTP Transactions','Transactions aborted/sec',NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES ('SQL Server 2016 XTP Transactions','Transactions created/sec',NULL)\n        END\n\n    /* Populate #FileStats, #PerfmonStats, #WaitStats with DMV data.\n        After we finish doing our checks, we'll take another sample and compare them. */\n\tRAISERROR('Capturing first pass of wait stats, perfmon counters, file stats',10,1) WITH NOWAIT;\n    INSERT #WaitStats(Pass, SampleTime, wait_type, wait_time_ms, signal_wait_time_ms, waiting_tasks_count)\n\t\tSELECT \n\t\tx.Pass, \n\t\tx.SampleTime, \n\t\tx.wait_type, \n\t\tSUM(x.sum_wait_time_ms) AS sum_wait_time_ms, \n\t\tSUM(x.sum_signal_wait_time_ms) AS sum_signal_wait_time_ms, \n\t\tSUM(x.sum_waiting_tasks) AS sum_waiting_tasks\n\t\tFROM (\n\t\tSELECT  \n\t\t\t\t1 AS Pass,\n\t\t\t\tCASE @Seconds WHEN 0 THEN @StartSampleTime ELSE SYSDATETIMEOFFSET() END AS SampleTime,\n\t\t\t\towt.wait_type,\n\t\t        CASE @Seconds WHEN 0 THEN 0 ELSE SUM(owt.wait_duration_ms) OVER (PARTITION BY owt.wait_type, owt.session_id)\n\t\t\t\t\t - CASE WHEN @Seconds = 0 THEN 0 ELSE (@Seconds * 1000) END END AS sum_wait_time_ms,\n\t\t\t\t0 AS sum_signal_wait_time_ms,\n\t\t\t\t0 AS sum_waiting_tasks\n\t\t\tFROM    sys.dm_os_waiting_tasks owt\n\t\t\tWHERE owt.session_id > 50\n\t\t\tAND owt.wait_duration_ms >= CASE @Seconds WHEN 0 THEN 0 ELSE @Seconds * 1000 END\n\t\tUNION ALL\n\t\tSELECT\n\t\t       1 AS Pass,\n\t\t       CASE @Seconds WHEN 0 THEN @StartSampleTime ELSE SYSDATETIMEOFFSET() END AS SampleTime,\n\t\t       os.wait_type,\n\t\t       CASE @Seconds WHEN 0 THEN 0 ELSE SUM(os.wait_time_ms) OVER (PARTITION BY os.wait_type) END AS sum_wait_time_ms,\n\t\t       CASE @Seconds WHEN 0 THEN 0 ELSE SUM(os.signal_wait_time_ms) OVER (PARTITION BY os.wait_type ) END AS sum_signal_wait_time_ms,\n\t\t       CASE @Seconds WHEN 0 THEN 0 ELSE SUM(os.waiting_tasks_count) OVER (PARTITION BY os.wait_type) END AS sum_waiting_tasks\n\t\t   FROM sys.dm_os_wait_stats os\n\t\t) x\n\t\t   WHERE x.wait_type NOT IN (\n                  'BROKER_EVENTHANDLER'\n                , 'BROKER_RECEIVE_WAITFOR'\n                , 'BROKER_TASK_STOP'\n                , 'BROKER_TO_FLUSH'\n                , 'BROKER_TRANSMITTER'\n                , 'CHECKPOINT_QUEUE'\n                , 'DBMIRROR_DBM_EVENT'\n                , 'DBMIRROR_DBM_MUTEX'\n                , 'DBMIRROR_EVENTS_QUEUE'\n                , 'DBMIRROR_WORKER_QUEUE'\n                , 'DBMIRRORING_CMD'\n                , 'DIRTY_PAGE_POLL'\n                , 'DISPATCHER_QUEUE_SEMAPHORE'\n                , 'FT_IFTS_SCHEDULER_IDLE_WAIT'\n                , 'FT_IFTSHC_MUTEX'\n                , 'HADR_CLUSAPI_CALL'\n                , 'HADR_FILESTREAM_IOMGR_IOCOMPLETION'\n                , 'HADR_LOGCAPTURE_WAIT'\n                , 'HADR_NOTIFICATION_DEQUEUE'\n                , 'HADR_TIMER_TASK'\n                , 'HADR_WORK_QUEUE'\n                , 'LAZYWRITER_SLEEP'\n                , 'LOGMGR_QUEUE'\n                , 'ONDEMAND_TASK_QUEUE'\n                , 'PREEMPTIVE_HADR_LEASE_MECHANISM'\n                , 'PREEMPTIVE_SP_SERVER_DIAGNOSTICS'\n                , 'QDS_ASYNC_QUEUE'\n                , 'QDS_CLEANUP_STALE_QUERIES_TASK_MAIN_LOOP_SLEEP'\n                , 'QDS_PERSIST_TASK_MAIN_LOOP_SLEEP'\n                , 'QDS_SHUTDOWN_QUEUE'\n                , 'REDO_THREAD_PENDING_WORK'\n                , 'REQUEST_FOR_DEADLOCK_SEARCH'\n                , 'SLEEP_SYSTEMTASK'\n                , 'SLEEP_TASK'\n                , 'SP_SERVER_DIAGNOSTICS_SLEEP'\n                , 'SQLTRACE_BUFFER_FLUSH'\n                , 'SQLTRACE_INCREMENTAL_FLUSH_SLEEP'\n                , 'UCS_SESSION_REGISTRATION'\n                , 'WAIT_XTP_OFFLINE_CKPT_NEW_LOG'\n                , 'WAITFOR'\n                , 'XE_DISPATCHER_WAIT'\n                , 'XE_LIVE_TARGET_TVF'\n                , 'XE_TIMER_EVENT'\n\t\t   )\n\t\tGROUP BY x.Pass, x.SampleTime, x.wait_type\n\t\tORDER BY sum_wait_time_ms DESC;\n\n\n    INSERT INTO #FileStats (Pass, SampleTime, DatabaseID, FileID, DatabaseName, FileLogicalName, SizeOnDiskMB, io_stall_read_ms ,\n        num_of_reads, [bytes_read] , io_stall_write_ms,num_of_writes, [bytes_written], PhysicalName, TypeDesc)\n    SELECT\n        1 AS Pass,\n        CASE @Seconds WHEN 0 THEN @StartSampleTime ELSE SYSDATETIMEOFFSET() END AS SampleTime,\n        mf.[database_id],\n        mf.[file_id],\n        DB_NAME(vfs.database_id) AS [db_name],\n        mf.name + N' [' + mf.type_desc COLLATE SQL_Latin1_General_CP1_CI_AS + N']' AS file_logical_name ,\n        CAST(( ( vfs.size_on_disk_bytes / 1024.0 ) / 1024.0 ) AS INT) AS size_on_disk_mb ,\n        CASE @Seconds WHEN 0 THEN 0 ELSE vfs.io_stall_read_ms END ,\n        CASE @Seconds WHEN 0 THEN 0 ELSE vfs.num_of_reads END ,\n        CASE @Seconds WHEN 0 THEN 0 ELSE vfs.[num_of_bytes_read] END ,\n        CASE @Seconds WHEN 0 THEN 0 ELSE vfs.io_stall_write_ms END ,\n        CASE @Seconds WHEN 0 THEN 0 ELSE vfs.num_of_writes END ,\n        CASE @Seconds WHEN 0 THEN 0 ELSE vfs.[num_of_bytes_written] END ,\n        mf.physical_name,\n        mf.type_desc\n    FROM sys.dm_io_virtual_file_stats (NULL, NULL) AS vfs\n    INNER JOIN #MasterFiles AS mf ON vfs.file_id = mf.file_id\n        AND vfs.database_id = mf.database_id\n    WHERE vfs.num_of_reads > 0\n        OR vfs.num_of_writes > 0;\n\n    INSERT INTO #PerfmonStats (Pass, SampleTime, [object_name],[counter_name],[instance_name],[cntr_value],[cntr_type])\n    SELECT         1 AS Pass,\n        CASE @Seconds WHEN 0 THEN @StartSampleTime ELSE SYSDATETIMEOFFSET() END AS SampleTime, RTRIM(dmv.object_name), RTRIM(dmv.counter_name), RTRIM(dmv.instance_name), CASE @Seconds WHEN 0 THEN 0 ELSE dmv.cntr_value END, dmv.cntr_type\n        FROM #PerfmonCounters counters\n        INNER JOIN sys.dm_os_performance_counters dmv ON counters.counter_name COLLATE SQL_Latin1_General_CP1_CI_AS = RTRIM(dmv.counter_name) COLLATE SQL_Latin1_General_CP1_CI_AS\n            AND counters.[object_name] COLLATE SQL_Latin1_General_CP1_CI_AS = RTRIM(dmv.[object_name]) COLLATE SQL_Latin1_General_CP1_CI_AS\n            AND (counters.[instance_name] IS NULL OR counters.[instance_name] COLLATE SQL_Latin1_General_CP1_CI_AS = RTRIM(dmv.[instance_name]) COLLATE SQL_Latin1_General_CP1_CI_AS)\n\n\tRAISERROR('Beginning investigatory queries',10,1) WITH NOWAIT;\n\n\n    /* Maintenance Tasks Running - Backup Running - CheckID 1 */\n    IF @Seconds > 0\n    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt, QueryPlan, StartTime, LoginName, NTUserName, ProgramName, HostName, DatabaseID, DatabaseName, OpenTransactionCount)\n    SELECT 1 AS CheckID,\n        1 AS Priority,\n        'Maintenance Tasks Running' AS FindingGroup,\n        'Backup Running' AS Finding,\n        'http://www.BrentOzar.com/askbrent/backups/' AS URL,\n        'Backup of ' + DB_NAME(db.resource_database_id) + ' database (' + (SELECT CAST(CAST(SUM(size * 8.0 / 1024 / 1024) AS BIGINT) AS NVARCHAR) FROM #MasterFiles WHERE database_id = db.resource_database_id) + 'GB) is ' + CAST(r.percent_complete AS NVARCHAR(100)) + '% complete, has been running since ' + CAST(r.start_time AS NVARCHAR(100)) + '. ' \n\t\t   + CASE WHEN COALESCE(s.nt_user_name, s.login_name) IS NOT NULL THEN (' Login: ' + COALESCE(s.nt_user_name, s.login_name) + ' ') ELSE '' END AS Details,\n        'KILL ' + CAST(r.session_id AS NVARCHAR(100)) + ';' AS HowToStopIt,\n        pl.query_plan AS QueryPlan,\n        r.start_time AS StartTime,\n        s.login_name AS LoginName,\n        s.nt_user_name AS NTUserName,\n        s.[program_name] AS ProgramName,\n        s.[host_name] AS HostName,\n        db.[resource_database_id] AS DatabaseID,\n        DB_NAME(db.resource_database_id) AS DatabaseName,\n        0 AS OpenTransactionCount\n    FROM sys.dm_exec_requests r\n    INNER JOIN sys.dm_exec_connections c ON r.session_id = c.session_id\n    INNER JOIN sys.dm_exec_sessions s ON r.session_id = s.session_id\n    INNER JOIN (\n    SELECT DISTINCT request_session_id, resource_database_id\n    FROM    sys.dm_tran_locks\n    WHERE resource_type = N'DATABASE'\n    AND     request_mode = N'S'\n    AND     request_status = N'GRANT'\n    AND     request_owner_type = N'SHARED_TRANSACTION_WORKSPACE') AS db ON s.session_id = db.request_session_id\n    CROSS APPLY sys.dm_exec_query_plan(r.plan_handle) pl\n    WHERE r.command LIKE 'BACKUP%'\n\tAND r.start_time <= DATEADD(minute, -5, GETDATE());\n\n    /* If there's a backup running, add details explaining how long full backup has been taking in the last month. */\n    IF @Seconds > 0 AND CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) <> 'SQL Azure'\n    BEGIN\n        SET @StringToExecute = 'UPDATE #BlitzFirstResults SET Details = Details + '' Over the last 60 days, the full backup usually takes '' + CAST((SELECT AVG(DATEDIFF(mi, bs.backup_start_date, bs.backup_finish_date)) FROM msdb.dbo.backupset bs WHERE abr.DatabaseName = bs.database_name AND bs.type = ''D'' AND bs.backup_start_date > DATEADD(dd, -60, SYSDATETIMEOFFSET()) AND bs.backup_finish_date IS NOT NULL) AS NVARCHAR(100)) + '' minutes.'' FROM #BlitzFirstResults abr WHERE abr.CheckID = 1 AND EXISTS (SELECT * FROM msdb.dbo.backupset bs WHERE bs.type = ''D'' AND bs.backup_start_date > DATEADD(dd, -60, SYSDATETIMEOFFSET()) AND bs.backup_finish_date IS NOT NULL AND abr.DatabaseName = bs.database_name AND DATEDIFF(mi, bs.backup_start_date, bs.backup_finish_date) > 1)';\n        EXEC(@StringToExecute);\n    END\n\n\n    /* Maintenance Tasks Running - DBCC CHECK* Running - CheckID 2 */\n    IF @Seconds > 0 AND EXISTS(SELECT * FROM sys.dm_exec_requests WHERE command LIKE 'DBCC%')\n    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt, QueryPlan, StartTime, LoginName, NTUserName, ProgramName, HostName, DatabaseID, DatabaseName, OpenTransactionCount)\n    SELECT 2 AS CheckID,\n        1 AS Priority,\n        'Maintenance Tasks Running' AS FindingGroup,\n        'DBCC CHECK* Running' AS Finding,\n        'http://www.BrentOzar.com/askbrent/dbcc/' AS URL,\n        'Corruption check of ' + DB_NAME(db.resource_database_id) + ' database (' + (SELECT CAST(CAST(SUM(size * 8.0 / 1024 / 1024) AS BIGINT) AS NVARCHAR) FROM #MasterFiles WHERE database_id = db.resource_database_id) + 'GB) has been running since ' + CAST(r.start_time AS NVARCHAR(100)) + '. ' AS Details,\n        'KILL ' + CAST(r.session_id AS NVARCHAR(100)) + ';' AS HowToStopIt,\n        pl.query_plan AS QueryPlan,\n        r.start_time AS StartTime,\n        s.login_name AS LoginName,\n        s.nt_user_name AS NTUserName,\n        s.[program_name] AS ProgramName,\n        s.[host_name] AS HostName,\n        db.[resource_database_id] AS DatabaseID,\n        DB_NAME(db.resource_database_id) AS DatabaseName,\n        0 AS OpenTransactionCount\n    FROM sys.dm_exec_requests r\n    INNER JOIN sys.dm_exec_connections c ON r.session_id = c.session_id\n    INNER JOIN sys.dm_exec_sessions s ON r.session_id = s.session_id\n    INNER JOIN (SELECT DISTINCT l.request_session_id, l.resource_database_id\n    FROM    sys.dm_tran_locks l\n    INNER JOIN sys.databases d ON l.resource_database_id = d.database_id\n    WHERE l.resource_type = N'DATABASE'\n    AND     l.request_mode = N'S'\n    AND    l.request_status = N'GRANT'\n    AND    l.request_owner_type = N'SHARED_TRANSACTION_WORKSPACE') AS db ON s.session_id = db.request_session_id\n    CROSS APPLY sys.dm_exec_query_plan(r.plan_handle) pl\n    CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) AS t\n    WHERE r.command LIKE 'DBCC%'\n\tAND CAST(t.text AS NVARCHAR(4000)) NOT LIKE '%dm_db_index_physical_stats%';\n\n\n    /* Maintenance Tasks Running - Restore Running - CheckID 3 */\n    IF @Seconds > 0\n    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt, QueryPlan, StartTime, LoginName, NTUserName, ProgramName, HostName, DatabaseID, DatabaseName, OpenTransactionCount)\n    SELECT 3 AS CheckID,\n        1 AS Priority,\n        'Maintenance Tasks Running' AS FindingGroup,\n        'Restore Running' AS Finding,\n        'http://www.BrentOzar.com/askbrent/backups/' AS URL,\n        'Restore of ' + DB_NAME(db.resource_database_id) + ' database (' + (SELECT CAST(CAST(SUM(size * 8.0 / 1024 / 1024) AS BIGINT) AS NVARCHAR) FROM #MasterFiles WHERE database_id = db.resource_database_id) + 'GB) is ' + CAST(r.percent_complete AS NVARCHAR(100)) + '% complete, has been running since ' + CAST(r.start_time AS NVARCHAR(100)) + '. ' AS Details,\n        'KILL ' + CAST(r.session_id AS NVARCHAR(100)) + ';' AS HowToStopIt,\n        pl.query_plan AS QueryPlan,\n        r.start_time AS StartTime,\n        s.login_name AS LoginName,\n        s.nt_user_name AS NTUserName,\n        s.[program_name] AS ProgramName,\n        s.[host_name] AS HostName,\n        db.[resource_database_id] AS DatabaseID,\n        DB_NAME(db.resource_database_id) AS DatabaseName,\n        0 AS OpenTransactionCount\n    FROM sys.dm_exec_requests r\n    INNER JOIN sys.dm_exec_connections c ON r.session_id = c.session_id\n    INNER JOIN sys.dm_exec_sessions s ON r.session_id = s.session_id\n    INNER JOIN (\n    SELECT DISTINCT request_session_id, resource_database_id\n    FROM    sys.dm_tran_locks\n    WHERE resource_type = N'DATABASE'\n    AND     request_mode = N'S'\n    AND     request_status = N'GRANT') AS db ON s.session_id = db.request_session_id\n    CROSS APPLY sys.dm_exec_query_plan(r.plan_handle) pl\n    WHERE r.command LIKE 'RESTORE%';\n\n\n    /* SQL Server Internal Maintenance - Database File Growing - CheckID 4 */\n    IF @Seconds > 0\n    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt, QueryPlan, StartTime, LoginName, NTUserName, ProgramName, HostName, DatabaseID, DatabaseName, OpenTransactionCount)\n    SELECT 4 AS CheckID,\n        1 AS Priority,\n        'SQL Server Internal Maintenance' AS FindingGroup,\n        'Database File Growing' AS Finding,\n        'http://www.BrentOzar.com/go/instant' AS URL,\n        'SQL Server is waiting for Windows to provide storage space for a database restore, a data file growth, or a log file growth. This task has been running since ' + CAST(r.start_time AS NVARCHAR(100)) + '.' + @LineFeed + 'Check the query plan (expert mode) to identify the database involved.' AS Details,\n        'Unfortunately, you can''t stop this, but you can prevent it next time. Check out http://www.BrentOzar.com/go/instant for details.' AS HowToStopIt,\n        pl.query_plan AS QueryPlan,\n        r.start_time AS StartTime,\n        s.login_name AS LoginName,\n        s.nt_user_name AS NTUserName,\n        s.[program_name] AS ProgramName,\n        s.[host_name] AS HostName,\n        NULL AS DatabaseID,\n        NULL AS DatabaseName,\n        0 AS OpenTransactionCount\n    FROM sys.dm_os_waiting_tasks t\n    INNER JOIN sys.dm_exec_connections c ON t.session_id = c.session_id\n    INNER JOIN sys.dm_exec_requests r ON t.session_id = r.session_id\n    INNER JOIN sys.dm_exec_sessions s ON r.session_id = s.session_id\n    CROSS APPLY sys.dm_exec_query_plan(r.plan_handle) pl\n    WHERE t.wait_type = 'PREEMPTIVE_OS_WRITEFILEGATHER'\n\n\n    /* Query Problems - Long-Running Query Blocking Others - CheckID 5 */\n    IF @@VERSION NOT LIKE '%Azure%' AND @Seconds > 0 AND EXISTS(SELECT * FROM sys.dm_os_waiting_tasks WHERE wait_type LIKE 'LCK%' AND wait_duration_ms > 30000)\n    BEGIN\n        SET @StringToExecute = N'INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt, QueryPlan, QueryText, StartTime, LoginName, NTUserName, ProgramName, HostName, DatabaseID, DatabaseName, OpenTransactionCount)\n            SELECT 5 AS CheckID,\n                1 AS Priority,\n                ''Query Problems'' AS FindingGroup,\n                ''Long-Running Query Blocking Others'' AS Finding,\n                ''http://www.BrentOzar.com/go/blocking'' AS URL,\n                ''Query in '' + COALESCE(DB_NAME(COALESCE((SELECT TOP 1 dbid FROM sys.dm_exec_sql_text(r.sql_handle)),\n                    (SELECT TOP 1 t.dbid FROM master..sysprocesses spBlocker CROSS APPLY sys.dm_exec_sql_text(spBlocker.sql_handle) t WHERE spBlocker.spid = tBlocked.blocking_session_id))), ''(Unknown)'') + '' has a last request start time of '' + CAST(s.last_request_start_time AS NVARCHAR(100)) + ''. Query follows:'' ' \n\t\t\t\t\t+ @LineFeed + @LineFeed + \n\t\t\t\t\t'+ CAST(COALESCE((SELECT TOP 1 [text] FROM sys.dm_exec_sql_text(r.sql_handle)),\n                    (SELECT TOP 1 [text] FROM master..sysprocesses spBlocker CROSS APPLY sys.dm_exec_sql_text(spBlocker.sql_handle) WHERE spBlocker.spid = tBlocked.blocking_session_id), '''') AS NVARCHAR(2000)) AS Details,\n                ''KILL '' + CAST(tBlocked.blocking_session_id AS NVARCHAR(100)) + '';'' AS HowToStopIt,\n                (SELECT TOP 1 query_plan FROM sys.dm_exec_query_plan(r.plan_handle)) AS QueryPlan,\n                COALESCE((SELECT TOP 1 [text] FROM sys.dm_exec_sql_text(r.sql_handle)),\n                    (SELECT TOP 1 [text] FROM master..sysprocesses spBlocker CROSS APPLY sys.dm_exec_sql_text(spBlocker.sql_handle) WHERE spBlocker.spid = tBlocked.blocking_session_id)) AS QueryText,\n                r.start_time AS StartTime,\n                s.login_name AS LoginName,\n                s.nt_user_name AS NTUserName,\n                s.[program_name] AS ProgramName,\n                s.[host_name] AS HostName,\n                r.[database_id] AS DatabaseID,\n                DB_NAME(r.database_id) AS DatabaseName,\n                0 AS OpenTransactionCount\n            FROM sys.dm_os_waiting_tasks tBlocked\n\t        INNER JOIN sys.dm_exec_sessions s ON tBlocked.blocking_session_id = s.session_id\n            LEFT OUTER JOIN sys.dm_exec_requests r ON s.session_id = r.session_id\n            INNER JOIN sys.dm_exec_connections c ON s.session_id = c.session_id\n            WHERE tBlocked.wait_type LIKE ''LCK%'' AND tBlocked.wait_duration_ms > 30000;'\n\t\tEXECUTE sp_executesql @StringToExecute;\n    END\n\n    /* Query Problems - Plan Cache Erased Recently */\n    IF DATEADD(mi, -15, SYSDATETIME()) < (SELECT TOP 1 creation_time FROM sys.dm_exec_query_stats ORDER BY creation_time)\n    BEGIN\n        INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt)\n        SELECT TOP 1 7 AS CheckID,\n            50 AS Priority,\n            'Query Problems' AS FindingGroup,\n            'Plan Cache Erased Recently' AS Finding,\n            'http://www.BrentOzar.com/askbrent/plan-cache-erased-recently/' AS URL,\n            'The oldest query in the plan cache was created at ' + CAST(creation_time AS NVARCHAR(50)) + '. ' + @LineFeed + @LineFeed\n                + 'This indicates that someone ran DBCC FREEPROCCACHE at that time,' + @LineFeed\n                + 'Giving SQL Server temporary amnesia. Now, as queries come in,' + @LineFeed\n                + 'SQL Server has to use a lot of CPU power in order to build execution' + @LineFeed\n                + 'plans and put them in cache again. This causes high CPU loads.' AS Details,\n            'Find who did that, and stop them from doing it again.' AS HowToStopIt\n        FROM sys.dm_exec_query_stats\n        ORDER BY creation_time\n    END;\n\n\n    /* Query Problems - Sleeping Query with Open Transactions - CheckID 8 */\n    IF @Seconds > 0\n    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt, StartTime, LoginName, NTUserName, ProgramName, HostName, DatabaseID, DatabaseName, QueryText, OpenTransactionCount)\n    SELECT 8 AS CheckID,\n        50 AS Priority,\n        'Query Problems' AS FindingGroup,\n        'Sleeping Query with Open Transactions' AS Finding,\n        'http://www.brentozar.com/askbrent/sleeping-query-with-open-transactions/' AS URL,\n        'Database: ' + DB_NAME(db.resource_database_id) + @LineFeed + 'Host: ' + s.[host_name] + @LineFeed + 'Program: ' + s.[program_name] + @LineFeed + 'Asleep with open transactions and locks since ' + CAST(s.last_request_end_time AS NVARCHAR(100)) + '. ' AS Details,\n        'KILL ' + CAST(s.session_id AS NVARCHAR(100)) + ';' AS HowToStopIt,\n        s.last_request_start_time AS StartTime,\n        s.login_name AS LoginName,\n        s.nt_user_name AS NTUserName,\n        s.[program_name] AS ProgramName,\n        s.[host_name] AS HostName,\n        db.[resource_database_id] AS DatabaseID,\n        DB_NAME(db.resource_database_id) AS DatabaseName,\n        (SELECT TOP 1 [text] FROM sys.dm_exec_sql_text(c.most_recent_sql_handle)) AS QueryText,\n        sessions_with_transactions.open_transaction_count AS OpenTransactionCount\n    FROM (SELECT session_id, SUM(open_transaction_count) AS open_transaction_count FROM sys.dm_exec_requests WHERE open_transaction_count > 0 GROUP BY session_id) AS sessions_with_transactions\n    INNER JOIN sys.dm_exec_sessions s ON sessions_with_transactions.session_id = s.session_id\n    INNER JOIN sys.dm_exec_connections c ON s.session_id = c.session_id\n    INNER JOIN (\n    SELECT DISTINCT request_session_id, resource_database_id\n    FROM    sys.dm_tran_locks\n    WHERE resource_type = N'DATABASE'\n    AND     request_mode = N'S'\n    AND     request_status = N'GRANT'\n    AND     request_owner_type = N'SHARED_TRANSACTION_WORKSPACE') AS db ON s.session_id = db.request_session_id\n    WHERE s.status = 'sleeping'\n    AND s.last_request_end_time < DATEADD(ss, -10, SYSDATETIME())\n    AND EXISTS(SELECT * FROM sys.dm_tran_locks WHERE request_session_id = s.session_id\n    AND NOT (resource_type = N'DATABASE' AND request_mode = N'S' AND request_status = N'GRANT' AND request_owner_type = N'SHARED_TRANSACTION_WORKSPACE'))\n\n\n    /* Query Problems - Query Rolling Back - CheckID 9 */\n    IF @Seconds > 0\n    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt, StartTime, LoginName, NTUserName, ProgramName, HostName, DatabaseID, DatabaseName, QueryText)\n    SELECT 9 AS CheckID,\n        1 AS Priority,\n        'Query Problems' AS FindingGroup,\n        'Query Rolling Back' AS Finding,\n        'http://www.BrentOzar.com/askbrent/rollback/' AS URL,\n        'Rollback started at ' + CAST(r.start_time AS NVARCHAR(100)) + ', is ' + CAST(r.percent_complete AS NVARCHAR(100)) + '% complete.' AS Details,\n        'Unfortunately, you can''t stop this. Whatever you do, don''t restart the server in an attempt to fix it - SQL Server will keep rolling back.' AS HowToStopIt,\n        r.start_time AS StartTime,\n        s.login_name AS LoginName,\n        s.nt_user_name AS NTUserName,\n        s.[program_name] AS ProgramName,\n        s.[host_name] AS HostName,\n        db.[resource_database_id] AS DatabaseID,\n        DB_NAME(db.resource_database_id) AS DatabaseName,\n        (SELECT TOP 1 [text] FROM sys.dm_exec_sql_text(c.most_recent_sql_handle)) AS QueryText\n    FROM sys.dm_exec_sessions s\n    INNER JOIN sys.dm_exec_connections c ON s.session_id = c.session_id\n    INNER JOIN sys.dm_exec_requests r ON s.session_id = r.session_id\n    LEFT OUTER JOIN (\n        SELECT DISTINCT request_session_id, resource_database_id\n        FROM    sys.dm_tran_locks\n        WHERE resource_type = N'DATABASE'\n        AND     request_mode = N'S'\n        AND     request_status = N'GRANT'\n        AND     request_owner_type = N'SHARED_TRANSACTION_WORKSPACE') AS db ON s.session_id = db.request_session_id\n    WHERE r.status = 'rollback'\n\n\n    /* Server Performance - Page Life Expectancy Low - CheckID 10 */\n    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt)\n    SELECT 10 AS CheckID,\n        50 AS Priority,\n        'Server Performance' AS FindingGroup,\n        'Page Life Expectancy Low' AS Finding,\n        'http://www.BrentOzar.com/askbrent/page-life-expectancy/' AS URL,\n        'SQL Server Buffer Manager:Page life expectancy is ' + CAST(c.cntr_value AS NVARCHAR(10)) + ' seconds.' + @LineFeed\n            + 'This means SQL Server can only keep data pages in memory for that many seconds after reading those pages in from storage.' + @LineFeed\n            + 'This is a symptom, not a cause - it indicates very read-intensive queries that need an index, or insufficient server memory.' AS Details,\n        'Add more memory to the server, or find the queries reading a lot of data, and make them more efficient (or fix them with indexes).' AS HowToStopIt\n    FROM sys.dm_os_performance_counters c\n    WHERE object_name LIKE 'SQLServer:Buffer Manager%'\n    AND counter_name LIKE 'Page life expectancy%'\n    AND cntr_value < 300\n\n    /* Server Performance - Too Much Free Memory - CheckID 34 */\n    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt)\n    SELECT 34 AS CheckID,\n        50 AS Priority,\n        'Server Performance' AS FindingGroup,\n        'Too Much Free Memory' AS Finding,\n        'https://BrentOzar.com/go/freememory' AS URL,\n\t\tCAST((CAST(cFree.cntr_value AS BIGINT) / 1024 / 1024 ) AS NVARCHAR(100)) + N'GB of free memory inside SQL Server''s buffer pool,' + @LineFeed + ' which is ' + CAST((CAST(cTotal.cntr_value AS BIGINT) / 1024 / 1024) AS NVARCHAR(100)) + N'GB. You would think lots of free memory would be good, but check out the URL for more information.' AS Details,\n        'Run sp_BlitzCache @SortOrder = ''memory grant'' to find queries with huge memory grants and tune them.' AS HowToStopIt\n\t\tFROM sys.dm_os_performance_counters cFree\n\t\tINNER JOIN sys.dm_os_performance_counters cTotal ON cTotal.object_name LIKE N'%Memory Manager%'\n\t\t\tAND cTotal.counter_name = N'Total Server Memory (KB)                                                                                                        '\n\t\tWHERE cFree.object_name LIKE N'%Memory Manager%'\n\t\t\tAND cFree.counter_name = N'Free Memory (KB)                                                                                                                '\n\t\t\tAND CAST(cTotal.cntr_value AS BIGINT) > 20480000000\n\t\t\tAND CAST(cTotal.cntr_value AS BIGINT) * .3 <= CAST(cFree.cntr_value AS BIGINT)\n            AND CAST(SERVERPROPERTY('edition') AS VARCHAR(100)) NOT LIKE '%Standard%';\n\n    /* Server Performance - Target Memory Lower Than Max - CheckID 35 */\n    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt)\n    SELECT 35 AS CheckID,\n        10 AS Priority,\n        'Server Performance' AS FindingGroup,\n        'Target Memory Lower Than Max' AS Finding,\n        'https://BrentOzar.com/go/target' AS URL,\n\t\tN'Max server memory is ' + CAST(cMax.value_in_use AS NVARCHAR(50)) + N' MB but target server memory is only ' + CAST((CAST(cTarget.cntr_value AS BIGINT) / 1024) AS NVARCHAR(50)) + N' MB,' + @LineFeed\n            + N'indicating that SQL Server may be under external memory pressure or max server memory may be set too high.' AS Details,\n        'Investigate what OS processes are using memory, and double-check the max server memory setting.' AS HowToStopIt\n        FROM sys.configurations cMax\n        INNER JOIN sys.dm_os_performance_counters cTarget ON cTarget.object_name LIKE N'%Memory Manager%'\n\t        AND cTarget.counter_name = N'Target Server Memory (KB)                                                                                                       '\n        WHERE cMax.name = 'max server memory (MB)'\n            AND CAST(cMax.value_in_use AS BIGINT) >= 1.5 * (CAST(cTarget.cntr_value AS BIGINT) / 1024)\n            AND CAST(cMax.value_in_use AS BIGINT) < 2147483647 /* Not set to default of unlimited */\n            AND CAST(cTarget.cntr_value AS BIGINT) < .8 * (SELECT available_physical_memory_kb FROM sys.dm_os_sys_memory); /* Target memory less than 80% of physical memory (in case they set max too high) */\n\n    /* Server Info - Database Size, Total GB - CheckID 21 */\n    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, Details, DetailsInt, URL)\n    SELECT 21 AS CheckID,\n        251 AS Priority,\n        'Server Info' AS FindingGroup,\n        'Database Size, Total GB' AS Finding,\n        CAST(SUM (CAST(size AS BIGINT)*8./1024./1024.) AS VARCHAR(100)) AS Details,\n        SUM (CAST(size AS BIGINT))*8./1024./1024. AS DetailsInt,\n        'http://www.BrentOzar.com/askbrent/' AS URL\n    FROM #MasterFiles\n    WHERE database_id > 4\n\n    /* Server Info - Database Count - CheckID 22 */\n    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, Details, DetailsInt, URL)\n    SELECT 22 AS CheckID,\n        251 AS Priority,\n        'Server Info' AS FindingGroup,\n        'Database Count' AS Finding,\n        CAST(SUM(1) AS VARCHAR(100)) AS Details,\n        SUM (1) AS DetailsInt,\n        'http://www.BrentOzar.com/askbrent/' AS URL\n    FROM sys.databases\n    WHERE database_id > 4\n\n    /* Server Performance - High CPU Utilization CheckID 24 */\n    IF @Seconds < 30\n        BEGIN\n        /* If we're waiting less than 30 seconds, run this check now rather than wait til the end.\n           We get this data from the ring buffers, and it's only updated once per minute, so might\n           as well get it now - whereas if we're checking 30+ seconds, it might get updated by the\n           end of our sp_BlitzFirst session. */\n        INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, Details, DetailsInt, URL)\n        SELECT 24, 50, 'Server Performance', 'High CPU Utilization', CAST(100 - SystemIdle AS NVARCHAR(20)) + N'%.', 100 - SystemIdle, 'http://www.BrentOzar.com/go/cpu'\n            FROM (\n                SELECT record,\n                    record.value('(./Record/SchedulerMonitorEvent/SystemHealth/SystemIdle)[1]', 'int') AS SystemIdle\n                FROM (\n                    SELECT TOP 1 CONVERT(XML, record) AS record\n                    FROM sys.dm_os_ring_buffers\n                    WHERE ring_buffer_type = N'RING_BUFFER_SCHEDULER_MONITOR'\n                    AND record LIKE '%<SystemHealth>%'\n                    ORDER BY timestamp DESC) AS rb\n            ) AS y\n            WHERE 100 - SystemIdle >= 50\n\n        INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, Details, DetailsInt, URL)\n        SELECT 23, 250, 'Server Info', 'CPU Utilization', CAST(100 - SystemIdle AS NVARCHAR(20)) + N'%. Ring buffer details: ' + CAST(record AS NVARCHAR(4000)), 100 - SystemIdle, 'http://www.BrentOzar.com/go/cpu'\n            FROM (\n                SELECT record,\n                    record.value('(./Record/SchedulerMonitorEvent/SystemHealth/SystemIdle)[1]', 'int') AS SystemIdle\n                FROM (\n                    SELECT TOP 1 CONVERT(XML, record) AS record\n                    FROM sys.dm_os_ring_buffers\n                    WHERE ring_buffer_type = N'RING_BUFFER_SCHEDULER_MONITOR'\n                    AND record LIKE '%<SystemHealth>%'\n                    ORDER BY timestamp DESC) AS rb\n            ) AS y\n\t\t\n\t\t/* Highlight if non SQL processes are using >25% CPU */\n\t\tINSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, Details, DetailsInt, URL)\n\t    SELECT 28,\t50,\t'Server Performance', 'High CPU Utilization - Not SQL', CONVERT(NVARCHAR(100),100 - (y.SQLUsage + y.SystemIdle)) + N'% - Other Processes (not SQL Server) are using this much CPU. This may impact on the performance of your SQL Server instance', 100 - (y.SQLUsage + y.SystemIdle), 'http://www.BrentOzar.com/go/cpu'\n            FROM (\n                SELECT record,\n                    record.value('(./Record/SchedulerMonitorEvent/SystemHealth/SystemIdle)[1]', 'int') AS SystemIdle\n\t\t\t\t\t,record.value('(./Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int') AS SQLUsage\n                FROM (\n                    SELECT TOP 1 CONVERT(XML, record) AS record\n                    FROM sys.dm_os_ring_buffers\n                    WHERE ring_buffer_type = N'RING_BUFFER_SCHEDULER_MONITOR'\n                    AND record LIKE '%<SystemHealth>%'\n                    ORDER BY timestamp DESC) AS rb\n            ) AS y\n            WHERE 100 - (y.SQLUsage + y.SystemIdle) >= 25\n\t\t\n        END /* IF @Seconds < 30 */\n\n\tRAISERROR('Finished running investigatory queries',10,1) WITH NOWAIT;\n\n\n    /* End of checks. If we haven't waited @Seconds seconds, wait. */\n    IF SYSDATETIMEOFFSET() < @FinishSampleTime\n\t\tBEGIN\n\t\tRAISERROR('Waiting to match @Seconds parameter',10,1) WITH NOWAIT;\n        WAITFOR TIME @FinishSampleTimeWaitFor;\n\t\tEND\n\n\tRAISERROR('Capturing second pass of wait stats, perfmon counters, file stats',10,1) WITH NOWAIT;\n    /* Populate #FileStats, #PerfmonStats, #WaitStats with DMV data. In a second, we'll compare these. */\n    INSERT #WaitStats(Pass, SampleTime, wait_type, wait_time_ms, signal_wait_time_ms, waiting_tasks_count)\n\t\tSELECT \n\t\tx.Pass, \n\t\tx.SampleTime, \n\t\tx.wait_type, \n\t\tSUM(x.sum_wait_time_ms) AS sum_wait_time_ms, \n\t\tSUM(x.sum_signal_wait_time_ms) AS sum_signal_wait_time_ms, \n\t\tSUM(x.sum_waiting_tasks) AS sum_waiting_tasks\n\t\tFROM (\n\t\tSELECT  \n\t\t\t\t2 AS Pass,\n\t\t\t\tSYSDATETIMEOFFSET() AS SampleTime,\n\t\t\t\towt.wait_type,\n\t\t        SUM(owt.wait_duration_ms) OVER (PARTITION BY owt.wait_type, owt.session_id)\n\t\t\t\t\t - CASE WHEN @Seconds = 0 THEN 0 ELSE (@Seconds * 1000) END AS sum_wait_time_ms,\n\t\t\t\t0 AS sum_signal_wait_time_ms,\n\t\t\t\tCASE @Seconds WHEN 0 THEN 0 ELSE 1 END AS sum_waiting_tasks\n\t\t\tFROM    sys.dm_os_waiting_tasks owt\n\t\t\tWHERE owt.session_id > 50\n\t\t\tAND owt.wait_duration_ms >= CASE @Seconds WHEN 0 THEN 0 ELSE @Seconds * 1000 END\n\t\tUNION ALL\n\t\tSELECT\n\t\t       2 AS Pass,\n\t\t       SYSDATETIMEOFFSET() AS SampleTime,\n\t\t       os.wait_type,\n\t\t\t   SUM(os.wait_time_ms) OVER (PARTITION BY os.wait_type) AS sum_wait_time_ms,\n\t\t\t   SUM(os.signal_wait_time_ms) OVER (PARTITION BY os.wait_type ) AS sum_signal_wait_time_ms,\n\t\t\t   SUM(os.waiting_tasks_count) OVER (PARTITION BY os.wait_type) AS sum_waiting_tasks\n\t\t   FROM sys.dm_os_wait_stats os\n\t\t) x\n\t\t   WHERE x.wait_type NOT IN (\n                  'BROKER_EVENTHANDLER'\n                , 'BROKER_RECEIVE_WAITFOR'\n                , 'BROKER_TASK_STOP'\n                , 'BROKER_TO_FLUSH'\n                , 'BROKER_TRANSMITTER'\n                , 'CHECKPOINT_QUEUE'\n                , 'DBMIRROR_DBM_EVENT'\n                , 'DBMIRROR_DBM_MUTEX'\n                , 'DBMIRROR_EVENTS_QUEUE'\n                , 'DBMIRROR_WORKER_QUEUE'\n                , 'DBMIRRORING_CMD'\n                , 'DIRTY_PAGE_POLL'\n                , 'DISPATCHER_QUEUE_SEMAPHORE'\n                , 'FT_IFTS_SCHEDULER_IDLE_WAIT'\n                , 'FT_IFTSHC_MUTEX'\n                , 'HADR_CLUSAPI_CALL'\n                , 'HADR_FILESTREAM_IOMGR_IOCOMPLETION'\n                , 'HADR_LOGCAPTURE_WAIT'\n                , 'HADR_NOTIFICATION_DEQUEUE'\n                , 'HADR_TIMER_TASK'\n                , 'HADR_WORK_QUEUE'\n                , 'LAZYWRITER_SLEEP'\n                , 'LOGMGR_QUEUE'\n                , 'ONDEMAND_TASK_QUEUE'\n                , 'PREEMPTIVE_HADR_LEASE_MECHANISM'\n                , 'PREEMPTIVE_SP_SERVER_DIAGNOSTICS'\n                , 'QDS_ASYNC_QUEUE'\n                , 'QDS_CLEANUP_STALE_QUERIES_TASK_MAIN_LOOP_SLEEP'\n                , 'QDS_PERSIST_TASK_MAIN_LOOP_SLEEP'\n                , 'QDS_SHUTDOWN_QUEUE'\n                , 'REDO_THREAD_PENDING_WORK'\n                , 'REQUEST_FOR_DEADLOCK_SEARCH'\n                , 'SLEEP_SYSTEMTASK'\n                , 'SLEEP_TASK'\n                , 'SP_SERVER_DIAGNOSTICS_SLEEP'\n                , 'SQLTRACE_BUFFER_FLUSH'\n                , 'SQLTRACE_INCREMENTAL_FLUSH_SLEEP'\n                , 'UCS_SESSION_REGISTRATION'\n                , 'WAIT_XTP_OFFLINE_CKPT_NEW_LOG'\n                , 'WAITFOR'\n                , 'XE_DISPATCHER_WAIT'\n                , 'XE_LIVE_TARGET_TVF'\n                , 'XE_TIMER_EVENT'\n\t\t   )\n\t\tGROUP BY x.Pass, x.SampleTime, x.wait_type\n\t\tORDER BY sum_wait_time_ms DESC;\n\n    INSERT INTO #FileStats (Pass, SampleTime, DatabaseID, FileID, DatabaseName, FileLogicalName, SizeOnDiskMB, io_stall_read_ms ,\n        num_of_reads, [bytes_read] , io_stall_write_ms,num_of_writes, [bytes_written], PhysicalName, TypeDesc, avg_stall_read_ms, avg_stall_write_ms)\n    SELECT         2 AS Pass,\n        SYSDATETIMEOFFSET() AS SampleTime,\n        mf.[database_id],\n        mf.[file_id],\n        DB_NAME(vfs.database_id) AS [db_name],\n        mf.name + N' [' + mf.type_desc COLLATE SQL_Latin1_General_CP1_CI_AS + N']' AS file_logical_name ,\n        CAST(( ( vfs.size_on_disk_bytes / 1024.0 ) / 1024.0 ) AS INT) AS size_on_disk_mb ,\n        vfs.io_stall_read_ms ,\n        vfs.num_of_reads ,\n        vfs.[num_of_bytes_read],\n        vfs.io_stall_write_ms ,\n        vfs.num_of_writes ,\n        vfs.[num_of_bytes_written],\n        mf.physical_name,\n        mf.type_desc,\n        0,\n        0\n    FROM sys.dm_io_virtual_file_stats (NULL, NULL) AS vfs\n    INNER JOIN #MasterFiles AS mf ON vfs.file_id = mf.file_id\n        AND vfs.database_id = mf.database_id\n    WHERE vfs.num_of_reads > 0\n        OR vfs.num_of_writes > 0;\n\n    INSERT INTO #PerfmonStats (Pass, SampleTime, [object_name],[counter_name],[instance_name],[cntr_value],[cntr_type])\n    SELECT         2 AS Pass,\n        SYSDATETIMEOFFSET() AS SampleTime,\n        RTRIM(dmv.object_name), RTRIM(dmv.counter_name), RTRIM(dmv.instance_name), dmv.cntr_value, dmv.cntr_type\n        FROM #PerfmonCounters counters\n        INNER JOIN sys.dm_os_performance_counters dmv ON counters.counter_name COLLATE SQL_Latin1_General_CP1_CI_AS = RTRIM(dmv.counter_name) COLLATE SQL_Latin1_General_CP1_CI_AS\n            AND counters.[object_name] COLLATE SQL_Latin1_General_CP1_CI_AS = RTRIM(dmv.[object_name]) COLLATE SQL_Latin1_General_CP1_CI_AS\n            AND (counters.[instance_name] IS NULL OR counters.[instance_name] COLLATE SQL_Latin1_General_CP1_CI_AS = RTRIM(dmv.[instance_name]) COLLATE SQL_Latin1_General_CP1_CI_AS)\n\n    /* Set the latencies and averages. We could do this with a CTE, but we're not ambitious today. */\n    UPDATE fNow\n    SET avg_stall_read_ms = ((fNow.io_stall_read_ms - fBase.io_stall_read_ms) / (fNow.num_of_reads - fBase.num_of_reads))\n    FROM #FileStats fNow\n    INNER JOIN #FileStats fBase ON fNow.DatabaseID = fBase.DatabaseID AND fNow.FileID = fBase.FileID AND fNow.SampleTime > fBase.SampleTime AND fNow.num_of_reads > fBase.num_of_reads AND fNow.io_stall_read_ms > fBase.io_stall_read_ms\n    WHERE (fNow.num_of_reads - fBase.num_of_reads) > 0\n\n    UPDATE fNow\n    SET avg_stall_write_ms = ((fNow.io_stall_write_ms - fBase.io_stall_write_ms) / (fNow.num_of_writes - fBase.num_of_writes))\n    FROM #FileStats fNow\n    INNER JOIN #FileStats fBase ON fNow.DatabaseID = fBase.DatabaseID AND fNow.FileID = fBase.FileID AND fNow.SampleTime > fBase.SampleTime AND fNow.num_of_writes > fBase.num_of_writes AND fNow.io_stall_write_ms > fBase.io_stall_write_ms\n    WHERE (fNow.num_of_writes - fBase.num_of_writes) > 0\n\n    UPDATE pNow\n        SET [value_delta] = pNow.cntr_value - pFirst.cntr_value,\n            [value_per_second] = ((1.0 * pNow.cntr_value - pFirst.cntr_value) / DATEDIFF(ss, pFirst.SampleTime, pNow.SampleTime))\n        FROM #PerfmonStats pNow\n            INNER JOIN #PerfmonStats pFirst ON pFirst.[object_name] = pNow.[object_name] AND pFirst.counter_name = pNow.counter_name AND (pFirst.instance_name = pNow.instance_name OR (pFirst.instance_name IS NULL AND pNow.instance_name IS NULL))\n                AND pNow.ID > pFirst.ID\n        WHERE  DATEDIFF(ss, pFirst.SampleTime, pNow.SampleTime) > 0;\n\n\n    /* If we're within 10 seconds of our projected finish time, do the plan cache analysis. */\n    IF DATEDIFF(ss, @FinishSampleTime, SYSDATETIME()) > 10 AND @CheckProcedureCache = 1\n        BEGIN\n\n            INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details)\n            VALUES (18, 210, 'Query Stats', 'Plan Cache Analysis Skipped', 'http://www.BrentOzar.com/go/topqueries',\n                'Due to excessive load, the plan cache analysis was skipped. To override this, use @ExpertMode = 1.')\n\n        END\n    ELSE IF @CheckProcedureCache = 1\n        BEGIN\n\n\n\t\tRAISERROR('@CheckProcedureCache = 1, capturing second pass of plan cache',10,1) WITH NOWAIT;\n\n        /* Populate #QueryStats. SQL 2005 doesn't have query hash or query plan hash. */\n\t\tIF @@VERSION LIKE 'Microsoft SQL Server 2005%'\n\t\t\tBEGIN\n\t\t\tIF @FilterPlansByDatabase IS NULL\n\t\t\t\tBEGIN\n\t\t\t\tSET @StringToExecute = N'INSERT INTO #QueryStats ([sql_handle], Pass, SampleTime, statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, query_hash, query_plan_hash, Points)\n\t\t\t\t\t\t\t\t\t\t\tSELECT [sql_handle], 2 AS Pass, SYSDATETIMEOFFSET(), statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, NULL AS query_hash, NULL AS query_plan_hash, 0\n\t\t\t\t\t\t\t\t\t\t\tFROM sys.dm_exec_query_stats qs\n\t\t\t\t\t\t\t\t\t\t\tWHERE qs.last_execution_time >= @StartSampleTimeText;';\n\t\t\t\tEND\n\t\t\tELSE\n\t\t\t\tBEGIN\n\t\t\t\tSET @StringToExecute = N'INSERT INTO #QueryStats ([sql_handle], Pass, SampleTime, statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, query_hash, query_plan_hash, Points)\n\t\t\t\t\t\t\t\t\t\t\tSELECT [sql_handle], 2 AS Pass, SYSDATETIMEOFFSET(), statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, NULL AS query_hash, NULL AS query_plan_hash, 0\n\t\t\t\t\t\t\t\t\t\t\tFROM sys.dm_exec_query_stats qs\n\t\t\t\t\t\t\t\t\t\t\t\tCROSS APPLY sys.dm_exec_plan_attributes(qs.plan_handle) AS attr\n\t\t\t\t\t\t\t\t\t\t\t\tINNER JOIN #FilterPlansByDatabase dbs ON CAST(attr.value AS INT) = dbs.DatabaseID\n\t\t\t\t\t\t\t\t\t\t\tWHERE qs.last_execution_time >= @StartSampleTimeText\n\t\t\t\t\t\t\t\t\t\t\t\tAND attr.attribute = ''dbid'';';\n\t\t\t\tEND\n\t\t\tEND\n\t\tELSE\n\t\t\tBEGIN\n\t\t\tIF @FilterPlansByDatabase IS NULL\n\t\t\t\tBEGIN\n\t\t\t\tSET @StringToExecute = N'INSERT INTO #QueryStats ([sql_handle], Pass, SampleTime, statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, query_hash, query_plan_hash, Points)\n\t\t\t\t\t\t\t\t\t\t\tSELECT [sql_handle], 2 AS Pass, SYSDATETIMEOFFSET(), statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, query_hash, query_plan_hash, 0\n\t\t\t\t\t\t\t\t\t\t\tFROM sys.dm_exec_query_stats qs\n\t\t\t\t\t\t\t\t\t\t\tWHERE qs.last_execution_time >= @StartSampleTimeText';\n\t\t\t\tEND\n\t\t\tELSE\n\t\t\t\tBEGIN\n\t\t\t\tSET @StringToExecute = N'INSERT INTO #QueryStats ([sql_handle], Pass, SampleTime, statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, query_hash, query_plan_hash, Points)\n\t\t\t\t\t\t\t\t\t\t\tSELECT [sql_handle], 2 AS Pass, SYSDATETIMEOFFSET(), statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, query_hash, query_plan_hash, 0\n\t\t\t\t\t\t\t\t\t\t\tFROM sys.dm_exec_query_stats qs\n\t\t\t\t\t\t\t\t\t\t\tCROSS APPLY sys.dm_exec_plan_attributes(qs.plan_handle) AS attr\n\t\t\t\t\t\t\t\t\t\t\tINNER JOIN #FilterPlansByDatabase dbs ON CAST(attr.value AS INT) = dbs.DatabaseID\n\t\t\t\t\t\t\t\t\t\t\tWHERE qs.last_execution_time >= @StartSampleTimeText\n\t\t\t\t\t\t\t\t\t\t\t\tAND attr.attribute = ''dbid'';';\n\t\t\t\tEND\n\t\t\tEND\n\t\t/* Old version pre-2016/06/13:\n        IF @@VERSION LIKE 'Microsoft SQL Server 2005%'\n            SET @StringToExecute = N'INSERT INTO #QueryStats ([sql_handle], Pass, SampleTime, statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, query_hash, query_plan_hash, Points)\n                                        SELECT [sql_handle], 2 AS Pass, SYSDATETIMEOFFSET(), statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, NULL AS query_hash, NULL AS query_plan_hash, 0\n                                        FROM sys.dm_exec_query_stats qs\n                                        WHERE qs.last_execution_time >= @StartSampleTimeText;';\n        ELSE\n            SET @StringToExecute = N'INSERT INTO #QueryStats ([sql_handle], Pass, SampleTime, statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, query_hash, query_plan_hash, Points)\n                                        SELECT [sql_handle], 2 AS Pass, SYSDATETIMEOFFSET(), statement_start_offset, statement_end_offset, plan_generation_num, plan_handle, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time, query_hash, query_plan_hash, 0\n                                        FROM sys.dm_exec_query_stats qs\n                                        WHERE qs.last_execution_time >= @StartSampleTimeText;';\n\t\t*/\n        SET @ParmDefinitions = N'@StartSampleTimeText NVARCHAR(100)';\n        SET @Parm1 = CONVERT(NVARCHAR(100), CAST(@StartSampleTime AS DATETIME), 127);\n\n        EXECUTE sp_executesql @StringToExecute, @ParmDefinitions, @StartSampleTimeText = @Parm1;\n\n\t\tRAISERROR('@CheckProcedureCache = 1, totaling up plan cache metrics',10,1) WITH NOWAIT;\n\n        /* Get the totals for the entire plan cache */\n        INSERT INTO #QueryStats (Pass, SampleTime, execution_count, total_worker_time, total_physical_reads, total_logical_writes, total_logical_reads, total_clr_time, total_elapsed_time, creation_time)\n        SELECT 0 AS Pass, SYSDATETIMEOFFSET(), SUM(execution_count), SUM(total_worker_time), SUM(total_physical_reads), SUM(total_logical_writes), SUM(total_logical_reads), SUM(total_clr_time), SUM(total_elapsed_time), MIN(creation_time)\n            FROM sys.dm_exec_query_stats qs;\n\n\n\t\tRAISERROR('@CheckProcedureCache = 1, so analyzing execution plans',10,1) WITH NOWAIT;\n        /*\n        Pick the most resource-intensive queries to review. Update the Points field\n        in #QueryStats - if a query is in the top 10 for logical reads, CPU time,\n        duration, or execution, add 1 to its points.\n        */\n        WITH qsTop AS (\n        SELECT TOP 10 qsNow.ID\n        FROM #QueryStats qsNow\n          INNER JOIN #QueryStats qsFirst ON qsNow.[sql_handle] = qsFirst.[sql_handle] AND qsNow.statement_start_offset = qsFirst.statement_start_offset AND qsNow.statement_end_offset = qsFirst.statement_end_offset AND qsNow.plan_generation_num = qsFirst.plan_generation_num AND qsNow.plan_handle = qsFirst.plan_handle AND qsFirst.Pass = 1\n        WHERE qsNow.total_elapsed_time > qsFirst.total_elapsed_time\n            AND qsNow.Pass = 2\n            AND qsNow.total_elapsed_time - qsFirst.total_elapsed_time > 1000000 /* Only queries with over 1 second of runtime */\n        ORDER BY (qsNow.total_elapsed_time - COALESCE(qsFirst.total_elapsed_time, 0)) DESC)\n        UPDATE #QueryStats\n            SET Points = Points + 1\n            FROM #QueryStats qs\n            INNER JOIN qsTop ON qs.ID = qsTop.ID;\n\n        WITH qsTop AS (\n        SELECT TOP 10 qsNow.ID\n        FROM #QueryStats qsNow\n          INNER JOIN #QueryStats qsFirst ON qsNow.[sql_handle] = qsFirst.[sql_handle] AND qsNow.statement_start_offset = qsFirst.statement_start_offset AND qsNow.statement_end_offset = qsFirst.statement_end_offset AND qsNow.plan_generation_num = qsFirst.plan_generation_num AND qsNow.plan_handle = qsFirst.plan_handle AND qsFirst.Pass = 1\n        WHERE qsNow.total_logical_reads > qsFirst.total_logical_reads\n            AND qsNow.Pass = 2\n            AND qsNow.total_logical_reads - qsFirst.total_logical_reads > 1000 /* Only queries with over 1000 reads */\n        ORDER BY (qsNow.total_logical_reads - COALESCE(qsFirst.total_logical_reads, 0)) DESC)\n        UPDATE #QueryStats\n            SET Points = Points + 1\n            FROM #QueryStats qs\n            INNER JOIN qsTop ON qs.ID = qsTop.ID;\n\n        WITH qsTop AS (\n        SELECT TOP 10 qsNow.ID\n        FROM #QueryStats qsNow\n          INNER JOIN #QueryStats qsFirst ON qsNow.[sql_handle] = qsFirst.[sql_handle] AND qsNow.statement_start_offset = qsFirst.statement_start_offset AND qsNow.statement_end_offset = qsFirst.statement_end_offset AND qsNow.plan_generation_num = qsFirst.plan_generation_num AND qsNow.plan_handle = qsFirst.plan_handle AND qsFirst.Pass = 1\n        WHERE qsNow.total_worker_time > qsFirst.total_worker_time\n            AND qsNow.Pass = 2\n            AND qsNow.total_worker_time - qsFirst.total_worker_time > 1000000 /* Only queries with over 1 second of worker time */\n        ORDER BY (qsNow.total_worker_time - COALESCE(qsFirst.total_worker_time, 0)) DESC)\n        UPDATE #QueryStats\n            SET Points = Points + 1\n            FROM #QueryStats qs\n            INNER JOIN qsTop ON qs.ID = qsTop.ID;\n\n        WITH qsTop AS (\n        SELECT TOP 10 qsNow.ID\n        FROM #QueryStats qsNow\n          INNER JOIN #QueryStats qsFirst ON qsNow.[sql_handle] = qsFirst.[sql_handle] AND qsNow.statement_start_offset = qsFirst.statement_start_offset AND qsNow.statement_end_offset = qsFirst.statement_end_offset AND qsNow.plan_generation_num = qsFirst.plan_generation_num AND qsNow.plan_handle = qsFirst.plan_handle AND qsFirst.Pass = 1\n        WHERE qsNow.execution_count > qsFirst.execution_count\n            AND qsNow.Pass = 2\n            AND (qsNow.total_elapsed_time - qsFirst.total_elapsed_time > 1000000 /* Only queries with over 1 second of runtime */\n                OR qsNow.total_logical_reads - qsFirst.total_logical_reads > 1000 /* Only queries with over 1000 reads */\n                OR qsNow.total_worker_time - qsFirst.total_worker_time > 1000000 /* Only queries with over 1 second of worker time */)\n        ORDER BY (qsNow.execution_count - COALESCE(qsFirst.execution_count, 0)) DESC)\n        UPDATE #QueryStats\n            SET Points = Points + 1\n            FROM #QueryStats qs\n            INNER JOIN qsTop ON qs.ID = qsTop.ID;\n\n        /* Query Stats - CheckID 17 - Most Resource-Intensive Queries */\n        INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt, QueryPlan, QueryText, QueryStatsNowID, QueryStatsFirstID, PlanHandle)\n        SELECT 17, 210, 'Query Stats', 'Most Resource-Intensive Queries', 'http://www.BrentOzar.com/go/topqueries',\n            'Query stats during the sample:' + @LineFeed +\n            'Executions: ' + CAST(qsNow.execution_count - (COALESCE(qsFirst.execution_count, 0)) AS NVARCHAR(100)) + @LineFeed +\n            'Elapsed Time: ' + CAST(qsNow.total_elapsed_time - (COALESCE(qsFirst.total_elapsed_time, 0)) AS NVARCHAR(100)) + @LineFeed +\n            'CPU Time: ' + CAST(qsNow.total_worker_time - (COALESCE(qsFirst.total_worker_time, 0)) AS NVARCHAR(100)) + @LineFeed +\n            'Logical Reads: ' + CAST(qsNow.total_logical_reads - (COALESCE(qsFirst.total_logical_reads, 0)) AS NVARCHAR(100)) + @LineFeed +\n            'Logical Writes: ' + CAST(qsNow.total_logical_writes - (COALESCE(qsFirst.total_logical_writes, 0)) AS NVARCHAR(100)) + @LineFeed +\n            'CLR Time: ' + CAST(qsNow.total_clr_time - (COALESCE(qsFirst.total_clr_time, 0)) AS NVARCHAR(100)) + @LineFeed +\n            @LineFeed + @LineFeed + 'Query stats since ' + CONVERT(NVARCHAR(100), qsNow.creation_time ,121) + @LineFeed +\n            'Executions: ' + CAST(qsNow.execution_count AS NVARCHAR(100)) +\n                    CASE qsTotal.execution_count WHEN 0 THEN '' ELSE (' - Percent of Server Total: ' + CAST(CAST(100.0 * qsNow.execution_count / qsTotal.execution_count AS DECIMAL(6,2)) AS NVARCHAR(100)) + '%') END + @LineFeed +\n            'Elapsed Time: ' + CAST(qsNow.total_elapsed_time AS NVARCHAR(100)) +\n                    CASE qsTotal.total_elapsed_time WHEN 0 THEN '' ELSE (' - Percent of Server Total: ' + CAST(CAST(100.0 * qsNow.total_elapsed_time / qsTotal.total_elapsed_time AS DECIMAL(6,2)) AS NVARCHAR(100)) + '%') END + @LineFeed +\n            'CPU Time: ' + CAST(qsNow.total_worker_time AS NVARCHAR(100)) +\n                    CASE qsTotal.total_worker_time WHEN 0 THEN '' ELSE (' - Percent of Server Total: ' + CAST(CAST(100.0 * qsNow.total_worker_time / qsTotal.total_worker_time AS DECIMAL(6,2)) AS NVARCHAR(100)) + '%') END + @LineFeed +\n            'Logical Reads: ' + CAST(qsNow.total_logical_reads AS NVARCHAR(100)) +\n                    CASE qsTotal.total_logical_reads WHEN 0 THEN '' ELSE (' - Percent of Server Total: ' + CAST(CAST(100.0 * qsNow.total_logical_reads / qsTotal.total_logical_reads AS DECIMAL(6,2)) AS NVARCHAR(100)) + '%') END + @LineFeed +\n            'Logical Writes: ' + CAST(qsNow.total_logical_writes AS NVARCHAR(100)) +\n                    CASE qsTotal.total_logical_writes WHEN 0 THEN '' ELSE (' - Percent of Server Total: ' + CAST(CAST(100.0 * qsNow.total_logical_writes / qsTotal.total_logical_writes AS DECIMAL(6,2)) AS NVARCHAR(100)) + '%') END + @LineFeed +\n            'CLR Time: ' + CAST(qsNow.total_clr_time AS NVARCHAR(100)) +\n                    CASE qsTotal.total_clr_time WHEN 0 THEN '' ELSE (' - Percent of Server Total: ' + CAST(CAST(100.0 * qsNow.total_clr_time / qsTotal.total_clr_time AS DECIMAL(6,2)) AS NVARCHAR(100)) + '%') END + @LineFeed +\n            --@LineFeed + @LineFeed + 'Query hash: ' + CAST(qsNow.query_hash AS NVARCHAR(100)) + @LineFeed +\n            --@LineFeed + @LineFeed + 'Query plan hash: ' + CAST(qsNow.query_plan_hash AS NVARCHAR(100)) +\n            @LineFeed AS Details,\n            'See the URL for tuning tips on why this query may be consuming resources.' AS HowToStopIt,\n            qp.query_plan,\n            QueryText = SUBSTRING(st.text,\n                 (qsNow.statement_start_offset / 2) + 1,\n                 ((CASE qsNow.statement_end_offset\n                   WHEN -1 THEN DATALENGTH(st.text)\n                   ELSE qsNow.statement_end_offset\n                   END - qsNow.statement_start_offset) / 2) + 1),\n            qsNow.ID AS QueryStatsNowID,\n            qsFirst.ID AS QueryStatsFirstID,\n            qsNow.plan_handle AS PlanHandle\n            FROM #QueryStats qsNow\n                INNER JOIN #QueryStats qsTotal ON qsTotal.Pass = 0\n                LEFT OUTER JOIN #QueryStats qsFirst ON qsNow.[sql_handle] = qsFirst.[sql_handle] AND qsNow.statement_start_offset = qsFirst.statement_start_offset AND qsNow.statement_end_offset = qsFirst.statement_end_offset AND qsNow.plan_generation_num = qsFirst.plan_generation_num AND qsNow.plan_handle = qsFirst.plan_handle AND qsFirst.Pass = 1\n                CROSS APPLY sys.dm_exec_sql_text(qsNow.sql_handle) AS st\n                CROSS APPLY sys.dm_exec_query_plan(qsNow.plan_handle) AS qp\n            WHERE qsNow.Points > 0 AND st.text IS NOT NULL AND qp.query_plan IS NOT NULL\n\n            UPDATE #BlitzFirstResults\n                SET DatabaseID = CAST(attr.value AS INT),\n                DatabaseName = DB_NAME(CAST(attr.value AS INT))\n            FROM #BlitzFirstResults\n                CROSS APPLY sys.dm_exec_plan_attributes(#BlitzFirstResults.PlanHandle) AS attr\n            WHERE attr.attribute = 'dbid'\n\n\n        END /* IF DATEDIFF(ss, @FinishSampleTime, SYSDATETIMEOFFSET()) > 10 AND @CheckProcedureCache = 1 */\n\n\n\tRAISERROR('Analyzing changes between first and second passes of DMVs',10,1) WITH NOWAIT;\n\n    /* Wait Stats - CheckID 6 */\n    /* Compare the current wait stats to the sample we took at the start, and insert the top 10 waits. */\n    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt, DetailsInt)\n    SELECT TOP 10 6 AS CheckID,\n        200 AS Priority,\n        'Wait Stats' AS FindingGroup,\n        wNow.wait_type AS Finding, /* IF YOU CHANGE THIS, STUFF WILL BREAK. Other checks look for wait type names in the Finding field. See checks 11, 12 as example. */\n        N'http://www.brentozar.com/sql/wait-stats/#' + wNow.wait_type AS URL,\n        'For ' + CAST(((wNow.wait_time_ms - COALESCE(wBase.wait_time_ms,0)) / 1000) AS NVARCHAR(100)) + ' seconds over the last ' + CASE @Seconds WHEN 0 THEN (CAST(DATEDIFF(dd,@StartSampleTime,@FinishSampleTime) AS NVARCHAR(10)) + ' days') ELSE (CAST(@Seconds AS NVARCHAR(10)) + ' seconds') END + ', SQL Server was waiting on this particular bottleneck.' + @LineFeed + @LineFeed AS Details,\n        'See the URL for more details on how to mitigate this wait type.' AS HowToStopIt,\n        ((wNow.wait_time_ms - COALESCE(wBase.wait_time_ms,0)) / 1000) AS DetailsInt\n    FROM #WaitStats wNow\n    LEFT OUTER JOIN #WaitStats wBase ON wNow.wait_type = wBase.wait_type AND wNow.SampleTime > wBase.SampleTime\n    WHERE wNow.wait_time_ms > (wBase.wait_time_ms + (.5 * (DATEDIFF(ss,@StartSampleTime,@FinishSampleTime)) * 1000)) /* Only look for things we've actually waited on for half of the time or more */\n    ORDER BY (wNow.wait_time_ms - COALESCE(wBase.wait_time_ms,0)) DESC;\n\n    /* Server Performance - Poison Wait Detected - CheckID 30 */\n    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt, DetailsInt)\n    SELECT 30 AS CheckID,\n        10 AS Priority,\n        'Server Performance' AS FindingGroup,\n        'Poison Wait Detected: ' + wNow.wait_type AS Finding,\n        N'http://www.brentozar.com/go/poison/#' + wNow.wait_type AS URL,\n        'For ' + CAST(((wNow.wait_time_ms - COALESCE(wBase.wait_time_ms,0)) / 1000) AS NVARCHAR(100)) + ' seconds over the last ' + CASE @Seconds WHEN 0 THEN (CAST(DATEDIFF(dd,@StartSampleTime,@FinishSampleTime) AS NVARCHAR(10)) + ' days') ELSE (CAST(@Seconds AS NVARCHAR(10)) + ' seconds') END + ', SQL Server was waiting on this particular bottleneck.' + @LineFeed + @LineFeed AS Details,\n        'See the URL for more details on how to mitigate this wait type.' AS HowToStopIt,\n        ((wNow.wait_time_ms - COALESCE(wBase.wait_time_ms,0)) / 1000) AS DetailsInt\n    FROM #WaitStats wNow\n    LEFT OUTER JOIN #WaitStats wBase ON wNow.wait_type = wBase.wait_type AND wNow.SampleTime > wBase.SampleTime\n    WHERE wNow.wait_type IN ('IO_QUEUE_LIMIT', 'IO_RETRY', 'LOG_RATE_GOVERNOR', 'PREEMPTIVE_DEBUG', 'RESMGR_THROTTLED', 'RESOURCE_SEMAPHORE', 'RESOURCE_SEMAPHORE_QUERY_COMPILE','SE_REPL_CATCHUP_THROTTLE','SE_REPL_COMMIT_ACK','SE_REPL_COMMIT_TURN','SE_REPL_ROLLBACK_ACK','SE_REPL_SLOW_SECONDARY_THROTTLE','THREADPOOL') AND wNow.wait_time_ms > wBase.wait_time_ms;\n\n\n    /* Server Performance - Slow Data File Reads - CheckID 11 */\n\tIF EXISTS (SELECT * FROM #BlitzFirstResults WHERE Finding LIKE 'PAGEIOLATCH%')\n\tBEGIN\n\t\tINSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt, DatabaseID, DatabaseName)\n\t\tSELECT TOP 10 11 AS CheckID,\n\t\t\t50 AS Priority,\n\t\t\t'Server Performance' AS FindingGroup,\n\t\t\t'Slow Data File Reads' AS Finding,\n\t\t\t'http://www.BrentOzar.com/go/slow/' AS URL,\n\t\t\t'Your server is experiencing PAGEIOLATCH% waits due to slow data file reads. This file is one of the reasons why.' + @LineFeed\n\t\t\t\t+ 'File: ' + fNow.PhysicalName + @LineFeed\n\t\t\t\t+ 'Number of reads during the sample: ' + CAST((fNow.num_of_reads - fBase.num_of_reads) AS NVARCHAR(20)) + @LineFeed\n\t\t\t\t+ 'Seconds spent waiting on storage for these reads: ' + CAST(((fNow.io_stall_read_ms - fBase.io_stall_read_ms) / 1000.0) AS NVARCHAR(20)) + @LineFeed\n\t\t\t\t+ 'Average read latency during the sample: ' + CAST(((fNow.io_stall_read_ms - fBase.io_stall_read_ms) / (fNow.num_of_reads - fBase.num_of_reads) ) AS NVARCHAR(20)) + ' milliseconds' + @LineFeed\n\t\t\t\t+ 'Microsoft guidance for data file read speed: 20ms or less.' + @LineFeed + @LineFeed AS Details,\n\t\t\t'See the URL for more details on how to mitigate this wait type.' AS HowToStopIt,\n\t\t\tfNow.DatabaseID,\n\t\t\tfNow.DatabaseName\n\t\tFROM #FileStats fNow\n\t\tINNER JOIN #FileStats fBase ON fNow.DatabaseID = fBase.DatabaseID AND fNow.FileID = fBase.FileID AND fNow.SampleTime > fBase.SampleTime AND fNow.num_of_reads > fBase.num_of_reads AND fNow.io_stall_read_ms > (fBase.io_stall_read_ms + 1000)\n\t\tWHERE (fNow.io_stall_read_ms - fBase.io_stall_read_ms) / (fNow.num_of_reads - fBase.num_of_reads) >= @FileLatencyThresholdMS\n\t\t\tAND fNow.TypeDesc = 'ROWS'\n\t\tORDER BY (fNow.io_stall_read_ms - fBase.io_stall_read_ms) / (fNow.num_of_reads - fBase.num_of_reads) DESC;\n\tEND\t\n\n    /* Server Performance - Slow Log File Writes - CheckID 12 */\n\tIF EXISTS (SELECT * FROM #BlitzFirstResults WHERE Finding LIKE 'WRITELOG%')\n\tBEGIN\n\t\tINSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt, DatabaseID, DatabaseName)\n\t\tSELECT TOP 10 12 AS CheckID,\n\t\t\t50 AS Priority,\n\t\t\t'Server Performance' AS FindingGroup,\n\t\t\t'Slow Log File Writes' AS Finding,\n\t\t\t'http://www.BrentOzar.com/go/slow/' AS URL,\n\t\t\t'Your server is experiencing WRITELOG waits due to slow log file writes. This file is one of the reasons why.' + @LineFeed\n\t\t\t\t+ 'File: ' + fNow.PhysicalName + @LineFeed\n\t\t\t\t+ 'Number of writes during the sample: ' + CAST((fNow.num_of_writes - fBase.num_of_writes) AS NVARCHAR(20)) + @LineFeed\n\t\t\t\t+ 'Seconds spent waiting on storage for these writes: ' + CAST(((fNow.io_stall_write_ms - fBase.io_stall_write_ms) / 1000.0) AS NVARCHAR(20)) + @LineFeed\n\t\t\t\t+ 'Average write latency during the sample: ' + CAST(((fNow.io_stall_write_ms - fBase.io_stall_write_ms) / (fNow.num_of_writes - fBase.num_of_writes) ) AS NVARCHAR(20)) + ' milliseconds' + @LineFeed\n\t\t\t\t+ 'Microsoft guidance for log file write speed: 3ms or less.' + @LineFeed + @LineFeed AS Details,\n\t\t\t'See the URL for more details on how to mitigate this wait type.' AS HowToStopIt,\n\t\t\tfNow.DatabaseID,\n\t\t\tfNow.DatabaseName\n\t\tFROM #FileStats fNow\n\t\tINNER JOIN #FileStats fBase ON fNow.DatabaseID = fBase.DatabaseID AND fNow.FileID = fBase.FileID AND fNow.SampleTime > fBase.SampleTime AND fNow.num_of_writes > fBase.num_of_writes AND fNow.io_stall_write_ms > (fBase.io_stall_write_ms + 1000)\n\t\tWHERE (fNow.io_stall_write_ms - fBase.io_stall_write_ms) / (fNow.num_of_writes - fBase.num_of_writes) >= @FileLatencyThresholdMS\n\t\t\tAND fNow.TypeDesc = 'LOG'\n\t\tORDER BY (fNow.io_stall_write_ms - fBase.io_stall_write_ms) / (fNow.num_of_writes - fBase.num_of_writes) DESC;\n\tEND\n\n\n    /* SQL Server Internal Maintenance - Log File Growing - CheckID 13 */\n    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt)\n    SELECT 13 AS CheckID,\n        1 AS Priority,\n        'SQL Server Internal Maintenance' AS FindingGroup,\n        'Log File Growing' AS Finding,\n        'http://www.BrentOzar.com/askbrent/file-growing/' AS URL,\n        'Number of growths during the sample: ' + CAST(ps.value_delta AS NVARCHAR(20)) + @LineFeed\n            + 'Determined by sampling Perfmon counter ' + ps.object_name + ' - ' + ps.counter_name + @LineFeed AS Details,\n        'Pre-grow data and log files during maintenance windows so that they do not grow during production loads. See the URL for more details.'  AS HowToStopIt\n    FROM #PerfmonStats ps\n    WHERE ps.Pass = 2\n        AND object_name = @ServiceName + ':Databases'\n        AND counter_name = 'Log Growths'\n        AND value_delta > 0\n\n\n    /* SQL Server Internal Maintenance - Log File Shrinking - CheckID 14 */\n    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt)\n    SELECT 14 AS CheckID,\n        1 AS Priority,\n        'SQL Server Internal Maintenance' AS FindingGroup,\n        'Log File Shrinking' AS Finding,\n        'http://www.BrentOzar.com/askbrent/file-shrinking/' AS URL,\n        'Number of shrinks during the sample: ' + CAST(ps.value_delta AS NVARCHAR(20)) + @LineFeed\n            + 'Determined by sampling Perfmon counter ' + ps.object_name + ' - ' + ps.counter_name + @LineFeed AS Details,\n        'Pre-grow data and log files during maintenance windows so that they do not grow during production loads. See the URL for more details.' AS HowToStopIt\n    FROM #PerfmonStats ps\n    WHERE ps.Pass = 2\n        AND object_name = @ServiceName + ':Databases'\n        AND counter_name = 'Log Shrinks'\n        AND value_delta > 0\n\n    /* Query Problems - Compilations/Sec High - CheckID 15 */\n    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt)\n    SELECT 15 AS CheckID,\n        50 AS Priority,\n        'Query Problems' AS FindingGroup,\n        'Compilations/Sec High' AS Finding,\n        'http://www.BrentOzar.com/askbrent/compilations/' AS URL,\n        'Number of batch requests during the sample: ' + CAST(ps.value_delta AS NVARCHAR(20)) + @LineFeed\n            + 'Number of compilations during the sample: ' + CAST(psComp.value_delta AS NVARCHAR(20)) + @LineFeed\n            + 'For OLTP environments, Microsoft recommends that 90% of batch requests should hit the plan cache, and not be compiled from scratch. We are exceeding that threshold.' + @LineFeed AS Details,\n        'To find the queries that are compiling, start with:' + @LineFeed\n            + 'sp_BlitzCache @SortOrder = ''recent compilations''' + @LineFeed\n            + 'If dynamic SQL or non-parameterized strings are involved, consider enabling Forced Parameterization. See the URL for more details.' AS HowToStopIt\n    FROM #PerfmonStats ps\n        INNER JOIN #PerfmonStats psComp ON psComp.Pass = 2 AND psComp.object_name = @ServiceName + ':SQL Statistics' AND psComp.counter_name = 'SQL Compilations/sec' AND psComp.value_delta > 0\n    WHERE ps.Pass = 2\n        AND ps.object_name = @ServiceName + ':SQL Statistics'\n        AND ps.counter_name = 'Batch Requests/sec'\n        AND ps.value_delta > (1000 * @Seconds) /* Ignore servers sitting idle */\n        AND (psComp.value_delta * 10) > ps.value_delta /* Compilations are more than 10% of batch requests per second */\n\n    /* Query Problems - Re-Compilations/Sec High - CheckID 16 */\n    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt)\n    SELECT 16 AS CheckID,\n        50 AS Priority,\n        'Query Problems' AS FindingGroup,\n        'Re-Compilations/Sec High' AS Finding,\n        'http://www.BrentOzar.com/askbrent/recompilations/' AS URL,\n        'Number of batch requests during the sample: ' + CAST(ps.value_delta AS NVARCHAR(20)) + @LineFeed\n            + 'Number of recompilations during the sample: ' + CAST(psComp.value_delta AS NVARCHAR(20)) + @LineFeed\n            + 'More than 10% of our queries are being recompiled. This is typically due to statistics changing on objects.' + @LineFeed AS Details,\n        'To find the queries that are being forced to recompile, start with:' + @LineFeed\n            + 'sp_BlitzCache @SortOrder = ''recent compilations''' + @LineFeed\n            + 'Examine those plans to find out which objects are changing so quickly that they hit the stats update threshold. See the URL for more details.' AS HowToStopIt\n    FROM #PerfmonStats ps\n        INNER JOIN #PerfmonStats psComp ON psComp.Pass = 2 AND psComp.object_name = @ServiceName + ':SQL Statistics' AND psComp.counter_name = 'SQL Re-Compilations/sec' AND psComp.value_delta > 0\n    WHERE ps.Pass = 2\n        AND ps.object_name = @ServiceName + ':SQL Statistics'\n        AND ps.counter_name = 'Batch Requests/sec'\n        AND ps.value_delta > (1000 * @Seconds) /* Ignore servers sitting idle */\n        AND (psComp.value_delta * 10) > ps.value_delta /* Recompilations are more than 10% of batch requests per second */\n\n    /* Table Problems - Forwarded Fetches/Sec High - CheckID 29 */\n    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt)\n    SELECT 29 AS CheckID,\n        40 AS Priority,\n        'Table Problems' AS FindingGroup,\n        'Forwarded Fetches/Sec High' AS Finding,\n        'https://BrentOzar.com/go/fetch/' AS URL,\n        CAST(ps.value_delta AS NVARCHAR(20)) + ' Forwarded Records (from SQLServer:Access Methods counter)' + @LineFeed\n            + 'Check your heaps: they need to be rebuilt, or they need a clustered index applied.' + @LineFeed AS Details,\n        'Rebuild your heaps. If you use Ola Hallengren maintenance scripts, those do not rebuild heaps by default: https://www.brentozar.com/archive/2016/07/fix-forwarded-records/' AS HowToStopIt\n    FROM #PerfmonStats ps\n        INNER JOIN #PerfmonStats psComp ON psComp.Pass = 2 AND psComp.object_name = @ServiceName + ':Access Methods' AND psComp.counter_name = 'Forwarded Records/sec' AND psComp.value_delta > 100\n    WHERE ps.Pass = 2\n        AND ps.object_name = @ServiceName + ':Access Methods'\n        AND ps.counter_name = 'Forwarded Records/sec'\n        AND ps.value_delta > (100 * @Seconds) /* Ignore servers sitting idle */\n\n\n    /* In-Memory OLTP - Garbage Collection in Progress - CheckID 31 */\n    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt)\n    SELECT 31 AS CheckID,\n        50 AS Priority,\n        'In-Memory OLTP' AS FindingGroup,\n        'Garbage Collection in Progress' AS Finding,\n        'https://BrentOzar.com/go/garbage/' AS URL,\n        CAST(ps.value_delta AS NVARCHAR(50)) + ' rows processed (from SQL Server YYYY XTP Garbage Collection:Rows processed/sec counter)'  + @LineFeed \n            + 'This can happen due to memory pressure (causing In-Memory OLTP to shrink its footprint) or' + @LineFeed\n            + 'due to transactional workloads that constantly insert/delete data.' AS Details,\n        'Sadly, you cannot choose when garbage collection occurs. This is one of the many gotchas of Hekaton. Learn more: http://nedotter.com/archive/2016/04/row-version-lifecycle-for-in-memory-oltp/' AS HowToStopIt\n    FROM #PerfmonStats ps\n        INNER JOIN #PerfmonStats psComp ON psComp.Pass = 2 AND psComp.object_name LIKE '%XTP Garbage Collection' AND psComp.counter_name = 'Rows processed/sec' AND psComp.value_delta > 100\n    WHERE ps.Pass = 2\n        AND ps.object_name LIKE '%XTP Garbage Collection'\n        AND ps.counter_name = 'Rows processed/sec'\n        AND ps.value_delta > (100 * @Seconds) /* Ignore servers sitting idle */\n\n    /* In-Memory OLTP - Transactions Aborted - CheckID 32 */\n    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt)\n    SELECT 32 AS CheckID,\n        100 AS Priority,\n        'In-Memory OLTP' AS FindingGroup,\n        'Transactions Aborted' AS Finding,\n        'https://BrentOzar.com/go/aborted/' AS URL,\n        CAST(ps.value_delta AS NVARCHAR(50)) + ' transactions aborted (from SQL Server YYYY XTP Transactions:Transactions aborted/sec counter)'  + @LineFeed \n            + 'This may indicate that data is changing, or causing folks to retry their transactions, thereby increasing load.' AS Details,\n        'Dig into your In-Memory OLTP transactions to figure out which ones are failing and being retried.' AS HowToStopIt\n    FROM #PerfmonStats ps\n        INNER JOIN #PerfmonStats psComp ON psComp.Pass = 2 AND psComp.object_name LIKE '%XTP Transactions' AND psComp.counter_name = 'Transactions aborted/sec' AND psComp.value_delta > 100\n    WHERE ps.Pass = 2\n        AND ps.object_name LIKE '%XTP Transactions'\n        AND ps.counter_name = 'Transactions aborted/sec'\n        AND ps.value_delta > (10 * @Seconds) /* Ignore servers sitting idle */\n\n    /* Query Problems - Suboptimal Plans/Sec High - CheckID 33 */\n    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt)\n    SELECT 32 AS CheckID,\n        100 AS Priority,\n        'Query Problems' AS FindingGroup,\n        'Suboptimal Plans/Sec High' AS Finding,\n        'https://BrentOzar.com/go/suboptimal/' AS URL,\n        CAST(ps.value_delta AS NVARCHAR(50)) + ' plans reported in the ' + CAST(ps.instance_name AS NVARCHAR(100)) + ' workload group (from Workload GroupStats:Suboptimal plans/sec counter)'  + @LineFeed \n            + 'Even if you are not using Resource Governor, it still tracks information about user queries, memory grants, etc.' AS Details,\n        'Check out sp_BlitzCache to get more information about recent queries, or try sp_BlitzWho to see currently running queries.' AS HowToStopIt\n    FROM #PerfmonStats ps\n        INNER JOIN #PerfmonStats psComp ON psComp.Pass = 2 AND psComp.object_name = @ServiceName + ':Workload GroupStats' AND psComp.counter_name = 'Suboptimal plans/sec' AND psComp.value_delta > 100\n    WHERE ps.Pass = 2\n        AND ps.object_name = @ServiceName + ':Workload GroupStats' \n        AND ps.counter_name = 'Suboptimal plans/sec'\n        AND ps.value_delta > (10 * @Seconds) /* Ignore servers sitting idle */\n\n\n\n    /* Server Info - Batch Requests per Sec - CheckID 19 */\n    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, DetailsInt)\n    SELECT 19 AS CheckID,\n        250 AS Priority,\n        'Server Info' AS FindingGroup,\n        'Batch Requests per Sec' AS Finding,\n        'http://www.BrentOzar.com/go/measure' AS URL,\n        CAST(ps.value_delta / (DATEDIFF(ss, ps1.SampleTime, ps.SampleTime)) AS NVARCHAR(20)) AS Details,\n        ps.value_delta / (DATEDIFF(ss, ps1.SampleTime, ps.SampleTime)) AS DetailsInt\n    FROM #PerfmonStats ps\n        INNER JOIN #PerfmonStats ps1 ON ps.object_name = ps1.object_name AND ps.counter_name = ps1.counter_name AND ps1.Pass = 1\n    WHERE ps.Pass = 2\n        AND ps.object_name = @ServiceName + ':SQL Statistics'\n        AND ps.counter_name = 'Batch Requests/sec';\n\n\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':SQL Statistics','SQL Compilations/sec', NULL)\n        INSERT INTO #PerfmonCounters ([object_name],[counter_name],[instance_name]) VALUES (@ServiceName + ':SQL Statistics','SQL Re-Compilations/sec', NULL)\n\n    /* Server Info - SQL Compilations/sec - CheckID 25 */\n    IF @ExpertMode = 1\n    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, DetailsInt)\n    SELECT 25 AS CheckID,\n        250 AS Priority,\n        'Server Info' AS FindingGroup,\n        'SQL Compilations per Sec' AS Finding,\n        'http://www.BrentOzar.com/go/measure' AS URL,\n        CAST(ps.value_delta / (DATEDIFF(ss, ps1.SampleTime, ps.SampleTime)) AS NVARCHAR(20)) AS Details,\n        ps.value_delta / (DATEDIFF(ss, ps1.SampleTime, ps.SampleTime)) AS DetailsInt\n    FROM #PerfmonStats ps\n        INNER JOIN #PerfmonStats ps1 ON ps.object_name = ps1.object_name AND ps.counter_name = ps1.counter_name AND ps1.Pass = 1\n    WHERE ps.Pass = 2\n        AND ps.object_name = @ServiceName + ':SQL Statistics'\n        AND ps.counter_name = 'SQL Compilations/sec';\n\n    /* Server Info - SQL Re-Compilations/sec - CheckID 26 */\n    IF @ExpertMode = 1\n    INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, DetailsInt)\n    SELECT 26 AS CheckID,\n        250 AS Priority,\n        'Server Info' AS FindingGroup,\n        'SQL Re-Compilations per Sec' AS Finding,\n        'http://www.BrentOzar.com/go/measure' AS URL,\n        CAST(ps.value_delta / (DATEDIFF(ss, ps1.SampleTime, ps.SampleTime)) AS NVARCHAR(20)) AS Details,\n        ps.value_delta / (DATEDIFF(ss, ps1.SampleTime, ps.SampleTime)) AS DetailsInt\n    FROM #PerfmonStats ps\n        INNER JOIN #PerfmonStats ps1 ON ps.object_name = ps1.object_name AND ps.counter_name = ps1.counter_name AND ps1.Pass = 1\n    WHERE ps.Pass = 2\n        AND ps.object_name = @ServiceName + ':SQL Statistics'\n        AND ps.counter_name = 'SQL Re-Compilations/sec';\n\n    /* Server Info - Wait Time per Core per Sec - CheckID 20 */\n    IF @Seconds > 0\n    BEGIN\n        WITH waits1(SampleTime, waits_ms) AS (SELECT SampleTime, SUM(ws1.wait_time_ms) FROM #WaitStats ws1 WHERE ws1.Pass = 1 GROUP BY SampleTime),\n        waits2(SampleTime, waits_ms) AS (SELECT SampleTime, SUM(ws2.wait_time_ms) FROM #WaitStats ws2 WHERE ws2.Pass = 2 GROUP BY SampleTime),\n        cores(cpu_count) AS (SELECT SUM(1) FROM sys.dm_os_schedulers WHERE status = 'VISIBLE ONLINE' AND is_online = 1)\n        INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, URL, Details, DetailsInt)\n        SELECT 19 AS CheckID,\n            250 AS Priority,\n            'Server Info' AS FindingGroup,\n            'Wait Time per Core per Sec' AS Finding,\n            'http://www.BrentOzar.com/go/measure' AS URL,\n            CAST((waits2.waits_ms - waits1.waits_ms) / 1000 / i.cpu_count / DATEDIFF(ss, waits1.SampleTime, waits2.SampleTime) AS NVARCHAR(20)) AS Details,\n            (waits2.waits_ms - waits1.waits_ms) / 1000 / i.cpu_count / DATEDIFF(ss, waits1.SampleTime, waits2.SampleTime) AS DetailsInt\n        FROM cores i\n          CROSS JOIN waits1\n          CROSS JOIN waits2;\n    END\n\n    /* Server Performance - High CPU Utilization CheckID 24 */\n    IF @Seconds >= 30\n        BEGIN\n        /* If we're waiting 30+ seconds, run this check at the end.\n           We get this data from the ring buffers, and it's only updated once per minute, so might\n           as well get it now - whereas if we're checking 30+ seconds, it might get updated by the\n           end of our sp_BlitzFirst session. */\n        INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, Details, DetailsInt, URL)\n        SELECT 24, 50, 'Server Performance', 'High CPU Utilization', CAST(100 - SystemIdle AS NVARCHAR(20)) + N'%. Ring buffer details: ' + CAST(record AS NVARCHAR(4000)), 100 - SystemIdle, 'http://www.BrentOzar.com/go/cpu'\n            FROM (\n                SELECT record,\n                    record.value('(./Record/SchedulerMonitorEvent/SystemHealth/SystemIdle)[1]', 'int') AS SystemIdle\n                FROM (\n                    SELECT TOP 1 CONVERT(XML, record) AS record\n                    FROM sys.dm_os_ring_buffers\n                    WHERE ring_buffer_type = N'RING_BUFFER_SCHEDULER_MONITOR'\n                    AND record LIKE '%<SystemHealth>%'\n                    ORDER BY timestamp DESC) AS rb\n            ) AS y\n            WHERE 100 - SystemIdle >= 50\n\n        INSERT INTO #BlitzFirstResults (CheckID, Priority, FindingsGroup, Finding, Details, DetailsInt, URL)\n        SELECT 23, 250, 'Server Info', 'CPU Utilization', CAST(100 - SystemIdle AS NVARCHAR(20)) + N'%. Ring buffer details: ' + CAST(record AS NVARCHAR(4000)), 100 - SystemIdle, 'http://www.BrentOzar.com/go/cpu'\n            FROM (\n                SELECT record,\n                    record.value('(./Record/SchedulerMonitorEvent/SystemHealth/SystemIdle)[1]', 'int') AS SystemIdle\n                FROM (\n                    SELECT TOP 1 CONVERT(XML, record) AS record\n                    FROM sys.dm_os_ring_buffers\n                    WHERE ring_buffer_type = N'RING_BUFFER_SCHEDULER_MONITOR'\n                    AND record LIKE '%<SystemHealth>%'\n                    ORDER BY timestamp DESC) AS rb\n            ) AS y\n\n        END /* IF @Seconds < 30 */\n\n\n    /* If we didn't find anything, apologize. */\n    IF NOT EXISTS (SELECT * FROM #BlitzFirstResults WHERE Priority < 250)\n    BEGIN\n\n        INSERT  INTO #BlitzFirstResults\n                ( CheckID ,\n                  Priority ,\n                  FindingsGroup ,\n                  Finding ,\n                  URL ,\n                  Details\n                )\n        VALUES  ( -1 ,\n                  1 ,\n                  'No Problems Found' ,\n                  'From Your Community Volunteers' ,\n                  'http://FirstResponderKit.org/' ,\n                  'Try running our more in-depth checks with sp_Blitz, or there may not be an unusual SQL Server performance problem. '\n                );\n\n    END /*IF NOT EXISTS (SELECT * FROM #BlitzFirstResults) */\n\n        /* Add credits for the nice folks who put so much time into building and maintaining this for free: */\n        INSERT  INTO #BlitzFirstResults\n                ( CheckID ,\n                  Priority ,\n                  FindingsGroup ,\n                  Finding ,\n                  URL ,\n                  Details\n                )\n        VALUES  ( -1 ,\n                  255 ,\n                  'Thanks!' ,\n                  'From Your Community Volunteers' ,\n                  'http://FirstResponderKit.org/' ,\n                  'To get help or add your own contributions, join us at http://FirstResponderKit.org.'\n                );\n\n        INSERT  INTO #BlitzFirstResults\n                ( CheckID ,\n                  Priority ,\n                  FindingsGroup ,\n                  Finding ,\n                  URL ,\n                  Details\n\n                )\n        VALUES  ( -1 ,\n                  0 ,\n                  'sp_BlitzFirst ' + CAST(CONVERT(DATETIMEOFFSET, @VersionDate, 102) AS VARCHAR(100)),\n                  'From Your Community Volunteers' ,\n                  'http://FirstResponderKit.org/' ,\n                  'We hope you found this tool useful.'\n                );\n\n                /* Outdated sp_BlitzFirst - sp_BlitzFirst is Over 6 Months Old */\n                IF DATEDIFF(MM, @VersionDate, SYSDATETIMEOFFSET()) > 6\n                    BEGIN\n                        INSERT  INTO #BlitzFirstResults\n                                ( CheckID ,\n                                    Priority ,\n                                    FindingsGroup ,\n                                    Finding ,\n                                    URL ,\n                                    Details\n                                )\n                                SELECT 27 AS CheckID ,\n                                        0 AS Priority ,\n                                        'Outdated sp_BlitzFirst' AS FindingsGroup ,\n                                        'sp_BlitzFirst is Over 6 Months Old' AS Finding ,\n                                        'http://FirstResponderKit.org/' AS URL ,\n                                        'Some things get better with age, like fine wine and your T-SQL. However, sp_BlitzFirst is not one of those things - time to go download the current one.' AS Details\n                    END\n\n    RAISERROR('Analysis finished, outputting results',10,1) WITH NOWAIT;\n\n\n    /* If they want to run sp_BlitzCache and export to table, go for it. */\n    IF @OutputTableNameBlitzCache IS NOT NULL\n        AND @OutputDatabaseName IS NOT NULL\n        AND @OutputSchemaName IS NOT NULL\n        AND EXISTS ( SELECT *\n                     FROM   sys.databases\n                     WHERE  QUOTENAME([name]) = @OutputDatabaseName)\n    BEGIN\n    \tRAISERROR('Calling sp_BlitzCache',10,1) WITH NOWAIT;\n\n        /* Set the sp_BlitzCache sort order based on their top wait type */\n\n        /* First, check for poison waits - CheckID 30 */\n        IF EXISTS (SELECT * FROM #BlitzFirstResults WHERE CheckID = 30)\n            BEGIN\n            SELECT TOP 1 @BlitzCacheSortOrder = CASE\n                                                WHEN Finding = 'Poison Wait Detected: RESOURCE_SEMAPHORE' THEN 'memory grant'\n                                                WHEN Finding = 'Poison Wait Detected: RESOURCE_SEMAPHORE_QUERY_COMPILE' THEN 'memory grant'\n                                                WHEN Finding = 'Poison Wait Detected: THREADPOOL' THEN 'executions'\n                                                WHEN Finding = 'Poison Wait Detected: LOG_RATE_GOVERNOR' THEN 'writes'\n                                                WHEN Finding = 'Poison Wait Detected: SE_REPL_CATCHUP_THROTTLE' THEN 'writes'\n                                                WHEN Finding = 'Poison Wait Detected: SE_REPL_COMMIT_ACK' THEN 'writes'\n                                                WHEN Finding = 'Poison Wait Detected: SE_REPL_ROLLBACK_ACK' THEN 'writes'\n                                                WHEN Finding = 'Poison Wait Detected: SE_REPL_SLOW_SECONDARY_THROTTLE' THEN 'writes'\n                                            ELSE NULL\n                                            END\n                FROM #BlitzFirstResults\n                WHERE CheckID = 30\n                ORDER BY DetailsInt DESC;\n            END\n\n        /* Too much free memory - which probably indicates queries finished w/huge grants - CheckID 34 */\n        IF @BlitzCacheSortOrder IS NULL AND EXISTS (SELECT * FROM #BlitzFirstResults WHERE CheckID = 34)\n            SET @BlitzCacheSortOrder = 'memory grant';\n\n        /* Next, Compilations/Sec High - CheckID 15 and 16 */\n        IF @BlitzCacheSortOrder IS NULL AND EXISTS (SELECT * FROM #BlitzFirstResults WHERE CheckID IN (15,16))\n            SET @BlitzCacheSortOrder = 'compilations';\n\n        /* Still not set? Use the top wait type. */\n        IF @BlitzCacheSortOrder IS NULL AND EXISTS (SELECT * FROM #BlitzFirstResults WHERE CheckID = 6)\n            BEGIN\n            SELECT TOP 1 @BlitzCacheSortOrder = CASE\n                                                WHEN Finding = 'ASYNC_NETWORK_IO' THEN 'duration'\n                                                WHEN Finding = 'CXPACKET' THEN 'reads'\n                                                WHEN Finding = 'LATCH_EX' THEN 'reads'\n                                                WHEN Finding LIKE 'LCK%' THEN 'duration'\n                                                WHEN Finding LIKE 'PAGEIOLATCH%' THEN 'reads'\n                                                WHEN Finding = 'SOS_SCHEDULER_YIELD' THEN 'cpu'\n                                                WHEN Finding = 'WRITELOG' THEN 'writes'\n                                            ELSE NULL\n                                            END\n                FROM #BlitzFirstResults\n                WHERE CheckID = 6\n                ORDER BY DetailsInt DESC;\n            END\n        /* Still null? Just use the default. */\n\n\n\n        /* If they have an newer version of sp_BlitzCache that supports @MinutesBack and @CheckDateOverride */\n        IF EXISTS (SELECT * FROM sys.objects o \n                        INNER JOIN sys.parameters pMB ON o.object_id = pMB.object_id AND pMB.name = '@MinutesBack'\n                        INNER JOIN sys.parameters pCDO ON o.object_id = pCDO.object_id AND pCDO.name = '@CheckDateOverride'\n                        WHERE o.name = 'sp_BlitzCache')\n            BEGIN\n                /* Get the most recent sp_BlitzCache execution before this one - don't use sp_BlitzFirst because user logs are added in there at any time */\n                SET @StringToExecute = N' IF EXISTS(SELECT * FROM '\n                    + @OutputDatabaseName\n                    + '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''\n                    + @OutputSchemaName + ''') SELECT TOP 1 @BlitzCacheMinutesBack = DATEDIFF(MI,CheckDate,SYSDATETIMEOFFSET()) FROM '\n                    + @OutputDatabaseName + '.'\n                    + @OutputSchemaName + '.'\n                    + @OutputTableNameBlitzCache\n                    + ' WHERE ServerName = ''' + CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128)) + ''' ORDER BY CheckDate DESC;';\n                EXEC sp_executesql @StringToExecute, N'@BlitzCacheMinutesBack INT OUTPUT', @BlitzCacheMinutesBack OUTPUT;\n\n                /* If there's no data, let's just analyze the last 15 minutes of the plan cache */\n                IF @BlitzCacheMinutesBack IS NULL OR @BlitzCacheMinutesBack < 1 OR @BlitzCacheMinutesBack > 60\n                    SET @BlitzCacheMinutesBack = 15;\n\n                IF @BlitzCacheSortOrder IS NOT NULL\n                    EXEC sp_BlitzCache\n                        @OutputDatabaseName = @UnquotedOutputDatabaseName,\n                        @OutputSchemaName = @UnquotedOutputSchemaName,\n                        @OutputTableName = @OutputTableNameBlitzCache,\n                        @CheckDateOverride = @StartSampleTime,\n                        @SortOrder = @BlitzCacheSortOrder,\n                        @MinutesBack = @BlitzCacheMinutesBack,\n                        @Debug = @Debug;\n                ELSE\n                    EXEC sp_BlitzCache\n                        @OutputDatabaseName = @UnquotedOutputDatabaseName,\n                        @OutputSchemaName = @UnquotedOutputSchemaName,\n                        @OutputTableName = @OutputTableNameBlitzCache,\n                        @CheckDateOverride = @StartSampleTime,\n                        @MinutesBack = @BlitzCacheMinutesBack,\n                        @Debug = @Debug;\n\n                /* Delete history older than @OutputTableRetentionDays */\n                SET @StringToExecute = N' IF EXISTS(SELECT * FROM '\n                    + @OutputDatabaseName\n                    + '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''\n                    + @OutputSchemaName + ''') DELETE '\n                    + @OutputDatabaseName + '.'\n                    + @OutputSchemaName + '.'\n                    + @OutputTableNameBlitzCache\n                    + ' WHERE ServerName = '''\n                    + CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))\n                    + ''' AND CheckDate < ''' + CAST(CAST( (DATEADD(DAY, -1 * @OutputTableRetentionDays, GETDATE() ) ) AS DATE) AS NVARCHAR(20)) + ''';';\n                EXEC(@StringToExecute);\n\n\n            END\n\n        ELSE /* No sp_BlitzCache found, or it's outdated */\n            BEGIN\n                INSERT  INTO #BlitzFirstResults\n                        ( CheckID ,\n                            Priority ,\n                            FindingsGroup ,\n                            Finding ,\n                            URL ,\n                            Details\n                        )\n                        SELECT 36 AS CheckID ,\n                                0 AS Priority ,\n                                'Outdated or Missing sp_BlitzCache' AS FindingsGroup ,\n                                'Update Your sp_BlitzCache' AS Finding ,\n                                'http://FirstResponderKit.org/' AS URL ,\n                                'You passed in @OutputTableNameBlitzCache, but we need a newer version of sp_BlitzCache in master or the current database.' AS Details\n            END\n\n    \tRAISERROR('sp_BlitzCache Finished',10,1) WITH NOWAIT;\n\n    END /* End running sp_BlitzCache */\n\n    /* @OutputTableName lets us export the results to a permanent table */\n    IF @OutputDatabaseName IS NOT NULL\n        AND @OutputSchemaName IS NOT NULL\n        AND @OutputTableName IS NOT NULL\n        AND @OutputTableName NOT LIKE '#%'\n        AND EXISTS ( SELECT *\n                     FROM   sys.databases\n                     WHERE  QUOTENAME([name]) = @OutputDatabaseName)\n    BEGIN\n        SET @StringToExecute = 'USE '\n            + @OutputDatabaseName\n            + '; IF EXISTS(SELECT * FROM '\n            + @OutputDatabaseName\n            + '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''\n            + @OutputSchemaName\n            + ''') AND NOT EXISTS (SELECT * FROM '\n            + @OutputDatabaseName\n            + '.INFORMATION_SCHEMA.TABLES WHERE QUOTENAME(TABLE_SCHEMA) = '''\n            + @OutputSchemaName + ''' AND QUOTENAME(TABLE_NAME) = '''\n            + @OutputTableName + ''') CREATE TABLE '\n            + @OutputSchemaName + '.'\n            + @OutputTableName\n            + ' (ID INT IDENTITY(1,1) NOT NULL,\n                ServerName NVARCHAR(128),\n                CheckDate DATETIMEOFFSET,\n                CheckID INT NOT NULL,\n                Priority TINYINT NOT NULL,\n                FindingsGroup VARCHAR(50) NOT NULL,\n                Finding VARCHAR(200) NOT NULL,\n                URL VARCHAR(200) NOT NULL,\n                Details NVARCHAR(4000) NULL,\n                HowToStopIt [XML] NULL,\n                QueryPlan [XML] NULL,\n                QueryText NVARCHAR(MAX) NULL,\n                StartTime DATETIMEOFFSET NULL,\n                LoginName NVARCHAR(128) NULL,\n                NTUserName NVARCHAR(128) NULL,\n                OriginalLoginName NVARCHAR(128) NULL,\n                ProgramName NVARCHAR(128) NULL,\n                HostName NVARCHAR(128) NULL,\n                DatabaseID INT NULL,\n                DatabaseName NVARCHAR(128) NULL,\n                OpenTransactionCount INT NULL,\n                DetailsInt INT NULL,\n                CONSTRAINT [PK_' + CAST(NEWID() AS CHAR(36)) + '] PRIMARY KEY CLUSTERED (ID ASC));'\n\n        EXEC(@StringToExecute);\n        SET @StringToExecute = N' IF EXISTS(SELECT * FROM '\n            + @OutputDatabaseName\n            + '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''\n            + @OutputSchemaName + ''') INSERT '\n            + @OutputDatabaseName + '.'\n            + @OutputSchemaName + '.'\n            + @OutputTableName\n            + ' (ServerName, CheckDate, CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt, QueryPlan, QueryText, StartTime, LoginName, NTUserName, OriginalLoginName, ProgramName, HostName, DatabaseID, DatabaseName, OpenTransactionCount, DetailsInt) SELECT '''\n            + CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))\n            + ''', ''' + (CONVERT(NVARCHAR(100), @StartSampleTime, 121)) + ''', CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt, QueryPlan, QueryText, StartTime, LoginName, NTUserName, OriginalLoginName, ProgramName, HostName, DatabaseID, DatabaseName, OpenTransactionCount, DetailsInt FROM #BlitzFirstResults ORDER BY Priority , FindingsGroup , Finding , Details';\n        EXEC(@StringToExecute);\n\n        /* Delete history older than @OutputTableRetentionDays */\n        SET @StringToExecute = N' IF EXISTS(SELECT * FROM '\n            + @OutputDatabaseName\n            + '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''\n            + @OutputSchemaName + ''') DELETE '\n            + @OutputDatabaseName + '.'\n            + @OutputSchemaName + '.'\n            + @OutputTableName\n            + ' WHERE ServerName = '''\n            + CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))\n            + ''' AND CheckDate < ''' + CAST(CAST( (DATEADD(DAY, -1 * @OutputTableRetentionDays, GETDATE() ) ) AS DATE) AS NVARCHAR(20)) + ''';';\n        EXEC(@StringToExecute);\n\n\n    END\n    ELSE IF (SUBSTRING(@OutputTableName, 2, 2) = '##')\n    BEGIN\n        SET @StringToExecute = N' IF (OBJECT_ID(''tempdb..'\n            + @OutputTableName\n            + ''') IS NULL) CREATE TABLE '\n            + @OutputTableName\n            + ' (ID INT IDENTITY(1,1) NOT NULL,\n                ServerName NVARCHAR(128),\n                CheckDate DATETIMEOFFSET,\n                CheckID INT NOT NULL,\n                Priority TINYINT NOT NULL,\n                FindingsGroup VARCHAR(50) NOT NULL,\n                Finding VARCHAR(200) NOT NULL,\n                URL VARCHAR(200) NOT NULL,\n                Details NVARCHAR(4000) NULL,\n                HowToStopIt [XML] NULL,\n                QueryPlan [XML] NULL,\n                QueryText NVARCHAR(MAX) NULL,\n                StartTime DATETIMEOFFSET NULL,\n                LoginName NVARCHAR(128) NULL,\n                NTUserName NVARCHAR(128) NULL,\n                OriginalLoginName NVARCHAR(128) NULL,\n                ProgramName NVARCHAR(128) NULL,\n                HostName NVARCHAR(128) NULL,\n                DatabaseID INT NULL,\n                DatabaseName NVARCHAR(128) NULL,\n                OpenTransactionCount INT NULL,\n                DetailsInt INT NULL,\n                CONSTRAINT [PK_' + CAST(NEWID() AS CHAR(36)) + '] PRIMARY KEY CLUSTERED (ID ASC));'\n            + ' INSERT '\n            + @OutputTableName\n            + ' (ServerName, CheckDate, CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt, QueryPlan, QueryText, StartTime, LoginName, NTUserName, OriginalLoginName, ProgramName, HostName, DatabaseID, DatabaseName, OpenTransactionCount, DetailsInt) SELECT '''\n            + CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))\n            + ''', ''' + CONVERT(NVARCHAR(100), @StartSampleTime, 121) + ''', CheckID, Priority, FindingsGroup, Finding, URL, Details, HowToStopIt, QueryPlan, QueryText, StartTime, LoginName, NTUserName, OriginalLoginName, ProgramName, HostName, DatabaseID, DatabaseName, OpenTransactionCount, DetailsInt FROM #BlitzFirstResults ORDER BY Priority , FindingsGroup , Finding , Details';\n        EXEC(@StringToExecute);\n    END\n    ELSE IF (SUBSTRING(@OutputTableName, 2, 1) = '#')\n    BEGIN\n        RAISERROR('Due to the nature of Dymamic SQL, only global (i.e. double pound (##)) temp tables are supported for @OutputTableName', 16, 0)\n    END\n\n    /* @OutputTableNameFileStats lets us export the results to a permanent table */\n    IF @OutputDatabaseName IS NOT NULL\n        AND @OutputSchemaName IS NOT NULL\n        AND @OutputTableNameFileStats IS NOT NULL\n        AND @OutputTableNameFileStats NOT LIKE '#%'\n        AND EXISTS ( SELECT *\n                     FROM   sys.databases\n                     WHERE  QUOTENAME([name]) = @OutputDatabaseName)\n    BEGIN\n        /* Create the table */\n        SET @StringToExecute = 'USE '\n            + @OutputDatabaseName\n            + '; IF EXISTS(SELECT * FROM '\n            + @OutputDatabaseName\n            + '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''\n            + @OutputSchemaName\n            + ''') AND NOT EXISTS (SELECT * FROM '\n            + @OutputDatabaseName\n            + '.INFORMATION_SCHEMA.TABLES WHERE QUOTENAME(TABLE_SCHEMA) = '''\n            + @OutputSchemaName + ''' AND QUOTENAME(TABLE_NAME) = '''\n            + @OutputTableNameFileStats + ''') CREATE TABLE '\n            + @OutputSchemaName + '.'\n            + @OutputTableNameFileStats\n            + ' (ID INT IDENTITY(1,1) NOT NULL,\n                ServerName NVARCHAR(128),\n                CheckDate DATETIMEOFFSET,\n                DatabaseID INT NOT NULL,\n                FileID INT NOT NULL,\n                DatabaseName NVARCHAR(256) ,\n                FileLogicalName NVARCHAR(256) ,\n                TypeDesc NVARCHAR(60) ,\n                SizeOnDiskMB BIGINT ,\n                io_stall_read_ms BIGINT ,\n                num_of_reads BIGINT ,\n                bytes_read BIGINT ,\n                io_stall_write_ms BIGINT ,\n                num_of_writes BIGINT ,\n                bytes_written BIGINT,\n                PhysicalName NVARCHAR(520) ,\n                CONSTRAINT [PK_' + CAST(NEWID() AS CHAR(36)) + '] PRIMARY KEY CLUSTERED (ID ASC));'\n        EXEC(@StringToExecute);\n\n        /* Create the view */\n        SET @ObjectFullName = @OutputDatabaseName + N'.' + @OutputSchemaName + N'.' +  @OutputTableNameFileStats_View;\n        IF OBJECT_ID(@ObjectFullName) IS NULL\n            BEGIN\n            SET @StringToExecute = 'USE '\n                + @OutputDatabaseName\n                + '; EXEC (''CREATE VIEW '\n                + @OutputSchemaName + '.'\n                + @OutputTableNameFileStats_View + ' AS ' + @LineFeed\n                + 'SELECT f.ServerName, f.CheckDate, f.DatabaseID, f.DatabaseName, f.FileID, f.FileLogicalName, f.TypeDesc, f.PhysicalName, f.SizeOnDiskMB' + @LineFeed\n                + ', DATEDIFF(ss, fPrior.CheckDate, f.CheckDate) AS ElapsedSeconds' + @LineFeed\n                + ', (f.SizeOnDiskMB - fPrior.SizeOnDiskMB) AS SizeOnDiskMBgrowth' + @LineFeed\n                + ', (f.io_stall_read_ms - fPrior.io_stall_read_ms) AS io_stall_read_ms' + @LineFeed\n                + ', io_stall_read_ms_average = CASE WHEN (f.num_of_reads - fPrior.num_of_reads) = 0 THEN 0 ELSE (f.io_stall_read_ms - fPrior.io_stall_read_ms) / (f.num_of_reads - fPrior.num_of_reads) END' + @LineFeed\n                + ', (f.num_of_reads - fPrior.num_of_reads) AS num_of_reads' + @LineFeed\n                + ', (f.bytes_read - fPrior.bytes_read) / 1024.0 / 1024.0 AS megabytes_read' + @LineFeed\n                + ', (f.io_stall_write_ms - fPrior.io_stall_write_ms) AS io_stall_write_ms' + @LineFeed\n                + ', io_stall_write_ms_average = CASE WHEN (f.num_of_writes - fPrior.num_of_writes) = 0 THEN 0 ELSE (f.io_stall_write_ms - fPrior.io_stall_write_ms) / (f.num_of_writes - fPrior.num_of_writes) END' + @LineFeed\n                + ', (f.num_of_writes - fPrior.num_of_writes) AS num_of_writes' + @LineFeed\n                + ', (f.bytes_written - fPrior.bytes_written) / 1024.0 / 1024.0 AS megabytes_written' + @LineFeed\n                + 'FROM ' + @OutputSchemaName + '.' + @OutputTableNameFileStats + ' f' + @LineFeed\n                + 'INNER JOIN ' + @OutputSchemaName + '.' + @OutputTableNameFileStats + ' fPrior ON f.ServerName = fPrior.ServerName AND f.DatabaseID = fPrior.DatabaseID AND f.FileID = fPrior.FileID AND f.CheckDate > fPrior.CheckDate' + @LineFeed\n                + 'LEFT OUTER JOIN ' + @OutputSchemaName + '.' + @OutputTableNameFileStats + ' fMiddle ON f.ServerName = fMiddle.ServerName AND f.DatabaseID = fMiddle.DatabaseID AND f.FileID = fMiddle.FileID AND f.CheckDate > fMiddle.CheckDate AND fMiddle.CheckDate > fPrior.CheckDate' + @LineFeed\n                + 'WHERE fMiddle.ID IS NULL AND f.num_of_reads >= fPrior.num_of_reads AND f.num_of_writes >= fPrior.num_of_writes\n                    AND DATEDIFF(MI, fPrior.CheckDate, f.CheckDate) BETWEEN 1 AND 60;'')'\n            EXEC(@StringToExecute);\n            END\n\n        SET @StringToExecute = N' IF EXISTS(SELECT * FROM '\n            + @OutputDatabaseName\n            + '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''\n            + @OutputSchemaName + ''') INSERT '\n            + @OutputDatabaseName + '.'\n            + @OutputSchemaName + '.'\n            + @OutputTableNameFileStats\n            + ' (ServerName, CheckDate, DatabaseID, FileID, DatabaseName, FileLogicalName, TypeDesc, SizeOnDiskMB, io_stall_read_ms, num_of_reads, bytes_read, io_stall_write_ms, num_of_writes, bytes_written, PhysicalName) SELECT '''\n            + CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))\n            + ''', ''' + CONVERT(NVARCHAR(100), @StartSampleTime, 121) + ''', '\n            + 'DatabaseID, FileID, DatabaseName, FileLogicalName, TypeDesc, SizeOnDiskMB, io_stall_read_ms, num_of_reads, bytes_read, io_stall_write_ms, num_of_writes, bytes_written, PhysicalName FROM #FileStats WHERE Pass = 2';\n        EXEC(@StringToExecute);\n\n        /* Delete history older than @OutputTableRetentionDays */\n        SET @StringToExecute = N' IF EXISTS(SELECT * FROM '\n            + @OutputDatabaseName\n            + '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''\n            + @OutputSchemaName + ''') DELETE '\n            + @OutputDatabaseName + '.'\n            + @OutputSchemaName + '.'\n            + @OutputTableNameFileStats\n            + ' WHERE ServerName = '''\n            + CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))\n            + ''' AND CheckDate < ''' + CAST(CAST( (DATEADD(DAY, -1 * @OutputTableRetentionDays, GETDATE() ) ) AS DATE) AS NVARCHAR(20)) + ''';';\n        EXEC(@StringToExecute);\n\n    END\n    ELSE IF (SUBSTRING(@OutputTableNameFileStats, 2, 2) = '##')\n    BEGIN\n        SET @StringToExecute = N' IF (OBJECT_ID(''tempdb..'\n            + @OutputTableNameFileStats\n            + ''') IS NULL) CREATE TABLE '\n            + @OutputTableNameFileStats\n            + ' (ID INT IDENTITY(1,1) NOT NULL,\n                ServerName NVARCHAR(128),\n                CheckDate DATETIMEOFFSET,\n                DatabaseID INT NOT NULL,\n                FileID INT NOT NULL,\n                DatabaseName NVARCHAR(256) ,\n                FileLogicalName NVARCHAR(256) ,\n                TypeDesc NVARCHAR(60) ,\n                SizeOnDiskMB BIGINT ,\n                io_stall_read_ms BIGINT ,\n                num_of_reads BIGINT ,\n                bytes_read BIGINT ,\n                io_stall_write_ms BIGINT ,\n                num_of_writes BIGINT ,\n                bytes_written BIGINT,\n                PhysicalName NVARCHAR(520) ,\n                DetailsInt INT NULL,\n                CONSTRAINT [PK_' + CAST(NEWID() AS CHAR(36)) + '] PRIMARY KEY CLUSTERED (ID ASC));'\n            + ' INSERT '\n            + @OutputTableNameFileStats\n            + ' (ServerName, CheckDate, DatabaseID, FileID, DatabaseName, FileLogicalName, TypeDesc, SizeOnDiskMB, io_stall_read_ms, num_of_reads, bytes_read, io_stall_write_ms, num_of_writes, bytes_written, PhysicalName) SELECT '''\n            + CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))\n            + ''', ''' + CONVERT(NVARCHAR(100), @StartSampleTime, 121) + ''', '\n            + 'DatabaseID, FileID, DatabaseName, FileLogicalName, TypeDesc, SizeOnDiskMB, io_stall_read_ms, num_of_reads, bytes_read, io_stall_write_ms, num_of_writes, bytes_written, PhysicalName FROM #FileStats WHERE Pass = 2';\n        EXEC(@StringToExecute);\n    END\n    ELSE IF (SUBSTRING(@OutputTableNameFileStats, 2, 1) = '#')\n    BEGIN\n        RAISERROR('Due to the nature of Dymamic SQL, only global (i.e. double pound (##)) temp tables are supported for @OutputTableName', 16, 0)\n    END\n\n\n    /* @OutputTableNamePerfmonStats lets us export the results to a permanent table */\n    IF @OutputDatabaseName IS NOT NULL\n        AND @OutputSchemaName IS NOT NULL\n        AND @OutputTableNamePerfmonStats IS NOT NULL\n        AND @OutputTableNamePerfmonStats NOT LIKE '#%'\n        AND EXISTS ( SELECT *\n                     FROM   sys.databases\n                     WHERE  QUOTENAME([name]) = @OutputDatabaseName)\n    BEGIN\n        /* Create the table */\n        SET @StringToExecute = 'USE '\n            + @OutputDatabaseName\n            + '; IF EXISTS(SELECT * FROM '\n            + @OutputDatabaseName\n            + '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''\n            + @OutputSchemaName\n            + ''') AND NOT EXISTS (SELECT * FROM '\n            + @OutputDatabaseName\n            + '.INFORMATION_SCHEMA.TABLES WHERE QUOTENAME(TABLE_SCHEMA) = '''\n            + @OutputSchemaName + ''' AND QUOTENAME(TABLE_NAME) = '''\n            + @OutputTableNamePerfmonStats + ''') CREATE TABLE '\n            + @OutputSchemaName + '.'\n            + @OutputTableNamePerfmonStats\n            + ' (ID INT IDENTITY(1,1) NOT NULL,\n                ServerName NVARCHAR(128),\n                CheckDate DATETIMEOFFSET,\n                [object_name] NVARCHAR(128) NOT NULL,\n                [counter_name] NVARCHAR(128) NOT NULL,\n                [instance_name] NVARCHAR(128) NULL,\n                [cntr_value] BIGINT NULL,\n                [cntr_type] INT NOT NULL,\n                [value_delta] BIGINT NULL,\n                [value_per_second] DECIMAL(18,2) NULL,\n                CONSTRAINT [PK_' + CAST(NEWID() AS CHAR(36)) + '] PRIMARY KEY CLUSTERED (ID ASC));'\n        EXEC(@StringToExecute);\n\n        /* Create the view */\n        SET @ObjectFullName = @OutputDatabaseName + N'.' + @OutputSchemaName + N'.' +  @OutputTableNamePerfmonStats_View;\n        IF OBJECT_ID(@ObjectFullName) IS NULL\n            BEGIN\n            SET @StringToExecute = 'USE '\n                + @OutputDatabaseName\n                + '; EXEC (''CREATE VIEW '\n                + @OutputSchemaName + '.'\n                + @OutputTableNamePerfmonStats_View + ' AS ' + @LineFeed\n                + 'SELECT p.ServerName, p.CheckDate, p.object_name, p.counter_name, p.instance_name' + @LineFeed\n                + ', DATEDIFF(ss, pPrior.CheckDate, p.CheckDate) AS ElapsedSeconds' + @LineFeed\n                + ', p.cntr_value' + @LineFeed\n                + ', p.cntr_type' + @LineFeed\n                + ', (p.cntr_value - pPrior.cntr_value) AS cntr_delta' + @LineFeed\n                + ', (p.cntr_value - pPrior.cntr_value) * 1.0 / DATEDIFF(ss, pPrior.CheckDate, p.CheckDate) AS cntr_delta_per_second' + @LineFeed\n                + 'FROM ' + @OutputSchemaName + '.' + @OutputTableNamePerfmonStats + ' p' + @LineFeed\n                + 'INNER JOIN ' + @OutputSchemaName + '.' + @OutputTableNamePerfmonStats + ' pPrior ON p.ServerName = pPrior.ServerName AND p.object_name = pPrior.object_name AND p.counter_name = pPrior.counter_name AND p.instance_name = pPrior.instance_name AND p.CheckDate > pPrior.CheckDate' + @LineFeed\n                + 'LEFT OUTER JOIN ' + @OutputSchemaName + '.' + @OutputTableNamePerfmonStats + ' pMiddle ON p.ServerName = pMiddle.ServerName AND p.object_name = pMiddle.object_name AND p.counter_name = pMiddle.counter_name AND p.instance_name = pMiddle.instance_name AND p.CheckDate > pMiddle.CheckDate AND pMiddle.CheckDate > pPrior.CheckDate' + @LineFeed\n                + 'WHERE pMiddle.ID IS NULL AND DATEDIFF(MI, pPrior.CheckDate, p.CheckDate) BETWEEN 1 AND 60;'')'\n            EXEC(@StringToExecute);\n            END;\n\n        SET @StringToExecute = N' IF EXISTS(SELECT * FROM '\n            + @OutputDatabaseName\n            + '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''\n            + @OutputSchemaName + ''') INSERT '\n            + @OutputDatabaseName + '.'\n            + @OutputSchemaName + '.'\n            + @OutputTableNamePerfmonStats\n            + ' (ServerName, CheckDate, object_name, counter_name, instance_name, cntr_value, cntr_type, value_delta, value_per_second) SELECT '''\n            + CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))\n            + ''', ''' + CONVERT(NVARCHAR(100), @StartSampleTime, 121) + ''', '\n            + 'object_name, counter_name, instance_name, cntr_value, cntr_type, value_delta, value_per_second FROM #PerfmonStats WHERE Pass = 2';\n        EXEC(@StringToExecute);\n\n        /* Delete history older than @OutputTableRetentionDays */\n        SET @StringToExecute = N' IF EXISTS(SELECT * FROM '\n            + @OutputDatabaseName\n            + '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''\n            + @OutputSchemaName + ''') DELETE '\n            + @OutputDatabaseName + '.'\n            + @OutputSchemaName + '.'\n            + @OutputTableNamePerfmonStats\n            + ' WHERE ServerName = '''\n            + CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))\n            + ''' AND CheckDate < ''' + CAST(CAST( (DATEADD(DAY, -1 * @OutputTableRetentionDays, GETDATE() ) ) AS DATE) AS NVARCHAR(20)) + ''';';\n        EXEC(@StringToExecute);\n\n\n\n    END\n    ELSE IF (SUBSTRING(@OutputTableNamePerfmonStats, 2, 2) = '##')\n    BEGIN\n        SET @StringToExecute = N' IF (OBJECT_ID(''tempdb..'\n            + @OutputTableNamePerfmonStats\n            + ''') IS NULL) CREATE TABLE '\n            + @OutputTableNamePerfmonStats\n            + ' (ID INT IDENTITY(1,1) NOT NULL,\n                ServerName NVARCHAR(128),\n                CheckDate DATETIMEOFFSET,\n                [object_name] NVARCHAR(128) NOT NULL,\n                [counter_name] NVARCHAR(128) NOT NULL,\n                [instance_name] NVARCHAR(128) NULL,\n                [cntr_value] BIGINT NULL,\n                [cntr_type] INT NOT NULL,\n                [value_delta] BIGINT NULL,\n                [value_per_second] DECIMAL(18,2) NULL,\n                CONSTRAINT [PK_' + CAST(NEWID() AS CHAR(36)) + '] PRIMARY KEY CLUSTERED (ID ASC));'\n            + ' INSERT '\n            + @OutputTableNamePerfmonStats\n            + ' (ServerName, CheckDate, object_name, counter_name, instance_name, cntr_value, cntr_type, value_delta, value_per_second) SELECT '''\n            + CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))\n            + ''', ''' + CONVERT(NVARCHAR(100), @StartSampleTime, 121) + ''', '\n            + 'object_name, counter_name, instance_name, cntr_value, cntr_type, value_delta, value_per_second FROM #PerfmonStats WHERE Pass = 2';\n        EXEC(@StringToExecute);\n    END\n    ELSE IF (SUBSTRING(@OutputTableNamePerfmonStats, 2, 1) = '#')\n    BEGIN\n        RAISERROR('Due to the nature of Dymamic SQL, only global (i.e. double pound (##)) temp tables are supported for @OutputTableName', 16, 0)\n    END\n\n\n    /* @OutputTableNameWaitStats lets us export the results to a permanent table */\n    IF @OutputDatabaseName IS NOT NULL\n        AND @OutputSchemaName IS NOT NULL\n        AND @OutputTableNameWaitStats IS NOT NULL\n        AND @OutputTableNameWaitStats NOT LIKE '#%'\n        AND EXISTS ( SELECT *\n                     FROM   sys.databases\n                     WHERE  QUOTENAME([name]) = @OutputDatabaseName)\n    BEGIN\n        /* Create the table */\n        SET @StringToExecute = 'USE '\n            + @OutputDatabaseName\n            + '; IF EXISTS(SELECT * FROM '\n            + @OutputDatabaseName\n            + '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''\n            + @OutputSchemaName\n            + ''') AND NOT EXISTS (SELECT * FROM '\n            + @OutputDatabaseName\n            + '.INFORMATION_SCHEMA.TABLES WHERE QUOTENAME(TABLE_SCHEMA) = '''\n            + @OutputSchemaName + ''' AND QUOTENAME(TABLE_NAME) = '''\n            + @OutputTableNameWaitStats + ''') ' + @LineFeed\n\t\t\t+ 'BEGIN' + @LineFeed\n\t\t\t+ 'CREATE TABLE '\n            + @OutputSchemaName + '.'\n            + @OutputTableNameWaitStats\n            + ' (ID INT IDENTITY(1,1) NOT NULL,\n                ServerName NVARCHAR(128),\n                CheckDate DATETIMEOFFSET,\n                wait_type NVARCHAR(60),\n                wait_time_ms BIGINT,\n                signal_wait_time_ms BIGINT,\n                waiting_tasks_count BIGINT ,\n                CONSTRAINT [PK_' + CAST(NEWID() AS CHAR(36)) + '] PRIMARY KEY CLUSTERED (ID));' + @LineFeed\n\t\t\t+ 'CREATE NONCLUSTERED INDEX IX_ServerName_wait_type_CheckDate_Includes ON ' + @OutputSchemaName + '.' + @OutputTableNameWaitStats + @LineFeed\n\t\t\t+ '(ServerName, wait_type, CheckDate) INCLUDE (wait_time_ms, signal_wait_time_ms, waiting_tasks_count);' + @LineFeed\n\t\t\t+ 'END'\n\n        EXEC(@StringToExecute);\n\n        /* Create the wait stats category table */\n        SET @ObjectFullName = @OutputDatabaseName + N'.' + @OutputSchemaName + N'.' +  @OutputTableNameWaitStats_Categories;\n        IF OBJECT_ID(@ObjectFullName) IS NULL\n            BEGIN\n            SET @StringToExecute = 'USE '\n                + @OutputDatabaseName\n                + '; EXEC (''CREATE TABLE '\n                + @OutputSchemaName + '.'\n                + @OutputTableNameWaitStats_Categories + ' (WaitType NVARCHAR(60) PRIMARY KEY CLUSTERED, WaitCategory NVARCHAR(128) NOT NULL, Ignorable BIT DEFAULT 0);'')'\n            EXEC(@StringToExecute);\n            END\n\n\t\t/* Make sure the wait stats category table has the current number of rows */\n\t\tSET @StringToExecute = 'USE '\n            + @OutputDatabaseName\n            + '; EXEC (''IF (SELECT COALESCE(SUM(1),0) FROM ' + @OutputSchemaName + '.' + @OutputTableNameWaitStats_Categories + ') <> (SELECT COALESCE(SUM(1),0) FROM ##WaitCategories)' + @LineFeed\n\t\t\t+ 'BEGIN ' + @LineFeed\n\t\t\t+ 'TRUNCATE TABLE '  + @OutputSchemaName + '.' + @OutputTableNameWaitStats_Categories + @LineFeed\n\t\t\t+ 'INSERT INTO ' + @OutputSchemaName + '.' + @OutputTableNameWaitStats_Categories + ' (WaitType, WaitCategory, Ignorable) SELECT WaitType, WaitCategory, Ignorable FROM ##WaitCategories;' + @LineFeed\n\t\t\t+ 'END'')'\n        EXEC(@StringToExecute);\n\n\n        /* Create the wait stats view */\n        SET @ObjectFullName = @OutputDatabaseName + N'.' + @OutputSchemaName + N'.' +  @OutputTableNameWaitStats_View;\n        IF OBJECT_ID(@ObjectFullName) IS NULL\n            BEGIN\n            SET @StringToExecute = 'USE '\n                + @OutputDatabaseName\n                + '; EXEC (''CREATE VIEW '\n                + @OutputSchemaName + '.'\n                + @OutputTableNameWaitStats_View + ' AS ' + @LineFeed\n                + 'SELECT w.ServerName, w.CheckDate, w.wait_type, COALESCE(wc.WaitCategory, ''''Other'''') AS WaitCategory, COALESCE(wc.Ignorable,0) AS Ignorable' + @LineFeed\n                + ', DATEDIFF(ss, wPrior.CheckDate, w.CheckDate) AS ElapsedSeconds' + @LineFeed\n                + ', (w.wait_time_ms - wPrior.wait_time_ms) AS wait_time_ms_delta' + @LineFeed\n                + ', (w.wait_time_ms - wPrior.wait_time_ms) / 60000.0 AS wait_time_minutes_delta' + @LineFeed\n                + ', (w.wait_time_ms - wPrior.wait_time_ms) / 1000.0 / DATEDIFF(ss, wPrior.CheckDate, w.CheckDate) AS wait_time_minutes_per_minute' + @LineFeed\n                + ', (w.signal_wait_time_ms - wPrior.signal_wait_time_ms) AS signal_wait_time_ms_delta' + @LineFeed\n                + ', (w.waiting_tasks_count - wPrior.waiting_tasks_count) AS waiting_tasks_count_delta' + @LineFeed\n                + 'FROM ' + @OutputSchemaName + '.' + @OutputTableNameWaitStats + ' w' + @LineFeed\n                + 'INNER JOIN ' + @OutputSchemaName + '.' + @OutputTableNameWaitStats + ' wPrior ON w.ServerName = wPrior.ServerName AND w.wait_type = wPrior.wait_type AND w.CheckDate > wPrior.CheckDate' + @LineFeed\n                + 'LEFT OUTER JOIN ' + @OutputSchemaName + '.' + @OutputTableNameWaitStats + ' wMiddle ON w.ServerName = wMiddle.ServerName AND w.wait_type = wMiddle.wait_type AND w.CheckDate > wMiddle.CheckDate AND wMiddle.CheckDate > wPrior.CheckDate' + @LineFeed\n\t\t\t\t+ 'LEFT OUTER JOIN ' + @OutputSchemaName + '.' + @OutputTableNameWaitStats_Categories + ' wc ON w.wait_type = wc.WaitType' + @LineFeed\n                + 'WHERE wMiddle.ID IS NULL AND w.wait_time_ms >= wPrior.wait_time_ms AND DATEDIFF(MI, wPrior.CheckDate, w.CheckDate) BETWEEN 1 AND 60;'')'\n            EXEC(@StringToExecute);\n            END\n\n\n        SET @StringToExecute = N' IF EXISTS(SELECT * FROM '\n            + @OutputDatabaseName\n            + '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''\n            + @OutputSchemaName + ''') INSERT '\n            + @OutputDatabaseName + '.'\n            + @OutputSchemaName + '.'\n            + @OutputTableNameWaitStats\n            + ' (ServerName, CheckDate, wait_type, wait_time_ms, signal_wait_time_ms, waiting_tasks_count) SELECT '''\n            + CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))\n            + ''', ''' + CONVERT(NVARCHAR(100), @StartSampleTime, 121) + ''', '\n            + 'wait_type, wait_time_ms, signal_wait_time_ms, waiting_tasks_count FROM #WaitStats WHERE Pass = 2 AND wait_time_ms > 0 AND waiting_tasks_count > 0';\n        EXEC(@StringToExecute);\n\n        /* Delete history older than @OutputTableRetentionDays */\n        SET @StringToExecute = N' IF EXISTS(SELECT * FROM '\n            + @OutputDatabaseName\n            + '.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = '''\n            + @OutputSchemaName + ''') DELETE '\n            + @OutputDatabaseName + '.'\n            + @OutputSchemaName + '.'\n            + @OutputTableNameWaitStats\n            + ' WHERE ServerName = '''\n            + CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))\n            + ''' AND CheckDate < ''' + CAST(CAST( (DATEADD(DAY, -1 * @OutputTableRetentionDays, GETDATE() ) ) AS DATE) AS NVARCHAR(20)) + ''';';\n        EXEC(@StringToExecute);\n\n    END\n    ELSE IF (SUBSTRING(@OutputTableNameWaitStats, 2, 2) = '##')\n    BEGIN\n        SET @StringToExecute = N' IF (OBJECT_ID(''tempdb..'\n            + @OutputTableNameWaitStats\n            + ''') IS NULL) CREATE TABLE '\n            + @OutputTableNameWaitStats\n            + ' (ID INT IDENTITY(1,1) NOT NULL,\n                ServerName NVARCHAR(128),\n                CheckDate DATETIMEOFFSET,\n                wait_type NVARCHAR(60),\n                wait_time_ms BIGINT,\n                signal_wait_time_ms BIGINT,\n                waiting_tasks_count BIGINT ,\n                CONSTRAINT [PK_' + CAST(NEWID() AS CHAR(36)) + '] PRIMARY KEY CLUSTERED (ID ASC));'\n            + ' INSERT '\n            + @OutputTableNameWaitStats\n            + ' (ServerName, CheckDate, wait_type, wait_time_ms, signal_wait_time_ms, waiting_tasks_count) SELECT '''\n            + CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128))\n            + ''', ''' + CONVERT(NVARCHAR(100), @StartSampleTime, 121) + ''', '\n            + 'wait_type, wait_time_ms, signal_wait_time_ms, waiting_tasks_count FROM #WaitStats WHERE Pass = 2 AND wait_time_ms > 0 AND waiting_tasks_count > 0';\n        EXEC(@StringToExecute);\n    END\n    ELSE IF (SUBSTRING(@OutputTableNameWaitStats, 2, 1) = '#')\n    BEGIN\n        RAISERROR('Due to the nature of Dymamic SQL, only global (i.e. double pound (##)) temp tables are supported for @OutputTableName', 16, 0)\n    END\n\n\n\n\n    DECLARE @separator AS VARCHAR(1);\n    IF @OutputType = 'RSV'\n        SET @separator = CHAR(31);\n    ELSE\n        SET @separator = ',';\n\n    IF @OutputType = 'COUNT' AND @SinceStartup = 0\n    BEGIN\n        SELECT  COUNT(*) AS Warnings\n        FROM    #BlitzFirstResults\n    END\n    ELSE\n        IF @OutputType = 'Opserver1' AND @SinceStartup = 0\n        BEGIN\n\n            SELECT  r.[Priority] ,\n                    r.[FindingsGroup] ,\n                    r.[Finding] ,\n                    r.[URL] ,\n                    r.[Details],\n                    r.[HowToStopIt] ,\n                    r.[CheckID] ,\n                    r.[StartTime],\n                    r.[LoginName],\n                    r.[NTUserName],\n                    r.[OriginalLoginName],\n                    r.[ProgramName],\n                    r.[HostName],\n                    r.[DatabaseID],\n                    r.[DatabaseName],\n                    r.[OpenTransactionCount],\n                    r.[QueryPlan],\n                    r.[QueryText],\n                    qsNow.plan_handle AS PlanHandle,\n                    qsNow.sql_handle AS SqlHandle,\n                    qsNow.statement_start_offset AS StatementStartOffset,\n                    qsNow.statement_end_offset AS StatementEndOffset,\n                    [Executions] = qsNow.execution_count - (COALESCE(qsFirst.execution_count, 0)),\n                    [ExecutionsPercent] = CAST(100.0 * (qsNow.execution_count - (COALESCE(qsFirst.execution_count, 0))) / (qsTotal.execution_count - qsTotalFirst.execution_count) AS DECIMAL(6,2)),\n                    [Duration] = qsNow.total_elapsed_time - (COALESCE(qsFirst.total_elapsed_time, 0)),\n                    [DurationPercent] = CAST(100.0 * (qsNow.total_elapsed_time - (COALESCE(qsFirst.total_elapsed_time, 0))) / (qsTotal.total_elapsed_time - qsTotalFirst.total_elapsed_time) AS DECIMAL(6,2)),\n                    [CPU] = qsNow.total_worker_time - (COALESCE(qsFirst.total_worker_time, 0)),\n                    [CPUPercent] = CAST(100.0 * (qsNow.total_worker_time - (COALESCE(qsFirst.total_worker_time, 0))) / (qsTotal.total_worker_time - qsTotalFirst.total_worker_time) AS DECIMAL(6,2)),\n                    [Reads] = qsNow.total_logical_reads - (COALESCE(qsFirst.total_logical_reads, 0)),\n                    [ReadsPercent] = CAST(100.0 * (qsNow.total_logical_reads - (COALESCE(qsFirst.total_logical_reads, 0))) / (qsTotal.total_logical_reads - qsTotalFirst.total_logical_reads) AS DECIMAL(6,2)),\n                    [PlanCreationTime] = CONVERT(NVARCHAR(100), qsNow.creation_time ,121),\n                    [TotalExecutions] = qsNow.execution_count,\n                    [TotalExecutionsPercent] = CAST(100.0 * qsNow.execution_count / qsTotal.execution_count AS DECIMAL(6,2)),\n                    [TotalDuration] = qsNow.total_elapsed_time,\n                    [TotalDurationPercent] = CAST(100.0 * qsNow.total_elapsed_time / qsTotal.total_elapsed_time AS DECIMAL(6,2)),\n                    [TotalCPU] = qsNow.total_worker_time,\n                    [TotalCPUPercent] = CAST(100.0 * qsNow.total_worker_time / qsTotal.total_worker_time AS DECIMAL(6,2)),\n                    [TotalReads] = qsNow.total_logical_reads,\n                    [TotalReadsPercent] = CAST(100.0 * qsNow.total_logical_reads / qsTotal.total_logical_reads AS DECIMAL(6,2)),\n                    r.[DetailsInt]\n            FROM    #BlitzFirstResults r\n                LEFT OUTER JOIN #QueryStats qsTotal ON qsTotal.Pass = 0\n                LEFT OUTER JOIN #QueryStats qsTotalFirst ON qsTotalFirst.Pass = -1\n                LEFT OUTER JOIN #QueryStats qsNow ON r.QueryStatsNowID = qsNow.ID\n                LEFT OUTER JOIN #QueryStats qsFirst ON r.QueryStatsFirstID = qsFirst.ID\n            ORDER BY r.Priority ,\n                    r.FindingsGroup ,\n                    CASE\n                        WHEN r.CheckID = 6 THEN DetailsInt\n                        ELSE 0\n                    END DESC,\n                    r.Finding,\n                    r.ID;\n        END\n        ELSE IF @OutputType IN ( 'CSV', 'RSV' ) AND @SinceStartup = 0\n        BEGIN\n\n            SELECT  Result = CAST([Priority] AS NVARCHAR(100))\n                    + @separator + CAST(CheckID AS NVARCHAR(100))\n                    + @separator + COALESCE([FindingsGroup],\n                                            '(N/A)') + @separator\n                    + COALESCE([Finding], '(N/A)') + @separator\n                    + COALESCE(DatabaseName, '(N/A)') + @separator\n                    + COALESCE([URL], '(N/A)') + @separator\n                    + COALESCE([Details], '(N/A)')\n            FROM    #BlitzFirstResults\n            ORDER BY Priority ,\n                    FindingsGroup ,\n                    CASE\n                        WHEN CheckID = 6 THEN DetailsInt\n                        ELSE 0\n                    END DESC,\n                    Finding,\n                    Details;\n        END\n        ELSE IF @ExpertMode = 0 AND @OutputXMLasNVARCHAR = 0 AND @SinceStartup = 0\n        BEGIN\n            SELECT  [Priority] ,\n                    [FindingsGroup] ,\n                    [Finding] ,\n                    [URL] ,\n                    CAST(@StockDetailsHeader + [Details] + @StockDetailsFooter AS XML) AS Details,\n                    CAST(@StockWarningHeader + HowToStopIt + @StockWarningFooter AS XML) AS HowToStopIt,\n                    [QueryText],\n                    [QueryPlan]\n            FROM    #BlitzFirstResults\n            WHERE (@Seconds > 0 OR (Priority IN (0, 250, 251, 255))) /* For @Seconds = 0, filter out broken checks for now */\n            ORDER BY Priority ,\n                    FindingsGroup ,\n                    CASE\n                        WHEN CheckID = 6 THEN DetailsInt\n                        ELSE 0\n                    END DESC,\n                    Finding,\n                    ID;\n        END\n        ELSE IF @ExpertMode = 0 AND @OutputXMLasNVARCHAR = 1 AND @SinceStartup = 0\n        BEGIN\n            SELECT  [Priority] ,\n                    [FindingsGroup] ,\n                    [Finding] ,\n                    [URL] ,\n                    CAST(@StockDetailsHeader + [Details] + @StockDetailsFooter AS NVARCHAR(MAX)) AS Details,\n                    CAST([HowToStopIt] AS NVARCHAR(MAX)) AS HowToStopIt,\n                    CAST([QueryText] AS NVARCHAR(MAX)) AS QueryText,\n                    CAST([QueryPlan] AS NVARCHAR(MAX)) AS QueryPlan\n            FROM    #BlitzFirstResults\n            WHERE (@Seconds > 0 OR (Priority IN (0, 250, 251, 255))) /* For @Seconds = 0, filter out broken checks for now */\n            ORDER BY Priority ,\n                    FindingsGroup ,\n                    CASE\n                        WHEN CheckID = 6 THEN DetailsInt\n                        ELSE 0\n                    END DESC,\n                    Finding,\n                    ID;\n        END\n        ELSE IF @ExpertMode = 1\n        BEGIN\n            IF @SinceStartup = 0\n                SELECT  r.[Priority] ,\n                        r.[FindingsGroup] ,\n                        r.[Finding] ,\n                        r.[URL] ,\n                        CAST(@StockDetailsHeader + r.[Details] + @StockDetailsFooter AS XML) AS Details,\n                        CAST(@StockWarningHeader + r.HowToStopIt + @StockWarningFooter AS XML) AS HowToStopIt,\n                        r.[CheckID] ,\n                        r.[StartTime],\n                        r.[LoginName],\n                        r.[NTUserName],\n                        r.[OriginalLoginName],\n                        r.[ProgramName],\n                        r.[HostName],\n                        r.[DatabaseID],\n                        r.[DatabaseName],\n                        r.[OpenTransactionCount],\n                        r.[QueryPlan],\n                        r.[QueryText],\n                        qsNow.plan_handle AS PlanHandle,\n                        qsNow.sql_handle AS SqlHandle,\n                        qsNow.statement_start_offset AS StatementStartOffset,\n                        qsNow.statement_end_offset AS StatementEndOffset,\n                        [Executions] = qsNow.execution_count - (COALESCE(qsFirst.execution_count, 0)),\n                        [ExecutionsPercent] = CAST(100.0 * (qsNow.execution_count - (COALESCE(qsFirst.execution_count, 0))) / (qsTotal.execution_count - qsTotalFirst.execution_count) AS DECIMAL(6,2)),\n                        [Duration] = qsNow.total_elapsed_time - (COALESCE(qsFirst.total_elapsed_time, 0)),\n                        [DurationPercent] = CAST(100.0 * (qsNow.total_elapsed_time - (COALESCE(qsFirst.total_elapsed_time, 0))) / (qsTotal.total_elapsed_time - qsTotalFirst.total_elapsed_time) AS DECIMAL(6,2)),\n                        [CPU] = qsNow.total_worker_time - (COALESCE(qsFirst.total_worker_time, 0)),\n                        [CPUPercent] = CAST(100.0 * (qsNow.total_worker_time - (COALESCE(qsFirst.total_worker_time, 0))) / (qsTotal.total_worker_time - qsTotalFirst.total_worker_time) AS DECIMAL(6,2)),\n                        [Reads] = qsNow.total_logical_reads - (COALESCE(qsFirst.total_logical_reads, 0)),\n                        [ReadsPercent] = CAST(100.0 * (qsNow.total_logical_reads - (COALESCE(qsFirst.total_logical_reads, 0))) / (qsTotal.total_logical_reads - qsTotalFirst.total_logical_reads) AS DECIMAL(6,2)),\n                        [PlanCreationTime] = CONVERT(NVARCHAR(100), qsNow.creation_time ,121),\n                        [TotalExecutions] = qsNow.execution_count,\n                        [TotalExecutionsPercent] = CAST(100.0 * qsNow.execution_count / qsTotal.execution_count AS DECIMAL(6,2)),\n                        [TotalDuration] = qsNow.total_elapsed_time,\n                        [TotalDurationPercent] = CAST(100.0 * qsNow.total_elapsed_time / qsTotal.total_elapsed_time AS DECIMAL(6,2)),\n                        [TotalCPU] = qsNow.total_worker_time,\n                        [TotalCPUPercent] = CAST(100.0 * qsNow.total_worker_time / qsTotal.total_worker_time AS DECIMAL(6,2)),\n                        [TotalReads] = qsNow.total_logical_reads,\n                        [TotalReadsPercent] = CAST(100.0 * qsNow.total_logical_reads / qsTotal.total_logical_reads AS DECIMAL(6,2)),\n                        r.[DetailsInt]\n                FROM    #BlitzFirstResults r\n                    LEFT OUTER JOIN #QueryStats qsTotal ON qsTotal.Pass = 0\n                    LEFT OUTER JOIN #QueryStats qsTotalFirst ON qsTotalFirst.Pass = -1\n                    LEFT OUTER JOIN #QueryStats qsNow ON r.QueryStatsNowID = qsNow.ID\n                    LEFT OUTER JOIN #QueryStats qsFirst ON r.QueryStatsFirstID = qsFirst.ID\n                WHERE (@Seconds > 0 OR (Priority IN (0, 250, 251, 255))) /* For @Seconds = 0, filter out broken checks for now */\n                ORDER BY r.Priority ,\n                        r.FindingsGroup ,\n                        CASE\n                            WHEN r.CheckID = 6 THEN DetailsInt\n                            ELSE 0\n                        END DESC,\n                        r.Finding,\n                        r.ID;\n\n            -------------------------\n            --What happened: #WaitStats\n            -------------------------\n            IF @Seconds = 0\n                BEGIN\n                /* Measure waits in hours */\n                ;WITH max_batch AS (\n                    SELECT MAX(SampleTime) AS SampleTime\n                    FROM #WaitStats\n                )\n                SELECT\n                    'WAIT STATS' AS Pattern,\n                    b.SampleTime AS [Sample Ended],\n                    CAST(DATEDIFF(mi,wd1.SampleTime, wd2.SampleTime) / 60.0 AS DECIMAL(18,1)) AS [Hours Sample],\n                    wd1.wait_type,\n\t\t\t\t\tCOALESCE(wcat.WaitCategory, 'Other') AS wait_category,\n                    CAST(c.[Wait Time (Seconds)] / 60.0 / 60 AS DECIMAL(18,1)) AS [Wait Time (Hours)],\n                    CAST((wd2.wait_time_ms - wd1.wait_time_ms) / 1000.0 / 60 / 60 / cores.cpu_count / DATEDIFF(ss, wd1.SampleTime, wd2.SampleTime) AS DECIMAL(18,1)) AS [Per Core Per Hour],\n                    CAST(c.[Signal Wait Time (Seconds)] / 60.0 / 60 AS DECIMAL(18,1)) AS [Signal Wait Time (Hours)],\n                    CASE WHEN c.[Wait Time (Seconds)] > 0\n                     THEN CAST(100.*(c.[Signal Wait Time (Seconds)]/c.[Wait Time (Seconds)]) AS NUMERIC(4,1))\n                    ELSE 0 END AS [Percent Signal Waits],\n                    (wd2.waiting_tasks_count - wd1.waiting_tasks_count) AS [Number of Waits],\n                    CASE WHEN (wd2.waiting_tasks_count - wd1.waiting_tasks_count) > 0\n                    THEN\n                        CAST((wd2.wait_time_ms-wd1.wait_time_ms)/\n                            (1.0*(wd2.waiting_tasks_count - wd1.waiting_tasks_count)) AS NUMERIC(12,1))\n                    ELSE 0 END AS [Avg ms Per Wait],\n                    N'http://www.brentozar.com/sql/wait-stats/#' + wd1.wait_type AS URL\n                FROM  max_batch b\n                JOIN #WaitStats wd2 ON\n                    wd2.SampleTime =b.SampleTime\n                JOIN #WaitStats wd1 ON\n                    wd1.wait_type=wd2.wait_type AND\n                    wd2.SampleTime > wd1.SampleTime\n                CROSS APPLY (SELECT SUM(1) AS cpu_count FROM sys.dm_os_schedulers WHERE status = 'VISIBLE ONLINE' AND is_online = 1) AS cores\n                CROSS APPLY (SELECT\n                    CAST((wd2.wait_time_ms-wd1.wait_time_ms)/1000. AS NUMERIC(12,1)) AS [Wait Time (Seconds)],\n                    CAST((wd2.signal_wait_time_ms - wd1.signal_wait_time_ms)/1000. AS NUMERIC(12,1)) AS [Signal Wait Time (Seconds)]) AS c\n\t\t\t\tLEFT OUTER JOIN ##WaitCategories wcat ON wd1.wait_type = wcat.WaitType\n                WHERE (wd2.waiting_tasks_count - wd1.waiting_tasks_count) > 0\n                    AND wd2.wait_time_ms-wd1.wait_time_ms > 0\n                ORDER BY [Wait Time (Seconds)] DESC;\n                END\n            ELSE\n                BEGIN\n                /* Measure waits in seconds */\n                ;WITH max_batch AS (\n                    SELECT MAX(SampleTime) AS SampleTime\n                    FROM #WaitStats\n                )\n                SELECT\n                    'WAIT STATS' AS Pattern,\n                    b.SampleTime AS [Sample Ended],\n                    DATEDIFF(ss,wd1.SampleTime, wd2.SampleTime) AS [Seconds Sample],\n                    wd1.wait_type,\n\t\t\t\t\tCOALESCE(wcat.WaitCategory, 'Other') AS wait_category,\n                    c.[Wait Time (Seconds)],\n                    CAST((wd2.wait_time_ms - wd1.wait_time_ms) / 1000.0 / cores.cpu_count / DATEDIFF(ss, wd1.SampleTime, wd2.SampleTime) AS DECIMAL(18,1)) AS [Per Core Per Second],\n                    c.[Signal Wait Time (Seconds)],\n                    CASE WHEN c.[Wait Time (Seconds)] > 0\n                     THEN CAST(100.*(c.[Signal Wait Time (Seconds)]/c.[Wait Time (Seconds)]) AS NUMERIC(4,1))\n                    ELSE 0 END AS [Percent Signal Waits],\n                    (wd2.waiting_tasks_count - wd1.waiting_tasks_count) AS [Number of Waits],\n                    CASE WHEN (wd2.waiting_tasks_count - wd1.waiting_tasks_count) > 0\n                    THEN\n                        CAST((wd2.wait_time_ms-wd1.wait_time_ms)/\n                            (1.0*(wd2.waiting_tasks_count - wd1.waiting_tasks_count)) AS NUMERIC(12,1))\n                    ELSE 0 END AS [Avg ms Per Wait],\n                    N'http://www.brentozar.com/sql/wait-stats/#' + wd1.wait_type AS URL\n                FROM  max_batch b\n                JOIN #WaitStats wd2 ON\n                    wd2.SampleTime =b.SampleTime\n                JOIN #WaitStats wd1 ON\n                    wd1.wait_type=wd2.wait_type AND\n                    wd2.SampleTime > wd1.SampleTime\n                CROSS APPLY (SELECT SUM(1) AS cpu_count FROM sys.dm_os_schedulers WHERE status = 'VISIBLE ONLINE' AND is_online = 1) AS cores\n                CROSS APPLY (SELECT\n                    CAST((wd2.wait_time_ms-wd1.wait_time_ms)/1000. AS NUMERIC(12,1)) AS [Wait Time (Seconds)],\n                    CAST((wd2.signal_wait_time_ms - wd1.signal_wait_time_ms)/1000. AS NUMERIC(12,1)) AS [Signal Wait Time (Seconds)]) AS c\n\t\t\t\tLEFT OUTER JOIN ##WaitCategories wcat ON wd1.wait_type = wcat.WaitType\n                WHERE (wd2.waiting_tasks_count - wd1.waiting_tasks_count) > 0\n                    AND wd2.wait_time_ms-wd1.wait_time_ms > 0\n                ORDER BY [Wait Time (Seconds)] DESC;\n                END;\n\n            -------------------------\n            --What happened: #FileStats\n            -------------------------\n            WITH readstats AS (\n                SELECT 'PHYSICAL READS' AS Pattern,\n                ROW_NUMBER() OVER (ORDER BY wd2.avg_stall_read_ms DESC) AS StallRank,\n                wd2.SampleTime AS [Sample Time],\n                DATEDIFF(ss,wd1.SampleTime, wd2.SampleTime) AS [Sample (seconds)],\n                wd1.DatabaseName ,\n                wd1.FileLogicalName AS [File Name],\n                UPPER(SUBSTRING(wd1.PhysicalName, 1, 2)) AS [Drive] ,\n                wd1.SizeOnDiskMB ,\n                ( wd2.num_of_reads - wd1.num_of_reads ) AS [# Reads/Writes],\n                CASE WHEN wd2.num_of_reads - wd1.num_of_reads > 0\n                  THEN CAST(( wd2.bytes_read - wd1.bytes_read)/1024./1024. AS NUMERIC(21,1))\n                  ELSE 0\n                END AS [MB Read/Written],\n                wd2.avg_stall_read_ms AS [Avg Stall (ms)],\n                wd1.PhysicalName AS [file physical name]\n            FROM #FileStats wd2\n                JOIN #FileStats wd1 ON wd2.SampleTime > wd1.SampleTime\n                  AND wd1.DatabaseID = wd2.DatabaseID\n                  AND wd1.FileID = wd2.FileID\n            ),\n            writestats AS (\n                SELECT\n                'PHYSICAL WRITES' AS Pattern,\n                ROW_NUMBER() OVER (ORDER BY wd2.avg_stall_write_ms DESC) AS StallRank,\n                wd2.SampleTime AS [Sample Time],\n                DATEDIFF(ss,wd1.SampleTime, wd2.SampleTime) AS [Sample (seconds)],\n                wd1.DatabaseName ,\n                wd1.FileLogicalName AS [File Name],\n                UPPER(SUBSTRING(wd1.PhysicalName, 1, 2)) AS [Drive] ,\n                wd1.SizeOnDiskMB ,\n                ( wd2.num_of_writes - wd1.num_of_writes ) AS [# Reads/Writes],\n                CASE WHEN wd2.num_of_writes - wd1.num_of_writes > 0\n                  THEN CAST(( wd2.bytes_written - wd1.bytes_written)/1024./1024. AS NUMERIC(21,1))\n                  ELSE 0\n                END AS [MB Read/Written],\n                wd2.avg_stall_write_ms AS [Avg Stall (ms)],\n                wd1.PhysicalName AS [file physical name]\n            FROM #FileStats wd2\n                JOIN #FileStats wd1 ON wd2.SampleTime > wd1.SampleTime\n                  AND wd1.DatabaseID = wd2.DatabaseID\n                  AND wd1.FileID = wd2.FileID\n            )\n            SELECT\n                Pattern, [Sample Time], [Sample (seconds)], [File Name], [Drive],  [# Reads/Writes],[MB Read/Written],[Avg Stall (ms)], [file physical name]\n            FROM readstats\n            WHERE StallRank <=5 AND [MB Read/Written] > 0\n            UNION ALL\n            SELECT Pattern, [Sample Time], [Sample (seconds)], [File Name], [Drive],  [# Reads/Writes],[MB Read/Written],[Avg Stall (ms)], [file physical name]\n            FROM writestats\n            WHERE StallRank <=5 AND [MB Read/Written] > 0;\n\n\n            -------------------------\n            --What happened: #PerfmonStats\n            -------------------------\n\n            SELECT 'PERFMON' AS Pattern, pLast.[object_name], pLast.counter_name, pLast.instance_name,\n                pFirst.SampleTime AS FirstSampleTime, pFirst.cntr_value AS FirstSampleValue,\n                pLast.SampleTime AS LastSampleTime, pLast.cntr_value AS LastSampleValue,\n                pLast.cntr_value - pFirst.cntr_value AS ValueDelta,\n                ((1.0 * pLast.cntr_value - pFirst.cntr_value) / DATEDIFF(ss, pFirst.SampleTime, pLast.SampleTime)) AS ValuePerSecond\n                FROM #PerfmonStats pLast\n                    INNER JOIN #PerfmonStats pFirst ON pFirst.[object_name] = pLast.[object_name] AND pFirst.counter_name = pLast.counter_name AND (pFirst.instance_name = pLast.instance_name OR (pFirst.instance_name IS NULL AND pLast.instance_name IS NULL))\n                    AND pLast.ID > pFirst.ID\n\t\t\t\tWHERE pLast.cntr_value <> pFirst.cntr_value\n                ORDER BY Pattern, pLast.[object_name], pLast.counter_name, pLast.instance_name\n\n\n            -------------------------\n            --What happened: #QueryStats\n            -------------------------\n            IF @CheckProcedureCache = 1\n\t\t\tBEGIN\n\t\t\t\n\t\t\tSELECT qsNow.*, qsFirst.*\n            FROM #QueryStats qsNow\n              INNER JOIN #QueryStats qsFirst ON qsNow.[sql_handle] = qsFirst.[sql_handle] AND qsNow.statement_start_offset = qsFirst.statement_start_offset AND qsNow.statement_end_offset = qsFirst.statement_end_offset AND qsNow.plan_generation_num = qsFirst.plan_generation_num AND qsNow.plan_handle = qsFirst.plan_handle AND qsFirst.Pass = 1\n            WHERE qsNow.Pass = 2\n\t\t\tEND\n\t\t\tELSE\n\t\t\tBEGIN\n\t\t\tSELECT 'Plan Cache' AS [Pattern], 'Plan cache not analyzed' AS [Finding], 'Use @CheckProcedureCache = 1 or run sp_BlitzCache for more analysis' AS [More Info], CONVERT(XML, @StockDetailsHeader + 'firstresponderkit.org' + @StockDetailsFooter) AS [Details]\n\t\t\tEND\n        END\n\n    DROP TABLE #BlitzFirstResults;\n\n    /* What's running right now? This is the first and last result set. */\n    IF @SinceStartup = 0 AND @Seconds > 0 AND @ExpertMode = 1 \nIF @SinceStartup = 0 AND @Seconds > 0 AND @ExpertMode = 1 \n    BEGIN\n\t\tIF OBJECT_ID('master.dbo.sp_BlitzWho') IS NULL AND OBJECT_ID('dbo.sp_BlitzWho') IS NULL\n\t\tBEGIN\n\t\t\tPRINT N'sp_BlitzWho is not installed in the current database_files.  You can get a copy from http://FirstResponderKit.org'\n\t\tEND\n\t\tELSE\n\t\tBEGIN\n\t\t\tEXEC (@BlitzWho)\n\t\tEND\n    END /* IF @SinceStartup = 0 AND @Seconds > 0 AND @ExpertMode = 1   -   What's running right now? This is the first and last result set. */\n\nEND /* IF @LogMessage IS NULL */\nEND /* ELSE IF @OutputType = 'SCHEMA' */\n\nSET NOCOUNT OFF;\nGO\n\n\n\n/* How to run it:\nEXEC dbo.sp_BlitzFirst\n\nWith extra diagnostic info:\nEXEC dbo.sp_BlitzFirst @ExpertMode = 1;\n\nSaving output to tables:\nEXEC sp_BlitzFirst\n, @OutputDatabaseName = 'DBAtools'\n, @OutputSchemaName = 'dbo'\n, @OutputTableName = 'BlitzFirst'\n, @OutputTableNameFileStats = 'BlitzFirst_FileStats'\n, @OutputTableNamePerfmonStats = 'BlitzFirst_PerfmonStats'\n, @OutputTableNameWaitStats = 'BlitzFirst_WaitStats'\n, @OutputTableNameBlitzCache = 'BlitzCache'\n*/\nSET ANSI_NULLS ON;\nSET ANSI_PADDING ON;\nSET ANSI_WARNINGS ON;\nSET ARITHABORT ON;\nSET CONCAT_NULL_YIELDS_NULL ON;\nSET QUOTED_IDENTIFIER ON;\nSET STATISTICS IO OFF;\nSET STATISTICS TIME OFF;\nGO\n\nIF OBJECT_ID('dbo.sp_BlitzIndex') IS NULL\n  EXEC ('CREATE PROCEDURE dbo.sp_BlitzIndex AS RETURN 0;');\nGO\n\nALTER PROCEDURE dbo.sp_BlitzIndex\n    @DatabaseName NVARCHAR(128) = NULL, /*Defaults to current DB if not specified*/\n    @SchemaName NVARCHAR(128) = NULL, /*Requires table_name as well.*/\n    @TableName NVARCHAR(128) = NULL,  /*Requires schema_name as well.*/\n    @Mode TINYINT=0, /*0=Diagnose, 1=Summarize, 2=Index Usage Detail, 3=Missing Index Detail, 4=Diagnose Details*/\n        /*Note:@Mode doesn't matter if you're specifying schema_name and @TableName.*/\n    @Filter TINYINT = 0, /* 0=no filter (default). 1=No low-usage warnings for objects with 0 reads. 2=Only warn for objects >= 500MB */\n        /*Note:@Filter doesn't do anything unless @Mode=0*/\n    @SkipPartitions BIT\t= 0,\n    @SkipStatistics BIT\t= 1,\n    @GetAllDatabases BIT = 0,\n    @BringThePain BIT = 0,\n    @ThresholdMB INT = 250 /* Number of megabytes that an object must be before we include it in basic results */,\n    @OutputServerName NVARCHAR(256) = NULL ,\n    @OutputDatabaseName NVARCHAR(256) = NULL ,\n    @OutputSchemaName NVARCHAR(256) = NULL ,\n    @OutputTableName NVARCHAR(256) = NULL ,\n    @Help TINYINT = 0,\n    @VersionDate DATETIME = NULL OUTPUT\nWITH RECOMPILE\nAS\nSET NOCOUNT ON;\nSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\n\nDECLARE @Version VARCHAR(30);\nSET @Version = '6.2';\nSET @VersionDate = '20180201';\n\n\nIF @Help = 1 PRINT '\n/*\nsp_BlitzIndex from http://FirstResponderKit.org\n\t\nThis script analyzes the design and performance of your indexes.\n\nTo learn more, visit http://FirstResponderKit.org where you can download new\nversions for free, watch training videos on how it works, get more info on\nthe findings, contribute your own code, and more.\n\nKnown limitations of this version:\n - Only Microsoft-supported versions of SQL Server. Sorry, 2005 and 2000.\n - The @OutputDatabaseName parameters are not functional yet. To check the\n   status of this enhancement request, visit:\n   https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/issues/221\n - Does not analyze columnstore, spatial, XML, or full text indexes. If you\n   would like to contribute code to analyze those, head over to Github and\n   check out the issues list: http://FirstResponderKit.org\n - Index create statements are just to give you a rough idea of the syntax. It includes filters and fillfactor.\n --        Example 1: index creates use ONLINE=? instead of ONLINE=ON / ONLINE=OFF. This is because it is important \n           for the user to understand if it is going to be offline and not just run a script.\n --        Example 2: they do not include all the options the index may have been created with (padding, compression\n           filegroup/partition scheme etc.)\n --        (The compression and filegroup index create syntax is not trivial because it is set at the partition \n           level and is not trivial to code.)\n - Does not advise you about data modeling for clustered indexes and primary keys (primarily looks for signs of insanity.)\n\nUnknown limitations of this version:\n - We knew them once, but we forgot.\n\nChanges - for the full list of improvements and fixes in this version, see:\nhttps://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/milestone/4?closed=1\n\n\nMIT License\n\nCopyright (c) 2016 Brent Ozar Unlimited\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n';\n\n\nDECLARE @ScriptVersionName NVARCHAR(50);\nDECLARE @DaysUptime NUMERIC(23,2);\nDECLARE @DatabaseID INT;\nDECLARE @ObjectID INT;\nDECLARE @dsql NVARCHAR(MAX);\nDECLARE @params NVARCHAR(MAX);\nDECLARE @msg NVARCHAR(4000);\nDECLARE @ErrorSeverity INT;\nDECLARE @ErrorState INT;\nDECLARE @Rowcount BIGINT;\nDECLARE @SQLServerProductVersion NVARCHAR(128);\nDECLARE @SQLServerEdition INT;\nDECLARE @FilterMB INT;\nDECLARE @collation NVARCHAR(256);\nDECLARE @NumDatabases INT;\nDECLARE @LineFeed NVARCHAR(5);\n\nSET @LineFeed = CHAR(13) + CHAR(10);\nSELECT @SQLServerProductVersion = CAST(SERVERPROPERTY('ProductVersion') AS NVARCHAR(128));\nSELECT @SQLServerEdition =CAST(SERVERPROPERTY('EngineEdition') AS INT); /* We default to online index creates where EngineEdition=3*/\nSET @FilterMB=250;\nSELECT @ScriptVersionName = 'sp_BlitzIndex(TM) v' + @Version + ' - ' + DATENAME(MM, @VersionDate) + ' ' + RIGHT('0'+DATENAME(DD, @VersionDate),2) + ', ' + DATENAME(YY, @VersionDate);\n\nRAISERROR(N'Starting run. %s', 0,1, @ScriptVersionName) WITH NOWAIT;\n\nIF OBJECT_ID('tempdb..#IndexSanity') IS NOT NULL \n    DROP TABLE #IndexSanity;\n\nIF OBJECT_ID('tempdb..#IndexPartitionSanity') IS NOT NULL \n    DROP TABLE #IndexPartitionSanity;\n\nIF OBJECT_ID('tempdb..#IndexSanitySize') IS NOT NULL \n    DROP TABLE #IndexSanitySize;\n\nIF OBJECT_ID('tempdb..#IndexColumns') IS NOT NULL \n    DROP TABLE #IndexColumns;\n\nIF OBJECT_ID('tempdb..#MissingIndexes') IS NOT NULL \n    DROP TABLE #MissingIndexes;\n\nIF OBJECT_ID('tempdb..#ForeignKeys') IS NOT NULL \n    DROP TABLE #ForeignKeys;\n\nIF OBJECT_ID('tempdb..#BlitzIndexResults') IS NOT NULL \n    DROP TABLE #BlitzIndexResults;\n        \nIF OBJECT_ID('tempdb..#IndexCreateTsql') IS NOT NULL    \n    DROP TABLE #IndexCreateTsql;\n\nIF OBJECT_ID('tempdb..#DatabaseList') IS NOT NULL \n    DROP TABLE #DatabaseList;\n\nIF OBJECT_ID('tempdb..#Statistics') IS NOT NULL \n    DROP TABLE #Statistics;\n\nIF OBJECT_ID('tempdb..#PartitionCompressionInfo') IS NOT NULL \n    DROP TABLE #PartitionCompressionInfo;\n\nIF OBJECT_ID('tempdb..#ComputedColumns') IS NOT NULL \n    DROP TABLE #ComputedColumns;\n\t\nIF OBJECT_ID('tempdb..#TraceStatus') IS NOT NULL\n\tDROP TABLE #TraceStatus;\n\nIF OBJECT_ID('tempdb..#TemporalTables') IS NOT NULL\n\tDROP TABLE #TemporalTables;\n\t\t\n        RAISERROR (N'Create temp tables.',0,1) WITH NOWAIT;\n        CREATE TABLE #BlitzIndexResults\n            (\n              blitz_result_id INT IDENTITY PRIMARY KEY,\n              check_id INT NOT NULL,\n              index_sanity_id INT NULL,\n              Priority INT NULL,\n              findings_group VARCHAR(4000) NOT NULL,\n              finding VARCHAR(200) NOT NULL,\n              [database_name] VARCHAR(200) NULL,\n              URL VARCHAR(200) NOT NULL,\n              details NVARCHAR(4000) NOT NULL,\n              index_definition NVARCHAR(MAX) NOT NULL,\n              secret_columns NVARCHAR(MAX) NULL,\n              index_usage_summary NVARCHAR(MAX) NULL,\n              index_size_summary NVARCHAR(MAX) NULL,\n              create_tsql NVARCHAR(MAX) NULL,\n              more_info NVARCHAR(MAX)NULL\n            );\n\n        CREATE TABLE #IndexSanity\n            (\n              [index_sanity_id] INT IDENTITY PRIMARY KEY CLUSTERED,\n              [database_id] SMALLINT NOT NULL ,\n              [object_id] INT NOT NULL ,\n              [index_id] INT NOT NULL ,\n              [index_type] TINYINT NOT NULL,\n              [database_name] NVARCHAR(128) NOT NULL ,\n              [schema_name] NVARCHAR(128) NOT NULL ,\n              [object_name] NVARCHAR(128) NOT NULL ,\n              index_name NVARCHAR(128) NULL ,\n              key_column_names NVARCHAR(MAX) NULL ,\n              key_column_names_with_sort_order NVARCHAR(MAX) NULL ,\n              key_column_names_with_sort_order_no_types NVARCHAR(MAX) NULL ,\n              count_key_columns INT NULL ,\n              include_column_names NVARCHAR(MAX) NULL ,\n              include_column_names_no_types NVARCHAR(MAX) NULL ,\n              count_included_columns INT NULL ,\n              partition_key_column_name NVARCHAR(MAX) NULL,\n              filter_definition NVARCHAR(MAX) NOT NULL ,\n              is_indexed_view BIT NOT NULL ,\n              is_unique BIT NOT NULL ,\n              is_primary_key BIT NOT NULL ,\n              is_XML BIT NOT NULL,\n              is_spatial BIT NOT NULL,\n              is_NC_columnstore BIT NOT NULL,\n              is_CX_columnstore BIT NOT NULL,\n              is_disabled BIT NOT NULL ,\n              is_hypothetical BIT NOT NULL ,\n              is_padded BIT NOT NULL ,\n              fill_factor SMALLINT NOT NULL ,\n              user_seeks BIGINT NOT NULL ,\n              user_scans BIGINT NOT NULL ,\n              user_lookups BIGINT NOT  NULL ,\n              user_updates BIGINT NULL ,\n              last_user_seek DATETIME NULL ,\n              last_user_scan DATETIME NULL ,\n              last_user_lookup DATETIME NULL ,\n              last_user_update DATETIME NULL ,\n              is_referenced_by_foreign_key BIT DEFAULT(0),\n              secret_columns NVARCHAR(MAX) NULL,\n              count_secret_columns INT NULL,\n              create_date DATETIME NOT NULL,\n              modify_date DATETIME NOT NULL,\n            [db_schema_object_name] AS [schema_name] + '.' + [object_name]  ,\n            [db_schema_object_indexid] AS [schema_name] + '.' + [object_name]\n                + CASE WHEN [index_name] IS NOT NULL THEN '.' + index_name\n                ELSE ''\n                END + ' (' + CAST(index_id AS NVARCHAR(20)) + ')' ,\n            first_key_column_name AS CASE    WHEN count_key_columns > 1\n                THEN LEFT(key_column_names, CHARINDEX(',', key_column_names, 0) - 1)\n                ELSE key_column_names\n                END ,\n            index_definition AS \n            CASE WHEN partition_key_column_name IS NOT NULL \n                THEN N'[PARTITIONED BY:' + partition_key_column_name +  N']' \n                ELSE '' \n                END +\n                CASE index_id\n                    WHEN 0 THEN N'[HEAP] '\n                    WHEN 1 THEN N'[CX] '\n                    ELSE N'' END + CASE WHEN is_indexed_view = 1 THEN '[VIEW] '\n                    ELSE N'' END + CASE WHEN is_primary_key = 1 THEN N'[PK] '\n                    ELSE N'' END + CASE WHEN is_XML = 1 THEN N'[XML] '\n                    ELSE N'' END + CASE WHEN is_spatial = 1 THEN N'[SPATIAL] '\n                    ELSE N'' END + CASE WHEN is_NC_columnstore = 1 THEN N'[COLUMNSTORE] '\n                    ELSE N'' END + CASE WHEN is_disabled = 1 THEN N'[DISABLED] '\n                    ELSE N'' END + CASE WHEN is_hypothetical = 1 THEN N'[HYPOTHETICAL] '\n                    ELSE N'' END + CASE WHEN is_unique = 1 AND is_primary_key = 0 THEN N'[UNIQUE] '\n                    ELSE N'' END + CASE WHEN count_key_columns > 0 THEN \n                        N'[' + CAST(count_key_columns AS VARCHAR(10)) + N' KEY' \n                            + CASE WHEN count_key_columns > 1 THEN  N'S' ELSE N'' END\n                            + N'] ' + LTRIM(key_column_names_with_sort_order)\n                    ELSE N'' END + CASE WHEN count_included_columns > 0 THEN \n                        N' [' + CAST(count_included_columns AS VARCHAR(10))  + N' INCLUDE' + \n                            + CASE WHEN count_included_columns > 1 THEN  N'S' ELSE N'' END                    \n                            + N'] ' + include_column_names\n                    ELSE N'' END + CASE WHEN filter_definition <> N'' THEN N' [FILTER] ' + filter_definition\n                    ELSE N'' END ,\n            [total_reads] AS user_seeks + user_scans + user_lookups,\n            [reads_per_write] AS CAST(CASE WHEN user_updates > 0\n                THEN ( user_seeks + user_scans + user_lookups )  / (1.0 * user_updates)\n                ELSE 0 END AS MONEY) ,\n            [index_usage_summary] AS N'Reads: ' + \n                REPLACE(CONVERT(NVARCHAR(30),CAST((user_seeks + user_scans + user_lookups) AS MONEY), 1), '.00', '')\n                + CASE WHEN user_seeks + user_scans + user_lookups > 0 THEN\n                    N' (' \n                        + RTRIM(\n                        CASE WHEN user_seeks > 0 THEN REPLACE(CONVERT(NVARCHAR(30),CAST((user_seeks) AS MONEY), 1), '.00', '') + N' seek ' ELSE N'' END\n                        + CASE WHEN user_scans > 0 THEN REPLACE(CONVERT(NVARCHAR(30),CAST((user_scans) AS MONEY), 1), '.00', '') + N' scan '  ELSE N'' END\n                        + CASE WHEN user_lookups > 0 THEN  REPLACE(CONVERT(NVARCHAR(30),CAST((user_lookups) AS MONEY), 1), '.00', '') + N' lookup' ELSE N'' END\n                        )\n                        + N') '\n                    ELSE N' ' END \n                + N'Writes:' + \n                REPLACE(CONVERT(NVARCHAR(30),CAST(user_updates AS MONEY), 1), '.00', ''),\n            [more_info] AS N'EXEC dbo.sp_BlitzIndex @DatabaseName=' + QUOTENAME([database_name],'''') + \n                N', @SchemaName=' + QUOTENAME([schema_name],'''') + N', @TableName=' + QUOTENAME([object_name],'''') + N';'\n\t\t);\n        RAISERROR (N'Adding UQ index on #IndexSanity (database_id, object_id, index_id)',0,1) WITH NOWAIT;\n        IF NOT EXISTS(SELECT 1 FROM tempdb.sys.indexes WHERE name='uq_database_id_object_id_index_id') \n            CREATE UNIQUE INDEX uq_database_id_object_id_index_id ON #IndexSanity (database_id, object_id, index_id);\n\n\n        CREATE TABLE #IndexPartitionSanity\n            (\n              [index_partition_sanity_id] INT IDENTITY,\n              [index_sanity_id] INT NULL ,\n              [database_id] INT NOT NULL ,\n              [object_id] INT NOT NULL ,\n\t\t\t  [schema_name] NVARCHAR(128) NOT NULL,\n              [index_id] INT NOT NULL ,\n              [partition_number] INT NOT NULL ,\n              row_count BIGINT NOT NULL ,\n              reserved_MB NUMERIC(29,2) NOT NULL ,\n              reserved_LOB_MB NUMERIC(29,2) NOT NULL ,\n              reserved_row_overflow_MB NUMERIC(29,2) NOT NULL ,\n              leaf_insert_count BIGINT NULL ,\n              leaf_delete_count BIGINT NULL ,\n              leaf_update_count BIGINT NULL ,\n              range_scan_count BIGINT NULL ,\n              singleton_lookup_count BIGINT NULL , \n              forwarded_fetch_count BIGINT NULL ,\n              lob_fetch_in_pages BIGINT NULL ,\n              lob_fetch_in_bytes BIGINT NULL ,\n              row_overflow_fetch_in_pages BIGINT NULL ,\n              row_overflow_fetch_in_bytes BIGINT NULL ,\n              row_lock_count BIGINT NULL ,\n              row_lock_wait_count BIGINT NULL ,\n              row_lock_wait_in_ms BIGINT NULL ,\n              page_lock_count BIGINT NULL ,\n              page_lock_wait_count BIGINT NULL ,\n              page_lock_wait_in_ms BIGINT NULL ,\n              index_lock_promotion_attempt_count BIGINT NULL ,\n              index_lock_promotion_count BIGINT NULL,\n              data_compression_desc VARCHAR(60) NULL\n            );\n\n        CREATE TABLE #IndexSanitySize\n            (\n              [index_sanity_size_id] INT IDENTITY NOT NULL ,\n              [index_sanity_id] INT NULL ,\n              [database_id] INT NOT NULL,\n\t\t\t  [schema_name] NVARCHAR(128) NOT NULL,\n              partition_count INT NOT NULL ,\n              total_rows BIGINT NOT NULL ,\n              total_reserved_MB NUMERIC(29,2) NOT NULL ,\n              total_reserved_LOB_MB NUMERIC(29,2) NOT NULL ,\n              total_reserved_row_overflow_MB NUMERIC(29,2) NOT NULL ,\n              total_leaf_delete_count BIGINT NULL,\n              total_leaf_update_count BIGINT NULL,\n              total_range_scan_count BIGINT NULL,\n              total_singleton_lookup_count BIGINT NULL,\n              total_forwarded_fetch_count BIGINT NULL,\n              total_row_lock_count BIGINT NULL ,\n              total_row_lock_wait_count BIGINT NULL ,\n              total_row_lock_wait_in_ms BIGINT NULL ,\n              avg_row_lock_wait_in_ms BIGINT NULL ,\n              total_page_lock_count BIGINT NULL ,\n              total_page_lock_wait_count BIGINT NULL ,\n              total_page_lock_wait_in_ms BIGINT NULL ,\n              avg_page_lock_wait_in_ms BIGINT NULL ,\n               total_index_lock_promotion_attempt_count BIGINT NULL ,\n              total_index_lock_promotion_count BIGINT NULL ,\n              data_compression_desc VARCHAR(8000) NULL,\n              index_size_summary AS ISNULL(\n                CASE WHEN partition_count > 1\n                        THEN N'[' + CAST(partition_count AS NVARCHAR(10)) + N' PARTITIONS] '\n                        ELSE N''\n                END + REPLACE(CONVERT(NVARCHAR(30),CAST([total_rows] AS MONEY), 1), N'.00', N'') + N' rows; '\n                + CASE WHEN total_reserved_MB > 1024 THEN \n                    CAST(CAST(total_reserved_MB/1024. AS NUMERIC(29,1)) AS NVARCHAR(30)) + N'GB'\n                ELSE \n                    CAST(CAST(total_reserved_MB AS NUMERIC(29,1)) AS NVARCHAR(30)) + N'MB'\n                END\n                + CASE WHEN total_reserved_LOB_MB > 1024 THEN \n                    N'; ' + CAST(CAST(total_reserved_LOB_MB/1024. AS NUMERIC(29,1)) AS NVARCHAR(30)) + N'GB LOB'\n                WHEN total_reserved_LOB_MB > 0 THEN\n                    N'; ' + CAST(CAST(total_reserved_LOB_MB AS NUMERIC(29,1)) AS NVARCHAR(30)) + N'MB LOB'\n                ELSE ''\n                END\n                 + CASE WHEN total_reserved_row_overflow_MB > 1024 THEN\n                    N'; ' + CAST(CAST(total_reserved_row_overflow_MB/1024. AS NUMERIC(29,1)) AS NVARCHAR(30)) + N'GB Row Overflow'\n                WHEN total_reserved_row_overflow_MB > 0 THEN\n                    N'; ' + CAST(CAST(total_reserved_row_overflow_MB AS NUMERIC(29,1)) AS NVARCHAR(30)) + N'MB Row Overflow'\n                ELSE ''\n                END ,\n                    N'Error- NULL in computed column'),\n            index_op_stats AS ISNULL(\n                (\n                    REPLACE(CONVERT(NVARCHAR(30),CAST(total_singleton_lookup_count AS MONEY), 1),N'.00',N'') + N' singleton lookups; '\n                    + REPLACE(CONVERT(NVARCHAR(30),CAST(total_range_scan_count AS MONEY), 1),N'.00',N'') + N' scans/seeks; '\n                    + REPLACE(CONVERT(NVARCHAR(30),CAST(total_leaf_delete_count AS MONEY), 1),N'.00',N'') + N' deletes; '\n                    + REPLACE(CONVERT(NVARCHAR(30),CAST(total_leaf_update_count AS MONEY), 1),N'.00',N'') + N' updates; '\n                    + CASE WHEN ISNULL(total_forwarded_fetch_count,0) >0 THEN\n                        REPLACE(CONVERT(NVARCHAR(30),CAST(total_forwarded_fetch_count AS MONEY), 1),N'.00',N'') + N' forward records fetched; '\n                    ELSE N'' END\n\n                    /* rows will only be in this dmv when data is in memory for the table */\n                ), N'Table metadata not in memory'),\n            index_lock_wait_summary AS ISNULL(\n                CASE WHEN total_row_lock_wait_count = 0 AND  total_page_lock_wait_count = 0 AND\n                    total_index_lock_promotion_attempt_count = 0 THEN N'0 lock waits.'\n                ELSE\n                    CASE WHEN total_row_lock_wait_count > 0 THEN\n                        N'Row lock waits: ' + REPLACE(CONVERT(NVARCHAR(30),CAST(total_row_lock_wait_count AS MONEY), 1), N'.00', N'')\n                        + N'; total duration: ' + \n                            CASE WHEN total_row_lock_wait_in_ms >= 60000 THEN /*More than 1 min*/\n                                REPLACE(CONVERT(NVARCHAR(30),CAST((total_row_lock_wait_in_ms/60000) AS MONEY), 1), N'.00', N'') + N' minutes; '\n                            ELSE                         \n                                REPLACE(CONVERT(NVARCHAR(30),CAST(ISNULL(total_row_lock_wait_in_ms/1000,0) AS MONEY), 1), N'.00', N'') + N' seconds; '\n                            END\n                        + N'avg duration: ' + \n                            CASE WHEN avg_row_lock_wait_in_ms >= 60000 THEN /*More than 1 min*/\n                                REPLACE(CONVERT(NVARCHAR(30),CAST((avg_row_lock_wait_in_ms/60000) AS MONEY), 1), N'.00', N'') + N' minutes; '\n                            ELSE                         \n                                REPLACE(CONVERT(NVARCHAR(30),CAST(ISNULL(avg_row_lock_wait_in_ms/1000,0) AS MONEY), 1), N'.00', N'') + N' seconds; '\n                            END\n                    ELSE N''\n                    END +\n                    CASE WHEN total_page_lock_wait_count > 0 THEN\n                        N'Page lock waits: ' + REPLACE(CONVERT(NVARCHAR(30),CAST(total_page_lock_wait_count AS MONEY), 1), N'.00', N'')\n                        + N'; total duration: ' + \n                            CASE WHEN total_page_lock_wait_in_ms >= 60000 THEN /*More than 1 min*/\n                                REPLACE(CONVERT(NVARCHAR(30),CAST((total_page_lock_wait_in_ms/60000) AS MONEY), 1), N'.00', N'') + N' minutes; '\n                            ELSE                         \n                                REPLACE(CONVERT(NVARCHAR(30),CAST(ISNULL(total_page_lock_wait_in_ms/1000,0) AS MONEY), 1), N'.00', N'') + N' seconds; '\n                            END\n                        + N'avg duration: ' + \n                            CASE WHEN avg_page_lock_wait_in_ms >= 60000 THEN /*More than 1 min*/\n                                REPLACE(CONVERT(NVARCHAR(30),CAST((avg_page_lock_wait_in_ms/60000) AS MONEY), 1), N'.00', N'') + N' minutes; '\n                            ELSE                         \n                                REPLACE(CONVERT(NVARCHAR(30),CAST(ISNULL(avg_page_lock_wait_in_ms/1000,0) AS MONEY), 1), N'.00', N'') + N' seconds; '\n                            END\n                    ELSE N''\n                    END +\n                    CASE WHEN total_index_lock_promotion_attempt_count > 0 THEN\n                        N'Lock escalation attempts: ' + REPLACE(CONVERT(NVARCHAR(30),CAST(total_index_lock_promotion_attempt_count AS MONEY), 1), N'.00', N'')\n                        + N'; Actual Escalations: ' + REPLACE(CONVERT(NVARCHAR(30),CAST(ISNULL(total_index_lock_promotion_count,0) AS MONEY), 1), N'.00', N'') + N'.'\n                    ELSE N''\n                    END\n                END                  \n                    ,'Error- NULL in computed column')\n            );\n\n        CREATE TABLE #IndexColumns\n            (\n              [database_id] INT NOT NULL,\n\t\t\t  [schema_name] NVARCHAR(128),\n              [object_id] INT NOT NULL ,\n              [index_id] INT NOT NULL ,\n              [key_ordinal] INT NULL ,\n              is_included_column BIT NULL ,\n              is_descending_key BIT NULL ,\n              [partition_ordinal] INT NULL ,\n              column_name NVARCHAR(256) NOT NULL ,\n              system_type_name NVARCHAR(256) NOT NULL,\n              max_length SMALLINT NOT NULL,\n              [precision] TINYINT NOT NULL,\n              [scale] TINYINT NOT NULL,\n              collation_name NVARCHAR(256) NULL,\n              is_nullable BIT NULL,\n              is_identity BIT NULL,\n              is_computed BIT NULL,\n              is_replicated BIT NULL,\n              is_sparse BIT NULL,\n              is_filestream BIT NULL,\n              seed_value BIGINT NULL,\n              increment_value INT NULL ,\n              last_value BIGINT NULL,\n              is_not_for_replication BIT NULL\n            );\n        CREATE CLUSTERED INDEX CLIX_database_id_object_id_index_id ON #IndexColumns\n            (database_id, object_id, index_id);\n\n        CREATE TABLE #MissingIndexes\n            ([database_id] INT NOT NULL,\n\t\t\t[object_id] INT NOT NULL,\n            [database_name] NVARCHAR(128) NOT NULL ,\n            [schema_name] NVARCHAR(128) NOT NULL ,\n            [table_name] NVARCHAR(128),\n            [statement] NVARCHAR(512) NOT NULL,\n            magic_benefit_number AS (( user_seeks + user_scans ) * avg_total_user_cost * avg_user_impact),\n            avg_total_user_cost NUMERIC(29,4) NOT NULL,\n            avg_user_impact NUMERIC(29,1) NOT NULL,\n            user_seeks BIGINT NOT NULL,\n            user_scans BIGINT NOT NULL,\n            unique_compiles BIGINT NULL,\n            equality_columns NVARCHAR(4000), \n            inequality_columns NVARCHAR(4000),\n            included_columns NVARCHAR(4000),\n\t\t\tis_low BIT,\n                [index_estimated_impact] AS \n                    REPLACE(CONVERT(NVARCHAR(256),CAST(CAST(\n                                    (user_seeks + user_scans)\n                                     AS BIGINT) AS MONEY), 1), '.00', '') + N' use' \n                        + CASE WHEN (user_seeks + user_scans) > 1 THEN N's' ELSE N'' END\n                         +N'; Impact: ' + CAST(avg_user_impact AS NVARCHAR(30))\n                        + N'%; Avg query cost: '\n                        + CAST(avg_total_user_cost AS NVARCHAR(30)),\n                [missing_index_details] AS\n                    CASE WHEN equality_columns IS NOT NULL THEN N'EQUALITY: ' + equality_columns + N' '\n                         ELSE N''\n                    END + CASE WHEN inequality_columns IS NOT NULL THEN N'INEQUALITY: ' + inequality_columns + N' '\n                       ELSE N''\n                    END + CASE WHEN included_columns IS NOT NULL THEN N'INCLUDES: ' + included_columns + N' '\n                        ELSE N''\n                    END,\n                [create_tsql] AS N'CREATE INDEX [ix_' + table_name + N'_' \n                    + REPLACE(REPLACE(REPLACE(REPLACE(\n                        ISNULL(equality_columns,N'')+ \n                        CASE WHEN equality_columns IS NOT NULL AND inequality_columns IS NOT NULL THEN N'_' ELSE N'' END\n                        + ISNULL(inequality_columns,''),',','')\n                        ,'[',''),']',''),' ','_') \n                    + CASE WHEN included_columns IS NOT NULL THEN N'_includes' ELSE N'' END + N'] ON ' \n                    + [statement] + N' (' + ISNULL(equality_columns,N'')\n                    + CASE WHEN equality_columns IS NOT NULL AND inequality_columns IS NOT NULL THEN N', ' ELSE N'' END\n                    + CASE WHEN inequality_columns IS NOT NULL THEN inequality_columns ELSE N'' END + \n                    ') ' + CASE WHEN included_columns IS NOT NULL THEN N' INCLUDE (' + included_columns + N')' ELSE N'' END\n                    + N' WITH (' \n                        + N'FILLFACTOR=100, ONLINE=?, SORT_IN_TEMPDB=?, DATA_COMPRESSION=?' \n                    + N')'\n                    + N';'\n                    ,\n                [more_info] AS N'EXEC dbo.sp_BlitzIndex @DatabaseName=' + QUOTENAME([database_name],'''') + \n                    N', @SchemaName=' + QUOTENAME([schema_name],'''') + N', @TableName=' + QUOTENAME([table_name],'''') + N';'\n            );\n\n        CREATE TABLE #ForeignKeys (\n\t\t\t[database_id] INT NOT NULL,\n            [database_name] NVARCHAR(128) NOT NULL ,\n\t\t\t[schema_name] NVARCHAR(128) NOT NULL ,\n            foreign_key_name NVARCHAR(256),\n            parent_object_id INT,\n            parent_object_name NVARCHAR(256),\n            referenced_object_id INT,\n            referenced_object_name NVARCHAR(256),\n            is_disabled BIT,\n            is_not_trusted BIT,\n            is_not_for_replication BIT,\n            parent_fk_columns NVARCHAR(MAX),\n            referenced_fk_columns NVARCHAR(MAX),\n            update_referential_action_desc NVARCHAR(16),\n            delete_referential_action_desc NVARCHAR(60)\n        );\n        \n        CREATE TABLE #IndexCreateTsql (\n            index_sanity_id INT NOT NULL,\n            create_tsql NVARCHAR(MAX) NOT NULL\n        );\n\n        CREATE TABLE #DatabaseList (\n\t\t\tDatabaseName NVARCHAR(256),\n            secondary_role_allow_connections_desc NVARCHAR(50)\n\n        );\n\n\t\tCREATE TABLE #PartitionCompressionInfo (\n\t\t\t[index_sanity_id] INT NULL,\n\t\t\t[partition_compression_detail] VARCHAR(8000) NULL\n        );\n\n\t\tCREATE TABLE #Statistics (\n\t\t  database_id INT NOT NULL,\n\t\t  database_name NVARCHAR(256) NOT NULL,\n\t\t  table_name NVARCHAR(128) NULL,\n\t\t  schema_name NVARCHAR(128) NULL,\n\t\t  index_name  NVARCHAR(128) NULL,\n\t\t  column_names  NVARCHAR(4000) NULL,\n\t\t  statistics_name NVARCHAR(128) NULL,\n\t\t  last_statistics_update DATETIME NULL,\n\t\t  days_since_last_stats_update INT NULL,\n\t\t  rows BIGINT NULL,\n\t\t  rows_sampled BIGINT NULL,\n\t\t  percent_sampled DECIMAL(18, 1) NULL,\n\t\t  histogram_steps INT NULL,\n\t\t  modification_counter BIGINT NULL,\n\t\t  percent_modifications DECIMAL(18, 1) NULL,\n\t\t  modifications_before_auto_update INT NULL,\n\t\t  index_type_desc NVARCHAR(128) NULL,\n\t\t  table_create_date DATETIME NULL,\n\t\t  table_modify_date DATETIME NULL,\n\t\t  no_recompute BIT NULL,\n\t\t  has_filter BIT NULL,\n\t\t  filter_definition NVARCHAR(MAX) NULL\n\t\t); \n\n\t\tCREATE TABLE #ComputedColumns\n\t\t(\n\t\t  index_sanity_id INT IDENTITY(1, 1) NOT NULL,\n\t\t  database_name NVARCHAR(128) NULL,\n\t\t  database_id INT NOT NULL,\n\t\t  table_name NVARCHAR(128) NOT NULL,\n\t\t  schema_name NVARCHAR(128) NOT NULL,\n\t\t  column_name NVARCHAR(128) NULL,\n\t\t  is_nullable BIT NULL,\n\t\t  definition NVARCHAR(MAX) NULL,\n\t\t  uses_database_collation BIT NOT NULL,\n\t\t  is_persisted BIT NOT NULL,\n\t\t  is_computed BIT NOT NULL,\n\t\t  is_function INT NOT NULL,\n\t\t  column_definition NVARCHAR(MAX) NULL\n\t\t);\n\t\t\n\t\tCREATE TABLE #TraceStatus\n\t\t(\n\t\t TraceFlag VARCHAR(10) ,\n\t\t status BIT ,\n\t\t Global BIT ,\n\t\t Session BIT\n\t\t);\n\n        CREATE TABLE #TemporalTables\n        (\n            index_sanity_id INT IDENTITY(1, 1) NOT NULL,\n            database_name NVARCHAR(128) NOT NULL,\n            database_id INT NOT NULL,\n            schema_name NVARCHAR(128) NOT NULL,\n            table_name NVARCHAR(128) NOT NULL,\n            history_table_name NVARCHAR(128) NOT NULL,\n            history_schema_name NVARCHAR(128) NOT NULL,\n            start_column_name NVARCHAR(128) NOT NULL,\n            end_column_name NVARCHAR(128) NOT NULL,\n            period_name NVARCHAR(128) NOT NULL\n        );\n\n/* Sanitize our inputs */\nSELECT\n\t@OutputServerName = QUOTENAME(@OutputServerName),\n\t@OutputDatabaseName = QUOTENAME(@OutputDatabaseName),\n\t@OutputSchemaName = QUOTENAME(@OutputSchemaName),\n\t@OutputTableName = QUOTENAME(@OutputTableName);\n\t\t\t\t\t\n\t\t\t\t\t\nIF @GetAllDatabases = 1\n    BEGIN\n        INSERT INTO #DatabaseList (DatabaseName)\n        SELECT  DB_NAME(database_id)\n        FROM    sys.databases\n        WHERE user_access_desc='MULTI_USER'\n        AND state_desc = 'ONLINE'\n        AND database_id > 4\n        AND DB_NAME(database_id) NOT LIKE 'ReportServer%'\n        AND is_distributor = 0;\n\n        /* Skip non-readable databases in an AG - see Github issue #1160 */\n        IF EXISTS (SELECT * FROM sys.all_objects o INNER JOIN sys.all_columns c ON o.object_id = c.object_id AND o.name = 'dm_hadr_availability_replica_states' AND c.name = 'role_desc')\n            BEGIN\n            SET @dsql = N'UPDATE #DatabaseList SET secondary_role_allow_connections_desc = ''NO'' WHERE DatabaseName IN (\n                        SELECT d.name \n                        FROM sys.dm_hadr_availability_replica_states rs\n                        INNER JOIN sys.databases d ON rs.replica_id = d.replica_id\n                        INNER JOIN sys.availability_replicas r ON rs.replica_id = r.replica_id\n                        WHERE rs.role_desc = ''SECONDARY''\n                        AND r.secondary_role_allow_connections_desc = ''NO'');';\n            EXEC sp_executesql @dsql;\n\n            IF EXISTS (SELECT * FROM #DatabaseList WHERE secondary_role_allow_connections_desc = 'NO')\n                BEGIN\n                INSERT    #BlitzIndexResults ( Priority, check_id, findings_group, finding, database_name, URL, details, index_definition,\n                                                index_usage_summary, index_size_summary )\n                VALUES  ( 1, 0 , \n\t\t               N'Skipped non-readable AG secondary databases.',\n                       N'You are running this on an AG secondary, and some of your databases are configured as non-readable when this is a secondary node.',\n\t\t\t\t       N'To analyze those databases, run sp_BlitzIndex on the primary, or on a readable secondary.',\n                       'http://FirstResponderKit.org', '', '', '', ''\n                        );        \n                END;\n            END;\n\n    END;\nELSE\n    BEGIN\n        INSERT INTO #DatabaseList\n                ( DatabaseName )\n        SELECT CASE WHEN @DatabaseName IS NULL OR @DatabaseName = N'' THEN DB_NAME()\n                    ELSE @DatabaseName END;\n    END;\n\nSET @NumDatabases = @@ROWCOUNT;\n\n/* Running on 50+ databases can take a reaaallly long time, so we want explicit permission to do so (and only after warning about it) */\n\nBEGIN TRY\n        IF @NumDatabases >= 50 AND @BringThePain != 1\n        BEGIN\n\n            INSERT    #BlitzIndexResults ( Priority, check_id, findings_group, finding, URL, details, index_definition,\n                                            index_usage_summary, index_size_summary )\n            VALUES  ( -1, 0 , \n\t\t            @ScriptVersionName,\n                    CASE WHEN @GetAllDatabases = 1 THEN N'All Databases' ELSE N'Database ' + QUOTENAME(@DatabaseName) + N' as of ' + CONVERT(NVARCHAR(16),GETDATE(),121) END, \n                    N'From Your Community Volunteers' ,   N'http://www.BrentOzar.com/BlitzIndex' ,\n                    N''\n                    , N'',N''\n                    );\n            INSERT    #BlitzIndexResults ( Priority, check_id, findings_group, finding, database_name, URL, details, index_definition,\n                                            index_usage_summary, index_size_summary )\n            VALUES  ( 1, 0 , \n\t\t           N'You''re trying to run sp_BlitzIndex on a server with ' + CAST(@NumDatabases AS NVARCHAR(8)) + N' databases. ',\n                   N'Running sp_BlitzIndex on a server with 50+ databases may cause temporary insanity for the server and/or user.',\n\t\t\t\t   N'If you''re sure you want to do this, run again with the parameter @BringThePain = 1.',\n                   'http://FirstResponderKit.org', '', '', '', ''\n                    );        \n            \n\t\t\n\t\tSELECT bir.blitz_result_id,\n               bir.check_id,\n               bir.index_sanity_id,\n               bir.Priority,\n               bir.findings_group,\n               bir.finding,\n               bir.database_name,\n               bir.URL,\n               bir.details,\n               bir.index_definition,\n               bir.secret_columns,\n               bir.index_usage_summary,\n               bir.index_size_summary,\n               bir.create_tsql,\n               bir.more_info \n\t\t\t   FROM #BlitzIndexResults AS bir;\n\n\t\tRETURN;\n\n\t\tEND;\nEND TRY\nBEGIN CATCH\n        RAISERROR (N'Failure to execute due to number of databases.', 0,1) WITH NOWAIT;\n\n        SELECT    @msg = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();\n\n        RAISERROR (@msg, \n               @ErrorSeverity, \n               @ErrorState \n               );\n        \n        WHILE @@trancount > 0 \n            ROLLBACK;\n\n        RETURN;\n    END CATCH;\n\n/* Permission granted or unnecessary? Ok, let's go! */\n\nDECLARE c1 CURSOR \nLOCAL FAST_FORWARD \nFOR \nSELECT DatabaseName FROM #DatabaseList WHERE COALESCE(secondary_role_allow_connections_desc, 'OK') <> 'NO' ORDER BY DatabaseName;\n\nOPEN c1;\nFETCH NEXT FROM c1 INTO @DatabaseName;\n                WHILE @@FETCH_STATUS = 0\nBEGIN\n    \n    RAISERROR (@LineFeed, 0, 1) WITH NOWAIT;\n    RAISERROR (@LineFeed, 0, 1) WITH NOWAIT;\n    RAISERROR (@DatabaseName, 0, 1) WITH NOWAIT;\n\nSELECT   @DatabaseID = [database_id]\nFROM     sys.databases\n         WHERE [name] = @DatabaseName\n         AND user_access_desc='MULTI_USER'\n         AND state_desc = 'ONLINE';\n\n/* Last startup */\nSELECT @DaysUptime = CAST(DATEDIFF(hh,create_date,GETDATE())/24. AS NUMERIC (23,2))\nFROM    sys.databases\nWHERE   database_id = 2;\n\nIF @DaysUptime = 0 SET @DaysUptime = .01;\n\n----------------------------------------\n--STEP 1: OBSERVE THE PATIENT\n--This step puts index information into temp tables.\n----------------------------------------\nBEGIN TRY\n    BEGIN\n\n        --Validate SQL Server Verson\n\n        IF (SELECT LEFT(@SQLServerProductVersion,\n              CHARINDEX('.',@SQLServerProductVersion,0)-1\n              )) <= 9\n        BEGIN\n            SET @msg=N'sp_BlitzIndex is only supported on SQL Server 2008 and higher. The version of this instance is: ' + @SQLServerProductVersion;\n            RAISERROR(@msg,16,1);\n        END;\n\n        --Short circuit here if database name does not exist.\n        IF @DatabaseName IS NULL OR @DatabaseID IS NULL\n        BEGIN\n            SET @msg='Database does not exist or is not online/multi-user: cannot proceed.';\n            RAISERROR(@msg,16,1);\n        END;    \n\n        --Validate parameters.\n        IF (@Mode NOT IN (0,1,2,3,4))\n        BEGIN\n            SET @msg=N'Invalid @Mode parameter. 0=diagnose, 1=summarize, 2=index detail, 3=missing index detail, 4=diagnose detail';\n            RAISERROR(@msg,16,1);\n        END;\n\n        IF (@Mode <> 0 AND @TableName IS NOT NULL)\n        BEGIN\n            SET @msg=N'Setting the @Mode doesn''t change behavior if you supply @TableName. Use default @Mode=0 to see table detail.';\n            RAISERROR(@msg,16,1);\n        END;\n\n        IF ((@Mode <> 0 OR @TableName IS NOT NULL) AND @Filter <> 0)\n        BEGIN\n            SET @msg=N'@Filter only appies when @Mode=0 and @TableName is not specified. Please try again.';\n            RAISERROR(@msg,16,1);\n        END;\n\n        IF (@SchemaName IS NOT NULL AND @TableName IS NULL) \n        BEGIN\n            SET @msg='We can''t run against a whole schema! Specify a @TableName, or leave both NULL for diagnosis.';\n            RAISERROR(@msg,16,1);\n        END;\n\n\n        IF  (@TableName IS NOT NULL AND @SchemaName IS NULL)\n        BEGIN\n            SET @SchemaName=N'dbo';\n            SET @msg='@SchemaName wasn''t specified-- assuming schema=dbo.';\n            RAISERROR(@msg,1,1) WITH NOWAIT;\n        END;\n\n        --If a table is specified, grab the object id.\n        --Short circuit if it doesn't exist.\n        IF @TableName IS NOT NULL\n        BEGIN\n            SET @dsql = N'\n                    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\n                    SELECT    @ObjectID= OBJECT_ID\n                    FROM    ' + QUOTENAME(@DatabaseName) + N'.sys.objects AS so\n                    JOIN    ' + QUOTENAME(@DatabaseName) + N'.sys.schemas AS sc on \n                        so.schema_id=sc.schema_id\n                    where so.type in (''U'', ''V'')\n                    and so.name=' + QUOTENAME(@TableName,'''')+ N'\n                    and sc.name=' + QUOTENAME(@SchemaName,'''')+ N'\n                    /*Has a row in sys.indexes. This lets us get indexed views.*/\n                    and exists (\n                        SELECT si.name\n                        FROM ' + QUOTENAME(@DatabaseName) + '.sys.indexes AS si \n                        WHERE so.object_id=si.object_id)\n                    OPTION (RECOMPILE);';\n\n            SET @params='@ObjectID INT OUTPUT';                \n\n            IF @dsql IS NULL \n                RAISERROR('@dsql is null',16,1);\n\n            EXEC sp_executesql @dsql, @params, @ObjectID=@ObjectID OUTPUT;\n            \n            IF @ObjectID IS NULL\n                    BEGIN\n                        SET @msg=N'Oh, this is awkward. I can''t find the table or indexed view you''re looking for in that database.' + CHAR(10) +\n                            N'Please check your parameters.';\n                        RAISERROR(@msg,1,1);\n                        RETURN;\n                    END;\n        END;\n\n        --set @collation\n        SELECT @collation=collation_name\n        FROM sys.databases\n        WHERE database_id=@DatabaseID;\n\n        --insert columns for clustered indexes and heaps\n        --collect info on identity columns for this one\n        SET @dsql = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\n                SELECT ' + CAST(@DatabaseID AS NVARCHAR(16)) + ',\n\t\t\t\t\ts.name,    \n                    si.object_id, \n                    si.index_id, \n                    sc.key_ordinal, \n                    sc.is_included_column, \n                    sc.is_descending_key,\n                    sc.partition_ordinal,\n                    c.name as column_name, \n                    st.name as system_type_name,\n                    c.max_length,\n                    c.[precision],\n                    c.[scale],\n                    c.collation_name,\n                    c.is_nullable,\n                    c.is_identity,\n                    c.is_computed,\n                    c.is_replicated,\n                    ' + CASE WHEN @SQLServerProductVersion NOT LIKE '9%' THEN N'c.is_sparse' ELSE N'NULL as is_sparse' END + N',\n                    ' + CASE WHEN @SQLServerProductVersion NOT LIKE '9%' THEN N'c.is_filestream' ELSE N'NULL as is_filestream' END + N',\n                    CAST(ic.seed_value AS BIGINT),\n                    CAST(ic.increment_value AS INT),\n                    CAST(ic.last_value AS BIGINT),\n                    ic.is_not_for_replication\n                FROM    ' + QUOTENAME(@DatabaseName) + N'.sys.indexes si\n                JOIN    ' + QUOTENAME(@DatabaseName) + N'.sys.columns c ON\n                    si.object_id=c.object_id\n                LEFT JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.index_columns sc ON \n                    sc.object_id = si.object_id\n                    and sc.index_id=si.index_id\n                    AND sc.column_id=c.column_id\n                LEFT JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.identity_columns ic ON\n                    c.object_id=ic.object_id and\n                    c.column_id=ic.column_id\n                JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.types st ON \n                    c.system_type_id=st.system_type_id\n                    AND c.user_type_id=st.user_type_id\n\t\t\t\tJOIN ' + QUOTENAME(@DatabaseName) + N'.sys.objects AS so  ON si.object_id = so.object_id\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  AND so.is_ms_shipped = 0\n\t\t\t\tJOIN ' + QUOTENAME(@DatabaseName) + N'.sys.schemas AS s ON s.schema_id = so.schema_id\n                WHERE si.index_id in (0,1) ' \n                    + CASE WHEN @ObjectID IS NOT NULL \n                        THEN N' AND si.object_id=' + CAST(@ObjectID AS NVARCHAR(30)) \n                    ELSE N'' END \n                + N'OPTION (RECOMPILE);';\n\n        IF @dsql IS NULL \n            RAISERROR('@dsql is null',16,1);\n\n        RAISERROR (N'Inserting data into #IndexColumns for clustered indexes and heaps',0,1) WITH NOWAIT;\n        INSERT    #IndexColumns ( database_id, [schema_name], [object_id], index_id, key_ordinal, is_included_column, is_descending_key, partition_ordinal,\n            column_name, system_type_name, max_length, precision, scale, collation_name, is_nullable, is_identity, is_computed,\n            is_replicated, is_sparse, is_filestream, seed_value, increment_value, last_value, is_not_for_replication )\n                EXEC sp_executesql @dsql;\n\n        --insert columns for nonclustered indexes\n        --this uses a full join to sys.index_columns\n        --We don't collect info on identity columns here. They may be in NC indexes, but we just analyze identities in the base table.\n        SET @dsql = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\n                SELECT ' + CAST(@DatabaseID AS NVARCHAR(16)) + ', \n\t\t\t\t\ts.name,    \n                    si.object_id, \n                    si.index_id, \n                    sc.key_ordinal, \n                    sc.is_included_column, \n                    sc.is_descending_key,\n                    sc.partition_ordinal,\n                    c.name as column_name, \n                    st.name as system_type_name,\n                    c.max_length,\n                    c.[precision],\n                    c.[scale],\n                    c.collation_name,\n                    c.is_nullable,\n                    c.is_identity,\n                    c.is_computed,\n                    c.is_replicated,\n                    ' + CASE WHEN @SQLServerProductVersion NOT LIKE '9%' THEN N'c.is_sparse' ELSE N'NULL AS is_sparse' END + N',\n                    ' + CASE WHEN @SQLServerProductVersion NOT LIKE '9%' THEN N'c.is_filestream' ELSE N'NULL AS is_filestream' END + N'                \n                FROM    ' + QUOTENAME(@DatabaseName) + N'.sys.indexes AS si\n                JOIN    ' + QUOTENAME(@DatabaseName) + N'.sys.columns AS c ON\n                    si.object_id=c.object_id\n                JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.index_columns AS sc ON \n                    sc.object_id = si.object_id\n                    and sc.index_id=si.index_id\n                    AND sc.column_id=c.column_id\n                JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.types AS st ON \n                    c.system_type_id=st.system_type_id\n                    AND c.user_type_id=st.user_type_id\n\t\t\t\tJOIN ' + QUOTENAME(@DatabaseName) + N'.sys.objects AS so  ON si.object_id = so.object_id\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  AND so.is_ms_shipped = 0\n\t\t\t\tJOIN ' + QUOTENAME(@DatabaseName) + N'.sys.schemas AS s ON s.schema_id = so.schema_id\n                WHERE si.index_id not in (0,1) ' \n                    + CASE WHEN @ObjectID IS NOT NULL \n                        THEN N' AND si.object_id=' + CAST(@ObjectID AS NVARCHAR(30)) \n                    ELSE N'' END \n                + N'OPTION (RECOMPILE);';\n\n        IF @dsql IS NULL \n            RAISERROR('@dsql is null',16,1);\n\n        RAISERROR (N'Inserting data into #IndexColumns for nonclustered indexes',0,1) WITH NOWAIT;\n        INSERT    #IndexColumns ( database_id, [schema_name], [object_id], index_id, key_ordinal, is_included_column, is_descending_key, partition_ordinal,\n            column_name, system_type_name, max_length, precision, scale, collation_name, is_nullable, is_identity, is_computed,\n            is_replicated, is_sparse, is_filestream )\n                EXEC sp_executesql @dsql;\n                    \n        SET @dsql = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\n                SELECT    ' + CAST(@DatabaseID AS NVARCHAR(10)) + ' AS database_id, \n                        so.object_id, \n                        si.index_id, \n                        si.type,\n                        ' + QUOTENAME(@DatabaseName, '''') + ' AS database_name, \n                        COALESCE(sc.NAME, ''Unknown'') AS [schema_name],\n                        COALESCE(so.name, ''Unknown'') AS [object_name], \n                        COALESCE(si.name, ''Unknown'') AS [index_name],\n                        CASE    WHEN so.[type] = CAST(''V'' AS CHAR(2)) THEN 1 ELSE 0 END, \n                        si.is_unique, \n                        si.is_primary_key, \n                        CASE when si.type = 3 THEN 1 ELSE 0 END AS is_XML,\n                        CASE when si.type = 4 THEN 1 ELSE 0 END AS is_spatial,\n                        CASE when si.type = 6 THEN 1 ELSE 0 END AS is_NC_columnstore,\n                        CASE when si.type = 5 then 1 else 0 end as is_CX_columnstore,\n                        si.is_disabled,\n                        si.is_hypothetical, \n                        si.is_padded, \n                        si.fill_factor,'\n                        + CASE WHEN @SQLServerProductVersion NOT LIKE '9%' THEN '\n                        CASE WHEN si.filter_definition IS NOT NULL THEN si.filter_definition\n                             ELSE ''''\n                        END AS filter_definition' ELSE ''''' AS filter_definition' END + '\n                        , ISNULL(us.user_seeks, 0), ISNULL(us.user_scans, 0),\n                        ISNULL(us.user_lookups, 0), ISNULL(us.user_updates, 0), us.last_user_seek, us.last_user_scan,\n                        us.last_user_lookup, us.last_user_update,\n                        so.create_date, so.modify_date\n                FROM    ' + QUOTENAME(@DatabaseName) + '.sys.indexes AS si WITH (NOLOCK)\n                        JOIN ' + QUOTENAME(@DatabaseName) + '.sys.objects AS so WITH (NOLOCK) ON si.object_id = so.object_id\n                                               AND so.is_ms_shipped = 0 /*Exclude objects shipped by Microsoft*/\n                                               AND so.type <> ''TF'' /*Exclude table valued functions*/\n                        JOIN ' + QUOTENAME(@DatabaseName) + '.sys.schemas sc ON so.schema_id = sc.schema_id\n                        LEFT JOIN sys.dm_db_index_usage_stats AS us WITH (NOLOCK) ON si.[object_id] = us.[object_id]\n                                                                       AND si.index_id = us.index_id\n                                                                       AND us.database_id = '+ CAST(@DatabaseID AS NVARCHAR(10)) + '\n                WHERE    si.[type] IN ( 0, 1, 2, 3, 4, 5, 6 ) \n                /* Heaps, clustered, nonclustered, XML, spatial, Cluster Columnstore, NC Columnstore */ ' +\n                CASE WHEN @TableName IS NOT NULL THEN ' and so.name=' + QUOTENAME(@TableName,'''') + ' ' ELSE '' END + \n        'OPTION    ( RECOMPILE );\n        ';\n        IF @dsql IS NULL \n            RAISERROR('@dsql is null',16,1);\n\n        RAISERROR (N'Inserting data into #IndexSanity',0,1) WITH NOWAIT;\n        INSERT    #IndexSanity ( [database_id], [object_id], [index_id], [index_type], [database_name], [schema_name], [object_name],\n                                index_name, is_indexed_view, is_unique, is_primary_key, is_XML, is_spatial, is_NC_columnstore, is_CX_columnstore,\n                                is_disabled, is_hypothetical, is_padded, fill_factor, filter_definition, user_seeks, user_scans, \n                                user_lookups, user_updates, last_user_seek, last_user_scan, last_user_lookup, last_user_update,\n                                create_date, modify_date )\n                EXEC sp_executesql @dsql;\n\n\n        RAISERROR (N'Checking partition count',0,1) WITH NOWAIT;\n        IF @BringThePain = 0 AND @SkipPartitions = 0\n            BEGIN\n                /* Count the total number of partitions */\n                SET @dsql = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\n                        SELECT @RowcountOUT = SUM(1) FROM ' + QUOTENAME(@DatabaseName) + '.sys.partitions WHERE partition_number > 1 OPTION    ( RECOMPILE );';\n                EXEC sp_executesql @dsql, N'@RowcountOUT BIGINT OUTPUT', @RowcountOUT = @Rowcount OUTPUT;\n                IF @Rowcount > 100\n                    BEGIN\n                        RAISERROR (N'Setting @SkipPartitions = 1 because > 100 partitions were found. To check them, you must set @BringThePain = 1.',16,1) WITH NOWAIT;\n                        SET @SkipPartitions = 1;\n                        INSERT    #BlitzIndexResults ( Priority, check_id, findings_group, finding, URL, details, index_definition,\n                                                        index_usage_summary, index_size_summary )\n                        VALUES  ( 1, 0 , \n\t\t                       'Some Checks Were Skipped',\n                               '@SkipPartitions Forced to 1',\n                               'http://FirstResponderKit.org', CAST(@Rowcount AS VARCHAR(50)) + ' partitions found. To analyze them, use @BringThePain = 1.', 'We try to keep things quick - and warning, running @BringThePain = 1 can take tens of minutes.', '', ''\n                                );\n                    END;\n            END;\n\n\n\n\t\t IF (@SkipPartitions = 0)\n\t\t\tBEGIN\t\t\t\n\t\t\tIF (SELECT LEFT(@SQLServerProductVersion,\n\t\t\t      CHARINDEX('.',@SQLServerProductVersion,0)-1 )) <= 2147483647 --Make change here \t\t\t\n\t\t\tBEGIN\n            \n\t\t\tRAISERROR (N'Preferring non-2012 syntax with LEFT JOIN to sys.dm_db_index_operational_stats',0,1) WITH NOWAIT;\n\n            --NOTE: If you want to use the newer syntax for 2012+, you'll have to change 2147483647 to 11 on line ~819\n\t\t\t--This change was made because on a table with lots of paritions, the OUTER APPLY was crazy slow.\n            SET @dsql = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\n                        SELECT    ' + CAST(@DatabaseID AS NVARCHAR(10)) + ' AS database_id,\n                                ps.object_id, \n\t\t\t\t\t\t\t\ts.name,\n                                ps.index_id, \n                                ps.partition_number, \n                                ps.row_count,\n                                ps.reserved_page_count * 8. / 1024. AS reserved_MB,\n                                ps.lob_reserved_page_count * 8. / 1024. AS reserved_LOB_MB,\n                                ps.row_overflow_reserved_page_count * 8. / 1024. AS reserved_row_overflow_MB,\n                                os.leaf_insert_count, \n                                os.leaf_delete_count, \n                                os.leaf_update_count, \n                                os.range_scan_count, \n                                os.singleton_lookup_count,  \n                                os.forwarded_fetch_count,\n                                os.lob_fetch_in_pages, \n                                os.lob_fetch_in_bytes, \n                                os.row_overflow_fetch_in_pages,\n                                os.row_overflow_fetch_in_bytes, \n                                os.row_lock_count, \n                                os.row_lock_wait_count,\n                                os.row_lock_wait_in_ms, \n                                os.page_lock_count, \n                                os.page_lock_wait_count, \n                                os.page_lock_wait_in_ms,\n                                os.index_lock_promotion_attempt_count, \n                                os.index_lock_promotion_count, \n                            ' + CASE WHEN @SQLServerProductVersion NOT LIKE '9%' THEN 'par.data_compression_desc ' ELSE 'null as data_compression_desc' END + '\n                    FROM    ' + QUOTENAME(@DatabaseName) + '.sys.dm_db_partition_stats AS ps  \n                    JOIN ' + QUOTENAME(@DatabaseName) + '.sys.partitions AS par on ps.partition_id=par.partition_id\n                    JOIN ' + QUOTENAME(@DatabaseName) + '.sys.objects AS so ON ps.object_id = so.object_id\n                               AND so.is_ms_shipped = 0 /*Exclude objects shipped by Microsoft*/\n                               AND so.type <> ''TF'' /*Exclude table valued functions*/\n\t\t\t\t\tJOIN ' + QUOTENAME(@DatabaseName) + '.sys.schemas AS s ON s.schema_id = so.schema_id\n                    LEFT JOIN ' + QUOTENAME(@DatabaseName) + '.sys.dm_db_index_operational_stats('\n                + CAST(@DatabaseID AS NVARCHAR(10)) + ', NULL, NULL,NULL) AS os ON\n                    ps.object_id=os.object_id and ps.index_id=os.index_id and ps.partition_number=os.partition_number \n                    WHERE 1=1 \n                    ' + CASE WHEN @ObjectID IS NOT NULL THEN N'AND so.object_id=' + CAST(@ObjectID AS NVARCHAR(30)) + N' ' ELSE N' ' END + '\n                    ' + CASE WHEN @Filter = 2 THEN N'AND ps.reserved_page_count * 8./1024. > ' + CAST(@FilterMB AS NVARCHAR(5)) + N' ' ELSE N' ' END + '\n            ORDER BY ps.object_id,  ps.index_id, ps.partition_number\n            OPTION    ( RECOMPILE );\n            ';\n        END;\n        ELSE\n        BEGIN\n        RAISERROR (N'Using 2012 syntax to query sys.dm_db_index_operational_stats',0,1) WITH NOWAIT;\n\t\t--This is the syntax that will be used if you change 2147483647 to 11 on line ~819.\n\t\t--If you have a lot of paritions and this suddenly starts running for a long time, change it back.\n         SET @dsql = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\n                        SELECT  ' + CAST(@DatabaseID AS NVARCHAR(10)) + ' AS database_id,\n                                ps.object_id, \n\t\t\t\t\t\t\t\ts.name,\n                                ps.index_id, \n                                ps.partition_number, \n                                ps.row_count,\n                                ps.reserved_page_count * 8. / 1024. AS reserved_MB,\n                                ps.lob_reserved_page_count * 8. / 1024. AS reserved_LOB_MB,\n                                ps.row_overflow_reserved_page_count * 8. / 1024. AS reserved_row_overflow_MB,\n                                os.leaf_insert_count, \n                                os.leaf_delete_count, \n                                os.leaf_update_count, \n                                os.range_scan_count, \n                                os.singleton_lookup_count,  \n                                os.forwarded_fetch_count,\n                                os.lob_fetch_in_pages, \n                                os.lob_fetch_in_bytes, \n                                os.row_overflow_fetch_in_pages,\n                                os.row_overflow_fetch_in_bytes, \n                                os.row_lock_count, \n                                os.row_lock_wait_count,\n                                os.row_lock_wait_in_ms, \n                                os.page_lock_count, \n                                os.page_lock_wait_count, \n                                os.page_lock_wait_in_ms,\n                                os.index_lock_promotion_attempt_count, \n                                os.index_lock_promotion_count, \n                                ' + CASE WHEN @SQLServerProductVersion NOT LIKE '9%' THEN N'par.data_compression_desc ' ELSE N'null as data_compression_desc' END + N'\n                        FROM    ' + QUOTENAME(@DatabaseName) + N'.sys.dm_db_partition_stats AS ps  \n                        JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.partitions AS par on ps.partition_id=par.partition_id\n                        JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.objects AS so ON ps.object_id = so.object_id\n                                   AND so.is_ms_shipped = 0 /*Exclude objects shipped by Microsoft*/\n                                   AND so.type <> ''TF'' /*Exclude table valued functions*/\n\t\t\t\t\t\tJOIN ' + QUOTENAME(@DatabaseName) + '.sys.schemas AS s ON s.schema_id = so.schema_id\n                        OUTER APPLY ' + QUOTENAME(@DatabaseName) + N'.sys.dm_db_index_operational_stats('\n                    + CAST(@DatabaseID AS NVARCHAR(10)) + N', ps.object_id, ps.index_id,ps.partition_number) AS os\n                        WHERE 1=1 \n                        ' + CASE WHEN @ObjectID IS NOT NULL THEN N'AND so.object_id=' + CAST(@ObjectID AS NVARCHAR(30)) + N' ' ELSE N' ' END + N'\n                        ' + CASE WHEN @Filter = 2 THEN N'AND ps.reserved_page_count * 8./1024. > ' + CAST(@FilterMB AS NVARCHAR(5)) + N' ' ELSE N' ' END + '\n                ORDER BY ps.object_id,  ps.index_id, ps.partition_number\n                OPTION    ( RECOMPILE );\n                ';\n        END;       \n\n        IF @dsql IS NULL \n            RAISERROR('@dsql is null',16,1);\n\n        RAISERROR (N'Inserting data into #IndexPartitionSanity',0,1) WITH NOWAIT;\n        INSERT    #IndexPartitionSanity ( [database_id],\n                                          [object_id], \n\t\t\t\t\t\t\t\t\t\t  [schema_name],\n                                          index_id, \n                                          partition_number, \n                                          row_count, \n                                          reserved_MB,\n                                          reserved_LOB_MB, \n                                          reserved_row_overflow_MB, \n                                          leaf_insert_count,\n                                          leaf_delete_count, \n                                          leaf_update_count, \n                                          range_scan_count,\n                                          singleton_lookup_count,\n                                          forwarded_fetch_count, \n                                          lob_fetch_in_pages, \n                                          lob_fetch_in_bytes, \n                                          row_overflow_fetch_in_pages,\n                                          row_overflow_fetch_in_bytes, \n                                          row_lock_count, \n                                          row_lock_wait_count,\n                                          row_lock_wait_in_ms, \n                                          page_lock_count, \n                                          page_lock_wait_count,\n                                          page_lock_wait_in_ms, \n                                          index_lock_promotion_attempt_count,\n                                          index_lock_promotion_count, \n                                          data_compression_desc )\n                EXEC sp_executesql @dsql;\n        \n\t\tEND; --End Check For @SkipPartitions = 0\n\n\n\n        RAISERROR (N'Inserting data into #MissingIndexes',0,1) WITH NOWAIT;\n        SET @dsql=N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\n                SELECT  id.database_id, id.object_id, ' + QUOTENAME(@DatabaseName,'''') + N', sc.[name], so.[name], id.statement , gs.avg_total_user_cost, \n                        gs.avg_user_impact, gs.user_seeks, gs.user_scans, gs.unique_compiles,id.equality_columns, \n                        id.inequality_columns,id.included_columns\n                FROM    sys.dm_db_missing_index_groups ig\n                        JOIN sys.dm_db_missing_index_details id ON ig.index_handle = id.index_handle\n                        JOIN sys.dm_db_missing_index_group_stats gs ON ig.index_group_handle = gs.group_handle\n                        JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.objects so on \n                            id.object_id=so.object_id\n                        JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.schemas sc on \n                            so.schema_id=sc.schema_id\n                WHERE    id.database_id = ' + CAST(@DatabaseID AS NVARCHAR(30)) + '\n                ' + CASE WHEN @ObjectID IS NULL THEN N'' \n                    ELSE N'and id.object_id=' + CAST(@ObjectID AS NVARCHAR(30)) \n                END +\n        N'OPTION (RECOMPILE);';\n\n        IF @dsql IS NULL \n            RAISERROR('@dsql is null',16,1);\n        INSERT    #MissingIndexes ( [database_id], [object_id], [database_name], [schema_name], [table_name], [statement], avg_total_user_cost, \n                                    avg_user_impact, user_seeks, user_scans, unique_compiles, equality_columns, \n                                    inequality_columns, included_columns)\n        EXEC sp_executesql @dsql;\n\n        SET @dsql = N'\n            SELECT DB_ID(' + QUOTENAME(@DatabaseName,'''') + N') AS [database_id], '\n\t\t\t    + QUOTENAME(@DatabaseName,'''')  + N' AS [database_name],\n\t\t\t\ts.name,\n                fk_object.name AS foreign_key_name,\n                parent_object.[object_id] AS parent_object_id,\n                parent_object.name AS parent_object_name,\n                referenced_object.[object_id] AS referenced_object_id,\n                referenced_object.name AS referenced_object_name,\n                fk.is_disabled,\n                fk.is_not_trusted,\n                fk.is_not_for_replication,\n                parent.fk_columns,\n                referenced.fk_columns,\n                [update_referential_action_desc],\n                [delete_referential_action_desc]\n            FROM ' + QUOTENAME(@DatabaseName) + N'.sys.foreign_keys fk\n            JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.objects fk_object ON fk.object_id=fk_object.object_id\n            JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.objects parent_object ON fk.parent_object_id=parent_object.object_id\n            JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.objects referenced_object ON fk.referenced_object_id=referenced_object.object_id\n\t\t\tJOIN ' + QUOTENAME(@DatabaseName) + N'.sys.schemas AS s ON fk.schema_id=s.schema_id\n            CROSS APPLY ( SELECT    STUFF( (SELECT    N'', '' + c_parent.name AS fk_columns\n                                            FROM    ' + QUOTENAME(@DatabaseName) + N'.sys.foreign_key_columns fkc \n                                            JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.columns c_parent ON fkc.parent_object_id=c_parent.[object_id]\n                                                AND fkc.parent_column_id=c_parent.column_id\n                                            WHERE    fk.parent_object_id=fkc.parent_object_id\n                                                AND fk.[object_id]=fkc.constraint_object_id\n                                            ORDER BY fkc.constraint_column_id \n                                    FOR      XML PATH('''') ,\n                                              TYPE).value(''.'', ''varchar(max)''), 1, 1, '''')/*This is how we remove the first comma*/ ) parent ( fk_columns )\n            CROSS APPLY ( SELECT    STUFF( (SELECT    N'', '' + c_referenced.name AS fk_columns\n                                            FROM    ' + QUOTENAME(@DatabaseName) + N'.sys.    foreign_key_columns fkc \n                                            JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.columns c_referenced ON fkc.referenced_object_id=c_referenced.[object_id]\n                                                AND fkc.referenced_column_id=c_referenced.column_id\n                                            WHERE    fk.referenced_object_id=fkc.referenced_object_id\n                                                and fk.[object_id]=fkc.constraint_object_id\n                                            ORDER BY fkc.constraint_column_id  /*order by col name, we don''t have anything better*/\n                                    FOR      XML PATH('''') ,\n                                              TYPE).value(''.'', ''varchar(max)''), 1, 1, '''') ) referenced ( fk_columns )\n            ' + CASE WHEN @ObjectID IS NOT NULL THEN \n                    'WHERE fk.parent_object_id=' + CAST(@ObjectID AS NVARCHAR(30)) + N' OR fk.referenced_object_id=' + CAST(@ObjectID AS NVARCHAR(30)) + N' ' \n                    ELSE N' ' END + '\n            ORDER BY parent_object_name, foreign_key_name\n\t\t\tOPTION (RECOMPILE);';\n        IF @dsql IS NULL \n            RAISERROR('@dsql is null',16,1);\n\n        RAISERROR (N'Inserting data into #ForeignKeys',0,1) WITH NOWAIT;\n        INSERT  #ForeignKeys ( [database_id], [database_name], [schema_name], foreign_key_name, parent_object_id,parent_object_name, referenced_object_id, referenced_object_name,\n                                is_disabled, is_not_trusted, is_not_for_replication, parent_fk_columns, referenced_fk_columns,\n                                [update_referential_action_desc], [delete_referential_action_desc] )\n                EXEC sp_executesql @dsql;\n\n\n\t\tIF @SkipStatistics = 0 \n\t\t\tBEGIN\n\t\tIF  ((PARSENAME(@SQLServerProductVersion, 4) >= 12)\n\t\tOR   (PARSENAME(@SQLServerProductVersion, 4) = 11 AND PARSENAME(@SQLServerProductVersion, 2) >= 3000)\n\t\tOR   (PARSENAME(@SQLServerProductVersion, 4) = 10 AND PARSENAME(@SQLServerProductVersion, 3) = 50 AND PARSENAME(@SQLServerProductVersion, 2) >= 2500))\n\t\tBEGIN\n\t\tRAISERROR (N'Gathering Statistics Info With Newer Syntax.',0,1) WITH NOWAIT;\n\t\tSET @dsql=N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\n\t\t\t\t\t SELECT DB_ID(' + QUOTENAME(@DatabaseName,'''') + N') AS [database_id], '\n\t\t\t\t\t+ QUOTENAME(@DatabaseName,'''')  + N' AS [database_name],\n\t\t\t\t\tobj.name AS table_name,\n\t\t\t\t\tsch.name AS schema_name,\n\t\t\t        ISNULL(i.name, ''System Or User Statistic'') AS index_name,\n\t\t\t        ca.column_names AS column_names,\n\t\t\t        s.name AS statistics_name,\n\t\t\t        CONVERT(DATETIME, ddsp.last_updated) AS last_statistics_update,\n\t\t\t        DATEDIFF(DAY, ddsp.last_updated, GETDATE()) AS days_since_last_stats_update,\n\t\t\t        ddsp.rows,\n\t\t\t        ddsp.rows_sampled,\n\t\t\t        CAST(ddsp.rows_sampled / ( 1. * NULLIF(ddsp.rows, 0) ) * 100 AS DECIMAL(18, 1)) AS percent_sampled,\n\t\t\t        ddsp.steps AS histogram_steps,\n\t\t\t        ddsp.modification_counter,\n\t\t\t        CASE WHEN ddsp.modification_counter > 0\n\t\t\t             THEN CAST(ddsp.modification_counter / ( 1. * NULLIF(ddsp.rows, 0) ) * 100 AS DECIMAL(18, 1))\n\t\t\t             ELSE ddsp.modification_counter\n\t\t\t        END AS percent_modifications,\n\t\t\t        CASE WHEN ddsp.rows < 500 THEN 500\n\t\t\t             ELSE CAST(( ddsp.rows * .20 ) + 500 AS INT)\n\t\t\t        END AS modifications_before_auto_update,\n\t\t\t        ISNULL(i.type_desc, ''System Or User Statistic - N/A'') AS index_type_desc,\n\t\t\t        CONVERT(DATETIME, obj.create_date) AS table_create_date,\n\t\t\t        CONVERT(DATETIME, obj.modify_date) AS table_modify_date,\n\t\t\t\t\ts.no_recompute,\n\t\t\t\t\ts.has_filter,\n\t\t\t\t\ts.filter_definition\n\t\t\tFROM    ' + QUOTENAME(@DatabaseName) + N'.sys.stats AS s\n\t\t\tJOIN    ' + QUOTENAME(@DatabaseName) + N'.sys.objects obj\n\t\t\tON      s.object_id = obj.object_id\n\t\t\tJOIN    ' + QUOTENAME(@DatabaseName) + N'.sys.schemas sch\n\t\t\tON\t\tsch.schema_id = obj.schema_id\n\t\t\tLEFT JOIN    ' + QUOTENAME(@DatabaseName) + N'.sys.indexes AS i\n\t\t\tON      i.object_id = s.object_id\n\t\t\t        AND i.index_id = s.stats_id\n\t\t\tOUTER APPLY ' + QUOTENAME(@DatabaseName) + N'.sys.dm_db_stats_properties(s.object_id, s.stats_id) AS ddsp\n\t\t\tCROSS APPLY ( SELECT    STUFF((SELECT   '', '' + c.name\n\t\t\t\t\t\t  FROM     ' + QUOTENAME(@DatabaseName) + N'.sys.stats_columns AS sc\n\t\t\t\t\t\t  JOIN     ' + QUOTENAME(@DatabaseName) + N'.sys.columns AS c\n\t\t\t\t\t\t  ON       sc.column_id = c.column_id AND sc.object_id = c.object_id\n\t\t\t\t\t\t  WHERE    sc.stats_id = s.stats_id AND sc.object_id = s.object_id\n\t\t\t\t\t\t  ORDER BY sc.stats_column_id\n\t\t\t\t\t\t  FOR   XML PATH(''''), TYPE).value(''.'', ''varchar(max)''), 1, 2, '''') \n\t\t\t\t\t\t) ca (column_names)\n\t\t\tWHERE obj.is_ms_shipped = 0\n\t\t\tOPTION (RECOMPILE);';\n\t\t\t\n\t\t\tIF @dsql IS NULL \n            RAISERROR('@dsql is null',16,1);\n\n\t\t\tRAISERROR (N'Inserting data into #Statistics',0,1) WITH NOWAIT;\n\t\t\tINSERT #Statistics ( database_id, database_name, table_name, schema_name, index_name, column_names, statistics_name, last_statistics_update, \n\t\t\t\t\t\t\t\tdays_since_last_stats_update, rows, rows_sampled, percent_sampled, histogram_steps, modification_counter, \n\t\t\t\t\t\t\t\tpercent_modifications, modifications_before_auto_update, index_type_desc, table_create_date, table_modify_date,\n\t\t\t\t\t\t\t\tno_recompute, has_filter, filter_definition)\n\t\t\t\n\t\t\tEXEC sp_executesql @dsql;\n\t\t\tEND;\n\t\t\tELSE \n\t\t\tBEGIN\n\t\t\tRAISERROR (N'Gathering Statistics Info With Older Syntax.',0,1) WITH NOWAIT;\n\t\t\tSET @dsql=N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\n\t\t\t\t\t\t SELECT DB_ID(' + QUOTENAME(@DatabaseName,'''') + N') AS [database_id], '\n\t\t\t\t\t\t\t\t+ QUOTENAME(@DatabaseName,'''')  + N' AS [database_name],\n\t\t\t\t\t\t\t\tobj.name AS table_name,\n\t\t\t\t\t\t\t\tsch.name AS schema_name,\n\t\t\t\t\t\t        ISNULL(i.name, ''System Or User Statistic'') AS index_name,\n\t\t\t\t\t\t        ca.column_names  AS column_names,\n\t\t\t\t\t\t        s.name AS statistics_name,\n\t\t\t\t\t\t        CONVERT(DATETIME, STATS_DATE(s.object_id, s.stats_id)) AS last_statistics_update,\n\t\t\t\t\t\t        DATEDIFF(DAY, STATS_DATE(s.object_id, s.stats_id), GETDATE()) AS days_since_last_stats_update,\n\t\t\t\t\t\t        si.rowcnt,\n\t\t\t\t\t\t        si.rowmodctr,\n\t\t\t\t\t\t        CASE WHEN si.rowmodctr > 0 THEN CAST(si.rowmodctr / ( 1. * NULLIF(si.rowcnt, 0) ) * 100 AS DECIMAL(18, 1))\n\t\t\t\t\t\t             ELSE si.rowmodctr\n\t\t\t\t\t\t        END AS percent_modifications,\n\t\t\t\t\t\t        CASE WHEN si.rowcnt < 500 THEN 500\n\t\t\t\t\t\t             ELSE CAST(( si.rowcnt * .20 ) + 500 AS INT)\n\t\t\t\t\t\t        END AS modifications_before_auto_update,\n\t\t\t\t\t\t        ISNULL(i.type_desc, ''System Or User Statistic - N/A'') AS index_type_desc,\n\t\t\t\t\t\t        CONVERT(DATETIME, obj.create_date) AS table_create_date,\n\t\t\t\t\t\t        CONVERT(DATETIME, obj.modify_date) AS table_modify_date,\n\t\t\t\t\t\t\t\ts.no_recompute,\n\t\t\t\t\t\t\t\t'\n\t\t\t\t\t\t\t\t+ CASE WHEN @SQLServerProductVersion NOT LIKE '9%' \n\t\t\t\t\t\t\t\tTHEN N's.has_filter,\n\t\t\t\t\t\t\t\t\t   s.filter_definition' \n\t\t\t\t\t\t\t\tELSE N'NULL AS has_filter,\n\t\t\t\t\t\t\t\t       NULL AS filter_definition' END \n\t\t\t\t\t\t+ N'\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tFROM    ' + QUOTENAME(@DatabaseName) + N'.sys.stats AS s\n\t\t\t\t\t\tINNER HASH JOIN    ' + QUOTENAME(@DatabaseName) + N'.sys.sysindexes si\n\t\t\t\t\t\tON      si.name = s.name\n\t\t\t\t\t\tINNER HASH JOIN    ' + QUOTENAME(@DatabaseName) + N'.sys.objects obj\n\t\t\t\t\t\tON      s.object_id = obj.object_id\n\t\t\t\t\t\tINNER HASH JOIN    ' + QUOTENAME(@DatabaseName) + N'.sys.schemas sch\n\t\t\t\t\t\tON\t\tsch.schema_id = obj.schema_id\n\t\t\t\t\t\tLEFT HASH JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.indexes AS i\n\t\t\t\t\t\tON      i.object_id = s.object_id\n\t\t\t\t\t\t        AND i.index_id = s.stats_id\n\t\t\t\t\t\tCROSS APPLY ( SELECT    STUFF((SELECT   '', '' + c.name\n\t\t\t\t\t\t\t\t\t  FROM     ' + QUOTENAME(@DatabaseName) + N'.sys.stats_columns AS sc\n\t\t\t\t\t\t\t\t\t  JOIN     ' + QUOTENAME(@DatabaseName) + N'.sys.columns AS c\n\t\t\t\t\t\t\t\t\t  ON       sc.column_id = c.column_id AND sc.object_id = c.object_id\n\t\t\t\t\t\t\t\t\t  WHERE    sc.stats_id = s.stats_id AND sc.object_id = s.object_id\n\t\t\t\t\t\t\t\t\t  ORDER BY sc.stats_column_id\n\t\t\t\t\t\t\t\t\t  FOR   XML PATH(''''), TYPE).value(''.'', ''varchar(max)''), 1, 2, '''') \n\t\t\t\t\t\t\t\t\t) ca (column_names)\n\t\t\t\t\t\tWHERE obj.is_ms_shipped = 0\n\t\t\t\t\t\tAND si.rowcnt > 0\n\t\t\t\t\t\tOPTION (RECOMPILE);';\n\n\t\t\tIF @dsql IS NULL \n            RAISERROR('@dsql is null',16,1);\n\n\t\t\tRAISERROR (N'Inserting data into #Statistics',0,1) WITH NOWAIT;\n\t\t\tINSERT #Statistics(database_id, database_name, table_name, schema_name, index_name, column_names, statistics_name, \n\t\t\t\t\t\t\t\tlast_statistics_update, days_since_last_stats_update, rows, modification_counter, \n\t\t\t\t\t\t\t\tpercent_modifications, modifications_before_auto_update, index_type_desc, table_create_date, table_modify_date,\n\t\t\t\t\t\t\t\tno_recompute, has_filter, filter_definition)\n\t\t\t\n\t\t\tEXEC sp_executesql @dsql;\n\t\t\tEND;\n\n\t\t\tEND;\n\n\t\t\tIF  (PARSENAME(@SQLServerProductVersion, 4) >= 10)\n\t\t\tBEGIN\n\t\t\tRAISERROR (N'Gathering Computed Column Info.',0,1) WITH NOWAIT;\n\t\t\tSET @dsql=N'SELECT ' + QUOTENAME(@DatabaseName,'''') + N' AS [database_name],\n\t\t\t\t\t\t\t   DB_ID(' + QUOTENAME(@DatabaseName,'''') + N') AS [database_id], \n   \t\t\t\t\t   \t\t   t.name AS table_name,\n   \t\t\t\t\t           s.name AS schema_name,\n   \t\t\t\t\t           c.name AS column_name,\n   \t\t\t\t\t           cc.is_nullable,\n   \t\t\t\t\t           cc.definition,\n   \t\t\t\t\t           cc.uses_database_collation,\n   \t\t\t\t\t           cc.is_persisted,\n   \t\t\t\t\t           cc.is_computed,\n   \t\t\t\t\t   \t\t   CASE WHEN cc.definition LIKE ''%.%'' THEN 1 ELSE 0 END AS is_function,\n   \t\t\t\t\t   \t\t   ''ALTER TABLE '' + QUOTENAME(s.name) + ''.'' + QUOTENAME(t.name) + \n   \t\t\t\t\t   \t\t   '' ADD '' + QUOTENAME(c.name) + '' AS '' + cc.definition  + \n\t\t\t\t\t\t\t   CASE WHEN is_persisted = 1 THEN '' PERSISTED'' ELSE '''' END + '';'' COLLATE DATABASE_DEFAULT AS [column_definition]\n   \t\t\t\t\t   FROM    ' + QUOTENAME(@DatabaseName) + N'.sys.computed_columns AS cc\n   \t\t\t\t\t   JOIN    ' + QUOTENAME(@DatabaseName) + N'.sys.columns AS c\n   \t\t\t\t\t   ON      cc.object_id = c.object_id\n   \t\t\t\t\t   \t\t   AND cc.column_id = c.column_id\n   \t\t\t\t\t   JOIN    ' + QUOTENAME(@DatabaseName) + N'.sys.tables AS t\n   \t\t\t\t\t   ON      t.object_id = cc.object_id\n   \t\t\t\t\t   JOIN    ' + QUOTENAME(@DatabaseName) + N'.sys.schemas AS s\n   \t\t\t\t\t   ON      s.schema_id = t.schema_id\n\t\t\t\t\t   OPTION (RECOMPILE);';\n\n\t\t\tIF @dsql IS NULL \n            RAISERROR('@dsql is null',16,1);\n\n\t\t\tINSERT #ComputedColumns\n\t\t\t        ( [database_name], database_id, table_name, schema_name, column_name, is_nullable, definition, \n\t\t\t\t\t  uses_database_collation, is_persisted, is_computed, is_function, column_definition )\t\t\t\n\t\t\tEXEC sp_executesql @dsql;\n\n\t\t\tEND; \n\t\t\t\n\t\t\tRAISERROR (N'Gathering Trace Flag Information',0,1) WITH NOWAIT;\n\t\t\tINSERT #TraceStatus\n\t\t\tEXEC ('DBCC TRACESTATUS(-1) WITH NO_INFOMSGS');\t\t\t\n\n\t\t\tIF  (PARSENAME(@SQLServerProductVersion, 4) >= 13)\n\t\t\tBEGIN\n\t\t\tRAISERROR (N'Gathering Temporal Table Info',0,1) WITH NOWAIT;\n\t\t\tSET @dsql=N'SELECT ' + QUOTENAME(@DatabaseName,'''') + N' AS database_name,\n\t\t\t\t\t\t\t\t   DB_ID(' + QUOTENAME(@DatabaseName,'''') + N') AS [database_id], \n\t\t\t\t\t\t\t\t   s.name AS schema_name,\n\t\t\t\t\t\t\t\t   t.name AS table_name, \n\t\t\t\t\t\t\t\t   oa.hsn as history_schema_name,\n\t\t\t\t\t\t\t\t   oa.htn AS history_table_name, \n\t\t\t\t\t\t\t\t   c1.name AS start_column_name,\n\t\t\t\t\t\t\t\t   c2.name AS end_column_name,\n\t\t\t\t\t\t\t\t   p.name AS period_name\n\t\t\t\t\t\t\tFROM ' + QUOTENAME(@DatabaseName) + N'.sys.periods AS p\n\t\t\t\t\t\t\tINNER JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.tables AS t\n\t\t\t\t\t\t\tON  p.object_id = t.object_id\n\t\t\t\t\t\t\tINNER JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.columns AS c1\n\t\t\t\t\t\t\tON  t.object_id = c1.object_id\n\t\t\t\t\t\t\t    AND p.start_column_id = c1.column_id\n\t\t\t\t\t\t\tINNER JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.columns AS c2\n\t\t\t\t\t\t\tON  t.object_id = c2.object_id\n\t\t\t\t\t\t\t    AND p.end_column_id = c2.column_id\n\t\t\t\t\t\t\tINNER JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.schemas AS s\n\t\t\t\t\t\t\tON t.schema_id = s.schema_id\n\t\t\t\t\t\t\tCROSS APPLY ( SELECT s2.name as hsn, t2.name htn\n\t\t\t\t\t\t\t              FROM ' + QUOTENAME(@DatabaseName) + N'.sys.tables AS t2\n\t\t\t\t\t\t\t\t\t\t  INNER JOIN ' + QUOTENAME(@DatabaseName) + N'.sys.schemas AS s2\n\t\t\t\t\t\t\t\t\t\t  ON t2.schema_id = s2.schema_id\n\t\t\t\t\t\t\t              WHERE t2.object_id = t.history_table_id\n\t\t\t\t\t\t\t              AND t2.temporal_type = 1 /*History table*/ ) AS oa\n\t\t\t\t\t\t\tWHERE t.temporal_type IN ( 2, 4 ) /*BOL currently points to these types, but has no definition for 4*/\n\t\t\t\t\t\t\tOPTION (RECOMPILE);\n\t\t\t\t\t\t\t';\n\t\t\t\n\t\t\tIF @dsql IS NULL \n\t\t\tRAISERROR('@dsql is null',16,1);\n\t\t\t\n\t\t\tINSERT #TemporalTables ( database_name, database_id, schema_name, table_name, history_table_name, \n\t\t\t\t\t\t\t\t\t history_schema_name, start_column_name, end_column_name, period_name )\n\t\t\t\t\t\n\t\t\tEXEC sp_executesql @dsql;\n\n    END;\n\t\t\t\nEND;                    \nEND TRY\nBEGIN CATCH\n        RAISERROR (N'Failure populating temp tables.', 0,1) WITH NOWAIT;\n\n        IF @dsql IS NOT NULL\n        BEGIN\n            SET @msg= 'Last @dsql: ' + @dsql;\n            RAISERROR(@msg, 0, 1) WITH NOWAIT;\n        END;\n\n        SELECT    @msg = @DatabaseName + N' database failed to process. ' + ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();\n        RAISERROR (@msg,@ErrorSeverity, @ErrorState )WITH NOWAIT;\n        \n        \n        WHILE @@trancount > 0 \n            ROLLBACK;\n\n        RETURN;\nEND CATCH;\n FETCH NEXT FROM c1 INTO @DatabaseName;\nEND;\nDEALLOCATE c1;\n\n\n\n\n\n\n----------------------------------------\n--STEP 2: PREP THE TEMP TABLES\n--EVERY QUERY AFTER THIS GOES AGAINST TEMP TABLES ONLY.\n----------------------------------------\n\nRAISERROR (N'Updating #IndexSanity.key_column_names',0,1) WITH NOWAIT;\nUPDATE    #IndexSanity\nSET        key_column_names = D1.key_column_names\nFROM    #IndexSanity si\n        CROSS APPLY ( SELECT    RTRIM(STUFF( (SELECT    N', ' + c.column_name \n                            + N' {' + system_type_name + N' ' + CAST(max_length AS NVARCHAR(50)) +  N'}'\n                                AS col_definition\n                            FROM    #IndexColumns c\n                            WHERE    c.database_id= si.database_id\n\t\t\t\t\t\t\t\t\tAND c.schema_name = si.schema_name\n                                    AND c.object_id = si.object_id\n                                    AND c.index_id = si.index_id\n                                    AND c.is_included_column = 0 /*Just Keys*/\n                                    AND c.key_ordinal > 0 /*Ignore non-key columns, such as partitioning keys*/\n                            ORDER BY c.object_id, c.index_id, c.key_ordinal    \n                    FOR      XML PATH('') ,TYPE).value('.', 'varchar(max)'), 1, 1, ''))\n                                ) D1 ( key_column_names );\n\nRAISERROR (N'Updating #IndexSanity.partition_key_column_name',0,1) WITH NOWAIT;\nUPDATE    #IndexSanity\nSET        partition_key_column_name = D1.partition_key_column_name\nFROM    #IndexSanity si\n        CROSS APPLY ( SELECT    RTRIM(STUFF( (SELECT    N', ' + c.column_name AS col_definition\n                            FROM    #IndexColumns c\n                            WHERE    c.database_id= si.database_id\n\t\t\t\t\t\t\t\t\tAND c.schema_name = si.schema_name\n                                    AND c.object_id = si.object_id\n                                    AND c.index_id = si.index_id\n                                    AND c.partition_ordinal <> 0 /*Just Partitioned Keys*/\n                            ORDER BY c.object_id, c.index_id, c.key_ordinal    \n                    FOR      XML PATH('') , TYPE).value('.', 'varchar(max)'), 1, 1,''))) D1 \n                                ( partition_key_column_name );\n\nRAISERROR (N'Updating #IndexSanity.key_column_names_with_sort_order',0,1) WITH NOWAIT;\nUPDATE    #IndexSanity\nSET        key_column_names_with_sort_order = D2.key_column_names_with_sort_order\nFROM    #IndexSanity si\n        CROSS APPLY ( SELECT    RTRIM(STUFF( (SELECT    N', ' + c.column_name + CASE c.is_descending_key\n                            WHEN 1 THEN N' DESC'\n                            ELSE N''\n                        + N' {' + system_type_name + N' ' + CAST(max_length AS NVARCHAR(50)) +  N'}'\n                        END AS col_definition\n                    FROM    #IndexColumns c\n                    WHERE    c.database_id= si.database_id\n\t\t\t\t\t\t\tAND c.schema_name = si.schema_name\n                            AND c.object_id = si.object_id\n                            AND c.index_id = si.index_id\n                            AND c.is_included_column = 0 /*Just Keys*/\n                            AND c.key_ordinal > 0 /*Ignore non-key columns, such as partitioning keys*/\n                    ORDER BY c.object_id, c.index_id, c.key_ordinal    \n            FOR      XML PATH('') , TYPE).value('.', 'varchar(max)'), 1, 1, ''))\n            ) D2 ( key_column_names_with_sort_order );\n\nRAISERROR (N'Updating #IndexSanity.key_column_names_with_sort_order_no_types (for create tsql)',0,1) WITH NOWAIT;\nUPDATE    #IndexSanity\nSET        key_column_names_with_sort_order_no_types = D2.key_column_names_with_sort_order_no_types\nFROM    #IndexSanity si\n        CROSS APPLY ( SELECT    RTRIM(STUFF( (SELECT    N', ' + QUOTENAME(c.column_name) + CASE c.is_descending_key\n                            WHEN 1 THEN N' DESC'\n                            ELSE N''\n                        END AS col_definition\n                    FROM    #IndexColumns c\n                    WHERE    c.database_id= si.database_id\n\t\t\t\t\t\t\tAND c.schema_name = si.schema_name\n                            AND c.object_id = si.object_id\n                            AND c.index_id = si.index_id\n                            AND c.is_included_column = 0 /*Just Keys*/\n                            AND c.key_ordinal > 0 /*Ignore non-key columns, such as partitioning keys*/\n                    ORDER BY c.object_id, c.index_id, c.key_ordinal    \n            FOR      XML PATH('') , TYPE).value('.', 'varchar(max)'), 1, 1, ''))\n            ) D2 ( key_column_names_with_sort_order_no_types );\n\nRAISERROR (N'Updating #IndexSanity.include_column_names',0,1) WITH NOWAIT;\nUPDATE    #IndexSanity\nSET        include_column_names = D3.include_column_names\nFROM    #IndexSanity si\n        CROSS APPLY ( SELECT    RTRIM(STUFF( (SELECT    N', ' + c.column_name\n                        + N' {' + system_type_name + N' ' + CAST(max_length AS NVARCHAR(50)) +  N'}'\n                        FROM    #IndexColumns c\n                        WHERE    c.database_id= si.database_id\n\t\t\t\t\t\t\t\tAND c.schema_name = si.schema_name\n                                AND c.object_id = si.object_id\n                                AND c.index_id = si.index_id\n                                AND c.is_included_column = 1 /*Just includes*/\n                        ORDER BY c.column_name /*Order doesn't matter in includes, \n                                this is here to make rows easy to compare.*/ \n                FOR      XML PATH('') ,  TYPE).value('.', 'varchar(max)'), 1, 1, ''))\n                ) D3 ( include_column_names );\n\nRAISERROR (N'Updating #IndexSanity.include_column_names_no_types (for create tsql)',0,1) WITH NOWAIT;\nUPDATE    #IndexSanity\nSET        include_column_names_no_types = D3.include_column_names_no_types\nFROM    #IndexSanity si\n        CROSS APPLY ( SELECT    RTRIM(STUFF( (SELECT    N', ' + QUOTENAME(c.column_name)\n                        FROM    #IndexColumns c\n                                WHERE    c.database_id= si.database_id\n\t\t\t\t\t\t\t\tAND c.schema_name = si.schema_name\n                                AND c.object_id = si.object_id\n                                AND c.index_id = si.index_id\n                                AND c.is_included_column = 1 /*Just includes*/\n                        ORDER BY c.column_name /*Order doesn't matter in includes, \n                                this is here to make rows easy to compare.*/ \n                FOR      XML PATH('') ,  TYPE).value('.', 'varchar(max)'), 1, 1, ''))\n                ) D3 ( include_column_names_no_types );\n\nRAISERROR (N'Updating #IndexSanity.count_key_columns and count_include_columns',0,1) WITH NOWAIT;\nUPDATE    #IndexSanity\nSET        count_included_columns = D4.count_included_columns,\n        count_key_columns = D4.count_key_columns\nFROM    #IndexSanity si\n        CROSS APPLY ( SELECT    SUM(CASE WHEN is_included_column = 'true' THEN 1\n                                            ELSE 0\n                                    END) AS count_included_columns,\n                                SUM(CASE WHEN is_included_column = 'false' AND c.key_ordinal > 0 THEN 1\n                                            ELSE 0\n                                    END) AS count_key_columns\n                        FROM        #IndexColumns c\n                            WHERE    c.database_id= si.database_id\n\t\t\t\t\t\t\t\t\tAND c.schema_name = si.schema_name\n                                    AND c.object_id = si.object_id\n                                AND c.index_id = si.index_id \n                                ) AS D4 ( count_included_columns, count_key_columns );\n\nRAISERROR (N'Updating index_sanity_id on #IndexPartitionSanity',0,1) WITH NOWAIT;\nUPDATE    #IndexPartitionSanity\nSET        index_sanity_id = i.index_sanity_id\nFROM #IndexPartitionSanity ps\n        JOIN #IndexSanity i ON ps.[object_id] = i.[object_id]\n                                AND ps.index_id = i.index_id\n                                AND i.database_id = ps.database_id\n\t\t\t\t\t\t\t\tAND i.schema_name = ps.schema_name;\n\n\nRAISERROR (N'Inserting data into #IndexSanitySize',0,1) WITH NOWAIT;\nINSERT    #IndexSanitySize ( [index_sanity_id], [database_id], [schema_name], partition_count, total_rows, total_reserved_MB,\n                                total_reserved_LOB_MB, total_reserved_row_overflow_MB, total_range_scan_count,\n                                total_singleton_lookup_count, total_leaf_delete_count, total_leaf_update_count, \n                                total_forwarded_fetch_count,total_row_lock_count,\n                                total_row_lock_wait_count, total_row_lock_wait_in_ms, avg_row_lock_wait_in_ms,\n                                total_page_lock_count, total_page_lock_wait_count, total_page_lock_wait_in_ms,\n                                avg_page_lock_wait_in_ms, total_index_lock_promotion_attempt_count, \n                                total_index_lock_promotion_count, data_compression_desc )\n        SELECT    index_sanity_id, ipp.database_id, ipp.schema_name,\t\t\t\t\t\t\n\t\t\t\tCOUNT(*), SUM(row_count), SUM(reserved_MB), SUM(reserved_LOB_MB),\n                SUM(reserved_row_overflow_MB), \n                SUM(range_scan_count),\n                SUM(singleton_lookup_count),\n                SUM(leaf_delete_count), \n                SUM(leaf_update_count),\n                SUM(forwarded_fetch_count),\n                SUM(row_lock_count), \n                SUM(row_lock_wait_count),\n                SUM(row_lock_wait_in_ms), \n                CASE WHEN SUM(row_lock_wait_in_ms) > 0 THEN\n                    SUM(row_lock_wait_in_ms)/(1.*SUM(row_lock_wait_count))\n                ELSE 0 END AS avg_row_lock_wait_in_ms,           \n                SUM(page_lock_count), \n                SUM(page_lock_wait_count),\n                SUM(page_lock_wait_in_ms), \n                CASE WHEN SUM(page_lock_wait_in_ms) > 0 THEN\n                    SUM(page_lock_wait_in_ms)/(1.*SUM(page_lock_wait_count))\n                ELSE 0 END AS avg_page_lock_wait_in_ms,           \n                SUM(index_lock_promotion_attempt_count),\n                SUM(index_lock_promotion_count),\n                LEFT(MAX(data_compression_info.data_compression_rollup),8000)\n        FROM #IndexPartitionSanity ipp\n        /* individual partitions can have distinct compression settings, just roll them into a list here*/\n        OUTER APPLY (SELECT STUFF((\n            SELECT    N', ' + data_compression_desc\n            FROM #IndexPartitionSanity ipp2\n            WHERE ipp.[object_id]=ipp2.[object_id]\n                AND ipp.[index_id]=ipp2.[index_id]\n                AND ipp.database_id = ipp2.database_id\n\t\t\t\tAND ipp.schema_name = ipp2.schema_name\n            ORDER BY ipp2.partition_number\n            FOR      XML PATH(''),TYPE).value('.', 'varchar(max)'), 1, 1, '')) \n                data_compression_info(data_compression_rollup)\n        GROUP BY index_sanity_id, ipp.database_id, ipp.schema_name\n        ORDER BY index_sanity_id \nOPTION    ( RECOMPILE );\n\nRAISERROR (N'Determining index usefulness',0,1) WITH NOWAIT;\nUPDATE #MissingIndexes \nSET is_low = CASE WHEN (user_seeks + user_scans) < 10000 \n\t\t\t\t\tOR avg_user_impact < 70. THEN 1\n\t\t\t\t\tELSE 0 \n\t\t\t\tEND;\n\nRAISERROR (N'Updating #IndexSanity.referenced_by_foreign_key',0,1) WITH NOWAIT;\nUPDATE #IndexSanity\n    SET is_referenced_by_foreign_key=1\nFROM #IndexSanity s\nJOIN #ForeignKeys fk ON \n    s.object_id=fk.referenced_object_id\n    AND s.database_id=fk.database_id\n    AND LEFT(s.key_column_names,LEN(fk.referenced_fk_columns)) = fk.referenced_fk_columns;\n\nRAISERROR (N'Update index_secret on #IndexSanity for NC indexes.',0,1) WITH NOWAIT;\nUPDATE nc \nSET secret_columns=\n    N'[' + \n    CASE tb.count_key_columns WHEN 0 THEN '1' ELSE CAST(tb.count_key_columns AS VARCHAR(10)) END +\n    CASE nc.is_unique WHEN 1 THEN N' INCLUDE' ELSE N' KEY' END +\n    CASE WHEN tb.count_key_columns > 1 THEN  N'S] ' ELSE N'] ' END +\n    CASE tb.index_id WHEN 0 THEN '[RID]' ELSE LTRIM(tb.key_column_names) +\n        /* Uniquifiers only needed on non-unique clustereds-- not heaps */\n        CASE tb.is_unique WHEN 0 THEN ' [UNIQUIFIER]' ELSE N'' END\n    END\n    , count_secret_columns=\n    CASE tb.index_id WHEN 0 THEN 1 ELSE \n        tb.count_key_columns +\n            CASE tb.is_unique WHEN 0 THEN 1 ELSE 0 END\n    END\nFROM #IndexSanity AS nc\nJOIN #IndexSanity AS tb ON nc.object_id=tb.object_id\n\tAND nc.database_id = tb.database_id\n\tAND nc.schema_name = tb.schema_name\n    AND tb.index_id IN (0,1) \nWHERE nc.index_id > 1;\n\nRAISERROR (N'Update index_secret on #IndexSanity for heaps and non-unique clustered.',0,1) WITH NOWAIT;\nUPDATE tb\nSET secret_columns=    CASE tb.index_id WHEN 0 THEN '[RID]' ELSE '[UNIQUIFIER]' END\n    , count_secret_columns = 1\nFROM #IndexSanity AS tb\nWHERE tb.index_id = 0 /*Heaps-- these have the RID */\n    OR (tb.index_id=1 AND tb.is_unique=0); /* Non-unique CX: has uniquifer (when needed) */\n\n\nRAISERROR (N'Populate #IndexCreateTsql.',0,1) WITH NOWAIT;\nINSERT #IndexCreateTsql (index_sanity_id, create_tsql)\nSELECT\n    index_sanity_id,\n    ISNULL (\n    /* Script drops for disabled non-clustered indexes*/\n    CASE WHEN is_disabled = 1 AND index_id <> 1\n        THEN N'--DROP INDEX ' + QUOTENAME([index_name]) + N' ON '\n            + QUOTENAME([schema_name]) + N'.' + QUOTENAME([object_name]) \n    ELSE\n        CASE index_id WHEN 0 THEN N'ALTER TABLE ' + QUOTENAME([database_name]) + N'.' + QUOTENAME([schema_name]) + N'.' + QUOTENAME([object_name])  + ' REBUILD;'\n        ELSE \n            CASE WHEN is_XML = 1 OR is_spatial=1 THEN N'' /* Not even trying for these just yet...*/\n            ELSE \n                CASE WHEN is_primary_key=1 THEN\n                    N'ALTER TABLE ' + QUOTENAME([schema_name]) +\n                        N'.' + QUOTENAME([object_name]) + \n                        N' ADD CONSTRAINT [' +\n                        index_name + \n                        N'] PRIMARY KEY ' + \n                        CASE WHEN index_id=1 THEN N'CLUSTERED (' ELSE N'(' END +\n                        key_column_names_with_sort_order_no_types + N' )' \n                    WHEN is_CX_columnstore= 1 THEN\n                            N'CREATE CLUSTERED COLUMNSTORE INDEX ' + QUOTENAME(index_name) + N' on ' + QUOTENAME([schema_name]) + '.' + QUOTENAME([object_name])\n                ELSE /*Else not a PK or cx columnstore */ \n                    N'CREATE ' + \n                    CASE WHEN is_unique=1 THEN N'UNIQUE ' ELSE N'' END +\n                    CASE WHEN index_id=1 THEN N'CLUSTERED ' ELSE N'' END +\n                    CASE WHEN is_NC_columnstore=1 THEN N'NONCLUSTERED COLUMNSTORE ' \n                    ELSE N'' END +\n                    N'INDEX ['\n                            + index_name + N'] ON ' + \n                        QUOTENAME([schema_name]) + '.' + QUOTENAME([object_name]) + \n                            CASE WHEN is_NC_columnstore=1 THEN \n                                N' (' + ISNULL(include_column_names_no_types,'') +  N' )' \n                            ELSE /*Else not colunnstore */ \n                                N' (' + ISNULL(key_column_names_with_sort_order_no_types,'') +  N' )' \n                                + CASE WHEN include_column_names_no_types IS NOT NULL THEN \n                                    N' INCLUDE (' + include_column_names_no_types + N')' \n                                    ELSE N'' \n                                END\n                            END /*End non-colunnstore case */ \n                        + CASE WHEN filter_definition <> N'' THEN N' WHERE ' + filter_definition ELSE N'' END\n                    END /*End Non-PK index CASE */ \n                + CASE WHEN is_NC_columnstore=0 AND is_CX_columnstore=0 THEN\n                    N' WITH (' \n                        + N'FILLFACTOR=' + CASE fill_factor WHEN 0 THEN N'100' ELSE CAST(fill_factor AS NVARCHAR(5)) END + ', '\n                        + N'ONLINE=?, SORT_IN_TEMPDB=?, DATA_COMPRESSION=?'\n                    + N')'\n                ELSE N'' END\n                + N';'\n                END /*End non-spatial and non-xml CASE */ \n        END\n    END, '[Unknown Error]')\n        AS create_tsql\nFROM #IndexSanity;\n\t  \nRAISERROR (N'Populate #PartitionCompressionInfo.',0,1) WITH NOWAIT;\n;WITH    [maps]\n\t\tAS ( SELECT   \n\t\t\t\t\tindex_sanity_id,\n\t\t\t\t\tpartition_number,\n\t\t\t\t\tdata_compression_desc,\n\t\t\t\t\tpartition_number - ROW_NUMBER() OVER (PARTITION BY ips.index_sanity_id, data_compression_desc ORDER BY partition_number ) AS [rN]\n\t\t\tFROM     #IndexPartitionSanity ips\n\t\t\t),\n\t[grps]\n\t\tAS ( SELECT   MIN([maps].[partition_number]) AS [MinKey] ,\n\t\t\t\t\tMAX([maps].[partition_number]) AS [MaxKey] ,\n\t\t\t\t\tindex_sanity_id,\n\t\t\t\t\tmaps.data_compression_desc\n\t\t\tFROM     [maps]\n\t\t\tGROUP BY [maps].[rN], index_sanity_id, maps.data_compression_desc)\nINSERT #PartitionCompressionInfo\n\t\t(index_sanity_id, partition_compression_detail)\nSELECT DISTINCT grps.index_sanity_id , SUBSTRING((  STUFF((SELECT ', ' + ' Partition'\n\t\t\t\t\t\t\t\t\t\t\t+ CASE WHEN [grps2].[MinKey] < [grps2].[MaxKey]\n\t\t\t\t\t\t\t\t\t\t\t\t\tTHEN +'s '\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ CAST([grps2].[MinKey] AS VARCHAR)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ ' - '\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ CAST([grps2].[MaxKey] AS VARCHAR)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ ' use ' + grps2.data_compression_desc\n\t\t\t\t\t\t\t\t\t\t\t\t\tELSE ' '\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ CAST([grps2].[MinKey] AS VARCHAR)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ ' uses '  + grps2.data_compression_desc\n\t\t\t\t\t\t\t\t\t\t\t\tEND AS [Partitions]\n\t\t\t\t\t\t\t\t\t\tFROM   [grps] AS grps2\n\t\t\t\t\t\t\t\t\t\tWHERE grps2.index_sanity_id = grps.index_sanity_id\n\t\t\t\t\t\t\t\t\t\tORDER BY grps2.MinKey, grps2.MaxKey\n\t\t\t\t\t\t\tFOR     XML PATH('') ,\n\t\t\t\t\t\t\t\t\t\tTYPE \n\t\t\t\t\t).[value]('.', 'VARCHAR(MAX)'), 1, 1, '') ), 0, 8000) AS [partition_compression_detail]\nFROM grps;\n\t\t\nRAISERROR (N'Update #PartitionCompressionInfo.',0,1) WITH NOWAIT;\nUPDATE sz\nSET sz.data_compression_desc = pci.partition_compression_detail\nFROM #IndexSanitySize sz\nJOIN #PartitionCompressionInfo AS pci\nON pci.index_sanity_id = sz.index_sanity_id;\n\n\n\n/*This is for debugging*/ \n--SELECT '#IndexSanity' AS table_name, * FROM  #IndexSanity;\n--SELECT '#IndexPartitionSanity' AS table_name, * FROM  #IndexPartitionSanity;\n--SELECT '#IndexSanitySize' AS table_name, * FROM  #IndexSanitySize;\n--SELECT '#IndexColumns' AS table_name, * FROM  #IndexColumns;\n--SELECT '#MissingIndexes' AS table_name, * FROM  #MissingIndexes;\n--SELECT '#ForeignKeys' AS table_name, * FROM  #ForeignKeys;\n--SELECT '#BlitzIndexResults' AS table_name, * FROM  #BlitzIndexResults;\n--SELECT '#IndexCreateTsql' AS table_name, * FROM  #IndexCreateTsql;\n--SELECT '#DatabaseList' AS table_name, * FROM  #DatabaseList;\n--SELECT '#Statistics' AS table_name, * FROM  #Statistics;\n--SELECT '#PartitionCompressionInfo' AS table_name, * FROM  #PartitionCompressionInfo;\n--SELECT '#ComputedColumns' AS table_name, * FROM  #ComputedColumns;\n--SELECT '#TraceStatus' AS table_name, * FROM  #TraceStatus;                   \n/*End debug*/\t\n\n\n----------------------------------------\n--STEP 3: DIAGNOSE THE PATIENT\n----------------------------------------\n\n\nBEGIN TRY\n----------------------------------------\n--If @TableName is specified, just return information for that table.\n--The @Mode parameter doesn't matter if you're looking at a specific table.\n----------------------------------------\nIF @TableName IS NOT NULL\nBEGIN\n    RAISERROR(N'@TableName specified, giving detail only on that table.', 0,1) WITH NOWAIT;\n\n    --We do a left join here in case this is a disabled NC.\n    --In that case, it won't have any size info/pages allocated.\n \n   \t\n\t   WITH table_mode_cte AS (\n        SELECT \n            s.db_schema_object_indexid, \n            s.key_column_names,\n            s.index_definition, \n            ISNULL(s.secret_columns,N'') AS secret_columns,\n            s.fill_factor,\n            s.index_usage_summary, \n            sz.index_op_stats,\n            ISNULL(sz.index_size_summary,'') /*disabled NCs will be null*/ AS index_size_summary,\n\t\t\tpartition_compression_detail ,\n            ISNULL(sz.index_lock_wait_summary,'') AS index_lock_wait_summary,\n            s.is_referenced_by_foreign_key,\n            (SELECT COUNT(*)\n                FROM #ForeignKeys fk WHERE fk.parent_object_id=s.object_id\n                AND PATINDEX (fk.parent_fk_columns, s.key_column_names)=1) AS FKs_covered_by_index,\n            s.last_user_seek,\n            s.last_user_scan,\n            s.last_user_lookup,\n            s.last_user_update,\n            s.create_date,\n            s.modify_date,\n            ct.create_tsql,\n            1 AS display_order\n        FROM #IndexSanity s\n        LEFT JOIN #IndexSanitySize sz ON \n            s.index_sanity_id=sz.index_sanity_id\n        LEFT JOIN #IndexCreateTsql ct ON \n            s.index_sanity_id=ct.index_sanity_id\n\t\tLEFT JOIN #PartitionCompressionInfo pci ON \n\t\t\tpci.index_sanity_id = s.index_sanity_id\n        WHERE s.[object_id]=@ObjectID\n        UNION ALL\n        SELECT     N'Database ' + QUOTENAME(@DatabaseName) + N' as of ' + CONVERT(NVARCHAR(16),GETDATE(),121) +             \n                N' (' + @ScriptVersionName + ')' ,   \n                N'SQL Server First Responder Kit' ,   \n                N'http://FirstResponderKit.org' ,\n                N'From Your Community Volunteers',\n                NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,\n                0 AS display_order\n    )\n    SELECT \n            db_schema_object_indexid AS [Details: db_schema.table.index(indexid)], \n            index_definition AS [Definition: [Property]] ColumnName {datatype maxbytes}], \n            secret_columns AS [Secret Columns],\n            fill_factor AS [Fillfactor],\n            index_usage_summary AS [Usage Stats], \n            index_op_stats AS [Op Stats],\n            index_size_summary AS [Size],\n\t\t\tpartition_compression_detail AS [Compression Type],\n            index_lock_wait_summary AS [Lock Waits],\n            is_referenced_by_foreign_key AS [Referenced by FK?],\n            FKs_covered_by_index AS [FK Covered by Index?],\n            last_user_seek AS [Last User Seek],\n            last_user_scan AS [Last User Scan],\n            last_user_lookup AS [Last User Lookup],\n            last_user_update AS [Last User Write],\n            create_date AS [Created],\n            modify_date AS [Last Modified],\n            create_tsql AS [Create TSQL]\n    FROM table_mode_cte\n    ORDER BY display_order ASC, key_column_names ASC\n    OPTION    ( RECOMPILE );                        \n\n    IF (SELECT TOP 1 [object_id] FROM    #MissingIndexes mi) IS NOT NULL\n    BEGIN\n\n\tWITH create_date AS (\n\t\t\t\t\t\tSELECT i.database_id,\n\t\t\t\t\t\t\t   i.schema_name,\n\t\t\t\t\t\t\t   i.[object_id], \n\t\t\t\t\t\t\t   ISNULL(NULLIF(MAX(DATEDIFF(DAY, i.create_date, SYSDATETIME())), 0), 1) AS create_days\n\t\t\t\t\t\tFROM #IndexSanity AS i\n\t\t\t\t\t\tGROUP BY i.database_id, i.schema_name, i.object_id\n\t\t\t\t\t\t)\n        SELECT  N'Missing index.' AS Finding ,\n                N'http://BrentOzar.com/go/Indexaphobia' AS URL ,\n                mi.[statement] + \n                ' Est. Benefit: '\n                    + CASE WHEN magic_benefit_number >= 922337203685477 THEN '>= 922,337,203,685,477'\n                    ELSE REPLACE(CONVERT(NVARCHAR(256),CAST(CAST(\n                                        (magic_benefit_number / CASE WHEN cd.create_days < @DaysUptime THEN cd.create_days ELSE @DaysUptime END)\n                                        AS BIGINT) AS MONEY), 1), '.00', '')\n                    END AS [Estimated Benefit],\n                missing_index_details AS [Missing Index Request] ,\n                index_estimated_impact AS [Estimated Impact],\n                create_tsql AS [Create TSQL]\n        FROM    #MissingIndexes mi\n\t\tLEFT JOIN create_date AS cd\n\t\tON mi.[object_id] =  cd.object_id \n\t\tAND mi.database_id = cd.database_id\n\t\tAND mi.schema_name = cd.schema_name\n        WHERE   mi.[object_id] = @ObjectID\n                /* Minimum benefit threshold = 100k/day of uptime OR since table creation date, whichever is lower*/\n        AND (magic_benefit_number / CASE WHEN cd.create_days < @DaysUptime THEN cd.create_days ELSE @DaysUptime END) >= 100000\n        ORDER BY is_low, magic_benefit_number DESC\n        OPTION    ( RECOMPILE );\n    END;       \n    ELSE     \n    SELECT 'No missing indexes.' AS finding;\n\n    SELECT     \n        column_name AS [Column Name],\n        (SELECT COUNT(*)  \n            FROM #IndexColumns c2 \n            WHERE c2.column_name=c.column_name\n            AND c2.key_ordinal IS NOT NULL)\n        + CASE WHEN c.index_id = 1 AND c.key_ordinal IS NOT NULL THEN\n            -1+ (SELECT COUNT(DISTINCT index_id)\n            FROM #IndexColumns c3\n            WHERE c3.index_id NOT IN (0,1))\n            ELSE 0 END\n                AS [Found In],\n        system_type_name + \n            CASE max_length WHEN -1 THEN N' (max)' ELSE\n                CASE  \n                    WHEN system_type_name IN (N'char',N'varchar',N'binary',N'varbinary') THEN N' (' + CAST(max_length AS NVARCHAR(20)) + N')' \n                    WHEN system_type_name IN (N'nchar',N'nvarchar') THEN N' (' + CAST(max_length/2 AS NVARCHAR(20)) + N')' \n                    ELSE '' \n                END\n            END\n            AS [Type],\n        CASE is_computed WHEN 1 THEN 'yes' ELSE '' END AS [Computed?],\n        max_length AS [Length (max bytes)],\n        [precision] AS [Prec],\n        [scale] AS [Scale],\n        CASE is_nullable WHEN 1 THEN 'yes' ELSE '' END AS [Nullable?],\n        CASE is_identity WHEN 1 THEN 'yes' ELSE '' END AS [Identity?],\n        CASE is_replicated WHEN 1 THEN 'yes' ELSE '' END AS [Replicated?],\n        CASE is_sparse WHEN 1 THEN 'yes' ELSE '' END AS [Sparse?],\n        CASE is_filestream WHEN 1 THEN 'yes' ELSE '' END AS [Filestream?],\n        collation_name AS [Collation]\n    FROM #IndexColumns AS c\n    WHERE index_id IN (0,1);\n\n    IF (SELECT TOP 1 parent_object_id FROM #ForeignKeys) IS NOT NULL\n    BEGIN\n        SELECT [database_name] + N':' + parent_object_name + N': ' + foreign_key_name AS [Foreign Key],\n            parent_fk_columns AS [Foreign Key Columns],\n            referenced_object_name AS [Referenced Table],\n            referenced_fk_columns AS [Referenced Table Columns],\n            is_disabled AS [Is Disabled?],\n            is_not_trusted AS [Not Trusted?],\n            is_not_for_replication [Not for Replication?],\n            [update_referential_action_desc] AS [Cascading Updates?],\n            [delete_referential_action_desc] AS [Cascading Deletes?]\n        FROM #ForeignKeys\n        ORDER BY [Foreign Key]\n        OPTION    ( RECOMPILE );\n    END;\n    ELSE\n    SELECT 'No foreign keys.' AS finding;\nEND; \n\n--If @TableName is NOT specified...\n--Act based on the @Mode and @Filter. (@Filter applies only when @Mode=0 \"diagnose\")\nELSE\nBEGIN;\n    IF @Mode IN (0, 4) /* DIAGNOSE*/\n    BEGIN;\n        RAISERROR(N'@Mode=0 or 4, we are diagnosing.', 0,1) WITH NOWAIT;\n\n        ----------------------------------------\n        --Multiple Index Personalities: Check_id 0-10\n        ----------------------------------------\n        BEGIN;\n\n        --SELECT    [object_id], key_column_names, database_id\n        --                   FROM        #IndexSanity\n        --                   WHERE  index_type IN (1,2) /* Clustered, NC only*/\n        --                        AND is_hypothetical = 0\n        --                        AND is_disabled = 0\n        --                   GROUP BY    [object_id], key_column_names, database_id\n        --                   HAVING    COUNT(*) > 1\n\n\n        RAISERROR('check_id 1: Duplicate keys', 0,1) WITH NOWAIT;\n            WITH    duplicate_indexes\n                      AS ( SELECT    [object_id], key_column_names, database_id, [schema_name]\n                           FROM        #IndexSanity\n                           WHERE  index_type IN (1,2) /* Clustered, NC only*/\n                                AND is_hypothetical = 0\n                                AND is_disabled = 0\n\t\t\t\t\t\t\t\tAND is_primary_key = 0\n                           GROUP BY    [object_id], key_column_names, database_id, [schema_name]\n                           HAVING    COUNT(*) > 1)\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                        SELECT    1 AS check_id, \n                                ip.index_sanity_id,\n                                50 AS Priority,\n                                'Multiple Index Personalities' AS findings_group,\n                                'Duplicate keys' AS finding,\n                                [database_name] AS [Database Name],\n                                N'http://BrentOzar.com/go/duplicateindex' AS URL,\n                                N'Index Name: ' + ip.index_name + N' Table Name: ' + ip.db_schema_object_name AS details,\n                                ip.index_definition, \n                                ip.secret_columns, \n                                ip.index_usage_summary,\n                                ips.index_size_summary\n                        FROM    duplicate_indexes di\n                                JOIN #IndexSanity ip ON di.[object_id] = ip.[object_id]\n                                                         AND ip.database_id = di.database_id\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t AND ip.[schema_name] = di.[schema_name]\n                                                         AND di.key_column_names = ip.key_column_names\n                                JOIN #IndexSanitySize ips ON ip.index_sanity_id = ips.index_sanity_id AND ip.database_id = ips.database_id\n                        /* WHERE clause limits to only @ThresholdMB or larger duplicate indexes when getting all databases or using PainRelief mode */\n                        WHERE ips.total_reserved_MB >= CASE WHEN (@GetAllDatabases = 1 OR @Mode = 0) THEN @ThresholdMB ELSE ips.total_reserved_MB END\n\t\t\t\t\t\tAND ip.is_primary_key = 0\n                        ORDER BY ip.object_id, ip.key_column_names_with_sort_order    \n                OPTION    ( RECOMPILE );\n\n        RAISERROR('check_id 2: Keys w/ identical leading columns.', 0,1) WITH NOWAIT;\n            WITH    borderline_duplicate_indexes\n                      AS ( SELECT DISTINCT database_id, [object_id], first_key_column_name, key_column_names,\n                                    COUNT([object_id]) OVER ( PARTITION BY database_id, [object_id], first_key_column_name ) AS number_dupes\n                           FROM        #IndexSanity\n                           WHERE index_type IN (1,2) /* Clustered, NC only*/\n                            AND is_hypothetical=0\n                            AND is_disabled=0\n\t\t\t\t\t\t\tAND is_primary_key = 0)\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                        SELECT    2 AS check_id, \n                                ip.index_sanity_id,\n                                60 AS Priority,\n                                'Multiple Index Personalities' AS findings_group,\n                                'Borderline duplicate keys' AS finding,\n                                [database_name] AS [Database Name],\n                                N'http://BrentOzar.com/go/duplicateindex' AS URL,\n                                ip.db_schema_object_indexid AS details, \n                                ip.index_definition, \n                                ip.secret_columns,\n                                ip.index_usage_summary,\n                                ips.index_size_summary\n                        FROM    #IndexSanity AS ip \n                        JOIN #IndexSanitySize ips ON ip.index_sanity_id = ips.index_sanity_id\n                        WHERE EXISTS (\n                            SELECT di.[object_id]\n                            FROM borderline_duplicate_indexes AS di\n                            WHERE di.[object_id] = ip.[object_id] AND\n                                di.database_id = ip.database_id AND\n                                di.first_key_column_name = ip.first_key_column_name AND\n                                di.key_column_names <> ip.key_column_names AND\n                                di.number_dupes > 1    \n                        )\n\t\t\t\t\t\tAND ip.is_primary_key = 0\n                        /* WHERE clause skips near-duplicate indexes when getting all databases or using PainRelief mode */\n                        AND NOT (@GetAllDatabases = 1 OR @Mode = 0)\n                                                \n                        ORDER BY ip.[schema_name], ip.[object_name], ip.key_column_names, ip.include_column_names\n            OPTION    ( RECOMPILE );\n\n        END;\n        ----------------------------------------\n        --Aggressive Indexes: Check_id 10-19\n        ----------------------------------------\n        BEGIN;\n\n        RAISERROR(N'check_id 11: Total lock wait time > 5 minutes (row + page) with long average waits', 0,1) WITH NOWAIT;\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                SELECT  11 AS check_id, \n                        i.index_sanity_id,\n                        10 AS Priority,\n                        N'Aggressive Indexes' AS findings_group,\n                        N'Total lock wait time > 5 minutes (row + page) with long average waits' AS finding, \n                        [database_name] AS [Database Name],\n                        N'http://BrentOzar.com/go/AggressiveIndexes' AS URL,\n                        i.db_schema_object_indexid + N': ' +\n                            sz.index_lock_wait_summary + N' NC indexes on table: ' +\n\t\t\t\t\t\t\t CAST(COALESCE((SELECT SUM(1) FROM #IndexSanity iMe INNER JOIN #IndexSanity iOthers ON iMe.database_id = iOthers.database_id AND iMe.object_id = iOthers.object_id AND iOthers.index_id > 1 WHERE i.index_sanity_id = iMe.index_sanity_id),0)\n                                         AS NVARCHAR(30))\t AS details, \n                        i.index_definition,\n                        i.secret_columns,\n                        i.index_usage_summary,\n                        sz.index_size_summary\n                FROM    #IndexSanity AS i\n                JOIN #IndexSanitySize AS sz ON i.index_sanity_id = sz.index_sanity_id\n                WHERE    (total_row_lock_wait_in_ms + total_page_lock_wait_in_ms) > 300000\n\t\t\t\tAND (sz.avg_page_lock_wait_in_ms + sz.avg_row_lock_wait_in_ms) > 5000\n\t\t\t\tGROUP BY i.index_sanity_id, [database_name], i.db_schema_object_indexid, sz.index_lock_wait_summary, i.index_definition, i.secret_columns, i.index_usage_summary, sz.index_size_summary, sz.index_sanity_id\n                OPTION    ( RECOMPILE );\n\n        RAISERROR(N'check_id 12: Total lock wait time > 5 minutes (row + page) with short average waits', 0,1) WITH NOWAIT;\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                SELECT  12 AS check_id, \n                        i.index_sanity_id,\n                        10 AS Priority,\n                        N'Aggressive Indexes' AS findings_group,\n                        N'Total lock wait time > 5 minutes (row + page) with short average waits' AS finding, \n                        [database_name] AS [Database Name],\n                        N'http://BrentOzar.com/go/AggressiveIndexes' AS URL,\n                        i.db_schema_object_indexid + N': ' +\n                            sz.index_lock_wait_summary + N' NC indexes on table: ' +\n\t\t\t\t\t\t\t CAST(COALESCE((SELECT SUM(1) FROM #IndexSanity iMe INNER JOIN #IndexSanity iOthers ON iMe.database_id = iOthers.database_id AND iMe.object_id = iOthers.object_id AND iOthers.index_id > 1 WHERE i.index_sanity_id = iMe.index_sanity_id),0)\n                                         AS NVARCHAR(30))\t AS details, \n                        i.index_definition,\n                        i.secret_columns,\n                        i.index_usage_summary,\n                        sz.index_size_summary\n                FROM    #IndexSanity AS i\n                JOIN #IndexSanitySize AS sz ON i.index_sanity_id = sz.index_sanity_id\n                WHERE    (total_row_lock_wait_in_ms + total_page_lock_wait_in_ms) > 300000\n\t\t\t\tAND (sz.avg_page_lock_wait_in_ms + sz.avg_row_lock_wait_in_ms) < 5000\n\t\t\t\tGROUP BY i.index_sanity_id, [database_name], i.db_schema_object_indexid, sz.index_lock_wait_summary, i.index_definition, i.secret_columns, i.index_usage_summary, sz.index_size_summary, sz.index_sanity_id\n                OPTION    ( RECOMPILE );\n\n        END;\n\n        ---------------------------------------- \n        --Index Hoarder: Check_id 20-29\n        ----------------------------------------\n        BEGIN\n            RAISERROR(N'check_id 20: >=7 NC indexes on any given table. Yes, 7 is an arbitrary number.', 0,1) WITH NOWAIT;\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                        SELECT    20 AS check_id, \n                                MAX(i.index_sanity_id) AS index_sanity_id, \n                                100 AS Priority,\n                                'Index Hoarder' AS findings_group,\n                                'Many NC indexes on a single table' AS finding,\n                                [database_name] AS [Database Name],\n                                N'http://BrentOzar.com/go/IndexHoarder' AS URL,\n                                CAST (COUNT(*) AS NVARCHAR(30)) + ' NC indexes on ' + i.db_schema_object_name AS details,\n                                i.db_schema_object_name + ' (' + CAST (COUNT(*) AS NVARCHAR(30)) + ' indexes)' AS index_definition,\n                                '' AS secret_columns,\n                                REPLACE(CONVERT(NVARCHAR(30),CAST(SUM(total_reads) AS MONEY), 1), N'.00', N'') + N' reads (ALL); '\n                                    + REPLACE(CONVERT(NVARCHAR(30),CAST(SUM(user_updates) AS MONEY), 1), N'.00', N'') + N' writes (ALL); ',\n                                REPLACE(CONVERT(NVARCHAR(30),CAST(MAX(total_rows) AS MONEY), 1), N'.00', N'') + N' rows (MAX)'\n                                    + CASE WHEN SUM(total_reserved_MB) > 1024 THEN \n                                        N'; ' + CAST(CAST(SUM(total_reserved_MB)/1024. AS NUMERIC(29,1)) AS NVARCHAR(30)) + 'GB (ALL)'\n                                    WHEN SUM(total_reserved_MB) > 0 THEN\n                                        N'; ' + CAST(CAST(SUM(total_reserved_MB) AS NUMERIC(29,1)) AS NVARCHAR(30)) + 'MB (ALL)'\n                                    ELSE ''\n                                    END AS index_size_summary\n                        FROM    #IndexSanity i\n                        JOIN #IndexSanitySize ip ON i.index_sanity_id = ip.index_sanity_id\n                        WHERE    index_id NOT IN ( 0, 1 )\n                        AND NOT (@GetAllDatabases = 1 OR @Mode = 0)\n                        GROUP BY db_schema_object_name, [i].[database_name]\n                        HAVING    COUNT(*) >= 7\n                        ORDER BY i.db_schema_object_name DESC  OPTION    ( RECOMPILE );\n\n            IF @Filter = 1 /*@Filter=1 is \"ignore unusued\" */\n            BEGIN\n                RAISERROR(N'Skipping checks on unused indexes (21 and 22) because @Filter=1', 0,1) WITH NOWAIT;\n            END;\n            ELSE /*Otherwise, go ahead and do the checks*/\n            BEGIN\n                RAISERROR(N'check_id 21: >=5 percent of indexes are unused. Yes, 5 is an arbitrary number.', 0,1) WITH NOWAIT;\n                    DECLARE @percent_NC_indexes_unused NUMERIC(29,1);\n                    DECLARE @NC_indexes_unused_reserved_MB NUMERIC(29,1);\n\n                    SELECT    @percent_NC_indexes_unused =( 100.00 * SUM(CASE    WHEN total_reads = 0 THEN 1\n                                                ELSE 0\n                                           END) ) / COUNT(*) ,\n                            @NC_indexes_unused_reserved_MB = SUM(CASE WHEN total_reads = 0 THEN sz.total_reserved_MB\n                                     ELSE 0\n                                END) \n                    FROM    #IndexSanity i\n                    JOIN    #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id\n                    WHERE    index_id NOT IN ( 0, 1 ) \n                            AND i.is_unique = 0\n\t\t\t\t\t\t\t/*Skipping tables created in the last week, or modified in past 2 days*/\n\t\t\t\t\t\t\tAND\ti.create_date >= DATEADD(dd,-7,GETDATE()) \n\t\t\t\t\t\t\tAND i.modify_date > DATEADD(dd,-2,GETDATE()) \n                    OPTION    ( RECOMPILE );\n\n                IF @percent_NC_indexes_unused >= 5 \n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                            SELECT    21 AS check_id, \n                                    MAX(i.index_sanity_id) AS index_sanity_id, \n                                    150 AS Priority,\n                                    N'Index Hoarder' AS findings_group,\n                                    N'More than 5 percent NC indexes are unused' AS finding,\n                                    [database_name] AS [Database Name],\n                                    N'http://BrentOzar.com/go/IndexHoarder' AS URL,\n                                    CAST (@percent_NC_indexes_unused AS NVARCHAR(30)) + N' percent NC indexes (' + CAST(COUNT(*) AS NVARCHAR(10)) + N') unused. ' +\n                                    N'These take up ' + CAST (@NC_indexes_unused_reserved_MB AS NVARCHAR(30)) + N'MB of space.' AS details,\n                                    i.database_name + ' (' + CAST (COUNT(*) AS NVARCHAR(30)) + N' indexes)' AS index_definition,\n                                    '' AS secret_columns, \n                                    CAST(SUM(total_reads) AS NVARCHAR(256)) + N' reads (ALL); '\n                                        + CAST(SUM([user_updates]) AS NVARCHAR(256)) + N' writes (ALL)' AS index_usage_summary,\n                                \n                                    REPLACE(CONVERT(NVARCHAR(30),CAST(MAX([total_rows]) AS MONEY), 1), '.00', '') + N' rows (MAX)'\n                                        + CASE WHEN SUM(total_reserved_MB) > 1024 THEN \n                                            N'; ' + CAST(CAST(SUM(total_reserved_MB)/1024. AS NUMERIC(29,1)) AS NVARCHAR(30)) + 'GB (ALL)'\n                                        WHEN SUM(total_reserved_MB) > 0 THEN\n                                            N'; ' + CAST(CAST(SUM(total_reserved_MB) AS NUMERIC(29,1)) AS NVARCHAR(30)) + 'MB (ALL)'\n                                        ELSE ''\n                                        END AS index_size_summary\n                            FROM    #IndexSanity i\n                            JOIN    #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id\n                            WHERE    index_id NOT IN ( 0, 1 )\n                                    AND i.is_unique = 0\n                                    AND total_reads = 0\n                                    AND NOT (@GetAllDatabases = 1 OR @Mode = 0)\n\t\t\t\t\t\t\t\t\t/*Skipping tables created in the last week, or modified in past 2 days*/\n\t\t\t\t\t\t\t\t\tAND\ti.create_date >= DATEADD(dd,-7,GETDATE()) \n\t\t\t\t\t\t\t\t\tAND i.modify_date > DATEADD(dd,-2,GETDATE())\n                            GROUP BY i.database_name \n                    OPTION    ( RECOMPILE );\n\n                RAISERROR(N'check_id 22: NC indexes with 0 reads. (Borderline) and >= 10,000 writes', 0,1) WITH NOWAIT;\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                        SELECT    22 AS check_id, \n                                i.index_sanity_id,\n                                100 AS Priority,\n                                N'Index Hoarder' AS findings_group,\n                                N'Unused NC index with High Writes' AS finding, \n                                [database_name] AS [Database Name],\n                                N'http://BrentOzar.com/go/IndexHoarder' AS URL,\n                                N'0 reads: ' + i.db_schema_object_indexid AS details, \n                                i.index_definition, \n                                i.secret_columns, \n                                i.index_usage_summary,\n                                sz.index_size_summary\n                        FROM    #IndexSanity AS i\n                        JOIN    #IndexSanitySize AS sz ON i.index_sanity_id = sz.index_sanity_id\n                        WHERE    i.total_reads=0\n\t\t\t\t\t\t    AND i.user_updates >= 10000\n                                AND i.index_id NOT IN (0,1) /*NCs only*/\n                                AND i.is_unique = 0\n                                AND sz.total_reserved_MB >= CASE WHEN (@GetAllDatabases = 1 OR @Mode = 0) THEN @ThresholdMB ELSE sz.total_reserved_MB END\n                        ORDER BY i.db_schema_object_indexid\n                        OPTION    ( RECOMPILE );\n            END; /*end checks only run when @Filter <> 1*/\n\n            RAISERROR(N'check_id 23: Indexes with 7 or more columns. (Borderline)', 0,1) WITH NOWAIT;\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                    SELECT    23 AS check_id, \n                            i.index_sanity_id,\n                            150 AS Priority, \n                            N'Index Hoarder' AS findings_group,\n                            N'Borderline: Wide indexes (7 or more columns)' AS finding, \n                            [database_name] AS [Database Name],\n                            N'http://BrentOzar.com/go/IndexHoarder' AS URL,\n                            CAST(count_key_columns + count_included_columns AS NVARCHAR(10)) + ' columns on '\n                            + i.db_schema_object_indexid AS details, i.index_definition, \n                            i.secret_columns, \n                            i.index_usage_summary,\n                            sz.index_size_summary\n                    FROM    #IndexSanity AS i\n                    JOIN    #IndexSanitySize AS sz ON i.index_sanity_id = sz.index_sanity_id\n                    WHERE    ( count_key_columns + count_included_columns ) >= 7\n                            AND NOT (@GetAllDatabases = 1 OR @Mode = 0)\n                    OPTION    ( RECOMPILE );\n\n            RAISERROR(N'check_id 24: Wide clustered indexes (> 3 columns or > 16 bytes).', 0,1) WITH NOWAIT;\n                WITH count_columns AS (\n                            SELECT database_id, [object_id],\n                                SUM(CASE max_length WHEN -1 THEN 0 ELSE max_length END) AS sum_max_length\n                            FROM #IndexColumns ic\n                            WHERE index_id IN (1,0) /*Heap or clustered only*/\n                            AND key_ordinal > 0\n                            GROUP BY database_id, object_id\n                            )\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                        SELECT    24 AS check_id, \n                                i.index_sanity_id, \n                                150 AS Priority,\n                                N'Index Hoarder' AS findings_group,\n                                N'Wide clustered index (> 3 columns OR > 16 bytes)' AS finding,\n                                [database_name] AS [Database Name],\n                                N'http://BrentOzar.com/go/IndexHoarder' AS URL,\n                                CAST (i.count_key_columns AS NVARCHAR(10)) + N' columns with potential size of '\n                                    + CAST(cc.sum_max_length AS NVARCHAR(10))\n                                    + N' bytes in clustered index:' + i.db_schema_object_name \n                                    + N'. ' + \n                                        (SELECT CAST(COUNT(*) AS NVARCHAR(23)) FROM #IndexSanity i2 \n                                        WHERE i2.[object_id]=i.[object_id] AND i2.database_id = i.database_id AND i2.index_id <> 1\n                                        AND i2.is_disabled=0 AND i2.is_hypothetical=0)\n                                        + N' NC indexes on the table.'\n                                    AS details,\n                                i.index_definition,\n                                secret_columns, \n                                i.index_usage_summary,\n                                ip.index_size_summary\n                        FROM    #IndexSanity i\n                        JOIN    #IndexSanitySize ip ON i.index_sanity_id = ip.index_sanity_id\n                        JOIN    count_columns AS cc ON i.[object_id]=cc.[object_id]\n                                                   AND i.database_id = cc.database_id\n                        WHERE    index_id = 1 /* clustered only */\n                                AND NOT (@GetAllDatabases = 1 OR @Mode = 0)\n                                AND \n                                    (count_key_columns > 3 /*More than three key columns.*/\n                                    OR cc.sum_max_length > 16 /*More than 16 bytes in key */)\n\t\t\t\t\t\t\t\t\tAND i.is_CX_columnstore = 0\n                        ORDER BY i.db_schema_object_name DESC OPTION    ( RECOMPILE );\n\n            RAISERROR(N'check_id 25: Addicted to nullable columns.', 0,1) WITH NOWAIT;\n                WITH count_columns AS (\n                            SELECT [object_id],\n\t\t\t\t\t\t\t\t   [database_id],\n\t\t\t\t\t\t\t\t   [schema_name],\n                                SUM(CASE is_nullable WHEN 1 THEN 0 ELSE 1 END) AS non_nullable_columns,\n                                COUNT(*) AS total_columns\n                            FROM #IndexColumns ic\n                            WHERE index_id IN (1,0) /*Heap or clustered only*/\n                            GROUP BY [object_id],\n\t\t\t\t\t\t\t\t     [database_id],\n\t\t\t\t\t\t\t\t     [schema_name]\n                            )\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                        SELECT    25 AS check_id, \n                                i.index_sanity_id, \n                                200 AS Priority,\n                                N'Index Hoarder' AS findings_group,\n                                N'Addicted to nulls' AS finding,\n                                [database_name] AS [Database Name],\n                                N'http://BrentOzar.com/go/IndexHoarder' AS URL,\n                                i.db_schema_object_name \n                                    + N' allows null in ' + CAST((total_columns-non_nullable_columns) AS NVARCHAR(10))\n                                    + N' of ' + CAST(total_columns AS NVARCHAR(10))\n                                    + N' columns.' AS details,\n                                i.index_definition,\n                                secret_columns, \n                                ISNULL(i.index_usage_summary,''),\n                                ISNULL(ip.index_size_summary,'')\n                        FROM    #IndexSanity i\n                        JOIN    #IndexSanitySize ip ON i.index_sanity_id = ip.index_sanity_id\n                        JOIN    count_columns AS cc ON i.[object_id]=cc.[object_id]\n\t\t\t\t\t\t\t\tAND cc.database_id = ip.database_id\n\t\t\t\t\t\t\t\tAND cc.[schema_name] = ip.[schema_name]\n                        WHERE    i.index_id IN (1,0)\n                        AND NOT (@GetAllDatabases = 1 OR @Mode = 0)\n                            AND cc.non_nullable_columns < 2\n                            AND cc.total_columns > 3\n                        ORDER BY i.db_schema_object_name DESC OPTION    ( RECOMPILE );\n\n            RAISERROR(N'check_id 26: Wide tables (35+ cols or > 2000 non-LOB bytes).', 0,1) WITH NOWAIT;\n                WITH count_columns AS (\n                            SELECT [object_id],\n\t\t\t\t\t\t\t\t   [database_id],\n\t\t\t\t\t\t\t\t   [schema_name],\n                                SUM(CASE max_length WHEN -1 THEN 1 ELSE 0 END) AS count_lob_columns,\n                                SUM(CASE max_length WHEN -1 THEN 0 ELSE max_length END) AS sum_max_length,\n                                COUNT(*) AS total_columns\n                            FROM #IndexColumns ic\n                            WHERE index_id IN (1,0) /*Heap or clustered only*/\n                            GROUP BY [object_id],\n\t\t\t\t\t\t\t\t     [database_id],\n\t\t\t\t\t\t\t\t     [schema_name]\n                            )\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                        SELECT    26 AS check_id, \n                                i.index_sanity_id, \n                                150 AS Priority,\n                                N'Index Hoarder' AS findings_group,\n                                N'Wide tables: 35+ cols or > 2000 non-LOB bytes' AS finding,\n                                [database_name] AS [Database Name],\n                                N'http://BrentOzar.com/go/IndexHoarder' AS URL,\n                                i.db_schema_object_name \n                                    + N' has ' + CAST((total_columns) AS NVARCHAR(10))\n                                    + N' total columns with a max possible width of ' + CAST(sum_max_length AS NVARCHAR(10))\n                                    + N' bytes.' +\n                                    CASE WHEN count_lob_columns > 0 THEN CAST((count_lob_columns) AS NVARCHAR(10))\n                                        + ' columns are LOB types.' ELSE ''\n                                    END\n                                        AS details,\n                                i.index_definition,\n                                secret_columns, \n                                ISNULL(i.index_usage_summary,''),\n                                ISNULL(ip.index_size_summary,'')\n                        FROM    #IndexSanity i\n                        JOIN    #IndexSanitySize ip ON i.index_sanity_id = ip.index_sanity_id\n                        JOIN    count_columns AS cc ON i.[object_id]=cc.[object_id]\n\t\t\t\t\t\t\t\tAND cc.database_id = i.database_id\n\t\t\t\t\t\t\t\tAND cc.[schema_name] = i.[schema_name]\n                        WHERE    i.index_id IN (1,0)\n                        AND NOT (@GetAllDatabases = 1 OR @Mode = 0)\n                            AND \n                            (cc.total_columns >= 35 OR\n                            cc.sum_max_length >= 2000)\n                        ORDER BY i.db_schema_object_name DESC OPTION    ( RECOMPILE );\n                    \n            RAISERROR(N'check_id 27: Addicted to strings.', 0,1) WITH NOWAIT;\n                WITH count_columns AS (\n                            SELECT [object_id],\n\t\t\t\t\t\t\t\t   [database_id],\n\t\t\t\t\t\t\t\t   [schema_name],\n                                SUM(CASE WHEN system_type_name IN ('varchar','nvarchar','char') OR max_length=-1 THEN 1 ELSE 0 END) AS string_or_LOB_columns,\n                                COUNT(*) AS total_columns\n                            FROM #IndexColumns ic\n                            WHERE index_id IN (1,0) /*Heap or clustered only*/\n                            GROUP BY [object_id],\n\t\t\t\t\t\t\t\t     [database_id],\n\t\t\t\t\t\t\t\t     [schema_name]\n                            )\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                        SELECT    27 AS check_id, \n                                i.index_sanity_id, \n                                200 AS Priority,\n                                N'Index Hoarder' AS findings_group,\n                                N'Addicted to strings' AS finding,\n                                [database_name] AS [Database Name],\n                                N'http://BrentOzar.com/go/IndexHoarder' AS URL,\n                                i.db_schema_object_name \n                                    + N' uses string or LOB types for ' + CAST((string_or_LOB_columns) AS NVARCHAR(10))\n                                    + N' of ' + CAST(total_columns AS NVARCHAR(10))\n                                    + N' columns. Check if data types are valid.' AS details,\n                                i.index_definition,\n                                secret_columns, \n                                ISNULL(i.index_usage_summary,''),\n                                ISNULL(ip.index_size_summary,'')\n                        FROM    #IndexSanity i\n                        JOIN    #IndexSanitySize ip ON i.index_sanity_id = ip.index_sanity_id\n                        JOIN    count_columns AS cc ON i.[object_id]=cc.[object_id]\n\t\t\t\t\t\t\t\tAND cc.database_id = i.database_id\n\t\t\t\t\t\t\t\tAND cc.[schema_name] = i.[schema_name]\n                        CROSS APPLY (SELECT cc.total_columns - string_or_LOB_columns AS non_string_or_lob_columns) AS calc1\n                        WHERE    i.index_id IN (1,0)\n                        AND NOT (@GetAllDatabases = 1 OR @Mode = 0)\n                            AND calc1.non_string_or_lob_columns <= 1\n                            AND cc.total_columns > 3\n                        ORDER BY i.db_schema_object_name DESC OPTION    ( RECOMPILE );\n\n            RAISERROR(N'check_id 28: Non-unique clustered index.', 0,1) WITH NOWAIT;\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                        SELECT    28 AS check_id, \n                                i.index_sanity_id, \n                                100 AS Priority,\n                                N'Index Hoarder' AS findings_group,\n                                N'Non-Unique clustered index' AS finding,\n                                [database_name] AS [Database Name],\n                                N'http://BrentOzar.com/go/IndexHoarder' AS URL,\n                                N'Uniquifiers will be required! Clustered index: ' + i.db_schema_object_name \n                                    + N' and all NC indexes. ' + \n                                        (SELECT CAST(COUNT(*) AS NVARCHAR(23)) FROM #IndexSanity i2 \n                                        WHERE i2.[object_id]=i.[object_id] AND i2.database_id = i.database_id AND i2.index_id <> 1\n                                        AND i2.is_disabled=0 AND i2.is_hypothetical=0)\n                                        + N' NC indexes on the table.'\n                                    AS details,\n                                i.index_definition,\n                                secret_columns, \n                                i.index_usage_summary,\n                                ip.index_size_summary\n                        FROM    #IndexSanity i\n                        JOIN    #IndexSanitySize ip ON i.index_sanity_id = ip.index_sanity_id\n                        WHERE    index_id = 1 /* clustered only */\n                        AND NOT (@GetAllDatabases = 1 OR @Mode = 0)\n                                AND is_unique=0 /* not unique */\n                                AND is_CX_columnstore=0 /* not a clustered columnstore-- no unique option on those */\n                        ORDER BY i.db_schema_object_name DESC OPTION    ( RECOMPILE );\n\n                RAISERROR(N'check_id 29: NC indexes with 0 reads. (Borderline) and < 10,000 writes', 0,1) WITH NOWAIT;\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                        SELECT    29 AS check_id, \n                                i.index_sanity_id,\n                                150 AS Priority,\n                                N'Index Hoarder' AS findings_group,\n                                N'Unused NC index with Low Writes' AS finding, \n                                [database_name] AS [Database Name],\n                                N'http://BrentOzar.com/go/IndexHoarder' AS URL,\n                                N'0 reads: ' + i.db_schema_object_indexid AS details, \n                                i.index_definition, \n                                i.secret_columns, \n                                i.index_usage_summary,\n                                sz.index_size_summary\n                        FROM    #IndexSanity AS i\n                        JOIN    #IndexSanitySize AS sz ON i.index_sanity_id = sz.index_sanity_id\n                        WHERE    i.total_reads=0\n\t\t\t\t\t\t\t\tAND i.user_updates < 10000\n                                AND i.index_id NOT IN (0,1) /*NCs only*/\n                                AND i.is_unique = 0\n                                AND sz.total_reserved_MB >= CASE WHEN (@GetAllDatabases = 1 OR @Mode = 0) THEN @ThresholdMB ELSE sz.total_reserved_MB END\n                        ORDER BY i.db_schema_object_indexid\n                        OPTION    ( RECOMPILE );\n\n        END;\n         ----------------------------------------\n        --Feature-Phobic Indexes: Check_id 30-39\n        ---------------------------------------- \n        BEGIN\n            RAISERROR(N'check_id 30: No indexes with includes', 0,1) WITH NOWAIT;\n            /* This does not work the way you'd expect with @GetAllDatabases = 1. For details:\n               https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/issues/825\n            */\n\n\t\t\tSELECT    database_name,\n\t\t\t\t\t  SUM(CASE WHEN count_included_columns > 0 THEN 1 ELSE 0    END) AS number_indexes_with_includes,\n\t\t\t\t\t  100.* SUM(CASE WHEN count_included_columns > 0 THEN 1 ELSE 0 END) / ( 1.0 * COUNT(*) ) AS percent_indexes_with_includes\n\t\t\tINTO #index_includes\n            FROM    #IndexSanity\n\t\t\tGROUP BY database_name;\n\n            IF NOT (@Mode = 0)\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                        SELECT  30 AS check_id, \n                                NULL AS index_sanity_id, \n                                250 AS Priority,\n                                N'Feature-Phobic Indexes' AS findings_group,\n\t\t\t\t\t\t\t\tdatabase_name AS [Database Name],\n                                N'No indexes use includes' AS finding, 'http://BrentOzar.com/go/IndexFeatures' AS URL,\n                                N'No indexes use includes' AS details,\n                                database_name + N' (Entire database)' AS index_definition, \n                                N'' AS secret_columns, \n                                N'N/A' AS index_usage_summary, \n                                N'N/A' AS index_size_summary \n\t\t\t\t\t\tFROM #index_includes\n\t\t\t\t\t\tWHERE number_indexes_with_includes = 0\n\t\t\t\t\t\tOPTION    ( RECOMPILE );\n\n            RAISERROR(N'check_id 31: < 3 percent of indexes have includes', 0,1) WITH NOWAIT;\n            IF NOT (@Mode = 0)\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                        SELECT    31 AS check_id,\n                                NULL AS index_sanity_id, \n                                150 AS Priority,\n                                N'Feature-Phobic Indexes' AS findings_group,\n                                N'Borderline: Includes are used in < 3% of indexes' AS findings,\n                                database_name AS [Database Name],\n                                N'http://BrentOzar.com/go/IndexFeatures' AS URL,\n                                N'Only ' + CAST(percent_indexes_with_includes AS NVARCHAR(20)) + '% of indexes have includes' AS details, \n                                N'Entire database' AS index_definition, \n                                N'' AS secret_columns,\n                                N'N/A' AS index_usage_summary, \n                                N'N/A' AS index_size_summary\n\t\t\t\t\t\tFROM #index_includes\n\t\t\t\t\t\tWHERE number_indexes_with_includes > 0 AND percent_indexes_with_includes <= 3\n\t\t\t\t\t\tOPTION    ( RECOMPILE );\n\n            RAISERROR(N'check_id 32: filtered indexes and indexed views', 0,1) WITH NOWAIT;\n\n            IF NOT (@Mode = 0)\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                        SELECT  DISTINCT\n\t\t\t\t\t\t\t\t32 AS check_id, \n                                NULL AS index_sanity_id,\n                                250 AS Priority,\n                                N'Feature-Phobic Indexes' AS findings_group,\n                                N'Borderline: No filtered indexes or indexed views exist' AS finding, \n                                i.database_name AS [Database Name],\n                                N'http://BrentOzar.com/go/IndexFeatures' AS URL,\n                                N'These are NOT always needed-- but do you know when you would use them?' AS details,\n                                i.database_name + N' (Entire database)' AS index_definition, \n                                N'' AS secret_columns,\n                                N'N/A' AS index_usage_summary, \n                                N'N/A' AS index_size_summary \n\t\t\t\t\t\tFROM #IndexSanity i\n\t\t\t\t\t\tWHERE i.database_name NOT IN (                \n\t\t\t\t\t\t\t\tSELECT   database_name\n\t\t\t\t\t\t\t\tFROM     #IndexSanity\n\t\t\t\t\t\t\t\tWHERE    filter_definition <> '' )\n\t\t\t\t\t\tAND i.database_name NOT IN (\n\t\t\t\t\t\t       SELECT  database_name\n\t\t\t\t\t\t\t   FROM    #IndexSanity\n\t\t\t\t\t\t\t   WHERE   is_indexed_view = 1 )\n\t\t\t\t\t\tOPTION    ( RECOMPILE );\n        END;\n\n        RAISERROR(N'check_id 33: Potential filtered indexes based on column names.', 0,1) WITH NOWAIT;\n\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n        SELECT    33 AS check_id, \n                i.index_sanity_id AS index_sanity_id,\n                250 AS Priority,\n                N'Feature-Phobic Indexes' AS findings_group,\n                N'Potential filtered index (based on column name)' AS finding, \n                [database_name] AS [Database Name],\n                N'http://BrentOzar.com/go/IndexFeatures' AS URL,\n                N'A column name in this index suggests it might be a candidate for filtering (is%, %archive%, %active%, %flag%)' AS details,\n                i.index_definition, \n                i.secret_columns,\n                i.index_usage_summary, \n                sz.index_size_summary\n        FROM #IndexColumns ic \n        JOIN #IndexSanity i ON ic.[object_id]=i.[object_id] \n\t\t\tAND ic.database_id =i.database_id\n\t\t\tAND ic.schema_name = i.schema_name\n\t\t\tAND ic.[index_id]=i.[index_id] \n\t\t\tAND i.[index_id] > 1 /* non-clustered index */\n        JOIN    #IndexSanitySize AS sz ON i.index_sanity_id = sz.index_sanity_id\n        WHERE (column_name LIKE 'is%'\n            OR column_name LIKE '%archive%'\n            OR column_name LIKE '%active%'\n            OR column_name LIKE '%flag%')\n            AND NOT (@GetAllDatabases = 1 OR @Mode = 0)\n        OPTION    ( RECOMPILE );\n        \n         ----------------------------------------\n        --Self Loathing Indexes : Check_id 40-49\n        ----------------------------------------\n        BEGIN\n        \n            RAISERROR(N'check_id 40: Fillfactor in nonclustered 80 percent or less', 0,1) WITH NOWAIT;\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                    SELECT    40 AS check_id, \n                            i.index_sanity_id,\n                            100 AS Priority,\n                            N'Self Loathing Indexes' AS findings_group,\n                            N'Low Fill Factor: nonclustered index' AS finding, \n                            [database_name] AS [Database Name],\n                            N'http://BrentOzar.com/go/SelfLoathing' AS URL,\n                            CAST(fill_factor AS NVARCHAR(10)) + N'% fill factor on ' + db_schema_object_indexid + N'. '+\n                                CASE WHEN (last_user_update IS NULL OR user_updates < 1)\n                                THEN N'No writes have been made.'\n                                ELSE\n                                    N'Last write was ' +  CONVERT(NVARCHAR(16),last_user_update,121) + N' and ' + \n                                    CAST(user_updates AS NVARCHAR(25)) + N' updates have been made.'\n                                END\n                                AS details, \n                            i.index_definition,\n                            i.secret_columns,\n                            i.index_usage_summary,\n                            sz.index_size_summary\n                    FROM    #IndexSanity AS i\n                    JOIN    #IndexSanitySize AS sz ON i.index_sanity_id = sz.index_sanity_id\n                    WHERE    index_id > 1\n                    AND NOT (@GetAllDatabases = 1 OR @Mode = 0)\n                    AND    fill_factor BETWEEN 1 AND 80 OPTION    ( RECOMPILE );\n\n            RAISERROR(N'check_id 40: Fillfactor in clustered 80 percent or less', 0,1) WITH NOWAIT;\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                    SELECT    40 AS check_id, \n                            i.index_sanity_id,\n                            100 AS Priority,\n                            N'Self Loathing Indexes' AS findings_group,\n                            N'Low Fill Factor: clustered index' AS finding, \n                            [database_name] AS [Database Name],\n                            N'http://BrentOzar.com/go/SelfLoathing' AS URL,\n                            N'Fill factor on ' + db_schema_object_indexid + N' is ' + CAST(fill_factor AS NVARCHAR(10)) + N'%. '+\n                                CASE WHEN (last_user_update IS NULL OR user_updates < 1)\n                                THEN N'No writes have been made.'\n                                ELSE\n                                    N'Last write was ' +  CONVERT(NVARCHAR(16),last_user_update,121) + N' and ' + \n                                    CAST(user_updates AS NVARCHAR(25)) + N' updates have been made.'\n                                END\n                                AS details, \n                            i.index_definition,\n                            i.secret_columns,\n                            i.index_usage_summary,\n                            sz.index_size_summary\n                    FROM    #IndexSanity AS i\n                    JOIN #IndexSanitySize AS sz ON i.index_sanity_id = sz.index_sanity_id\n                    WHERE    index_id = 1\n                    AND NOT (@GetAllDatabases = 1 OR @Mode = 0)\n                    AND fill_factor BETWEEN 1 AND 80 OPTION    ( RECOMPILE );\n\n\n            RAISERROR(N'check_id 41: Hypothetical indexes ', 0,1) WITH NOWAIT;\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                    SELECT    41 AS check_id, \n                            i.index_sanity_id,\n                            150 AS Priority,\n                            N'Self Loathing Indexes' AS findings_group,\n                            N'Hypothetical Index' AS finding,\n                            [database_name] AS [Database Name],\n                            N'http://BrentOzar.com/go/SelfLoathing' AS URL,\n                            N'Hypothetical Index: ' + db_schema_object_indexid AS details, \n                            i.index_definition,\n                            i.secret_columns,\n                            N'' AS index_usage_summary, \n                            N'' AS index_size_summary\n                    FROM    #IndexSanity AS i\n                    WHERE    is_hypothetical = 1 \n                    AND NOT (@GetAllDatabases = 1 OR @Mode = 0)\n                    OPTION    ( RECOMPILE );\n\n\n            RAISERROR(N'check_id 42: Disabled indexes', 0,1) WITH NOWAIT;\n            --Note: disabled NC indexes will have O rows in #IndexSanitySize!\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                    SELECT    42 AS check_id, \n                            index_sanity_id,\n                            150 AS Priority,\n                            N'Self Loathing Indexes' AS findings_group,\n                            N'Disabled Index' AS finding, \n                            [database_name] AS [Database Name],\n                            N'http://BrentOzar.com/go/SelfLoathing' AS URL,\n                            N'Disabled Index:' + db_schema_object_indexid AS details, \n                            i.index_definition,\n                            i.secret_columns,\n                            i.index_usage_summary,\n                            'DISABLED' AS index_size_summary\n                    FROM    #IndexSanity AS i\n                    WHERE    is_disabled = 1\n                    AND NOT (@GetAllDatabases = 1 OR @Mode = 0)\n                    OPTION    ( RECOMPILE );\n\n            RAISERROR(N'check_id 43: Heaps with forwarded records or deletes', 0,1) WITH NOWAIT;\n            WITH    heaps_cte\n                      AS ( SELECT   [object_id],\n\t\t\t\t\t\t\t\t    [database_id],\n\t\t\t\t\t\t\t\t    [schema_name],\n                                    SUM(forwarded_fetch_count) AS forwarded_fetch_count,\n                                    SUM(leaf_delete_count) AS leaf_delete_count\n                           FROM        #IndexPartitionSanity\n                           GROUP BY    [object_id],\n\t\t\t\t\t\t\t\t       [database_id],\n\t\t\t\t\t\t\t\t       [schema_name]\n                           HAVING    SUM(forwarded_fetch_count) > 0\n                                    OR SUM(leaf_delete_count) > 0)\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                        SELECT    43 AS check_id, \n                                i.index_sanity_id,\n                                100 AS Priority,\n                                N'Self Loathing Indexes' AS findings_group,\n                                N'Heaps with forwarded records or deletes' AS finding, \n                                [database_name] AS [Database Name],\n                                N'http://BrentOzar.com/go/SelfLoathing' AS URL,\n                                CAST(h.forwarded_fetch_count AS NVARCHAR(256)) + ' forwarded fetches, '\n                                + CAST(h.leaf_delete_count AS NVARCHAR(256)) + ' deletes against heap:'\n                                + db_schema_object_indexid AS details, \n                                i.index_definition, \n                                i.secret_columns,\n                                i.index_usage_summary,\n                                sz.index_size_summary\n                        FROM    #IndexSanity i\n                        JOIN heaps_cte h ON i.[object_id] = h.[object_id] \n\t\t\t\t\t\t\t AND i.[database_id] = h.[database_id]\n\t\t\t\t\t\t\t AND i.[schema_name] = h.[schema_name]\n                        JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id\n                        WHERE    i.index_id = 0 \n                        AND sz.total_reserved_MB >= CASE WHEN NOT (@GetAllDatabases = 1 OR @Mode = 4) THEN @ThresholdMB ELSE sz.total_reserved_MB END\n                OPTION    ( RECOMPILE );\n\n            RAISERROR(N'check_id 44: Large Heaps with reads or writes.', 0,1) WITH NOWAIT;\n            WITH    heaps_cte\n                      AS ( SELECT   [object_id],\n\t\t\t\t\t\t\t\t    [database_id],\n\t\t\t\t\t\t\t\t    [schema_name], \n\t\t\t\t\t\t\t\t\tSUM(forwarded_fetch_count) AS forwarded_fetch_count,\n                                    SUM(leaf_delete_count) AS leaf_delete_count\n                           FROM        #IndexPartitionSanity\n                           GROUP BY  [object_id],\n\t\t\t\t\t\t\t\t     [database_id],\n\t\t\t\t\t\t\t\t     [schema_name]\n                           HAVING    SUM(forwarded_fetch_count) > 0\n                                    OR SUM(leaf_delete_count) > 0)\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                        SELECT    44 AS check_id, \n                                i.index_sanity_id,\n                                100 AS Priority,\n                                N'Self Loathing Indexes' AS findings_group,\n                                N'Large Active heap' AS finding, \n                                [database_name] AS [Database Name],\n                                N'http://BrentOzar.com/go/SelfLoathing' AS URL,\n                                N'Should this table be a heap? ' + db_schema_object_indexid AS details, \n                                i.index_definition, \n                                'N/A' AS secret_columns,\n                                i.index_usage_summary,\n                                sz.index_size_summary\n                        FROM    #IndexSanity i\n                        LEFT JOIN heaps_cte h ON i.[object_id] = h.[object_id] \n\t\t\t\t\t\t\t\tAND i.[database_id] = h.[database_id]\n\t\t\t\t\t\t\t\tAND i.[schema_name] = h.[schema_name]\n                        JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id\n                        WHERE    i.index_id = 0 \n                                AND \n                                    (i.total_reads > 0 OR i.user_updates > 0)\n\t\t\t\t\t\t\t\tAND sz.total_rows >= 100000\n                                AND h.[object_id] IS NULL /*don't duplicate the prior check.*/\n                                AND NOT (@GetAllDatabases = 1 OR @Mode = 0)\n                OPTION    ( RECOMPILE );\n\n            RAISERROR(N'check_id 45: Medium Heaps with reads or writes.', 0,1) WITH NOWAIT;\n            WITH    heaps_cte\n                      AS ( SELECT   [object_id],\n\t\t\t\t\t\t\t\t    [database_id],\n\t\t\t\t\t\t\t\t    [schema_name], \n\t\t\t\t\t\t\t\t\tSUM(forwarded_fetch_count) AS forwarded_fetch_count,\n                                    SUM(leaf_delete_count) AS leaf_delete_count\n                           FROM        #IndexPartitionSanity\n                           GROUP BY  [object_id],\n\t\t\t\t\t\t\t\t     [database_id],\n\t\t\t\t\t\t\t\t     [schema_name]\n                           HAVING    SUM(forwarded_fetch_count) > 0\n                                    OR SUM(leaf_delete_count) > 0)\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                        SELECT    45 AS check_id, \n                                i.index_sanity_id,\n                                100 AS Priority,\n                                N'Self Loathing Indexes' AS findings_group,\n                                N'Medium Active heap' AS finding, \n                                [database_name] AS [Database Name],\n                                N'http://BrentOzar.com/go/SelfLoathing' AS URL,\n                                N'Should this table be a heap? ' + db_schema_object_indexid AS details, \n                                i.index_definition, \n                                'N/A' AS secret_columns,\n                                i.index_usage_summary,\n                                sz.index_size_summary\n                        FROM    #IndexSanity i\n                        LEFT JOIN heaps_cte h ON i.[object_id] = h.[object_id] \n\t\t\t\t\t\t\t\tAND i.[database_id] = h.[database_id]\n\t\t\t\t\t\t\t\tAND i.[schema_name] = h.[schema_name]\n                        JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id\n                        WHERE    i.index_id = 0 \n                                AND \n                                    (i.total_reads > 0 OR i.user_updates > 0)\n\t\t\t\t\t\t\t\tAND sz.total_rows >= 10000 AND sz.total_rows < 100000\n                                AND h.[object_id] IS NULL /*don't duplicate the prior check.*/\n                                AND NOT (@GetAllDatabases = 1 OR @Mode = 0)\n                OPTION    ( RECOMPILE );\n\n            RAISERROR(N'check_id 46: Small Heaps with reads or writes.', 0,1) WITH NOWAIT;\n            WITH    heaps_cte\n                      AS ( SELECT   [object_id],\n\t\t\t\t\t\t\t\t    [database_id],\n\t\t\t\t\t\t\t\t    [schema_name], \n\t\t\t\t\t\t\t\t\tSUM(forwarded_fetch_count) AS forwarded_fetch_count,\n                                    SUM(leaf_delete_count) AS leaf_delete_count\n                           FROM        #IndexPartitionSanity\n                           GROUP BY  [object_id],\n\t\t\t\t\t\t\t\t     [database_id],\n\t\t\t\t\t\t\t\t     [schema_name]\n                           HAVING    SUM(forwarded_fetch_count) > 0\n                                    OR SUM(leaf_delete_count) > 0)\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                        SELECT    46 AS check_id, \n                                i.index_sanity_id,\n                                100 AS Priority,\n                                N'Self Loathing Indexes' AS findings_group,\n                                N'Small Active heap' AS finding, \n                                [database_name] AS [Database Name],\n                                N'http://BrentOzar.com/go/SelfLoathing' AS URL,\n                                N'Should this table be a heap? ' + db_schema_object_indexid AS details, \n                                i.index_definition, \n                                'N/A' AS secret_columns,\n                                i.index_usage_summary,\n                                sz.index_size_summary\n                        FROM    #IndexSanity i\n                        LEFT JOIN heaps_cte h ON i.[object_id] = h.[object_id] \n\t\t\t\t\t\t\t\tAND i.[database_id] = h.[database_id]\n\t\t\t\t\t\t\t\tAND i.[schema_name] = h.[schema_name]\n                        JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id\n                        WHERE    i.index_id = 0 \n                                AND \n                                    (i.total_reads > 0 OR i.user_updates > 0)\n\t\t\t\t\t\t\t\tAND sz.total_rows < 10000\n                                AND h.[object_id] IS NULL /*don't duplicate the prior check.*/\n                                AND NOT (@GetAllDatabases = 1 OR @Mode = 0)\n                OPTION    ( RECOMPILE );\n\n\t\t\t\t            RAISERROR(N'check_id 47: Heap with a Nonclustered Primary Key', 0,1) WITH NOWAIT;\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                        SELECT  47 AS check_id, \n                                i.index_sanity_id,\n                                100 AS Priority,\n                                N'Self Loathing Indexes' AS findings_group,\n                                N'Heap with a Nonclustered Primary Key' AS finding, \n                                [database_name] AS [Database Name],\n                                N'http://BrentOzar.com/go/SelfLoathing' AS URL,\n\t\t\t\t\t\t\t\tdb_schema_object_indexid + N' is a HEAP with a Nonclustered Primary Key' AS details, \n                                i.index_definition, \n                                i.secret_columns,\n                                i.index_usage_summary,\n                                sz.index_size_summary\n                        FROM    #IndexSanity i\n                        JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id\n                        WHERE    i.index_type = 2 AND i.is_primary_key = 1 AND i.secret_columns LIKE '%RID%'\n                OPTION    ( RECOMPILE );\n\n\t\t\t\t            RAISERROR(N'check_id 48: Nonclustered indexes with a bad read to write ration', 0,1) WITH NOWAIT;\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                        SELECT  48 AS check_id, \n                                i.index_sanity_id,\n                                100 AS Priority,\n                                N'Index Hoarder' AS findings_group,\n                                N'NC index with High Writes:Reads' AS finding, \n                                [database_name] AS [Database Name],\n                                N'http://BrentOzar.com/go/IndexHoarder' AS URL,\n                                N'Reads: '\n\t\t\t\t\t\t\t\t+ CONVERT(NVARCHAR(10), i.total_reads)\n\t\t\t\t\t\t\t\t+ N' Writes: ' \n\t\t\t\t\t\t\t\t+ CONVERT(NVARCHAR(10), i.user_updates)\n\t\t\t\t\t\t\t\t+ N' on: '\n\t\t\t\t\t\t\t\t+ i.db_schema_object_indexid AS details, \n                                i.index_definition, \n                                i.secret_columns, \n                                i.index_usage_summary,\n                                sz.index_size_summary\n                        FROM    #IndexSanity i\n                        JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id\n                        WHERE    i.total_reads > 0 /*Not totally unused*/\n\t\t\t\t\t\t\t\tAND i.user_updates >= 10000 /*Decent write activity*/\n\t\t\t\t\t\t\t\tAND ((i.total_reads * 10) < i.user_updates) /*10x more writes than reads*/\n                                AND i.index_id NOT IN (0,1) /*NCs only*/\n                                AND i.is_unique = 0 \n                                AND sz.total_reserved_MB >= CASE WHEN (@GetAllDatabases = 1 OR @Mode = 0) THEN @ThresholdMB ELSE sz.total_reserved_MB END\n                        ORDER BY i.db_schema_object_indexid\n                        OPTION    ( RECOMPILE );\n\n\n            END;\n        ----------------------------------------\n        --Indexaphobia\n        --Missing indexes with value >= 5 million: : Check_id 50-59\n        ----------------------------------------\n        BEGIN\n            RAISERROR(N'check_id 50: Indexaphobia.', 0,1) WITH NOWAIT;\n            WITH    index_size_cte\n                      AS ( SELECT   i.database_id,\n\t\t\t\t\t\t\t\t\ti.schema_name,\n\t\t\t\t\t\t\t\t\ti.[object_id], \n                                    MAX(i.index_sanity_id) AS index_sanity_id,\n\t\t\t\t\t\t\t\t\tISNULL(NULLIF(MAX(DATEDIFF(DAY, i.create_date, SYSDATETIME())), 0), 1) AS create_days,\n                                ISNULL (\n                                    CAST(SUM(CASE WHEN index_id NOT IN (0,1) THEN 1 ELSE 0 END)\n                                         AS NVARCHAR(30))+ N' NC indexes exist (' + \n                                    CASE WHEN SUM(CASE WHEN index_id NOT IN (0,1) THEN sz.total_reserved_MB ELSE 0 END) > 1024\n                                        THEN CAST(CAST(SUM(CASE WHEN index_id NOT IN (0,1) THEN sz.total_reserved_MB ELSE 0 END )/1024. \n\n                                            AS NUMERIC(29,1)) AS NVARCHAR(30)) + N'GB); ' \n                                        ELSE CAST(SUM(CASE WHEN index_id NOT IN (0,1) THEN sz.total_reserved_MB ELSE 0 END) \n                                            AS NVARCHAR(30)) + N'MB); '\n                                    END + \n                                        CASE WHEN MAX(sz.[total_rows]) >= 922337203685477 THEN '>= 922,337,203,685,477'\n                                        ELSE REPLACE(CONVERT(NVARCHAR(30),CAST(MAX(sz.[total_rows]) AS MONEY), 1), '.00', '') \n                                        END +\n                                    + N' Estimated Rows;' \n                                ,N'') AS index_size_summary\n                            FROM    #IndexSanity AS i\n                            LEFT    JOIN #IndexSanitySize AS sz ON i.index_sanity_id = sz.index_sanity_id  AND i.database_id = sz.database_id\n\t\t\t\t\t\t\tWHERE i.is_hypothetical = 0\n                                  AND i.is_disabled = 0\n                           GROUP BY    i.database_id, i.schema_name, i.[object_id])\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               index_usage_summary, index_size_summary, create_tsql, more_info )\n                        \n                        SELECT check_id, t.index_sanity_id, t.check_id, t.findings_group, t.finding, t.[Database Name], t.URL, t.details, t.[definition],\n                                index_estimated_impact, t.index_size_summary, create_tsql, more_info\n                        FROM\n                        (\n                            SELECT  ROW_NUMBER() OVER (ORDER BY mi.is_low, magic_benefit_number DESC) AS rownum,\n                                50 AS check_id, \n                                sz.index_sanity_id,\n                                10 AS Priority,\n                                N'Indexaphobia' AS findings_group,\n                                N'High value missing index' + CASE mi.is_low \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  WHEN 0 THEN N' with High Impact' \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  WHEN 1 THEN N' with Low Impact'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  END\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  AS finding, \n                                [database_name] AS [Database Name],\n                                N'http://BrentOzar.com/go/Indexaphobia' AS URL,\n                                mi.[statement] + \n                                N' Est. benefit per day: ' + \n                                    CASE WHEN magic_benefit_number >= 922337203685477 THEN '>= 922,337,203,685,477'\n                                    ELSE REPLACE(CONVERT(NVARCHAR(256),CAST(CAST(\n                                    (magic_benefit_number/@DaysUptime)\n                                     AS BIGINT) AS MONEY), 1), '.00', '') \n                                    END AS details,\n                                missing_index_details AS [definition],\n                                index_estimated_impact,\n                                sz.index_size_summary,\n                                mi.create_tsql,\n                                mi.more_info,\n                                magic_benefit_number,\n\t\t\t\t\t\t\t\tmi.is_low\n                        FROM    #MissingIndexes mi\n                                LEFT JOIN index_size_cte sz ON mi.[object_id] = sz.object_id \n\t\t\t\t\t\t\t\t\t\t  AND mi.database_id = sz.database_id\n\t\t\t\t\t\t\t\t\t\t  AND mi.schema_name = sz.schema_name\n                                        /* Minimum benefit threshold = 100k/day of uptime OR since table creation date, whichever is lower*/\n                        WHERE ( @Mode = 4 AND (magic_benefit_number / CASE WHEN sz.create_days < @DaysUptime THEN sz.create_days ELSE @DaysUptime END) >= 100000 ) \n\t\t\t\t\t\tOR (magic_benefit_number / CASE WHEN sz.create_days < @DaysUptime THEN sz.create_days ELSE @DaysUptime END) >= 100000\n                        ) AS t\n                        WHERE t.rownum <= CASE WHEN (@Mode <> 4) THEN 20 ELSE t.rownum END\n                        ORDER BY t.is_low, magic_benefit_number DESC;\n\n\n    END;\n         ----------------------------------------\n        --Abnormal Psychology : Check_id 60-79\n        ----------------------------------------\n    BEGIN\n            RAISERROR(N'check_id 60: XML indexes', 0,1) WITH NOWAIT;\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                    SELECT    60 AS check_id, \n                            i.index_sanity_id,\n                            150 AS Priority,\n                            N'Abnormal Psychology' AS findings_group,\n                            N'XML Indexes' AS finding, \n                            [database_name] AS [Database Name],\n                            N'http://BrentOzar.com/go/AbnormalPsychology' AS URL,\n                            i.db_schema_object_indexid AS details, \n                            i.index_definition,\n                            i.secret_columns,\n                            N'' AS index_usage_summary,\n                            ISNULL(sz.index_size_summary,'') AS index_size_summary\n                    FROM    #IndexSanity AS i\n                    JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id\n                    WHERE i.is_XML = 1 OPTION    ( RECOMPILE );\n\n            RAISERROR(N'check_id 61: Columnstore indexes', 0,1) WITH NOWAIT;\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                    SELECT    61 AS check_id, \n                            i.index_sanity_id,\n                            150 AS Priority,\n                            N'Abnormal Psychology' AS findings_group,\n                            CASE WHEN i.is_NC_columnstore=1\n                                THEN N'NC Columnstore Index' \n                                ELSE N'Clustered Columnstore Index' \n                                END AS finding, \n                            [database_name] AS [Database Name],\n                            N'http://BrentOzar.com/go/AbnormalPsychology' AS URL,\n                            i.db_schema_object_indexid AS details, \n                            i.index_definition,\n                            i.secret_columns,\n                            i.index_usage_summary,\n                            ISNULL(sz.index_size_summary,'') AS index_size_summary\n                    FROM    #IndexSanity AS i\n                    JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id\n                    WHERE i.is_NC_columnstore = 1 OR i.is_CX_columnstore=1\n                    OPTION    ( RECOMPILE );\n\n\n            RAISERROR(N'check_id 62: Spatial indexes', 0,1) WITH NOWAIT;\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                    SELECT    62 AS check_id, \n                            i.index_sanity_id,\n                            150 AS Priority,\n                            N'Abnormal Psychology' AS findings_group,\n                            N'Spatial indexes' AS finding,\n                            [database_name] AS [Database Name], \n                            N'http://BrentOzar.com/go/AbnormalPsychology' AS URL,\n                            i.db_schema_object_indexid AS details, \n                            i.index_definition,\n                            i.secret_columns,\n                            i.index_usage_summary,\n                            ISNULL(sz.index_size_summary,'') AS index_size_summary\n                    FROM    #IndexSanity AS i\n                    JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id\n                    WHERE i.is_spatial = 1 OPTION    ( RECOMPILE );\n\n            RAISERROR(N'check_id 63: Compressed indexes', 0,1) WITH NOWAIT;\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                    SELECT    63 AS check_id, \n                            i.index_sanity_id,\n                            150 AS Priority,\n                            N'Abnormal Psychology' AS findings_group,\n                            N'Compressed indexes' AS finding,\n                            [database_name] AS [Database Name], \n                            N'http://BrentOzar.com/go/AbnormalPsychology' AS URL,\n                            i.db_schema_object_indexid  + N'. COMPRESSION: ' + sz.data_compression_desc AS details, \n                            i.index_definition,\n                            i.secret_columns,\n                            i.index_usage_summary,\n                            ISNULL(sz.index_size_summary,'') AS index_size_summary\n                    FROM    #IndexSanity AS i\n                    JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id\n                    WHERE sz.data_compression_desc LIKE '%PAGE%' OR sz.data_compression_desc LIKE '%ROW%' OPTION    ( RECOMPILE );\n\n            RAISERROR(N'check_id 64: Partitioned', 0,1) WITH NOWAIT;\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                    SELECT    64 AS check_id, \n                            i.index_sanity_id,\n                            150 AS Priority,\n                            N'Abnormal Psychology' AS findings_group,\n                            N'Partitioned indexes' AS finding,\n                            [database_name] AS [Database Name], \n                            N'http://BrentOzar.com/go/AbnormalPsychology' AS URL,\n                            i.db_schema_object_indexid AS details, \n                            i.index_definition,\n                            i.secret_columns,\n                            i.index_usage_summary,\n                            ISNULL(sz.index_size_summary,'') AS index_size_summary\n                    FROM    #IndexSanity AS i\n                    JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id\n                    WHERE i.partition_key_column_name IS NOT NULL OPTION    ( RECOMPILE );\n\n            RAISERROR(N'check_id 65: Non-Aligned Partitioned', 0,1) WITH NOWAIT;\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                    SELECT    65 AS check_id, \n                            i.index_sanity_id,\n                            150 AS Priority,\n                            N'Abnormal Psychology' AS findings_group,\n                            N'Non-Aligned index on a partitioned table' AS finding,\n                            i.[database_name] AS [Database Name], \n                            N'http://BrentOzar.com/go/AbnormalPsychology' AS URL,\n                            i.db_schema_object_indexid AS details, \n                            i.index_definition,\n                            i.secret_columns,\n                            i.index_usage_summary,\n                            ISNULL(sz.index_size_summary,'') AS index_size_summary\n                    FROM    #IndexSanity AS i\n                    JOIN #IndexSanity AS iParent ON\n                        i.[object_id]=iParent.[object_id]\n\t\t\t\t\t\tAND i.database_id = iParent.database_id\n\t\t\t\t\t\tAND i.schema_name = iParent.schema_name\n                        AND iParent.index_id IN (0,1) /* could be a partitioned heap or clustered table */\n                        AND iParent.partition_key_column_name IS NOT NULL /* parent is partitioned*/         \n                    JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id\n                    WHERE i.partition_key_column_name IS NULL \n                        OPTION    ( RECOMPILE );\n\n            RAISERROR(N'check_id 66: Recently created tables/indexes (1 week)', 0,1) WITH NOWAIT;\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                    SELECT    66 AS check_id, \n                            i.index_sanity_id,\n                            200 AS Priority,\n                            N'Abnormal Psychology' AS findings_group,\n                            N'Recently created tables/indexes (1 week)' AS finding,\n                            [database_name] AS [Database Name], \n                            N'http://BrentOzar.com/go/AbnormalPsychology' AS URL,\n                            i.db_schema_object_indexid + N' was created on ' + \n                                CONVERT(NVARCHAR(16),i.create_date,121) + \n                                N'. Tables/indexes which are dropped/created regularly require special methods for index tuning.'\n                                     AS details, \n                            i.index_definition,\n                            i.secret_columns,\n                            i.index_usage_summary,\n                            ISNULL(sz.index_size_summary,'') AS index_size_summary\n                    FROM    #IndexSanity AS i\n                    JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id\n                    WHERE i.create_date >= DATEADD(dd,-7,GETDATE()) \n                    AND NOT (@GetAllDatabases = 1 OR @Mode = 0)\n                        OPTION    ( RECOMPILE );\n\n            RAISERROR(N'check_id 67: Recently modified tables/indexes (2 days)', 0,1) WITH NOWAIT;\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                    SELECT    67 AS check_id, \n                            i.index_sanity_id,\n                            200 AS Priority,\n                            N'Abnormal Psychology' AS findings_group,\n                            N'Recently modified tables/indexes (2 days)' AS finding,\n                            [database_name] AS [Database Name], \n                            N'http://BrentOzar.com/go/AbnormalPsychology' AS URL,\n                            i.db_schema_object_indexid + N' was modified on ' + \n                                CONVERT(NVARCHAR(16),i.modify_date,121) + \n                                N'. A large amount of recently modified indexes may mean a lot of rebuilds are occurring each night.'\n                                     AS details, \n                            i.index_definition,\n                            i.secret_columns,\n                            i.index_usage_summary,\n                            ISNULL(sz.index_size_summary,'') AS index_size_summary\n                    FROM    #IndexSanity AS i\n                    JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id\n                    WHERE i.modify_date > DATEADD(dd,-2,GETDATE()) \n                    AND NOT (@GetAllDatabases = 1 OR @Mode = 0)\n                    AND /*Exclude recently created tables.*/\n                    i.create_date < DATEADD(dd,-7,GETDATE()) \n                        OPTION    ( RECOMPILE );\n\n            RAISERROR(N'check_id 68: Identity columns within 30 percent of the end of range', 0,1) WITH NOWAIT;\n            -- Allowed Ranges: \n                --int -2,147,483,648 to 2,147,483,647\n                --smallint -32,768 to 32,768\n                --tinyint 0 to 255\n\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                        SELECT    68 AS check_id, \n                                i.index_sanity_id, \n                                200 AS Priority,\n                                N'Abnormal Psychology' AS findings_group,\n                                N'Identity column within ' +                                     \n                                    CAST (calc1.percent_remaining AS NVARCHAR(256))\n                                    + N' percent  end of range' AS finding,\n                                [database_name] AS [Database Name],\n                                N'http://BrentOzar.com/go/AbnormalPsychology' AS URL,\n                                i.db_schema_object_name + N'.' +  QUOTENAME(ic.column_name)\n                                    + N' is an identity with type ' + ic.system_type_name \n                                    + N', last value of ' \n                                        + ISNULL(REPLACE(CONVERT(NVARCHAR(256),CAST(CAST(ic.last_value AS BIGINT) AS MONEY), 1), '.00', ''),N'NULL')\n                                    + N', seed of '\n                                        + ISNULL(REPLACE(CONVERT(NVARCHAR(256),CAST(CAST(ic.seed_value AS BIGINT) AS MONEY), 1), '.00', ''),N'NULL')\n                                    + N', increment of ' + CAST(ic.increment_value AS NVARCHAR(256)) \n                                    + N', and range of ' +\n                                        CASE ic.system_type_name WHEN 'int' THEN N'+/- 2,147,483,647'\n                                            WHEN 'smallint' THEN N'+/- 32,768'\n                                            WHEN 'tinyint' THEN N'0 to 255'\n                                        END\n                                        AS details,\n                                i.index_definition,\n                                secret_columns, \n                                ISNULL(i.index_usage_summary,''),\n                                ISNULL(ip.index_size_summary,'')\n                        FROM    #IndexSanity i\n                        JOIN    #IndexColumns ic ON\n                            i.object_id=ic.object_id\n\t\t\t\t\t\t\tAND i.database_id = ic.database_id\n\t\t\t\t\t\t\tAND i.schema_name = ic.schema_name\n                            AND i.index_id IN (0,1) /* heaps and cx only */\n                            AND ic.is_identity=1\n                            AND ic.system_type_name IN ('tinyint', 'smallint', 'int')\n                        JOIN    #IndexSanitySize ip ON i.index_sanity_id = ip.index_sanity_id\n                        CROSS APPLY (\n                            SELECT CAST(CASE WHEN ic.increment_value >= 0\n                                    THEN\n                                        CASE ic.system_type_name \n                                            WHEN 'int' THEN (2147483647 - (ISNULL(ic.last_value,ic.seed_value) + ic.increment_value)) / 2147483647.*100\n                                            WHEN 'smallint' THEN (32768 - (ISNULL(ic.last_value,ic.seed_value) + ic.increment_value)) / 32768.*100\n                                            WHEN 'tinyint' THEN ( 255 - (ISNULL(ic.last_value,ic.seed_value) + ic.increment_value)) / 255.*100\n                                            ELSE 999\n                                        END\n                                ELSE --ic.increment_value is negative\n                                        CASE ic.system_type_name \n                                            WHEN 'int' THEN ABS(-2147483647 - (ISNULL(ic.last_value,ic.seed_value) + ic.increment_value)) / 2147483647.*100\n                                            WHEN 'smallint' THEN ABS(-32768 - (ISNULL(ic.last_value,ic.seed_value) + ic.increment_value)) / 32768.*100\n                                            WHEN 'tinyint' THEN ABS( 0 - (ISNULL(ic.last_value,ic.seed_value) + ic.increment_value)) / 255.*100\n                                            ELSE -1\n                                        END \n                                END AS NUMERIC(5,1)) AS percent_remaining\n                                ) AS calc1\n                        WHERE    i.index_id IN (1,0)\n                            AND calc1.percent_remaining <= 30\n                        UNION ALL\n                        SELECT    68 AS check_id, \n                                i.index_sanity_id, \n                                200 AS Priority,\n                                N'Abnormal Psychology' AS findings_group,\n                                N'Identity column using a negative seed or increment other than 1' AS finding,\n                                [database_name] AS [Database Name],\n                                N'http://BrentOzar.com/go/AbnormalPsychology' AS URL,\n                                i.db_schema_object_name + N'.' +  QUOTENAME(ic.column_name)\n                                    + N' is an identity with type ' + ic.system_type_name \n                                    + N', last value of ' \n                                        + ISNULL(REPLACE(CONVERT(NVARCHAR(256),CAST(CAST(ic.last_value AS BIGINT) AS MONEY), 1), '.00', ''),N'NULL')\n                                    + N', seed of '\n                                        + ISNULL(REPLACE(CONVERT(NVARCHAR(256),CAST(CAST(ic.seed_value AS BIGINT) AS MONEY), 1), '.00', ''),N'NULL')\n                                    + N', increment of ' + CAST(ic.increment_value AS NVARCHAR(256)) \n                                    + N', and range of ' +\n                                        CASE ic.system_type_name WHEN 'int' THEN N'+/- 2,147,483,647'\n                                            WHEN 'smallint' THEN N'+/- 32,768'\n                                            WHEN 'tinyint' THEN N'0 to 255'\n                                        END\n                                        AS details,\n                                i.index_definition,\n                                secret_columns, \n                                ISNULL(i.index_usage_summary,''),\n                                ISNULL(ip.index_size_summary,'')\n                        FROM    #IndexSanity i\n                        JOIN    #IndexColumns ic ON\n                            i.object_id=ic.object_id\n\t\t\t\t\t\t\tAND i.database_id = ic.database_id\n\t\t\t\t\t\t\tAND i.schema_name = ic.schema_name\n                            AND i.index_id IN (0,1) /* heaps and cx only */\n                            AND ic.is_identity=1\n                            AND ic.system_type_name IN ('tinyint', 'smallint', 'int')\n                        JOIN    #IndexSanitySize ip ON i.index_sanity_id = ip.index_sanity_id\n                        WHERE    i.index_id IN (1,0)\n                            AND (ic.seed_value < 0 OR ic.increment_value <> 1)\n                        ORDER BY finding, details DESC OPTION    ( RECOMPILE );\n\n            RAISERROR(N'check_id 69: Column collation does not match database collation', 0,1) WITH NOWAIT;\n                WITH count_columns AS (\n                            SELECT [object_id],\n\t\t\t\t\t\t\t\t   database_id,\n\t\t\t\t\t\t\t\t   schema_name,\n                                COUNT(*) AS column_count\n                            FROM #IndexColumns ic\n                            WHERE index_id IN (1,0) /*Heap or clustered only*/\n                                AND collation_name <> @collation\n                            GROUP BY [object_id],\n\t\t\t\t\t\t\t\t     database_id,\n\t\t\t\t\t\t\t\t     schema_name\n                            )\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                        SELECT    69 AS check_id, \n                                i.index_sanity_id, \n                                150 AS Priority,\n                                N'Abnormal Psychology' AS findings_group,\n                                N'Column collation does not match database collation' AS finding,\n                                [database_name] AS [Database Name],\n                                N'http://BrentOzar.com/go/AbnormalPsychology' AS URL,\n                                i.db_schema_object_name \n                                    + N' has ' + CAST(column_count AS NVARCHAR(20))\n                                    + N' column' + CASE WHEN column_count > 1 THEN 's' ELSE '' END\n                                    + N' with a different collation than the db collation of '\n                                    + @collation    AS details,\n                                i.index_definition,\n                                secret_columns, \n                                ISNULL(i.index_usage_summary,''),\n                                ISNULL(ip.index_size_summary,'')\n                        FROM    #IndexSanity i\n                        JOIN    #IndexSanitySize ip ON i.index_sanity_id = ip.index_sanity_id\n                        JOIN    count_columns AS cc ON i.[object_id]=cc.[object_id]\n\t\t\t\t\t\t\t\tAND cc.database_id = i.database_id\n\t\t\t\t\t\t\t\tAND cc.schema_name = i.schema_name\n                        WHERE    i.index_id IN (1,0)\n                        AND NOT (@GetAllDatabases = 1 OR @Mode = 0)\n                        ORDER BY i.db_schema_object_name DESC OPTION    ( RECOMPILE );\n\n            RAISERROR(N'check_id 70: Replicated columns', 0,1) WITH NOWAIT;\n                WITH count_columns AS (\n                            SELECT [object_id],\n\t\t\t\t\t\t\t\tdatabase_id,\n\t\t\t\t\t\t\t\tschema_name,\n                                COUNT(*) AS column_count,\n                                SUM(CASE is_replicated WHEN 1 THEN 1 ELSE 0 END) AS replicated_column_count\n                            FROM #IndexColumns ic\n                            WHERE index_id IN (1,0) /*Heap or clustered only*/\n                            GROUP BY object_id,\n\t\t\t\t\t\t\t\t     database_id,\n\t\t\t\t\t\t\t\t     schema_name\n                            )\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                        SELECT    70 AS check_id, \n                                i.index_sanity_id,\n                                200 AS Priority, \n                                N'Abnormal Psychology' AS findings_group,\n                                N'Replicated columns' AS finding,\n                                [database_name] AS [Database Name],\n                                N'http://BrentOzar.com/go/AbnormalPsychology' AS URL,\n                                i.db_schema_object_name \n                                    + N' has ' + CAST(replicated_column_count AS NVARCHAR(20))\n                                    + N' out of ' + CAST(column_count AS NVARCHAR(20))\n                                    + N' column' + CASE WHEN column_count > 1 THEN 's' ELSE '' END\n                                    + N' in one or more publications.'\n                                        AS details,\n                                i.index_definition,\n                                secret_columns, \n                                ISNULL(i.index_usage_summary,''),\n                                ISNULL(ip.index_size_summary,'')\n                        FROM    #IndexSanity i\n                        JOIN    #IndexSanitySize ip ON i.index_sanity_id = ip.index_sanity_id\n                        JOIN    count_columns AS cc ON i.[object_id]=cc.[object_id]\n\t\t\t\t\t\t\t\tAND i.database_id = cc.database_id\n\t\t\t\t\t\t\t\tAND i.schema_name = cc.schema_name\n                        WHERE    i.index_id IN (1,0)\n                            AND replicated_column_count > 0\n                            AND NOT (@GetAllDatabases = 1 OR @Mode = 0)\n                        ORDER BY i.db_schema_object_name DESC OPTION    ( RECOMPILE );\n\n            RAISERROR(N'check_id 71: Cascading updates or cascading deletes.', 0,1) WITH NOWAIT;\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary, more_info )\n            SELECT    71 AS check_id, \n                    NULL AS index_sanity_id,\n                    150 AS Priority,\n                    N'Abnormal Psychology' AS findings_group,\n                    N'Cascading Updates or Deletes' AS finding, \n                    [database_name] AS [Database Name],\n                    N'http://BrentOzar.com/go/AbnormalPsychology' AS URL,\n                    N'Foreign Key ' + foreign_key_name +\n                    N' on ' + QUOTENAME(parent_object_name)  + N'(' + LTRIM(parent_fk_columns) + N')'\n                        + N' referencing ' + QUOTENAME(referenced_object_name) + N'(' + LTRIM(referenced_fk_columns) + N')'\n                        + N' has settings:'\n                        + CASE [delete_referential_action_desc] WHEN N'NO_ACTION' THEN N'' ELSE N' ON DELETE ' +[delete_referential_action_desc] END\n                        + CASE [update_referential_action_desc] WHEN N'NO_ACTION' THEN N'' ELSE N' ON UPDATE ' + [update_referential_action_desc] END\n                            AS details, \n                    [fk].[database_name] \n                            AS index_definition, \n                    N'N/A' AS secret_columns,\n                    N'N/A' AS index_usage_summary,\n                    N'N/A' AS index_size_summary,\n                    (SELECT TOP 1 more_info FROM #IndexSanity i WHERE i.object_id=fk.parent_object_id AND i.database_id = fk.database_id AND i.schema_name = fk.schema_name)\n                        AS more_info\n            FROM #ForeignKeys fk\n            WHERE ([delete_referential_action_desc] <> N'NO_ACTION'\n            OR [update_referential_action_desc] <> N'NO_ACTION')\n            AND NOT (@GetAllDatabases = 1 OR @Mode = 0);\n\n\t\t\tRAISERROR(N'check_id 72: Columnstore indexes with Trace Flag 834', 0,1) WITH NOWAIT;\n                IF EXISTS (SELECT * FROM #IndexSanity WHERE index_type IN (5,6))\n\t\t\t\tAND EXISTS (SELECT * FROM #TraceStatus WHERE TraceFlag = 834 AND status = 1)\n\t\t\t\tBEGIN\n\t\t\t\tINSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n                    SELECT    72 AS check_id, \n                            i.index_sanity_id,\n                            150 AS Priority,\n                            N'Abnormal Psychology' AS findings_group,\n                            'Columnstore Indexes are being used in conjunction with trace flag 834. Visit the link to see why this can be a bad idea' AS finding, \n                            [database_name] AS [Database Name],\n                            N'https://support.microsoft.com/en-us/kb/3210239' AS URL,\n                            i.db_schema_object_indexid AS details, \n                            i.index_definition,\n                            i.secret_columns,\n                            i.index_usage_summary,\n                            ISNULL(sz.index_size_summary,'') AS index_size_summary\n                    FROM    #IndexSanity AS i\n                    JOIN #IndexSanitySize sz ON i.index_sanity_id = sz.index_sanity_id\n                    WHERE i.index_type IN (5,6)\n                    OPTION    ( RECOMPILE );\n\t\t\t\tEND;\n\n    END;\n\n         ----------------------------------------\n        --Workaholics: Check_id 80-89\n        ----------------------------------------\n    BEGIN\n\n        RAISERROR(N'check_id 80: Most scanned indexes (index_usage_stats)', 0,1) WITH NOWAIT;\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n\n        --Workaholics according to index_usage_stats\n        --This isn't perfect: it mentions the number of scans present in a plan\n        --A \"scan\" isn't necessarily a full scan, but hey, we gotta do the best with what we've got.\n        --in the case of things like indexed views, the operator might be in the plan but never executed\n        SELECT TOP 5 \n            80 AS check_id,\n            i.index_sanity_id AS index_sanity_id,\n            200 AS Priority,\n            N'Workaholics' AS findings_group,\n            N'Scan-a-lots (index_usage_stats)' AS finding,\n            [database_name] AS [Database Name],\n            N'http://BrentOzar.com/go/Workaholics' AS URL,\n            REPLACE(CONVERT( NVARCHAR(50),CAST(i.user_scans AS MONEY),1),'.00','')\n                + N' scans against ' + i.db_schema_object_indexid\n                + N'. Latest scan: ' + ISNULL(CAST(i.last_user_scan AS NVARCHAR(128)),'?') + N'. ' \n                + N'ScanFactor=' + CAST(((i.user_scans * iss.total_reserved_MB)/1000000.) AS NVARCHAR(256)) AS details,\n            ISNULL(i.key_column_names_with_sort_order,'N/A') AS index_definition,\n            ISNULL(i.secret_columns,'') AS secret_columns,\n            i.index_usage_summary AS index_usage_summary,\n            iss.index_size_summary AS index_size_summary\n        FROM #IndexSanity i\n        JOIN #IndexSanitySize iss ON i.index_sanity_id=iss.index_sanity_id\n        WHERE ISNULL(i.user_scans,0) > 0\n        AND NOT (@GetAllDatabases = 1 OR @Mode = 0)\n        ORDER BY  i.user_scans * iss.total_reserved_MB DESC;\n\n        RAISERROR(N'check_id 81: Top recent accesses (op stats)', 0,1) WITH NOWAIT;\n                INSERT    #BlitzIndexResults ( check_id, index_sanity_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n        --Workaholics according to index_operational_stats\n        --This isn't perfect either: range_scan_count contains full scans, partial scans, even seeks in nested loop ops\n        --But this can help bubble up some most-accessed tables \n        SELECT TOP 5 \n            81 AS check_id,\n            i.index_sanity_id AS index_sanity_id,\n            200 AS Priority,\n            N'Workaholics' AS findings_group,\n            N'Top recent accesses (index_op_stats)' AS finding,\n            [database_name] AS [Database Name],\n            N'http://BrentOzar.com/go/Workaholics' AS URL,\n            ISNULL(REPLACE(\n                    CONVERT(NVARCHAR(50),CAST((iss.total_range_scan_count + iss.total_singleton_lookup_count) AS MONEY),1),\n                    N'.00',N'') \n                + N' uses of ' + i.db_schema_object_indexid + N'. '\n                + REPLACE(CONVERT(NVARCHAR(50), CAST(iss.total_range_scan_count AS MONEY),1),N'.00',N'') + N' scans or seeks. '\n                + REPLACE(CONVERT(NVARCHAR(50), CAST(iss.total_singleton_lookup_count AS MONEY), 1),N'.00',N'') + N' singleton lookups. '\n                + N'OpStatsFactor=' + CAST(((((iss.total_range_scan_count + iss.total_singleton_lookup_count) * iss.total_reserved_MB))/1000000.) AS VARCHAR(256)),'') AS details,\n            ISNULL(i.key_column_names_with_sort_order,'N/A') AS index_definition,\n            ISNULL(i.secret_columns,'') AS secret_columns,\n            i.index_usage_summary AS index_usage_summary,\n            iss.index_size_summary AS index_size_summary\n        FROM #IndexSanity i\n        JOIN #IndexSanitySize iss ON i.index_sanity_id=iss.index_sanity_id\n        WHERE (ISNULL(iss.total_range_scan_count,0)  > 0 OR ISNULL(iss.total_singleton_lookup_count,0) > 0)\n        AND NOT (@GetAllDatabases = 1 OR @Mode = 0)\n        ORDER BY ((iss.total_range_scan_count + iss.total_singleton_lookup_count) * iss.total_reserved_MB) DESC;\n\n\n    END;\n\n         ----------------------------------------\n        --Statistics Info: Check_id 90-99\n        ----------------------------------------\n    BEGIN\n\n        RAISERROR(N'check_id 90: Outdated statistics', 0,1) WITH NOWAIT;\n                INSERT    #BlitzIndexResults ( check_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n\t\tSELECT  90 AS check_id, \n\t\t\t\t200 AS Priority,\n\t\t\t\t'Functioning Statistaholics' AS findings_group,\n\t\t\t\t'Statistic Abandonment Issues',\n\t\t\t\ts.database_name,\n\t\t\t\t'' AS URL,\n\t\t\t\t'Statistics on this table were last updated ' + \n\t\t\t\t\tCASE s.last_statistics_update WHEN NULL THEN N' NEVER '\n\t\t\t\t\tELSE CONVERT(NVARCHAR(20), s.last_statistics_update) + \n\t\t\t\t\t\t' have had ' + CONVERT(NVARCHAR(100), s.modification_counter) +\n\t\t\t\t\t\t' modifications in that time, which is ' +\n\t\t\t\t\t\tCONVERT(NVARCHAR(100), s.percent_modifications) + \n\t\t\t\t\t\t'% of the table.'\n\t\t\t\t\tEND AS details,\n\t\t\t\tQUOTENAME(database_name) + '.' + QUOTENAME(s.schema_name) + '.' + QUOTENAME(s.table_name) + '.' + QUOTENAME(s.index_name) + '.' + QUOTENAME(s.statistics_name) + '.' + QUOTENAME(s.column_names) AS index_definition,\n\t\t\t\t'N/A' AS secret_columns,\n\t\t\t\t'N/A' AS index_usage_summary,\n\t\t\t\t'N/A' AS index_size_summary\n\t\tFROM #Statistics AS s\n\t\tWHERE s.last_statistics_update <= CONVERT(DATETIME, GETDATE() - 7) \n\t\tAND s.percent_modifications >= 10. \n\t\tAND s.rows >= 10000;\n\n        RAISERROR(N'check_id 91: Statistics with a low sample rate', 0,1) WITH NOWAIT;\n                INSERT    #BlitzIndexResults ( check_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n\t\tSELECT  91 AS check_id, \n\t\t\t\t200 AS Priority,\n\t\t\t\t'Functioning Statistaholics' AS findings_group,\n\t\t\t\t'Antisocial Samples',\n\t\t\t\ts.database_name,\n\t\t\t\t'' AS URL,\n\t\t\t\t'Only ' + CONVERT(NVARCHAR(100), s.percent_sampled) + '% of the rows were sampled during the last statistics update. This may lead to poor cardinality estimates.' AS details,\n\t\t\t\tQUOTENAME(database_name) + '.' + QUOTENAME(s.schema_name) + '.' + QUOTENAME(s.table_name) + '.' + QUOTENAME(s.index_name) + '.' + QUOTENAME(s.statistics_name) + '.' + QUOTENAME(s.column_names) AS index_definition,\n\t\t\t\t'N/A' AS secret_columns,\n\t\t\t\t'N/A' AS index_usage_summary,\n\t\t\t\t'N/A' AS index_size_summary\n\t\tFROM #Statistics AS s\n\t\tWHERE s.rows_sampled < 1.\n\t\tAND s.rows >= 10000;\n\n        RAISERROR(N'check_id 92: Statistics with NO RECOMPUTE', 0,1) WITH NOWAIT;\n                INSERT    #BlitzIndexResults ( check_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n\t\tSELECT  92 AS check_id, \n\t\t\t\t200 AS Priority,\n\t\t\t\t'Functioning Statistaholics' AS findings_group,\n\t\t\t\t'Cyberphobic Samples',\n\t\t\t\ts.database_name,\n\t\t\t\t'' AS URL,\n\t\t\t\t'The statistic ' + QUOTENAME(s.statistics_name) +  ' is set to not recompute. This can be helpful if data is really skewed, but harmful if you expect automatic statistics updates.' AS details,\n\t\t\t\tQUOTENAME(database_name) + '.' + QUOTENAME(s.schema_name) + '.' + QUOTENAME(s.table_name) + '.' + QUOTENAME(s.index_name) + '.' + QUOTENAME(s.statistics_name) + '.' + QUOTENAME(s.column_names) AS index_definition,\n\t\t\t\t'N/A' AS secret_columns,\n\t\t\t\t'N/A' AS index_usage_summary,\n\t\t\t\t'N/A' AS index_size_summary\n\t\tFROM #Statistics AS s\n\t\tWHERE s.no_recompute = 1;\n\n        RAISERROR(N'check_id 93: Statistics with filters', 0,1) WITH NOWAIT;\n                INSERT    #BlitzIndexResults ( check_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n\t\tSELECT  93 AS check_id, \n\t\t\t\t200 AS Priority,\n\t\t\t\t'Functioning Statistaholics' AS findings_group,\n\t\t\t\t'Filter Fixation',\n\t\t\t\ts.database_name,\n\t\t\t\t'' AS URL,\n\t\t\t\t'The statistic ' + QUOTENAME(s.statistics_name) +  ' is filtered on [' + s.filter_definition + ']. It could be part of a filtered index, or just a filtered statistic. This is purely informational.' AS details,\n\t\t\t\t QUOTENAME(database_name) + '.' + QUOTENAME(s.schema_name) + '.' + QUOTENAME(s.table_name) + '.' + QUOTENAME(s.index_name) + '.' + QUOTENAME(s.statistics_name) + '.' + QUOTENAME(s.column_names) AS index_definition,\n\t\t\t\t'N/A' AS secret_columns,\n\t\t\t\t'N/A' AS index_usage_summary,\n\t\t\t\t'N/A' AS index_size_summary\n\t\tFROM #Statistics AS s\n\t\tWHERE s.has_filter = 1;\n\n\t\tEND; \n\n         ----------------------------------------\n        --Computed Column Info: Check_id 99-109\n        ----------------------------------------\n    BEGIN\n\n\t     RAISERROR(N'check_id 99: Computed Columns That Reference Functions', 0,1) WITH NOWAIT;\n                INSERT    #BlitzIndexResults ( check_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n\t\tSELECT  99 AS check_id, \n\t\t\t\t50 AS Priority,\n\t\t\t\t'Cold Calculators' AS findings_group,\n\t\t\t\t'Serial Forcer' AS finding,\n\t\t\t\tcc.database_name,\n\t\t\t\t'' AS URL,\n\t\t\t\t'The computed column ' + QUOTENAME(cc.column_name) + ' on ' + QUOTENAME(cc.schema_name) + '.' + QUOTENAME(cc.table_name) + ' is based on ' + cc.definition \n\t\t\t\t+ '. That indicates it may reference a scalar function, or a CLR function with data access, which can cause all queries and maintenance to run serially.' AS details,\n\t\t\t\tcc.column_definition,\n\t\t\t\t'N/A' AS secret_columns,\n\t\t\t\t'N/A' AS index_usage_summary,\n\t\t\t\t'N/A' AS index_size_summary\n\t\tFROM #ComputedColumns AS cc\n\t\tWHERE cc.is_function = 1;\n\n\t\tRAISERROR(N'check_id 100: Computed Columns that are not Persisted.', 0,1) WITH NOWAIT;\n        INSERT    #BlitzIndexResults ( check_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n\t\tSELECT  100 AS check_id, \n\t\t\t\t200 AS Priority,\n\t\t\t\t'Cold Calculators' AS findings_group,\n\t\t\t\t'Definition Defeatists' AS finding,\n\t\t\t\tcc.database_name,\n\t\t\t\t'' AS URL,\n\t\t\t\t'The computed column ' + QUOTENAME(cc.column_name) + ' on ' + QUOTENAME(cc.schema_name) + '.' + QUOTENAME(cc.table_name) + ' is not persisted, which means it will be calculated when a query runs.' + \n\t\t\t\t'You can change this with the following command, if the definition is deterministic: ALTER TABLE ' + QUOTENAME(cc.schema_name) + '.' + QUOTENAME(cc.table_name) + ' ALTER COLUMN ' + cc.column_name +\n\t\t\t\t' ADD PERSISTED'  AS details,\n\t\t\t\tcc.column_definition,\n\t\t\t\t'N/A' AS secret_columns,\n\t\t\t\t'N/A' AS index_usage_summary,\n\t\t\t\t'N/A' AS index_size_summary\n\t\tFROM #ComputedColumns AS cc\n\t\tWHERE cc.is_persisted = 0;\n\n        ----------------------------------------\n        --Temporal Table Info: Check_id 110-119\n        ----------------------------------------\n\t\tRAISERROR(N'check_id 110: Temporal Tables.', 0,1) WITH NOWAIT;\n        INSERT    #BlitzIndexResults ( check_id, Priority, findings_group, finding, [database_name], URL, details, index_definition,\n                                               secret_columns, index_usage_summary, index_size_summary )\n\n\t\t\t\tSELECT  110 AS check_id, \n\t\t\t\t200 AS Priority,\n\t\t\t\t'Temporal Tables' AS findings_group,\n\t\t\t\t'Obsessive Compulsive Tables',\n\t\t\t\tt.database_name,\n\t\t\t\t'' AS URL,\n\t\t\t\t'The table ' + QUOTENAME(t.schema_name) + '.' + QUOTENAME(t.table_name) + ' is a temporal table, with rows versioned in ' \n\t\t\t\t\t+ QUOTENAME(t.history_schema_name) + '.' + QUOTENAME(t.history_table_name) + ' on History columns ' + QUOTENAME(t.start_column_name) + ' and ' + QUOTENAME(t.end_column_name) + '.'\n\t\t\t\t AS details,\n\t\t\t\t'' AS index_definition,\n\t\t\t\t'N/A' AS secret_columns,\n\t\t\t\t'N/A' AS index_usage_summary,\n\t\t\t\t'N/A' AS index_size_summary\n\t\tFROM #TemporalTables AS t;\n\n\n\n\tEND; \n \n        RAISERROR(N'Insert a row to help people find help', 0,1) WITH NOWAIT;\n        IF DATEDIFF(MM, @VersionDate, GETDATE()) > 6\n\t\tBEGIN\n            INSERT    #BlitzIndexResults ( Priority, check_id, findings_group, finding, URL, details, index_definition,\n                                            index_usage_summary, index_size_summary )\n            VALUES  ( -1, 0 , \n\t\t           'Outdated sp_BlitzIndex', 'sp_BlitzIndex is Over 6 Months Old', 'http://FirstResponderKit.org/', \n                   'Fine wine gets better with age, but this ' + @ScriptVersionName + ' is more like bad cheese. Time to get a new one.',\n                    N'',N'',N''\n                    );\n        END;\n\n        IF EXISTS(SELECT * FROM #BlitzIndexResults)\n\t\tBEGIN\n            INSERT    #BlitzIndexResults ( Priority, check_id, findings_group, finding, URL, details, index_definition,\n                                            index_usage_summary, index_size_summary )\n            VALUES  ( -1, 0 , \n\t\t            @ScriptVersionName,\n                    CASE WHEN @GetAllDatabases = 1 THEN N'All Databases' ELSE N'Database ' + QUOTENAME(@DatabaseName) + N' as of ' + CONVERT(NVARCHAR(16),GETDATE(),121) END, \n                    N'From Your Community Volunteers' ,   N'http://FirstResponderKit.org' ,\n                    N''\n                    , N'',N''\n                    );\n        END;\n        ELSE IF @Mode = 0 OR (@GetAllDatabases = 1 AND @Mode <> 4)\n        BEGIN\n            INSERT    #BlitzIndexResults ( Priority, check_id, findings_group, finding, URL, details, index_definition,\n                                            index_usage_summary, index_size_summary )\n            VALUES  ( -1, 0 , \n\t\t            @ScriptVersionName,\n                    CASE WHEN @GetAllDatabases = 1 THEN N'All Databases' ELSE N'Database ' + QUOTENAME(@DatabaseName) + N' as of ' + CONVERT(NVARCHAR(16),GETDATE(),121) END, \n                    N'From Your Community Volunteers' ,   N'http://FirstResponderKit.org' ,\n                    N''\n                    , N'',N''\n                    );\n            INSERT    #BlitzIndexResults ( Priority, check_id, findings_group, finding, URL, details, index_definition,\n                                            index_usage_summary, index_size_summary )\n            VALUES  ( 1, 0 , \n\t\t           'No Major Problems Found',\n                   'Nice Work!',\n                   'http://FirstResponderKit.org', 'Consider running with @Mode = 4 in individual databases (not all) for more detailed diagnostics.', 'The new default Mode 0 only looks for very serious index issues.', '', ''\n                    );\n\n        END;\n        ELSE\n        BEGIN\n            INSERT    #BlitzIndexResults ( Priority, check_id, findings_group, finding, URL, details, index_definition,\n                                            index_usage_summary, index_size_summary )\n            VALUES  ( -1, 0 , \n\t\t            @ScriptVersionName,\n                    CASE WHEN @GetAllDatabases = 1 THEN N'All Databases' ELSE N'Database ' + QUOTENAME(@DatabaseName) + N' as of ' + CONVERT(NVARCHAR(16),GETDATE(),121) END, \n                    N'From Your Community Volunteers' ,   N'http://www.BrentOzar.com/BlitzIndex' ,\n                    N''\n                    , N'',N''\n                    );\n            INSERT    #BlitzIndexResults ( Priority, check_id, findings_group, finding, URL, details, index_definition,\n                                            index_usage_summary, index_size_summary )\n            VALUES  ( 1, 0 , \n\t\t           'No Problems Found',\n                   'Nice job! Or more likely, you have a nearly empty database.',\n                   'http://FirstResponderKit.org', 'Time to go read some blog posts.', '', '', ''\n                    );\n\n        END;\n\n        RAISERROR(N'Returning results.', 0,1) WITH NOWAIT;\n            \n        /*Return results.*/\n        IF (@Mode = 0)\n        BEGIN\n\n            SELECT Priority, ISNULL(br.findings_group,N'') + \n                    CASE WHEN ISNULL(br.finding,N'') <> N'' THEN N': ' ELSE N'' END\n                    + br.finding AS [Finding], \n                br.[database_name] AS [Database Name],\n                br.details AS [Details: schema.table.index(indexid)], \n                br.index_definition AS [Definition: [Property]] ColumnName {datatype maxbytes}], \n                ISNULL(br.secret_columns,'') AS [Secret Columns],          \n                br.index_usage_summary AS [Usage], \n                br.index_size_summary AS [Size],\n                COALESCE(br.more_info,sn.more_info,'') AS [More Info],\n                br.URL, \n                COALESCE(br.create_tsql,ts.create_tsql,'') AS [Create TSQL]\n            FROM #BlitzIndexResults br\n            LEFT JOIN #IndexSanity sn ON \n                br.index_sanity_id=sn.index_sanity_id\n            LEFT JOIN #IndexCreateTsql ts ON \n                br.index_sanity_id=ts.index_sanity_id\n            WHERE br.check_id IN (0, 1, 11, 22, 43, 68, 50, 60, 61, 62, 63, 64, 65, 72)\n            ORDER BY br.Priority ASC, br.check_id ASC, br.blitz_result_id ASC, br.findings_group ASC\n\t\t\tOPTION (RECOMPILE);\n\n        END;\n        ELSE IF (@Mode = 4)\n            SELECT Priority, ISNULL(br.findings_group,N'') + \n                    CASE WHEN ISNULL(br.finding,N'') <> N'' THEN N': ' ELSE N'' END\n                    + br.finding AS [Finding], \n\t\t\t\tbr.[database_name] AS [Database Name],\n                br.details AS [Details: schema.table.index(indexid)], \n                br.index_definition AS [Definition: [Property]] ColumnName {datatype maxbytes}], \n                ISNULL(br.secret_columns,'') AS [Secret Columns],          \n                br.index_usage_summary AS [Usage], \n                br.index_size_summary AS [Size],\n                COALESCE(br.more_info,sn.more_info,'') AS [More Info],\n                br.URL, \n                COALESCE(br.create_tsql,ts.create_tsql,'') AS [Create TSQL]\n            FROM #BlitzIndexResults br\n            LEFT JOIN #IndexSanity sn ON \n                br.index_sanity_id=sn.index_sanity_id\n            LEFT JOIN #IndexCreateTsql ts ON \n                br.index_sanity_id=ts.index_sanity_id\n            ORDER BY br.Priority ASC, br.check_id ASC, br.blitz_result_id ASC, br.findings_group ASC\n\t\t\tOPTION (RECOMPILE);\n\n    END; /* End @Mode=0 or 4 (diagnose)*/\n    ELSE IF @Mode=1 /*Summarize*/\n    BEGIN\n    --This mode is to give some overall stats on the database.\n        RAISERROR(N'@Mode=1, we are summarizing.', 0,1) WITH NOWAIT;\n\n        SELECT DB_NAME(i.database_id) AS [Database Name],\n            CAST((COUNT(*)) AS NVARCHAR(256)) AS [Number Objects],\n            CAST(CAST(SUM(sz.total_reserved_MB)/\n                1024. AS NUMERIC(29,1)) AS NVARCHAR(500)) AS [All GB],\n            CAST(CAST(SUM(sz.total_reserved_LOB_MB)/\n                1024. AS NUMERIC(29,1)) AS NVARCHAR(500)) AS [LOB GB],\n            CAST(CAST(SUM(sz.total_reserved_row_overflow_MB)/\n                1024. AS NUMERIC(29,1)) AS NVARCHAR(500)) AS [Row Overflow GB],\n            CAST(SUM(CASE WHEN index_id=1 THEN 1 ELSE 0 END)AS NVARCHAR(50)) AS [Clustered Tables],\n            CAST(SUM(CASE WHEN index_id=1 THEN sz.total_reserved_MB ELSE 0 END)\n                /1024. AS NUMERIC(29,1)) AS [Clustered Tables GB],\n            SUM(CASE WHEN index_id NOT IN (0,1) THEN 1 ELSE 0 END) AS [NC Indexes],\n            CAST(SUM(CASE WHEN index_id NOT IN (0,1) THEN sz.total_reserved_MB ELSE 0 END)\n                /1024. AS NUMERIC(29,1)) AS [NC Indexes GB],\n            CASE WHEN SUM(CASE WHEN index_id NOT IN (0,1) THEN sz.total_reserved_MB ELSE 0 END)  > 0 THEN\n                CAST(SUM(CASE WHEN index_id IN (0,1) THEN sz.total_reserved_MB ELSE 0 END)\n                    / SUM(CASE WHEN index_id NOT IN (0,1) THEN sz.total_reserved_MB ELSE 0 END) AS NUMERIC(29,1)) \n                ELSE 0 END AS [ratio table: NC Indexes],\n            SUM(CASE WHEN index_id=0 THEN 1 ELSE 0 END) AS [Heaps],\n            CAST(SUM(CASE WHEN index_id=0 THEN sz.total_reserved_MB ELSE 0 END)\n                /1024. AS NUMERIC(29,1)) AS [Heaps GB],\n            SUM(CASE WHEN index_id IN (0,1) AND partition_key_column_name IS NOT NULL THEN 1 ELSE 0 END) AS [Partitioned Tables],\n            SUM(CASE WHEN index_id NOT IN (0,1) AND  partition_key_column_name IS NOT NULL THEN 1 ELSE 0 END) AS [Partitioned NCs],\n            CAST(SUM(CASE WHEN partition_key_column_name IS NOT NULL THEN sz.total_reserved_MB ELSE 0 END)/1024. AS NUMERIC(29,1)) AS [Partitioned GB],\n            SUM(CASE WHEN filter_definition <> '' THEN 1 ELSE 0 END) AS [Filtered Indexes],\n            SUM(CASE WHEN is_indexed_view=1 THEN 1 ELSE 0 END) AS [Indexed Views],\n            MAX(total_rows) AS [Max Row Count],\n            CAST(MAX(CASE WHEN index_id IN (0,1) THEN sz.total_reserved_MB ELSE 0 END)\n                /1024. AS NUMERIC(29,1)) AS [Max Table GB],\n            CAST(MAX(CASE WHEN index_id NOT IN (0,1) THEN sz.total_reserved_MB ELSE 0 END)\n                /1024. AS NUMERIC(29,1)) AS [Max NC Index GB],\n            SUM(CASE WHEN index_id IN (0,1) AND sz.total_reserved_MB > 1024 THEN 1 ELSE 0 END) AS [Count Tables > 1GB],\n            SUM(CASE WHEN index_id IN (0,1) AND sz.total_reserved_MB > 10240 THEN 1 ELSE 0 END) AS [Count Tables > 10GB],\n            SUM(CASE WHEN index_id IN (0,1) AND sz.total_reserved_MB > 102400 THEN 1 ELSE 0 END) AS [Count Tables > 100GB],    \n            SUM(CASE WHEN index_id NOT IN (0,1) AND sz.total_reserved_MB > 1024 THEN 1 ELSE 0 END) AS [Count NCs > 1GB],\n            SUM(CASE WHEN index_id NOT IN (0,1) AND sz.total_reserved_MB > 10240 THEN 1 ELSE 0 END) AS [Count NCs > 10GB],\n            SUM(CASE WHEN index_id NOT IN (0,1) AND sz.total_reserved_MB > 102400 THEN 1 ELSE 0 END) AS [Count NCs > 100GB],\n            MIN(create_date) AS [Oldest Create Date],\n            MAX(create_date) AS [Most Recent Create Date],\n            MAX(modify_date) AS [Most Recent Modify Date],\n            1 AS [Display Order]\n        FROM #IndexSanity AS i\n        --left join here so we don't lose disabled nc indexes\n        LEFT JOIN #IndexSanitySize AS sz \n            ON i.index_sanity_id=sz.index_sanity_id\n\t\tGROUP BY DB_NAME(i.database_id)\t \n        UNION ALL\n        SELECT  CASE WHEN @GetAllDatabases = 1 THEN N'All Databases' ELSE N'Database ' + N' as of ' + CONVERT(NVARCHAR(16),GETDATE(),121) END,        \n                @ScriptVersionName,   \n                N'From Your Community Volunteers' ,   \n                N'http://FirstResponderKit.org' ,\n                N'',\n                NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,\n                NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,\n                NULL,NULL,0 AS display_order\n        ORDER BY [Display Order] ASC\n        OPTION (RECOMPILE);\n           \n    END; /* End @Mode=1 (summarize)*/\n    ELSE IF @Mode=2 /*Index Detail*/\n    BEGIN\n        --This mode just spits out all the detail without filters.\n        --This supports slicing AND dicing in Excel\n        RAISERROR(N'@Mode=2, here''s the details on existing indexes.', 0,1) WITH NOWAIT;\n\n\t\t\n\t\t/* Checks if @OutputServerName is populated with a valid linked server, and that the database name specified is valid */\n\t\tDECLARE @ValidOutputServer BIT;\n\t\tDECLARE @ValidOutputLocation BIT;\n\t\tDECLARE @LinkedServerDBCheck NVARCHAR(2000);\n\t\tDECLARE @ValidLinkedServerDB INT;\n\t\tDECLARE @tmpdbchk TABLE (cnt INT);\n\t\tDECLARE @StringToExecute NVARCHAR(MAX);\n\t\t\n\t\tIF @OutputServerName IS NOT NULL\n\t\t\tBEGIN\n\t\t\t\tIF (SUBSTRING(@OutputTableName, 2, 1) = '#')\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tRAISERROR('Due to the nature of temporary tables, outputting to a linked server requires a permanent table.', 16, 0);\n\t\t\t\t\tEND;\n\t\t\t\tELSE IF EXISTS (SELECT server_id FROM sys.servers WHERE QUOTENAME([name]) = @OutputServerName)\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tSET @LinkedServerDBCheck = 'SELECT 1 WHERE EXISTS (SELECT * FROM '+@OutputServerName+'.master.sys.databases WHERE QUOTENAME([name]) = '''+@OutputDatabaseName+''')';\n\t\t\t\t\t\tINSERT INTO @tmpdbchk EXEC sys.sp_executesql @LinkedServerDBCheck;\n\t\t\t\t\t\tSET @ValidLinkedServerDB = (SELECT COUNT(*) FROM @tmpdbchk);\n\t\t\t\t\t\tIF (@ValidLinkedServerDB > 0)\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\tSET @ValidOutputServer = 1;\n\t\t\t\t\t\t\t\tSET @ValidOutputLocation = 1;\n\t\t\t\t\t\t\tEND;\n\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\tRAISERROR('The specified database was not found on the output server', 16, 0);\n\t\t\t\t\tEND;\n\t\t\t\tELSE\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tRAISERROR('The specified output server was not found', 16, 0);\n\t\t\t\t\tEND;\n\t\t\tEND;\n\t\tELSE\n\t\t\tBEGIN\n\t\t\t\tIF (SUBSTRING(@OutputTableName, 2, 2) = '##')\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tSET @StringToExecute = N' IF (OBJECT_ID(''[tempdb].[dbo].@@@OutputTableName@@@'') IS NOT NULL) DROP TABLE @@@OutputTableName@@@';\n\t\t\t\t\t\tSET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputTableName@@@', @OutputTableName); \n\t\t\t\t\t\tEXEC(@StringToExecute);\n\t\t\t\t\t\t\n\t\t\t\t\t\tSET @OutputServerName = QUOTENAME(CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128)));\n\t\t\t\t\t\tSET @OutputDatabaseName = '[tempdb]';\n\t\t\t\t\t\tSET @OutputSchemaName = '[dbo]';\n\t\t\t\t\t\tSET @ValidOutputLocation = 1;\n\t\t\t\t\tEND;\n\t\t\t\tELSE IF (SUBSTRING(@OutputTableName, 2, 1) = '#')\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tRAISERROR('Due to the nature of Dymamic SQL, only global (i.e. double pound (##)) temp tables are supported for @OutputTableName', 16, 0);\n\t\t\t\t\tEND;\n\t\t\t\tELSE IF @OutputDatabaseName IS NOT NULL\n\t\t\t\t\tAND @OutputSchemaName IS NOT NULL\n\t\t\t\t\tAND @OutputTableName IS NOT NULL\n\t\t\t\t\tAND EXISTS ( SELECT *\n\t\t\t\t\t\t FROM   sys.databases\n\t\t\t\t\t\t WHERE  QUOTENAME([name]) = @OutputDatabaseName)\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tSET @ValidOutputLocation = 1;\n\t\t\t\t\t\tSET @OutputServerName = QUOTENAME(CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128)));\n\t\t\t\t\tEND;\n\t\t\t\tELSE IF @OutputDatabaseName IS NOT NULL\n\t\t\t\t\tAND @OutputSchemaName IS NOT NULL\n\t\t\t\t\tAND @OutputTableName IS NOT NULL\n\t\t\t\t\tAND NOT EXISTS ( SELECT *\n\t\t\t\t\t\t FROM   sys.databases\n\t\t\t\t\t\t WHERE  QUOTENAME([name]) = @OutputDatabaseName)\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tRAISERROR('The specified output database was not found on this server', 16, 0);\n\t\t\t\t\tEND;\n\t\t\t\tELSE\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tSET @ValidOutputLocation = 0; \n\t\t\t\t\tEND;\n\t\t\tEND;\n\n\t\t/* @OutputTableName lets us export the results to a permanent table */\n\t\tDECLARE @RunID UNIQUEIDENTIFIER;\n\t\tSET @RunID = NEWID();\n\t\t\n\t\tIF (@ValidOutputLocation = 1 AND COALESCE(@OutputServerName, @OutputDatabaseName, @OutputSchemaName, @OutputTableName) IS NOT NULL)\n\t\t\tBEGIN\n\t\t\t\tDECLARE @TableExists BIT;\n\t\t\t\tDECLARE @SchemaExists BIT;\n\t\t\t\tSET @StringToExecute = \n\t\t\t\t\tN'SET @SchemaExists = 0;\n\t\t\t\t\tSET @TableExists = 0;\n\t\t\t\t\tIF EXISTS(SELECT * FROM @@@OutputServerName@@@.@@@OutputDatabaseName@@@.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = ''@@@OutputSchemaName@@@'') \n\t\t\t\t\t\tSET @SchemaExists = 1\n\t\t\t\t\tIF EXISTS (SELECT * FROM @@@OutputServerName@@@.@@@OutputDatabaseName@@@.INFORMATION_SCHEMA.TABLES WHERE QUOTENAME(TABLE_SCHEMA) = ''@@@OutputSchemaName@@@'' AND QUOTENAME(TABLE_NAME) = ''@@@OutputTableName@@@'')\n\t\t\t\t\t\tSET @TableExists = 1';\n\t\n\t\t\t\tSET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputServerName@@@', @OutputServerName);\n\t\t\t\tSET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputDatabaseName@@@', @OutputDatabaseName);\n\t\t\t\tSET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputSchemaName@@@', @OutputSchemaName); \n\t\t\t\tSET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputTableName@@@', @OutputTableName);\n\t\n\t\t\t\tEXEC sp_executesql @StringToExecute, N'@TableExists BIT OUTPUT, @SchemaExists BIT OUTPUT', @TableExists OUTPUT, @SchemaExists OUTPUT;\n\t\t\t\t\n\t\t\t\tIF @SchemaExists = 1\n\t\t\t\t\tBEGIN\n\t\t\t\t\t\tIF @TableExists = 0\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\tSET @StringToExecute = \n\t\t\t\t\t\t\t\t\tN'CREATE TABLE @@@OutputDatabaseName@@@.@@@OutputSchemaName@@@.@@@OutputTableName@@@ \n\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t[id] INT IDENTITY(1,1) NOT NULL, \n\t\t\t\t\t\t\t\t\t\t\t[run_id] UNIQUEIDENTIFIER,\n\t\t\t\t\t\t\t\t\t\t\t[run_datetime] DATETIME, \n\t\t\t\t\t\t\t\t\t\t\t[server_name] NVARCHAR(128), \n\t\t\t\t\t\t\t\t\t\t\t[database_name] NVARCHAR(128), \n\t\t\t\t\t\t\t\t\t\t\t[schema_name] NVARCHAR(128), \n\t\t\t\t\t\t\t\t\t\t\t[table_name] NVARCHAR(128), \n\t\t\t\t\t\t\t\t\t\t\t[index_name] NVARCHAR(128), \n\t\t\t\t\t\t\t\t\t\t\t[index_id] INT, \n\t\t\t\t\t\t\t\t\t\t\t[db_schema_object_indexid] NVARCHAR(500), \n\t\t\t\t\t\t\t\t\t\t\t[object_type] NVARCHAR(15), \n\t\t\t\t\t\t\t\t\t\t\t[index_definition] NVARCHAR(4000), \n\t\t\t\t\t\t\t\t\t\t\t[key_column_names_with_sort_order] NVARCHAR(MAX), \n\t\t\t\t\t\t\t\t\t\t\t[count_key_columns] INT, \n\t\t\t\t\t\t\t\t\t\t\t[include_column_names] NVARCHAR(MAX), \n\t\t\t\t\t\t\t\t\t\t\t[count_included_columns] INT, \n\t\t\t\t\t\t\t\t\t\t\t[secret_columns] NVARCHAR(MAX), \n\t\t\t\t\t\t\t\t\t\t\t[count_secret_columns] INT, \n\t\t\t\t\t\t\t\t\t\t\t[partition_key_column_name] NVARCHAR(MAX), \n\t\t\t\t\t\t\t\t\t\t\t[filter_definition] NVARCHAR(MAX), \n\t\t\t\t\t\t\t\t\t\t\t[is_indexed_view] BIT, \n\t\t\t\t\t\t\t\t\t\t\t[is_primary_key] BIT, \n\t\t\t\t\t\t\t\t\t\t\t[is_XML] BIT, \n\t\t\t\t\t\t\t\t\t\t\t[is_spatial] BIT, \n\t\t\t\t\t\t\t\t\t\t\t[is_NC_columnstore] BIT, \n\t\t\t\t\t\t\t\t\t\t\t[is_CX_columnstore] BIT, \n\t\t\t\t\t\t\t\t\t\t\t[is_disabled] BIT, \n\t\t\t\t\t\t\t\t\t\t\t[is_hypothetical] BIT, \n\t\t\t\t\t\t\t\t\t\t\t[is_padded] BIT, \n\t\t\t\t\t\t\t\t\t\t\t[fill_factor] INT, \n\t\t\t\t\t\t\t\t\t\t\t[is_referenced_by_foreign_key] BIT,\n\t\t\t\t\t\t\t\t\t\t\t[last_user_seek] DATETIME, \n\t\t\t\t\t\t\t\t\t\t\t[last_user_scan] DATETIME, \n\t\t\t\t\t\t\t\t\t\t\t[last_user_lookup] DATETIME, \n\t\t\t\t\t\t\t\t\t\t\t[last_user_update] DATETIME, \n\t\t\t\t\t\t\t\t\t\t\t[total_reads] BIGINT, \n\t\t\t\t\t\t\t\t\t\t\t[user_updates] BIGINT, \n\t\t\t\t\t\t\t\t\t\t\t[reads_per_write] MONEY, \n\t\t\t\t\t\t\t\t\t\t\t[index_usage_summary] NVARCHAR(200), \n\t\t\t\t\t\t\t\t\t\t\t[partition_count] INT, \n\t\t\t\t\t\t\t\t\t\t\t[total_rows] BIGINT, \n\t\t\t\t\t\t\t\t\t\t\t[total_reserved_MB] NUMERIC(29,2), \n\t\t\t\t\t\t\t\t\t\t\t[total_reserved_LOB_MB] NUMERIC(29,2), \n\t\t\t\t\t\t\t\t\t\t\t[total_reserved_row_overflow_MB] NUMERIC(29,2), \n\t\t\t\t\t\t\t\t\t\t\t[index_size_summary] NVARCHAR(300), \n\t\t\t\t\t\t\t\t\t\t\t[total_row_lock_count] BIGINT, \n\t\t\t\t\t\t\t\t\t\t\t[total_row_lock_wait_count] BIGINT, \n\t\t\t\t\t\t\t\t\t\t\t[total_row_lock_wait_in_ms] BIGINT, \n\t\t\t\t\t\t\t\t\t\t\t[avg_row_lock_wait_in_ms] BIGINT, \n\t\t\t\t\t\t\t\t\t\t\t[total_page_lock_count] BIGINT, \n\t\t\t\t\t\t\t\t\t\t\t[total_page_lock_wait_count] BIGINT, \n\t\t\t\t\t\t\t\t\t\t\t[total_page_lock_wait_in_ms] BIGINT, \n\t\t\t\t\t\t\t\t\t\t\t[avg_page_lock_wait_in_ms] BIGINT, \n\t\t\t\t\t\t\t\t\t\t\t[total_index_lock_promotion_attempt_count] BIGINT, \n\t\t\t\t\t\t\t\t\t\t\t[total_index_lock_promotion_count] BIGINT, \n\t\t\t\t\t\t\t\t\t\t\t[data_compression_desc] VARCHAR(8000), \n\t\t\t\t\t\t\t\t\t\t\t[create_date] DATETIME, \n\t\t\t\t\t\t\t\t\t\t\t[modify_date] DATETIME, \n\t\t\t\t\t\t\t\t\t\t\t[more_info] NVARCHAR(500),\n\t\t\t\t\t\t\t\t\t\t\t[display_order] INT,\n\t\t\t\t\t\t\t\t\t\t\tCONSTRAINT [PK_ID_@@@RunID@@@] PRIMARY KEY CLUSTERED ([id] ASC)\n\t\t\t\t\t\t\t\t\t\t);';\n\t\t\n\t\t\t\t\t\t\t\tSET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputDatabaseName@@@', @OutputDatabaseName);\n\t\t\t\t\t\t\t\tSET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputSchemaName@@@', @OutputSchemaName); \n\t\t\t\t\t\t\t\tSET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputTableName@@@', @OutputTableName); \n\t\t\t\t\t\t\t\tSET @StringToExecute = REPLACE(@StringToExecute, '@@@RunID@@@', @RunID); \n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tIF @ValidOutputServer = 1\n\t\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\t\tSET @StringToExecute = REPLACE(@StringToExecute,'''','''''');\n\t\t\t\t\t\t\t\t\t\tEXEC('EXEC('''+@StringToExecute+''') AT ' + @OutputServerName);\n\t\t\t\t\t\t\t\t\tEND;   \n\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\t\t\tEXEC(@StringToExecute);\n\t\t\t\t\t\t\t\t\tEND;\n\t\t\t\t\t\t\tEND; /* @TableExists = 0 */\n\t\t\t\t\t\n\t\t\t\t\t\tSET @StringToExecute = \n\t\t\t\t\t\t\tN'IF EXISTS(SELECT * FROM @@@OutputServerName@@@.@@@OutputDatabaseName@@@.INFORMATION_SCHEMA.SCHEMATA WHERE QUOTENAME(SCHEMA_NAME) = ''@@@OutputSchemaName@@@'') \n\t\t\t\t\t\t\t\tAND NOT EXISTS (SELECT * FROM @@@OutputServerName@@@.@@@OutputDatabaseName@@@.INFORMATION_SCHEMA.TABLES WHERE QUOTENAME(TABLE_SCHEMA) = ''@@@OutputSchemaName@@@'' AND QUOTENAME(TABLE_NAME) = ''@@@OutputTableName@@@'')\n\t\t\t\t\t\t\t\tSET @TableExists = 0\n\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\tSET @TableExists = 1';\n\t\t\t\t\n\t\t\t\t\t\tSET @TableExists = NULL;\n\t\t\t\t\t\tSET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputServerName@@@', @OutputServerName);\n\t\t\t\t\t\tSET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputDatabaseName@@@', @OutputDatabaseName);\n\t\t\t\t\t\tSET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputSchemaName@@@', @OutputSchemaName); \n\t\t\t\t\t\tSET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputTableName@@@', @OutputTableName); \n\t\t\t\n\t\t\t\t\t\tEXEC sp_executesql @StringToExecute, N'@TableExists BIT OUTPUT', @TableExists OUTPUT;\n\t\t\t\t\t\t\n\t\t\t\t\t\tIF @TableExists = 1\n\t\t\t\t\t\t\tBEGIN\n\t\t\t\t\t\t\t\tSET @StringToExecute = \n\t\t\t\t\t\t\t\t\tN'INSERT @@@OutputServerName@@@.@@@OutputDatabaseName@@@.@@@OutputSchemaName@@@.@@@OutputTableName@@@\n\t\t\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t\t\t[run_id], \n\t\t\t\t\t\t\t\t\t\t\t[run_datetime], \n\t\t\t\t\t\t\t\t\t\t\t[server_name], \n\t\t\t\t\t\t\t\t\t\t\t[database_name], \n\t\t\t\t\t\t\t\t\t\t\t[schema_name], \n\t\t\t\t\t\t\t\t\t\t\t[table_name], \n\t\t\t\t\t\t\t\t\t\t\t[index_name], \n\t\t\t\t\t\t\t\t\t\t\t[index_id], \n\t\t\t\t\t\t\t\t\t\t\t[db_schema_object_indexid], \n\t\t\t\t\t\t\t\t\t\t\t[object_type], \n\t\t\t\t\t\t\t\t\t\t\t[index_definition], \n\t\t\t\t\t\t\t\t\t\t\t[key_column_names_with_sort_order], \n\t\t\t\t\t\t\t\t\t\t\t[count_key_columns], \n\t\t\t\t\t\t\t\t\t\t\t[include_column_names], \n\t\t\t\t\t\t\t\t\t\t\t[count_included_columns], \n\t\t\t\t\t\t\t\t\t\t\t[secret_columns], \n\t\t\t\t\t\t\t\t\t\t\t[count_secret_columns], \n\t\t\t\t\t\t\t\t\t\t\t[partition_key_column_name], \n\t\t\t\t\t\t\t\t\t\t\t[filter_definition], \n\t\t\t\t\t\t\t\t\t\t\t[is_indexed_view], \n\t\t\t\t\t\t\t\t\t\t\t[is_primary_key], \n\t\t\t\t\t\t\t\t\t\t\t[is_XML], \n\t\t\t\t\t\t\t\t\t\t\t[is_spatial], \n\t\t\t\t\t\t\t\t\t\t\t[is_NC_columnstore], \n\t\t\t\t\t\t\t\t\t\t\t[is_CX_columnstore], \n\t\t\t\t\t\t\t\t\t\t\t[is_disabled], \n\t\t\t\t\t\t\t\t\t\t\t[is_hypothetical], \n\t\t\t\t\t\t\t\t\t\t\t[is_padded], \n\t\t\t\t\t\t\t\t\t\t\t[fill_factor], \n\t\t\t\t\t\t\t\t\t\t\t[is_referenced_by_foreign_key], \n\t\t\t\t\t\t\t\t\t\t\t[last_user_seek], \n\t\t\t\t\t\t\t\t\t\t\t[last_user_scan], \n\t\t\t\t\t\t\t\t\t\t\t[last_user_lookup], \n\t\t\t\t\t\t\t\t\t\t\t[last_user_update], \n\t\t\t\t\t\t\t\t\t\t\t[total_reads], \n\t\t\t\t\t\t\t\t\t\t\t[user_updates], \n\t\t\t\t\t\t\t\t\t\t\t[reads_per_write], \n\t\t\t\t\t\t\t\t\t\t\t[index_usage_summary], \n\t\t\t\t\t\t\t\t\t\t\t[partition_count], \n\t\t\t\t\t\t\t\t\t\t\t[total_rows], \n\t\t\t\t\t\t\t\t\t\t\t[total_reserved_MB], \n\t\t\t\t\t\t\t\t\t\t\t[total_reserved_LOB_MB], \n\t\t\t\t\t\t\t\t\t\t\t[total_reserved_row_overflow_MB], \n\t\t\t\t\t\t\t\t\t\t\t[index_size_summary], \n\t\t\t\t\t\t\t\t\t\t\t[total_row_lock_count], \n\t\t\t\t\t\t\t\t\t\t\t[total_row_lock_wait_count], \n\t\t\t\t\t\t\t\t\t\t\t[total_row_lock_wait_in_ms], \n\t\t\t\t\t\t\t\t\t\t\t[avg_row_lock_wait_in_ms], \n\t\t\t\t\t\t\t\t\t\t\t[total_page_lock_count], \n\t\t\t\t\t\t\t\t\t\t\t[total_page_lock_wait_count], \n\t\t\t\t\t\t\t\t\t\t\t[total_page_lock_wait_in_ms], \n\t\t\t\t\t\t\t\t\t\t\t[avg_page_lock_wait_in_ms], \n\t\t\t\t\t\t\t\t\t\t\t[total_index_lock_promotion_attempt_count], \n\t\t\t\t\t\t\t\t\t\t\t[total_index_lock_promotion_count], \n\t\t\t\t\t\t\t\t\t\t\t[data_compression_desc], \n\t\t\t\t\t\t\t\t\t\t\t[create_date], \n\t\t\t\t\t\t\t\t\t\t\t[modify_date], \n\t\t\t\t\t\t\t\t\t\t\t[more_info],\n\t\t\t\t\t\t\t\t\t\t\t[display_order]\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\tSELECT ''@@@RunID@@@'',\n\t\t\t\t\t\t\t\t\t\t''@@@GETDATE@@@'',\n\t\t\t\t\t\t\t\t\t\t''@@@LocalServerName@@@'',\n\t\t\t\t\t\t\t\t\t\t-- Below should be a copy/paste of the real query\n\t\t\t\t\t\t\t\t\t\t-- Make sure all quotes are escaped\n\t\t\t\t\t\t\t\t\t\ti.[database_name] AS [Database Name], \n\t\t\t\t\t\t\t\t\t\ti.[schema_name] AS [Schema Name], \n\t\t\t\t\t\t\t\t\t\ti.[object_name] AS [Object Name], \n\t\t\t\t\t\t\t\t\t\tISNULL(i.index_name, '''') AS [Index Name], \n\t\t\t\t\t\t\t\t\t\tCAST(i.index_id AS VARCHAR(10))AS [Index ID],\n\t\t\t\t\t\t\t\t\t\tdb_schema_object_indexid AS [Details: schema.table.index(indexid)], \n\t\t\t\t\t\t\t\t\t\tCASE    WHEN index_id IN ( 1, 0 ) THEN ''TABLE''\n\t\t\t\t\t\t\t\t\t\t\tELSE ''NonClustered''\n\t\t\t\t\t\t\t\t\t\t\tEND AS [Object Type], \n\t\t\t\t\t\t\t\t\t\tindex_definition AS [Definition: [Property]] ColumnName {datatype maxbytes}],\n\t\t\t\t\t\t\t\t\t\tISNULL(LTRIM(key_column_names_with_sort_order), '''') AS [Key Column Names With Sort],\n\t\t\t\t\t\t\t\t\t\tISNULL(count_key_columns, 0) AS [Count Key Columns],\n\t\t\t\t\t\t\t\t\t\tISNULL(include_column_names, '''') AS [Include Column Names], \n\t\t\t\t\t\t\t\t\t\tISNULL(count_included_columns,0) AS [Count Included Columns],\n\t\t\t\t\t\t\t\t\t\tISNULL(secret_columns,'''') AS [Secret Column Names], \n\t\t\t\t\t\t\t\t\t\tISNULL(count_secret_columns,0) AS [Count Secret Columns],\n\t\t\t\t\t\t\t\t\t\tISNULL(partition_key_column_name, '''') AS [Partition Key Column Name],\n\t\t\t\t\t\t\t\t\t\tISNULL(filter_definition, '''') AS [Filter Definition], \n\t\t\t\t\t\t\t\t\t\tis_indexed_view AS [Is Indexed View], \n\t\t\t\t\t\t\t\t\t\tis_primary_key AS [Is Primary Key],\n\t\t\t\t\t\t\t\t\t\tis_XML AS [Is XML],\n\t\t\t\t\t\t\t\t\t\tis_spatial AS [Is Spatial],\n\t\t\t\t\t\t\t\t\t\tis_NC_columnstore AS [Is NC Columnstore],\n\t\t\t\t\t\t\t\t\t\tis_CX_columnstore AS [Is CX Columnstore],\n\t\t\t\t\t\t\t\t\t\tis_disabled AS [Is Disabled], \n\t\t\t\t\t\t\t\t\t\tis_hypothetical AS [Is Hypothetical],\n\t\t\t\t\t\t\t\t\t\tis_padded AS [Is Padded], \n\t\t\t\t\t\t\t\t\t\tfill_factor AS [Fill Factor], \n\t\t\t\t\t\t\t\t\t\tis_referenced_by_foreign_key AS [Is Reference by Foreign Key], \n\t\t\t\t\t\t\t\t\t\tlast_user_seek AS [Last User Seek], \n\t\t\t\t\t\t\t\t\t\tlast_user_scan AS [Last User Scan], \n\t\t\t\t\t\t\t\t\t\tlast_user_lookup AS [Last User Lookup],\n\t\t\t\t\t\t\t\t\t\tlast_user_update AS [Last User Update], \n\t\t\t\t\t\t\t\t\t\ttotal_reads AS [Total Reads], \n\t\t\t\t\t\t\t\t\t\tuser_updates AS [User Updates], \n\t\t\t\t\t\t\t\t\t\treads_per_write AS [Reads Per Write], \n\t\t\t\t\t\t\t\t\t\tindex_usage_summary AS [Index Usage], \n\t\t\t\t\t\t\t\t\t\tsz.partition_count AS [Partition Count],\n\t\t\t\t\t\t\t\t\t\tsz.total_rows AS [Rows], \n\t\t\t\t\t\t\t\t\t\tsz.total_reserved_MB AS [Reserved MB], \n\t\t\t\t\t\t\t\t\t\tsz.total_reserved_LOB_MB AS [Reserved LOB MB], \n\t\t\t\t\t\t\t\t\t\tsz.total_reserved_row_overflow_MB AS [Reserved Row Overflow MB],\n\t\t\t\t\t\t\t\t\t\tsz.index_size_summary AS [Index Size], \n\t\t\t\t\t\t\t\t\t\tsz.total_row_lock_count AS [Row Lock Count],\n\t\t\t\t\t\t\t\t\t\tsz.total_row_lock_wait_count AS [Row Lock Wait Count],\n\t\t\t\t\t\t\t\t\t\tsz.total_row_lock_wait_in_ms AS [Row Lock Wait ms],\n\t\t\t\t\t\t\t\t\t\tsz.avg_row_lock_wait_in_ms AS [Avg Row Lock Wait ms],\n\t\t\t\t\t\t\t\t\t\tsz.total_page_lock_count AS [Page Lock Count],\n\t\t\t\t\t\t\t\t\t\tsz.total_page_lock_wait_count AS [Page Lock Wait Count],\n\t\t\t\t\t\t\t\t\t\tsz.total_page_lock_wait_in_ms AS [Page Lock Wait ms],\n\t\t\t\t\t\t\t\t\t\tsz.avg_page_lock_wait_in_ms AS [Avg Page Lock Wait ms],\n\t\t\t\t\t\t\t\t\t\tsz.total_index_lock_promotion_attempt_count AS [Lock Escalation Attempts],\n\t\t\t\t\t\t\t\t\t\tsz.total_index_lock_promotion_count AS [Lock Escalations],\n\t\t\t\t\t\t\t\t\t\tsz.data_compression_desc AS [Data Compression],\n\t\t\t\t\t\t\t\t\t\ti.create_date AS [Create Date],\n\t\t\t\t\t\t\t\t\t\ti.modify_date AS [Modify Date],\n\t\t\t\t\t\t\t\t\t\tmore_info AS [More Info],\n\t\t\t\t\t\t\t\t\t\t1 AS [Display Order]\n\t\t\t\t\t\t\t\t\tFROM #IndexSanity AS i\n\t\t\t\t\t\t\t\t\tLEFT JOIN #IndexSanitySize AS sz ON i.index_sanity_id = sz.index_sanity_id\n\t\t\t\t\t\t\t\t\tORDER BY [Database Name], [Schema Name], [Object Name], [Index ID]\n\t\t\t\t\t\t\t\t\tOPTION (RECOMPILE);';\n\t\n\t\t\t\t\t\t\t\tSET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputServerName@@@', @OutputServerName);\n\t\t\t\t\t\t\t\tSET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputDatabaseName@@@', @OutputDatabaseName);\n\t\t\t\t\t\t\t\tSET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputSchemaName@@@', @OutputSchemaName); \n\t\t\t\t\t\t\t\tSET @StringToExecute = REPLACE(@StringToExecute, '@@@OutputTableName@@@', @OutputTableName); \n\t\t\t\t\t\t\t\tSET @StringToExecute = REPLACE(@StringToExecute, '@@@RunID@@@', @RunID);\n\t\t\t\t\t\t\t\tSET @StringToExecute = REPLACE(@StringToExecute, '@@@GETDATE@@@', GETDATE());\n\t\t\t\t\t\t\t\tSET @StringToExecute = REPLACE(@StringToExecute, '@@@LocalServerName@@@', CAST(SERVERPROPERTY('ServerName') AS NVARCHAR(128)));\n\t\t\t\t\t\t\t\tEXEC(@StringToExecute);\n\t\t\t\t\t\t\tEND; /* @TableExists = 1 */\n\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\tRAISERROR('Creation of the output table failed.', 16, 0);\n\t\t\t\t\tEND; /* @TableExists = 0 */\n\t\t\t\tELSE\n\t\t\t\t\tRAISERROR (N'Invalid schema name, data could not be saved.', 16, 0);\n\t\t\tEND; /* @ValidOutputLocation = 1 */\n\t\tELSE\n\t\n\n        SELECT  i.[database_name] AS [Database Name], \n                i.[schema_name] AS [Schema Name], \n                i.[object_name] AS [Object Name], \n                ISNULL(i.index_name, '') AS [Index Name], \n                CAST(i.index_id AS VARCHAR(10))AS [Index ID],\n                db_schema_object_indexid AS [Details: schema.table.index(indexid)], \n                CASE    WHEN index_id IN ( 1, 0 ) THEN 'TABLE'\n                    ELSE 'NonClustered'\n                    END AS [Object Type], \n                index_definition AS [Definition: [Property]] ColumnName {datatype maxbytes}],\n                ISNULL(LTRIM(key_column_names_with_sort_order), '') AS [Key Column Names With Sort],\n                ISNULL(count_key_columns, 0) AS [Count Key Columns],\n                ISNULL(include_column_names, '') AS [Include Column Names], \n                ISNULL(count_included_columns,0) AS [Count Included Columns],\n                ISNULL(secret_columns,'') AS [Secret Column Names], \n                ISNULL(count_secret_columns,0) AS [Count Secret Columns],\n                ISNULL(partition_key_column_name, '') AS [Partition Key Column Name],\n                ISNULL(filter_definition, '') AS [Filter Definition], \n                is_indexed_view AS [Is Indexed View], \n                is_primary_key AS [Is Primary Key],\n                is_XML AS [Is XML],\n                is_spatial AS [Is Spatial],\n                is_NC_columnstore AS [Is NC Columnstore],\n                is_CX_columnstore AS [Is CX Columnstore],\n                is_disabled AS [Is Disabled], \n                is_hypothetical AS [Is Hypothetical],\n                is_padded AS [Is Padded], \n                fill_factor AS [Fill Factor], \n                is_referenced_by_foreign_key AS [Is Reference by Foreign Key], \n                last_user_seek AS [Last User Seek], \n                last_user_scan AS [Last User Scan], \n                last_user_lookup AS [Last User Lookup],\n                last_user_update AS [Last User Update], \n                total_reads AS [Total Reads], \n                user_updates AS [User Updates], \n                reads_per_write AS [Reads Per Write], \n                index_usage_summary AS [Index Usage], \n                sz.partition_count AS [Partition Count],\n                sz.total_rows AS [Rows], \n                sz.total_reserved_MB AS [Reserved MB], \n                sz.total_reserved_LOB_MB AS [Reserved LOB MB], \n                sz.total_reserved_row_overflow_MB AS [Reserved Row Overflow MB],\n                sz.index_size_summary AS [Index Size], \n                sz.total_row_lock_count AS [Row Lock Count],\n                sz.total_row_lock_wait_count AS [Row Lock Wait Count],\n                sz.total_row_lock_wait_in_ms AS [Row Lock Wait ms],\n                sz.avg_row_lock_wait_in_ms AS [Avg Row Lock Wait ms],\n                sz.total_page_lock_count AS [Page Lock Count],\n                sz.total_page_lock_wait_count AS [Page Lock Wait Count],\n                sz.total_page_lock_wait_in_ms AS [Page Lock Wait ms],\n                sz.avg_page_lock_wait_in_ms AS [Avg Page Lock Wait ms],\n                sz.total_index_lock_promotion_attempt_count AS [Lock Escalation Attempts],\n                sz.total_index_lock_promotion_count AS [Lock Escalations],\n                sz.data_compression_desc AS [Data Compression],\n                i.create_date AS [Create Date],\n                i.modify_date AS [Modify Date],\n                more_info AS [More Info],\n                1 AS [Display Order]\n        FROM    #IndexSanity AS i --left join here so we don't lose disabled nc indexes\n                LEFT JOIN #IndexSanitySize AS sz ON i.index_sanity_id = sz.index_sanity_id\n        ORDER BY [Database Name], [Schema Name], [Object Name], [Index ID]\n        OPTION (RECOMPILE);\n\n\n\n    END; /* End @Mode=2 (index detail)*/\n    ELSE IF @Mode=3 /*Missing index Detail*/\n    BEGIN\n\n\tWITH create_date AS (\n\t\t\t\t\tSELECT i.database_id,\n\t\t\t\t\t\t   i.schema_name,\n\t\t\t\t\t\t   i.[object_id], \n\t\t\t\t\t\t   ISNULL(NULLIF(MAX(DATEDIFF(DAY, i.create_date, SYSDATETIME())), 0), 1) AS create_days\n\t\t\t\t\tFROM #IndexSanity AS i\n\t\t\t\t\tGROUP BY i.database_id, i.schema_name, i.object_id\n\t\t\t\t\t)\n        SELECT \n            mi.database_name AS [Database Name], \n            mi.[schema_name] AS [Schema], \n            mi.table_name AS [Table], \n            CAST((mi.magic_benefit_number / CASE WHEN cd.create_days < @DaysUptime THEN cd.create_days ELSE @DaysUptime END) AS BIGINT)\n                AS [Magic Benefit Number], \n            mi.missing_index_details AS [Missing Index Details], \n            mi.avg_total_user_cost AS [Avg Query Cost], \n            mi.avg_user_impact AS [Est Index Improvement], \n            mi.user_seeks AS [Seeks], \n            mi.user_scans AS [Scans],\n            mi.unique_compiles AS [Compiles], \n            mi.equality_columns AS [Equality Columns], \n            mi.inequality_columns AS [Inequality Columns], \n            mi.included_columns AS [Included Columns], \n            mi.index_estimated_impact AS [Estimated Impact], \n            mi.create_tsql AS [Create TSQL], \n            mi.more_info AS [More Info],\n            1 AS [Display Order],\n\t\t\tmi.is_low\n        FROM #MissingIndexes AS mi\n\t\tLEFT JOIN create_date AS cd\n\t\tON mi.[object_id] =  cd.object_id \n\t\tAND mi.database_id = cd.database_id\n\t\tAND mi.schema_name = cd.schema_name\n        /* Minimum benefit threshold = 100k/day of uptime OR since table creation date, whichever is lower*/\n        WHERE (mi.magic_benefit_number / CASE WHEN cd.create_days < @DaysUptime THEN cd.create_days ELSE @DaysUptime END) >= 100000\n        UNION ALL\n        SELECT                 \n            @ScriptVersionName,   \n            N'From Your Community Volunteers' ,   \n            N'http://FirstResponderKit.org' ,\n            100000000000,\n            N'',\n            NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,\n            NULL, 0 AS [Display Order], NULL AS is_low\n        ORDER BY [Display Order] ASC, is_low, [Magic Benefit Number] DESC\n\t\tOPTION (RECOMPILE);\n\n    END; /* End @Mode=3 (index detail)*/\nEND;\nEND TRY\n\nBEGIN CATCH\n        RAISERROR (N'Failure analyzing temp tables.', 0,1) WITH NOWAIT;\n\n        SELECT    @msg = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();\n\n        RAISERROR (@msg, \n               @ErrorSeverity, \n               @ErrorState \n               );\n        \n        WHILE @@trancount > 0 \n            ROLLBACK;\n\n        RETURN;\n    END CATCH;\nGO\nIF OBJECT_ID('dbo.sp_BlitzLock') IS NULL\n  EXEC ('CREATE PROCEDURE dbo.sp_BlitzLock AS RETURN 0;');\nGO\n\nALTER PROCEDURE dbo.sp_BlitzLock\n(\n    @Top INT = 2147483647, \n\t@DatabaseName NVARCHAR(256) = NULL,\n\t@StartDate DATETIME = '19000101', \n\t@EndDate DATETIME = '99991231', \n\t@ObjectName NVARCHAR(1000) = NULL,\n\t@StoredProcName NVARCHAR(1000) = NULL,\n\t@AppName NVARCHAR(256) = NULL,\n\t@HostName NVARCHAR(256) = NULL,\n\t@LoginName NVARCHAR(256) = NULL,\n\t@EventSessionPath VARCHAR(256) = 'system_health*.xel', \n\t@Debug BIT = 0, \n\t@Help BIT = 0,\n\t@VersionDate DATETIME = NULL OUTPUT\n)\nWITH RECOMPILE\nAS\nBEGIN\n\nSET NOCOUNT ON;\nSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\n\nDECLARE @Version VARCHAR(30);\nSET @Version = '1.2';\nSET @VersionDate = '20180201';\n\n\n\tIF @Help = 1 PRINT '\n\t/*\n\tsp_BlitzLock from http://FirstResponderKit.org\n\t\n\tThis script checks for and analyzes deadlocks from the system health session or a custom extended event path\n\n\tVariables you can use:\n\t\t@Top: Use if you want to limit the number of deadlocks to return.\n\t\t\t  This is ordered by event date ascending\n\n\t\t@DatabaseName: If you want to filter to a specific database\n\n\t\t@StartDate: The date you want to start searching on.\n\n\t\t@EndDate: The date you want to stop searching on.\n\n\t\t@ObjectName: If you want to filter to a specific able. \n\t\t\t\t\t The object name has to be fully qualified ''Database.Schema.Table''\n\n\t\t@StoredProcName: If you want to search for a single stored proc\n\t\t\t\t\t The proc name has to be fully qualified ''Database.Schema.Sproc''\n\t\t\n\t\t@AppName: If you want to filter to a specific application\n\t\t\n\t\t@HostName: If you want to filter to a specific host\n\t\t\n\t\t@LoginName: If you want to filter to a specific login\n\n\t\t@EventSessionPath: If you want to point this at an XE session rather than the system health session.\n\t\n\t\n\t\n\tTo learn more, visit http://FirstResponderKit.org where you can download new\n\tversions for free, watch training videos on how it works, get more info on\n\tthe findings, contribute your own code, and more.\n\n\tUnknown limitations of this version:\n\t - None.  (If we knew them, they would be known. Duh.)\n\n     Changes - for the full list of improvements and fixes in this version, see:\n     https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/\n\n\n    MIT License\n\t   \n\tAll other copyright for sp_BlitzLock are held by Brent Ozar Unlimited, 2017.\n\n\tCopyright (c) 2017 Brent Ozar Unlimited\n\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\tof this software and associated documentation files (the \"Software\"), to deal\n\tin the Software without restriction, including without limitation the rights\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\tcopies of the Software, and to permit persons to whom the Software is\n\tfurnished to do so, subject to the following conditions:\n\n\tThe above copyright notice and this permission notice shall be included in all\n\tcopies or substantial portions of the Software.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\tSOFTWARE.\n\n\t*/';\n\n\n        DECLARE @ProductVersion NVARCHAR(128);\n        DECLARE @ProductVersionMajor FLOAT;\n        DECLARE @ProductVersionMinor INT;\n\n        SET @ProductVersion = CAST(SERVERPROPERTY('ProductVersion') AS NVARCHAR(128));\n\n        SELECT @ProductVersionMajor = SUBSTRING(@ProductVersion, 1, CHARINDEX('.', @ProductVersion) + 1),\n               @ProductVersionMinor = PARSENAME(CONVERT(VARCHAR(32), @ProductVersion), 2);\n\n\n        IF @ProductVersionMajor < 11.0\n            BEGIN\n                RAISERROR(\n                    'sp_BlitzLock will throw a bunch of angry errors on versions of SQL Server earlier than 2012.',\n                    0,\n                    1) WITH NOWAIT;\n                RETURN;\n            END;\n\n\t\tIF @Top IS NULL\n\t\t\tSET @Top = 2147483647;\n\n\t\tIF @StartDate IS NULL\n\t\t\tSET @StartDate = '19000101';\n\n\t\tIF @EndDate IS NULL\n\t\t\tSET @EndDate = '99991231';\n\t\t\n\n        IF OBJECT_ID('tempdb..#deadlock_data') IS NOT NULL\n            DROP TABLE #deadlock_data;\n\n        IF OBJECT_ID('tempdb..#deadlock_process') IS NOT NULL\n            DROP TABLE #deadlock_process;\n\n        IF OBJECT_ID('tempdb..#deadlock_stack') IS NOT NULL\n            DROP TABLE #deadlock_stack;\n\n        IF OBJECT_ID('tempdb..#deadlock_resource') IS NOT NULL\n            DROP TABLE #deadlock_resource;\n\n        IF OBJECT_ID('tempdb..#deadlock_owner_waiter') IS NOT NULL\n            DROP TABLE #deadlock_owner_waiter;\n\n        IF OBJECT_ID('tempdb..#deadlock_findings') IS NOT NULL\n            DROP TABLE #deadlock_findings;\n\n\t\tCREATE TABLE #deadlock_findings\n\t\t(\n\t\t    id INT IDENTITY(1, 1) PRIMARY KEY CLUSTERED,\n\t\t    check_id INT NOT NULL,\n\t\t\tdatabase_name NVARCHAR(256),\n\t\t\tobject_name NVARCHAR(1000),\n\t\t\tfinding_group NVARCHAR(100),\n\t\t\tfinding NVARCHAR(4000)\n\t\t);\n\n\n\t\t/*Grab the initial set of XML to parse*/\n        WITH xml\n        AS ( SELECT CONVERT(XML, event_data) AS deadlock_xml\n             FROM   sys.fn_xe_file_target_read_file(@EventSessionPath, NULL, NULL, NULL) )\n        SELECT TOP ( @Top ) xml.deadlock_xml\n        INTO   #deadlock_data\n        FROM   xml\n        WHERE  xml.deadlock_xml.value('(/event/@name)[1]', 'VARCHAR(256)') = 'xml_deadlock_report'\n               AND xml.deadlock_xml.value('(/event/@timestamp)[1]', 'datetime') >= @StartDate\n               AND xml.deadlock_xml.value('(/event/@timestamp)[1]', 'datetime') < @EndDate\n\t\t\t   ORDER BY xml.deadlock_xml.value('(/event/@timestamp)[1]', 'datetime')\n\t\t\t   OPTION ( RECOMPILE );\n\n\t\t\n\n\t\t/*Parse process and input buffer XML*/\n        SELECT      dd.deadlock_xml.value('(event/@timestamp)[1]', 'DATETIME2') AS event_date,\n\t\t\t\t\tdd.deadlock_xml.value('(//deadlock/victim-list/victimProcess/@id)[1]', 'NVARCHAR(256)') AS victim_id,\n\t\t\t\t\tca.dp.value('@id', 'NVARCHAR(256)') AS id,\n                    ca.dp.value('@currentdb', 'BIGINT') AS database_id,\n                    ca.dp.value('@logused', 'BIGINT') AS log_used,\n                    ca.dp.value('@waitresource', 'NVARCHAR(256)') AS wait_resource,\n                    ca.dp.value('@waittime', 'BIGINT') AS wait_time,\n                    ca.dp.value('@transactionname', 'NVARCHAR(256)') AS transaction_name,\n                    ca.dp.value('@lasttranstarted', 'DATETIME2(7)') AS last_tran_started,\n                    ca.dp.value('@lastbatchstarted', 'DATETIME2(7)') AS last_batch_started,\n                    ca.dp.value('@lastbatchcompleted', 'DATETIME2(7)') AS last_batch_completed,\n                    ca.dp.value('@lockMode', 'NVARCHAR(256)') AS lock_mode,\n                    ca.dp.value('@trancount', 'BIGINT') AS transaction_count,\n                    ca.dp.value('@clientapp', 'NVARCHAR(256)') AS client_app,\n                    ca.dp.value('@hostname', 'NVARCHAR(256)') AS host_name,\n                    ca.dp.value('@loginname', 'NVARCHAR(256)') AS login_name,\n                    ca.dp.value('@isolationlevel', 'NVARCHAR(256)') AS isolation_level,\n                    ca2.ib.query('.') AS input_buffer,\n                    ca.dp.query('.') AS process_xml\n        INTO        #deadlock_process\n        FROM        #deadlock_data AS dd\n        CROSS APPLY dd.deadlock_xml.nodes('//deadlock/process-list/process') AS ca(dp)\n        CROSS APPLY dd.deadlock_xml.nodes('//deadlock/process-list/process/inputbuf') AS ca2(ib)\n\t\tWHERE (ca.dp.value('@currentdb', 'BIGINT') = DB_ID(@DatabaseName) OR @DatabaseName IS NULL)\n\t\tAND   (ca.dp.value('@clientapp', 'NVARCHAR(256)') = @AppName OR @AppName IS NULL)\n\t\tAND   (ca.dp.value('@hostname', 'NVARCHAR(256)') = @HostName OR @HostName IS NULL)\n\t\tAND   (ca.dp.value('@loginname', 'NVARCHAR(256)') = @LoginName OR @LoginName IS NULL)\n\t\tOPTION ( RECOMPILE );\n\n\n\n\t\t/*Parse execution stack XML*/\n        SELECT      dp.id,\n\t\t\t\t\tdp.event_date,\n                    ca.dp.value('@procname', 'NVARCHAR(1000)') AS proc_name,\n                    ca.dp.value('@sqlhandle', 'NVARCHAR(128)') AS sql_handle\n        INTO        #deadlock_stack\n        FROM        #deadlock_process AS dp\n        CROSS APPLY dp.process_xml.nodes('//executionStack/frame') AS ca(dp)\n\t\tWHERE (ca.dp.value('@procname', 'NVARCHAR(256)') = @StoredProcName OR @StoredProcName IS NULL)\n\t\tOPTION ( RECOMPILE );\n\n\n\n\t\t/*Grab the full resource list*/\n        SELECT      dd.deadlock_xml.value('(event/@timestamp)[1]', 'DATETIME2') AS event_date,\n\t\t\t\t\tdd.deadlock_xml.value('(//deadlock/victim-list/victimProcess/@id)[1]', 'NVARCHAR(256)') AS victim_id,\n\t\t\t\t\tca.dp.query('.') AS resource_xml\n        INTO        #deadlock_resource\n        FROM        #deadlock_data AS dd\n        CROSS APPLY dd.deadlock_xml.nodes('//deadlock/resource-list') AS ca(dp)\n\t\tOPTION ( RECOMPILE );\n\n\n\t\t/*This parses object locks*/\n        SELECT      dr.event_date,\n\t\t\t\t\tca.dr.value('@dbid', 'BIGINT') AS database_id,\n                    ca.dr.value('@objectname', 'NVARCHAR(1000)') AS object_name,\n                    ca.dr.value('@mode', 'NVARCHAR(256)') AS lock_mode,\n                    w.l.value('@id', 'NVARCHAR(256)') AS waiter_id,\n                    w.l.value('@mode', 'NVARCHAR(256)') AS waiter_mode,\n                    o.l.value('@id', 'NVARCHAR(256)') AS owner_id,\n                    o.l.value('@mode', 'NVARCHAR(256)') AS owner_mode\n        INTO        #deadlock_owner_waiter\n        FROM        #deadlock_resource AS dr\n        CROSS APPLY dr.resource_xml.nodes('//resource-list/objectlock') AS ca(dr)\n        CROSS APPLY ca.dr.nodes('//waiter-list/waiter') AS w(l)\n        CROSS APPLY ca.dr.nodes('//owner-list/owner') AS o(l)\n\t\tWHERE (ca.dr.value('@objectname', 'NVARCHAR(1000)') = @ObjectName OR @ObjectName IS NULL)\n\t\tOPTION ( RECOMPILE );\n\n\n\n\t\t/*This parses page locks*/\n        INSERT #deadlock_owner_waiter\n        SELECT      dr.event_date,\n\t\t\t\t\tca.dr.value('@dbid', 'BIGINT') AS database_id,\n                    ca.dr.value('@objectname', 'NVARCHAR(256)') AS object_name,\n                    ca.dr.value('@mode', 'NVARCHAR(256)') AS lock_mode,\n                    w.l.value('@id', 'NVARCHAR(256)') AS waiter_id,\n                    w.l.value('@mode', 'NVARCHAR(256)') AS waiter_mode,\n                    o.l.value('@id', 'NVARCHAR(256)') AS owner_id,\n                    o.l.value('@mode', 'NVARCHAR(256)') AS owner_mode\n        FROM        #deadlock_resource AS dr\n        CROSS APPLY dr.resource_xml.nodes('//resource-list/pagelock') AS ca(dr)\n        CROSS APPLY ca.dr.nodes('//waiter-list/waiter') AS w(l)\n        CROSS APPLY ca.dr.nodes('//owner-list/owner') AS o(l)\n\t\tOPTION ( RECOMPILE );\n\n\n\t\t/*This parses key locks*/\n        INSERT #deadlock_owner_waiter\n        SELECT      dr.event_date,     \n\t\t\t\t\tca.dr.value('@dbid', 'BIGINT') AS database_id,\n                    ca.dr.value('@objectname', 'NVARCHAR(256)') AS object_name,\n                    ca.dr.value('@mode', 'NVARCHAR(256)') AS lock_mode,\n                    w.l.value('@id', 'NVARCHAR(256)') AS waiter_id,\n                    w.l.value('@mode', 'NVARCHAR(256)') AS waiter_mode,\n                    o.l.value('@id', 'NVARCHAR(256)') AS owner_id,\n                    o.l.value('@mode', 'NVARCHAR(256)') AS owner_mode\n        FROM        #deadlock_resource AS dr\n        CROSS APPLY dr.resource_xml.nodes('//resource-list/keylock') AS ca(dr)\n        CROSS APPLY ca.dr.nodes('//waiter-list/waiter') AS w(l)\n        CROSS APPLY ca.dr.nodes('//owner-list/owner') AS o(l)\n\t\tOPTION ( RECOMPILE );\n\n\n\t\t/*This parses rid locks*/\n        INSERT #deadlock_owner_waiter\n        SELECT      dr.event_date,\n\t\t\t\t\tca.dr.value('@dbid', 'BIGINT') AS database_id,\n                    ca.dr.value('@objectname', 'NVARCHAR(256)') AS object_name,\n                    ca.dr.value('@mode', 'NVARCHAR(256)') AS lock_mode,\n                    w.l.value('@id', 'NVARCHAR(256)') AS waiter_id,\n                    w.l.value('@mode', 'NVARCHAR(256)') AS waiter_mode,\n                    o.l.value('@id', 'NVARCHAR(256)') AS owner_id,\n                    o.l.value('@mode', 'NVARCHAR(256)') AS owner_mode\n        FROM        #deadlock_resource AS dr\n        CROSS APPLY dr.resource_xml.nodes('//resource-list/ridlock') AS ca(dr)\n        CROSS APPLY ca.dr.nodes('//waiter-list/waiter') AS w(l)\n        CROSS APPLY ca.dr.nodes('//owner-list/owner') AS o(l)\n\t\tOPTION ( RECOMPILE );\n\n\t\t/*Parse parallel deadlocks*/\n        SELECT      dr.event_date,\n\t\t\t\t\tca.dr.value('@id', 'NVARCHAR(256)') AS id,\n                    ca.dr.value('@WaitType', 'NVARCHAR(256)') AS wait_type,\n                    ca.dr.value('@nodeId', 'BIGINT') AS node_id,\n                    w.l.value('@id', 'NVARCHAR(256)') AS waiter_id,\n                    o.l.value('@id', 'NVARCHAR(256)') AS owner_id\n        INTO #deadlock_resource_parallel\n\t\tFROM        #deadlock_resource AS dr\n        CROSS APPLY dr.resource_xml.nodes('//resource-list/exchangeEvent') AS ca(dr)\n        CROSS APPLY ca.dr.nodes('//waiter-list/waiter') AS w(l)\n        CROSS APPLY ca.dr.nodes('//owner-list/owner') AS o(l)\n\t\tOPTION ( RECOMPILE );\n\n\t\t/*Get rid of nonsense*/\n\t\tDELETE dow\n\t\tFROM #deadlock_owner_waiter AS dow\n\t\tWHERE dow.owner_id = dow.waiter_id\n\t\tOPTION ( RECOMPILE );\n\n\t\t/*Add some nonsense*/\n\t\tALTER TABLE #deadlock_process\n\t\tADD waiter_mode\tNVARCHAR(256),\n\t\t\towner_mode NVARCHAR(256),\n\t\t\tis_victim AS CONVERT(BIT, CASE WHEN id = victim_id THEN 1 ELSE 0 END);\n\n\t\t/*Update some nonsense*/\n\t\tUPDATE dp\n\t\tSET dp.owner_mode = dow.owner_mode\n\t\tFROM #deadlock_process AS dp\n\t\tJOIN #deadlock_owner_waiter AS dow\n\t\tON dp.id = dow.owner_id\n\t\tAND dp.event_date = dow.event_date\n\t\tWHERE dp.is_victim = 0\n\t\tOPTION ( RECOMPILE );\n\n\t\tUPDATE dp\n\t\tSET dp.waiter_mode = dow.waiter_mode\n\t\tFROM #deadlock_process AS dp\n\t\tJOIN #deadlock_owner_waiter AS dow\n\t\tON dp.victim_id = dow.waiter_id\n\t\tAND dp.event_date = dow.event_date\n\t\tWHERE dp.is_victim = 1\n\t\tOPTION ( RECOMPILE );\n\n\n\t\t/*Begin checks based on parsed values*/\n\n\t\t/*Check 1 is deadlocks by database*/\n\t\tINSERT #deadlock_findings ( check_id, database_name, object_name, finding_group, finding ) \t\n\t\tSELECT 1 AS check_id, \n\t\t\t   DB_NAME(dp.database_id) AS database_name, \n\t\t\t   '-' AS object_name,\n\t\t\t   'Total database locks' AS finding_group,\n\t\t\t   'This database had ' \n\t\t\t\t+ CONVERT(NVARCHAR(20), COUNT_BIG(DISTINCT dp.event_date)) \n\t\t\t\t+ ' deadlocks.'\n        FROM   #deadlock_process AS dp\n\t\tWHERE 1 = 1\n\t\tAND (DB_NAME(dp.database_id) = @DatabaseName OR @DatabaseName IS NULL)\n\t\tAND (dp.event_date >= @StartDate OR @StartDate IS NULL)\n\t\tAND (dp.event_date < @EndDate OR @EndDate IS NULL)\n\t\tAND (dp.client_app = @AppName OR @AppName IS NULL)\n\t\tAND (dp.host_name = @HostName OR @HostName IS NULL)\n\t\tAND (dp.login_name = @LoginName OR @LoginName IS NULL)\n\t\tGROUP BY DB_NAME(dp.database_id)\n\t\tOPTION ( RECOMPILE );\n\n\t\t/*Check 2 is deadlocks by object*/\n\n\t\tINSERT #deadlock_findings ( check_id, database_name, object_name, finding_group, finding ) \t\n\t\tSELECT 2 AS check_id, \n\t\t\t   DB_NAME(dow.database_id) AS database_name, \n\t\t\t   dow.object_name AS object_name,\n\t\t\t   'Total object deadlocks' AS finding_group,\n\t\t\t   'This object was involved in ' \n\t\t\t\t+ CONVERT(NVARCHAR(20), COUNT_BIG(DISTINCT dow.object_name))\n\t\t\t\t+ ' deadlock(s).'\n        FROM   #deadlock_owner_waiter AS dow\n\t\tWHERE 1 = 1\n\t\tAND (DB_NAME(dow.database_id) = @DatabaseName OR @DatabaseName IS NULL)\n\t\tAND (dow.event_date >= @StartDate OR @StartDate IS NULL)\n\t\tAND (dow.event_date < @EndDate OR @EndDate IS NULL)\n\t\tAND (dow.object_name = @ObjectName OR @ObjectName IS NULL)\n\t\tGROUP BY DB_NAME(dow.database_id), dow.object_name\n\t\tOPTION ( RECOMPILE );\n\t\t\n\n\t\t/*Check 3 looks for Serializable locking*/\n\t\tINSERT #deadlock_findings ( check_id, database_name, object_name, finding_group, finding ) \n\t\tSELECT 3 AS check_id,\n\t\t\t   DB_NAME(dp.database_id) AS database_name,\n\t\t\t   '-' AS object_name,\n\t\t\t   'Serializable locking' AS finding_group,\n\t\t\t   'This database has had ' + \n\t\t\t   CONVERT(NVARCHAR(20), COUNT_BIG(*)) +\n\t\t\t   ' instances of serializable deadlocks.'\n\t\t\t   AS finding\n\t\tFROM #deadlock_process AS dp\n\t\tWHERE dp.isolation_level LIKE 'serializable%'\n\t\tAND (DB_NAME(dp.database_id) = @DatabaseName OR @DatabaseName IS NULL)\n\t\tAND (dp.event_date >= @StartDate OR @StartDate IS NULL)\n\t\tAND (dp.event_date < @EndDate OR @EndDate IS NULL)\n\t\tAND (dp.client_app = @AppName OR @AppName IS NULL)\n\t\tAND (dp.host_name = @HostName OR @HostName IS NULL)\n\t\tAND (dp.login_name = @LoginName OR @LoginName IS NULL)\n\t\tGROUP BY DB_NAME(dp.database_id)\n\t\tOPTION ( RECOMPILE );\n\n\n\t\t/*Check 4 looks for Repeatable Read locking*/\n\t\tINSERT #deadlock_findings ( check_id, database_name, object_name, finding_group, finding ) \n\t\tSELECT 4 AS check_id,\n\t\t\t   DB_NAME(dp.database_id) AS database_name,\n\t\t\t   '-' AS object_name,\n\t\t\t   'Repeatable Read locking' AS finding_group,\n\t\t\t   'This database has had ' + \n\t\t\t   CONVERT(NVARCHAR(20), COUNT_BIG(*)) +\n\t\t\t   ' instances of repeatable read deadlocks.'\n\t\t\t   AS finding\n\t\tFROM #deadlock_process AS dp\n\t\tWHERE dp.isolation_level LIKE 'repeatable read%'\n\t\tAND (DB_NAME(dp.database_id) = @DatabaseName OR @DatabaseName IS NULL)\n\t\tAND (dp.event_date >= @StartDate OR @StartDate IS NULL)\n\t\tAND (dp.event_date < @EndDate OR @EndDate IS NULL)\n\t\tAND (dp.client_app = @AppName OR @AppName IS NULL)\n\t\tAND (dp.host_name = @HostName OR @HostName IS NULL)\n\t\tAND (dp.login_name = @LoginName OR @LoginName IS NULL)\n\t\tGROUP BY DB_NAME(dp.database_id)\n\t\tOPTION ( RECOMPILE );\n\n\n\t\t/*Check 5 breaks down app, host, and login information*/\n\t\tINSERT #deadlock_findings ( check_id, database_name, object_name, finding_group, finding ) \n\t\tSELECT 5 AS check_id,\n\t\t\t   DB_NAME(dp.database_id) AS database_name,\n\t\t\t   '-' AS object_name,\n\t\t\t   'Login, App, and Host locking' AS finding_group,\n\t\t\t   'This database has had ' + \n\t\t\t   CONVERT(NVARCHAR(20), COUNT_BIG(DISTINCT dp.event_date)) +\n\t\t\t   ' instances of deadlocks involving the login ' +\n\t\t\t   ISNULL(dp.login_name, 'UNKNOWN') + \n\t\t\t   ' from the application ' + \n\t\t\t   ISNULL(dp.client_app, 'UNKNOWN') + \n\t\t\t   ' on host ' + \n\t\t\t   ISNULL(dp.host_name, 'UNKNOWN')\n\t\t\t   AS finding\n\t\tFROM #deadlock_process AS dp\n\t\tWHERE 1 = 1\n\t\tAND (DB_NAME(dp.database_id) = @DatabaseName OR @DatabaseName IS NULL)\n\t\tAND (dp.event_date >= @StartDate OR @StartDate IS NULL)\n\t\tAND (dp.event_date < @EndDate OR @EndDate IS NULL)\n\t\tAND (dp.client_app = @AppName OR @AppName IS NULL)\n\t\tAND (dp.host_name = @HostName OR @HostName IS NULL)\n\t\tAND (dp.login_name = @LoginName OR @LoginName IS NULL)\n\t\tGROUP BY DB_NAME(dp.database_id), dp.login_name, dp.client_app, dp.host_name\n\t\tOPTION ( RECOMPILE );\n\n\n\t\t/*Check 6 breaks down the types of locks (object, page, key, etc.)*/\n\t\tWITH lock_types AS (\n\t\t\t\tSELECT DB_NAME(dp.database_id) AS database_name,\n\t\t\t\t\t   dow.object_name, \n\t\t\t\t\t   SUBSTRING(dp.wait_resource, 1, CHARINDEX(':', dp.wait_resource) -1) AS lock,\n\t\t\t\t\t   CONVERT(NVARCHAR(20), COUNT_BIG(DISTINCT dp.id)) AS lock_count\n\t\t\t\tFROM #deadlock_process AS dp \n\t\t\t\tJOIN #deadlock_owner_waiter AS dow\n\t\t\t\tON dp.id = dow.owner_id\n\t\t\t\tAND dp.event_date = dow.event_date\n\t\t\t\tWHERE 1 = 1\n\t\t\t\tAND (DB_NAME(dp.database_id) = @DatabaseName OR @DatabaseName IS NULL)\n\t\t\t\tAND (dp.event_date >= @StartDate OR @StartDate IS NULL)\n\t\t\t\tAND (dp.event_date < @EndDate OR @EndDate IS NULL)\n\t\t\t\tAND (dp.client_app = @AppName OR @AppName IS NULL)\n\t\t\t\tAND (dp.host_name = @HostName OR @HostName IS NULL)\n\t\t\t\tAND (dp.login_name = @LoginName OR @LoginName IS NULL)\n\t\t\t\tAND (dow.object_name = @ObjectName OR @ObjectName IS NULL)\n\t\t\t\tGROUP BY DB_NAME(dp.database_id), SUBSTRING(dp.wait_resource, 1, CHARINDEX(':', dp.wait_resource) - 1), dow.object_name\n\t\t\t\t\t\t\t)\t\n\t\tINSERT #deadlock_findings ( check_id, database_name, object_name, finding_group, finding ) \n\t\tSELECT DISTINCT 6 AS check_id,\n\t\t\t   lt.database_name,\n\t\t\t   lt.object_name,\n\t\t\t   'Types of locks by object' AS finding_group,\n\t\t\t   'This object has had ' +\n\t\t\t   STUFF((SELECT DISTINCT N', ' + lt2.lock_count + ' ' + lt2.lock\n\t\t\t\t\t\t\t\t\tFROM lock_types AS lt2\n\t\t\t\t\t\t\t\t\tWHERE lt2.database_name = lt.database_name\n\t\t\t\t\t\t\t\t\tAND lt2.object_name = lt.object_name\n\t\t\t\t\t\t\t\t\tFOR XML PATH(N''), TYPE).value(N'.[1]', N'NVARCHAR(MAX)'), 1, 1, N'')\n\t\t\t   + ' locks'\n\t\tFROM lock_types AS lt\n\t\tOPTION ( RECOMPILE );\n\n\n\t\t/*Check 7 gives you more info queries for sp_BlitzCache & BlitzQueryStore*/\n\t\tWITH deadlock_stack AS (\n\t\t\tSELECT  DISTINCT\n\t\t\t\t\tds.id,\n\t\t\t\t\tds.proc_name,\n\t\t\t\t\tds.event_date,\n\t\t\t\t\tPARSENAME(ds.proc_name, 3) AS database_name,\n\t\t\t\t\tPARSENAME(ds.proc_name, 2) AS schema_name,\n\t\t\t\t\tPARSENAME(ds.proc_name, 1) AS proc_only_name,\n\t\t\t\t\t'''' + STUFF((SELECT DISTINCT N',' + ds2.sql_handle\n\t\t\t\t\t\t\t\t\tFROM #deadlock_stack AS ds2\n\t\t\t\t\t\t\t\t\tWHERE ds2.id = ds.id\n\t\t\t\t\t\t\t\t\tAND ds2.event_date = ds.event_date\n\t\t\t\t\tFOR XML PATH(N''), TYPE).value(N'.[1]', N'NVARCHAR(MAX)'), 1, 1, N'') + '''' AS sql_handle_csv\n\t\t\tFROM #deadlock_stack AS ds\n\t\t\tGROUP BY PARSENAME(ds.proc_name, 3),\n                     PARSENAME(ds.proc_name, 2),\n                     PARSENAME(ds.proc_name, 1),\n                     ds.id,\n                     ds.proc_name,\n                     ds.event_date\n\t\t\t\t\t)\n\t\tINSERT #deadlock_findings ( check_id, database_name, object_name, finding_group, finding ) \n\t\tSELECT DISTINCT 7 AS check_id,\n\t\t\t   DB_NAME(dow.database_id) AS database_name,\n\t\t\t   ds.proc_name AS object_name,\n\t\t\t   'More Info - Query' AS finding_group,\n\t\t\t   'EXEC sp_BlitzCache ' +\n\t\t\t\t\tCASE WHEN ds.proc_name = 'adhoc'\n\t\t\t\t\t\t THEN ' @OnlySqlHandles = ' + sql_handle_csv\n\t\t\t\t\t\t ELSE '@StoredProcName = ' + \n\t\t\t\t\t\t       QUOTENAME(ds.proc_only_name, '''')\n\t\t\t\t\tEND +\n\t\t\t\t\t';' AS finding\n\t\tFROM deadlock_stack AS ds\n\t\tJOIN #deadlock_owner_waiter AS dow\n\t\tON dow.owner_id = ds.id\n\t\tAND dow.event_date = ds.event_date\n\t\tWHERE 1 = 1\n\t\tAND (DB_NAME(dow.database_id) = @DatabaseName OR @DatabaseName IS NULL)\n\t\tAND (dow.event_date >= @StartDate OR @StartDate IS NULL)\n\t\tAND (dow.event_date < @EndDate OR @EndDate IS NULL)\n\t\tAND (dow.object_name = @StoredProcName OR @StoredProcName IS NULL)\n\t\tOPTION ( RECOMPILE );\n\n\t\tIF @ProductVersionMajor >= 13\n\t\tBEGIN\n\t\t\n\t\tWITH deadlock_stack AS (\n\t\t\tSELECT  DISTINCT\n\t\t\t\t\tds.id,\n\t\t\t\t\tds.sql_handle,\n\t\t\t\t\tds.proc_name,\n\t\t\t\t\tds.event_date,\n\t\t\t\t\tPARSENAME(ds.proc_name, 3) AS database_name,\n\t\t\t\t\tPARSENAME(ds.proc_name, 2) AS schema_name,\n\t\t\t\t\tPARSENAME(ds.proc_name, 1) AS proc_only_name\n\t\t\tFROM #deadlock_stack AS ds\t\n\t\t\t\t\t)\n\t\tINSERT #deadlock_findings ( check_id, database_name, object_name, finding_group, finding ) \n\t\tSELECT DISTINCT 7 AS check_id,\n\t\t\t   DB_NAME(dow.database_id) AS database_name,\n\t\t\t   ds.proc_name AS object_name,\n\t\t\t   'More Info - Query' AS finding_group,\n\t\t\t   'EXEC sp_BlitzQueryStore ' \n\t\t\t   + '@DatabaseName = ' \n\t\t\t   + QUOTENAME(ds.database_name, '''')\n\t\t\t   + ', '\n\t\t\t   + '@StoredProcName = ' \n\t\t\t   + QUOTENAME(ds.proc_only_name, '''')\n\t\t\t   + ';' AS finding\n\t\tFROM deadlock_stack AS ds\n\t\tJOIN #deadlock_owner_waiter AS dow\n\t\tON dow.owner_id = ds.id\n\t\tAND dow.event_date = ds.event_date\n\t\tWHERE ds.proc_name <> 'adhoc'\n\t\tAND (DB_NAME(dow.database_id) = @DatabaseName OR @DatabaseName IS NULL)\n\t\tAND (dow.event_date >= @StartDate OR @StartDate IS NULL)\n\t\tAND (dow.event_date < @EndDate OR @EndDate IS NULL)\n\t\tAND (dow.object_name = @StoredProcName OR @StoredProcName IS NULL)\n\t\tOPTION ( RECOMPILE );\n\t\tEND;\n\t\t\n\n\t\t/*Check 8 gives you stored proc deadlock counts*/\n\t\tINSERT #deadlock_findings ( check_id, database_name, object_name, finding_group, finding )\n\t\tSELECT 8 AS check_id,\n\t\t\t   DB_NAME(dp.database_id) AS database_name,\n\t\t\t   ds.proc_name, \n\t\t\t   'Stored Procedure Deadlocks',\n\t\t\t   'The stored procedure ' \n\t\t\t   + PARSENAME(ds.proc_name, 2)\n\t\t\t   + '.'\n\t\t\t   + PARSENAME(ds.proc_name, 1)\n\t\t\t   + ' has been involved in '\n\t\t\t   + CONVERT(NVARCHAR(10), COUNT_BIG(DISTINCT ds.id))\n\t\t\t   + ' deadlocks.'\n\t\tFROM #deadlock_stack AS ds\n\t\tJOIN #deadlock_process AS dp\n\t\tON dp.id = ds.id\n\t\tAND ds.event_date = dp.event_date\n\t\tWHERE ds.proc_name <> 'adhoc'\n\t\tAND (ds.proc_name = @StoredProcName OR @StoredProcName IS NULL)\n\t\tAND (DB_NAME(dp.database_id) = @DatabaseName OR @DatabaseName IS NULL)\n\t\tAND (dp.event_date >= @StartDate OR @StartDate IS NULL)\n\t\tAND (dp.event_date < @EndDate OR @EndDate IS NULL)\n\t\tAND (dp.client_app = @AppName OR @AppName IS NULL)\n\t\tAND (dp.host_name = @HostName OR @HostName IS NULL)\n\t\tAND (dp.login_name = @LoginName OR @LoginName IS NULL)\n\t\tGROUP BY DB_NAME(dp.database_id), ds.proc_name\n\t\tOPTION(RECOMPILE);\n\n\n\t\t/*Check 9 gives you more info queries for sp_BlitzIndex */\n\t\tWITH bi AS (\n\t\t\t\tSELECT  DISTINCT\n\t\t\t\t\t\tdow.object_name,\n\t\t\t\t\t\tPARSENAME(dow.object_name, 3) AS database_name,\n\t\t\t\t\t\tPARSENAME(dow.object_name, 2) AS schema_name,\n\t\t\t\t\t\tPARSENAME(dow.object_name, 1) AS table_name\n\t\t\t\tFROM #deadlock_owner_waiter AS dow\n\t\t\t\tWHERE 1 = 1\n\t\t\t\tAND (DB_NAME(dow.database_id) = @DatabaseName OR @DatabaseName IS NULL)\n\t\t\t\tAND (dow.event_date >= @StartDate OR @StartDate IS NULL)\n\t\t\t\tAND (dow.event_date < @EndDate OR @EndDate IS NULL)\n\t\t\t\tAND (dow.object_name = @ObjectName OR @ObjectName IS NULL)\n\t\t\t\t\t)\n\t\tINSERT #deadlock_findings ( check_id, database_name, object_name, finding_group, finding ) \n\t\tSELECT 9 AS check_id,\t\n\t\t\t\tbi.database_name,\n\t\t\t\tbi.schema_name + '.' + bi.table_name,\n\t\t\t\t'More Info - Table' AS finding_group,\n\t\t\t\t'EXEC sp_BlitzIndex ' + \n\t\t\t\t'@DatabaseName = ' + QUOTENAME(bi.database_name, '''') + \n\t\t\t\t', @SchemaName = ' + QUOTENAME(bi.schema_name, '''') + \n\t\t\t\t', @TableName = ' + QUOTENAME(bi.table_name, '''') +\n\t\t\t\t';'\t AS finding\n\t\tFROM bi\n\t\tOPTION ( RECOMPILE );\n\n\t\t/*Check 10 gets total deadlock wait time per object*/\n\t\tWITH chopsuey AS (\n\t\t\t\tSELECT DISTINCT\n\t\t\t\tPARSENAME(dow.object_name, 3) AS database_name,\n\t\t\t\tdow.object_name,\n\t\t\t\tCONVERT(VARCHAR(10), (SUM(DISTINCT dp.wait_time) / 1000) / 86400) AS wait_days,\n\t\t\t\tCONVERT(VARCHAR(20), DATEADD(SECOND, (SUM(DISTINCT dp.wait_time) / 1000), 0), 108) AS wait_time_hms\n\t\t\t\tFROM #deadlock_owner_waiter AS dow\n\t\t\t\tJOIN #deadlock_process AS dp\n\t\t\t\tON (dp.id = dow.owner_id OR dp.victim_id = dow.waiter_id)\n\t\t\t\t\tAND dp.event_date = dow.event_date\n\t\t\t\tWHERE 1 = 1\n\t\t\t\tAND (DB_NAME(dow.database_id) = @DatabaseName OR @DatabaseName IS NULL)\n\t\t\t\tAND (dow.event_date >= @StartDate OR @StartDate IS NULL)\n\t\t\t\tAND (dow.event_date < @EndDate OR @EndDate IS NULL)\n\t\t\t\tAND (dow.object_name = @ObjectName OR @ObjectName IS NULL)\n\t\t\t\tAND (dp.client_app = @AppName OR @AppName IS NULL)\n\t\t\t\tAND (dp.host_name = @HostName OR @HostName IS NULL)\n\t\t\t\tAND (dp.login_name = @LoginName OR @LoginName IS NULL)\n\t\t\t\tGROUP BY PARSENAME(dow.object_name, 3), dow.object_name\n\t\t\t\t\t\t)\n\t\t\t\tINSERT #deadlock_findings ( check_id, database_name, object_name, finding_group, finding ) \n\t\t\t\tSELECT 10 AS check_id,\n\t\t\t\t\t\tcs.database_name,\n\t\t\t\t\t\tcs.object_name,\n\t\t\t\t\t\t'Total object deadlock wait time' AS finding_group,\n\t\t\t\t\t\t'This object has had ' \n\t\t\t\t\t\t+ CONVERT(VARCHAR(10), cs.wait_days) \n\t\t\t\t\t\t+ ':' + CONVERT(VARCHAR(20), cs.wait_time_hms, 108)\n\t\t\t\t\t\t+ ' [d/h/m/s] of deadlock wait time.' AS finding\n\t\t\t\tFROM chopsuey AS cs\n\t\t\t\tWHERE cs.object_name IS NOT NULL\n\t\t\t\tOPTION ( RECOMPILE );\n\n\t\t/*Check 11 gets total deadlock wait time per database*/\n\t\tWITH wait_time AS (\n\t\t\t\t\t\tSELECT DB_NAME(dp.database_id) AS database_name,\n\t\t\t\t\t\t\t   SUM(CONVERT(BIGINT, dp.wait_time)) AS total_wait_time_ms\n\t\t\t\t\t\tFROM #deadlock_process AS dp\n\t\t\t\t\t\tWHERE 1 = 1\n\t\t\t\t\t\tAND (DB_NAME(dp.database_id) = @DatabaseName OR @DatabaseName IS NULL)\n\t\t\t\t\t\tAND (dp.event_date >= @StartDate OR @StartDate IS NULL)\n\t\t\t\t\t\tAND (dp.event_date < @EndDate OR @EndDate IS NULL)\n\t\t\t\t\t\tAND (dp.client_app = @AppName OR @AppName IS NULL)\n\t\t\t\t\t\tAND (dp.host_name = @HostName OR @HostName IS NULL)\n\t\t\t\t\t\tAND (dp.login_name = @LoginName OR @LoginName IS NULL)\n\t\t\t\t\t\tGROUP BY DB_NAME(dp.database_id)\n\t\t\t\t\t\t  )\n\t\tINSERT #deadlock_findings ( check_id, database_name, object_name, finding_group, finding ) \n\t\tSELECT 11 AS check_id,\n\t\t\t\twt.database_name,\n\t\t\t\t'-' AS object_name,\n\t\t\t\t'Total database deadlock wait time' AS finding_group,\n\t\t\t\t'This database has had ' \n\t\t\t\t+ CONVERT(VARCHAR(10), (SUM(DISTINCT wt.total_wait_time_ms) / 1000) / 86400) \n\t\t\t\t+ ':' + CONVERT(VARCHAR(20), DATEADD(SECOND, (SUM(DISTINCT wt.total_wait_time_ms) / 1000), 0), 108)\n\t\t\t\t+ ' [d/h/m/s] of deadlock wait time.'\n\t\tFROM wait_time AS wt\n\t\tGROUP BY wt.database_name\n\t\tOPTION ( RECOMPILE );\n\n\n\t\t/*Thank you goodnight*/\n\t\tINSERT #deadlock_findings ( check_id, database_name, object_name, finding_group, finding ) \n\t\tVALUES ( -1, \n\t\t\t\t N'sp_BlitzLock ' + CAST(CONVERT(DATETIME, @VersionDate, 102) AS VARCHAR(100)), \n\t\t\t\t N'SQL Server First Responder Kit', \n\t\t\t\t N'http://FirstResponderKit.org/', \n\t\t\t\t N'To get help or add your own contributions, join us at http://FirstResponderKit.org.');\n\n\t\t\n\n\n\t\t/*Results*/\n\t\tWITH deadlocks\n\t\tAS ( SELECT N'Regular Deadlock' AS deadlock_type,\n\t\t\t\t\tdp.event_date,\n\t\t            dp.id,\n\t\t\t\t\tdp.victim_id,\n\t\t            dp.database_id,\n\t\t            dp.log_used,\n\t\t            dp.wait_resource,\n\t\t            CONVERT(\n\t\t                XML,\n\t\t                STUFF((   SELECT DISTINCT NCHAR(10) \n\t\t\t\t\t\t\t\t\t\t+ N' <object>' \n\t\t\t\t\t\t\t\t\t\t+ ISNULL(c.object_name, N'') \n\t\t\t\t\t\t\t\t\t\t+ N'</object> ' AS object_name\n\t\t                        FROM   #deadlock_owner_waiter AS c\n\t\t                        WHERE  (dp.id = c.owner_id\n\t\t\t\t\t\t\t\tOR\t\tdp.victim_id = c.waiter_id)\n\t\t\t\t\t\t\t\tAND\t    dp.event_date = c.event_date\n\t\t                        FOR XML PATH(N''), TYPE ).value(N'.[1]', N'NVARCHAR(4000)'),\n\t\t                    1, 1, N'')) AS object_names,\n\t\t            dp.wait_time,\n\t\t            dp.transaction_name,\n\t\t            dp.last_tran_started,\n\t\t            dp.last_batch_started,\n\t\t            dp.last_batch_completed,\n\t\t            dp.lock_mode,\n\t\t            dp.transaction_count,\n\t\t            dp.client_app,\n\t\t            dp.host_name,\n\t\t            dp.login_name,\n\t\t            dp.isolation_level,\n\t\t            dp.process_xml.value('(//process/inputbuf/text())[1]', 'NVARCHAR(MAX)') AS inputbuf,\n\t\t            ROW_NUMBER() OVER ( PARTITION BY dp.event_date, dp.id ORDER BY dp.event_date ) AS dn,\n\t\t\t\t\tDENSE_RANK() OVER ( ORDER BY dp.event_date ) AS en,\n\t\t\t\t\tROW_NUMBER() OVER ( PARTITION BY dp.event_date ORDER BY dp.event_date ) -1 AS qn,\n\t\t\t\t\tdp.is_victim,\n\t\t\t\t\tISNULL(dp.owner_mode, '-') AS owner_mode,\n\t\t\t\t\tISNULL(dp.waiter_mode, '-') AS waiter_mode\n\t\t     FROM   #deadlock_process AS dp \n\t\t\t WHERE dp.victim_id IS NOT NULL\n\t\t\t \n\t\t\t UNION ALL \n\t\t\t \n\t\t\t SELECT N'Parallel Deadlock' AS deadlock_type,\n\t\t\t\t\tdp.event_date,\n\t\t            dp.id,\n\t\t\t\t\tdp.victim_id,\n\t\t            dp.database_id,\n\t\t            dp.log_used,\n\t\t            dp.wait_resource,\n\t\t            CONVERT(XML, N'parallel_deadlock') AS object_names,\n\t\t            dp.wait_time,\n\t\t            dp.transaction_name,\n\t\t            dp.last_tran_started,\n\t\t            dp.last_batch_started,\n\t\t            dp.last_batch_completed,\n\t\t            dp.lock_mode,\n\t\t            dp.transaction_count,\n\t\t            dp.client_app,\n\t\t            dp.host_name,\n\t\t            dp.login_name,\n\t\t            dp.isolation_level,\n\t\t            dp.process_xml.value('(//process/inputbuf/text())[1]', 'NVARCHAR(MAX)') AS inputbuf,\n\t\t            ROW_NUMBER() OVER ( PARTITION BY dp.event_date, dp.id ORDER BY dp.event_date ) AS dn,\n\t\t\t\t\tDENSE_RANK() OVER ( ORDER BY dp.event_date ) AS en,\n\t\t\t\t\tROW_NUMBER() OVER ( PARTITION BY dp.event_date ORDER BY dp.event_date ) -1 AS qn,\n\t\t\t\t\tNULL AS is_victim,\n\t\t\t\t\tcao.wait_type AS owner_mode,\n\t\t\t\t\tcaw.wait_type AS waiter_mode\n\t\t     FROM   #deadlock_process AS dp \n\t\t\t CROSS APPLY (SELECT TOP 1 * FROM  #deadlock_resource_parallel AS drp WHERE drp.owner_id = dp.id AND drp.wait_type = 'e_waitPipeNewRow' ORDER BY drp.event_date) AS cao\n\t\t\t CROSS APPLY (SELECT TOP 1 * FROM  #deadlock_resource_parallel AS drp WHERE drp.owner_id = dp.id AND drp.wait_type = 'e_waitPipeGetRow' ORDER BY drp.event_date) AS caw\n\t\t\t WHERE dp.victim_id IS NULL\n\t\t\t AND dp.login_name IS NOT NULL)\n\t\tSELECT d.deadlock_type,\n\t\t\t   d.event_date,\n\t\t\t   DB_NAME(d.database_id) AS database_name,\n\t\t       'Deadlock #' \n\t\t\t   + CONVERT(NVARCHAR(10), d.en)\n\t\t\t   + ', Query #' \n\t\t\t   + CASE WHEN d.qn = 0 THEN N'1' ELSE CONVERT(NVARCHAR(10), d.qn) END \n\t\t\t   + CASE WHEN d.is_victim = 1 THEN ' - VICTIM' ELSE '' END\n\t\t\t   AS deadlock_group, \n\t\t       CONVERT(XML, N'<inputbuf><![CDATA[' + d.inputbuf + N']]></inputbuf>') AS query,\n\t\t       d.object_names,\n\t\t       d.isolation_level,\n\t\t\t   d.owner_mode,\n\t\t\t   d.waiter_mode,\n\t\t       d.transaction_count,\n\t\t       d.login_name,\n\t\t       d.host_name,\n\t\t       d.client_app,\n\t\t       d.wait_time,\n\t\t\t   d.log_used,\n\t\t       d.last_tran_started,\n\t\t       d.last_batch_started,\n\t\t       d.last_batch_completed,\n\t\t       d.transaction_name\n\t\tFROM   deadlocks AS d\n\t\tWHERE  d.dn = 1\n\t\tAND (DB_NAME(d.database_id) = @DatabaseName OR @DatabaseName IS NULL)\n\t\tAND (d.event_date >= @StartDate OR @StartDate IS NULL)\n\t\tAND (d.event_date < @EndDate OR @EndDate IS NULL)\n\t\tAND (CONVERT(NVARCHAR(MAX), d.object_names) LIKE '%' + @ObjectName + '%' OR @ObjectName IS NULL)\n\t\tAND (d.client_app = @AppName OR @AppName IS NULL)\n\t\tAND (d.host_name = @HostName OR @HostName IS NULL)\n\t\tAND (d.login_name = @LoginName OR @LoginName IS NULL)\n\t\tORDER BY d.event_date, is_victim DESC\n\t\tOPTION ( RECOMPILE );\n\n\n\n\t\tSELECT df.check_id, df.database_name, df.object_name, df.finding_group, df.finding\n\t\tFROM #deadlock_findings AS df\n\t\tORDER BY df.check_id\n\t\tOPTION ( RECOMPILE );\n\n\n        IF @Debug = 1\n            BEGIN\n\n                SELECT '#deadlock_data' AS table_name, *\n                FROM   #deadlock_data AS dd\n\t\t\t\tOPTION ( RECOMPILE );\n\n                SELECT '#deadlock_resource' AS table_name, *\n                FROM   #deadlock_resource AS dr\n\t\t\t\tOPTION ( RECOMPILE );\n\n                SELECT '#deadlock_resource_parallel' AS table_name, *\n                FROM   #deadlock_resource_parallel AS drp\n\t\t\t\tOPTION ( RECOMPILE );\n\n                SELECT '#deadlock_owner_waiter' AS table_name, *\n                FROM   #deadlock_owner_waiter AS dow\n\t\t\t\tOPTION ( RECOMPILE );\n\n                SELECT '#deadlock_process' AS table_name, *\n                FROM   #deadlock_process AS dp\n\t\t\t\tOPTION ( RECOMPILE );\n\n                SELECT '#deadlock_stack' AS table_name, *\n                FROM   #deadlock_stack AS ds\n\t\t\t\tOPTION ( RECOMPILE );\n\t\t\t\t\n            END; -- End debug\n\n    END; --Final End\n\nGO\n\nIF OBJECT_ID('dbo.sp_BlitzWho') IS NULL\n\tEXEC ('CREATE PROCEDURE dbo.sp_BlitzWho AS RETURN 0;')\nGO\n\nALTER PROCEDURE dbo.sp_BlitzWho \n\t@Help TINYINT = 0 ,\n\t@ShowSleepingSPIDs TINYINT = 0,\n\t@ExpertMode BIT = 0,\n\t@Debug BIT = 0,\n\t@VersionDate DATETIME = NULL OUTPUT\nAS\nBEGIN\n\tSET NOCOUNT ON;\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\n\tDECLARE @Version VARCHAR(30);\n\tSET @Version = '6.2';\n\tSET @VersionDate = '20180201';\n\n\n\tIF @Help = 1\n\t\tPRINT '\nsp_BlitzWho from http://FirstResponderKit.org\n\nThis script gives you a snapshot of everything currently executing on your SQL Server.\n\nTo learn more, visit http://FirstResponderKit.org where you can download new\nversions for free, watch training videos on how it works, get more info on\nthe findings, contribute your own code, and more.\n\nKnown limitations of this version:\n - Only Microsoft-supported versions of SQL Server. Sorry, 2005 and 2000.\n   \nMIT License\n\nCopyright (c) 2017 Brent Ozar Unlimited\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n';\n\n/* Get the major and minor build numbers */\nDECLARE  @ProductVersion NVARCHAR(128)\n\t\t,@ProductVersionMajor DECIMAL(10,2)\n\t\t,@ProductVersionMinor DECIMAL(10,2)\n\t\t,@EnhanceFlag BIT = 0\n\t\t,@StringToExecute NVARCHAR(MAX)\n\t\t,@EnhanceSQL NVARCHAR(MAX) = \n\t\t\t\t\tN'query_stats.last_dop,\n\t\t\t\t\t  query_stats.min_dop,\n\t\t\t\t\t  query_stats.max_dop,\n\t\t\t\t\t  query_stats.last_grant_kb,\n\t\t\t\t\t  query_stats.min_grant_kb,\n\t\t\t\t\t  query_stats.max_grant_kb,\n\t\t\t\t\t  query_stats.last_used_grant_kb,\n\t\t\t\t\t  query_stats.min_used_grant_kb,\n\t\t\t\t\t  query_stats.max_used_grant_kb,\n\t\t\t\t\t  query_stats.last_ideal_grant_kb,\n\t\t\t\t\t  query_stats.min_ideal_grant_kb,\n\t\t\t\t\t  query_stats.max_ideal_grant_kb,\n\t\t\t\t\t  query_stats.last_reserved_threads,\n\t\t\t\t\t  query_stats.min_reserved_threads,\n\t\t\t\t\t  query_stats.max_reserved_threads,\n\t\t\t\t\t  query_stats.last_used_threads,\n\t\t\t\t\t  query_stats.min_used_threads,\n\t\t\t\t\t  query_stats.max_used_threads,'\n\t\t,@SessionWaits BIT = 0\n\t\t,@SessionWaitsSQL NVARCHAR(MAX) = \n\t\t\t\t\t\t N'LEFT JOIN ( SELECT DISTINCT\n\t\t\t\t\t\t\t\t\t\t\t\twait.session_id ,\n\t\t\t\t\t\t\t\t\t\t\t\t( SELECT    TOP  5 waitwait.wait_type + N'' (''\n\t\t\t\t\t\t\t\t\t\t\t\t           + CAST(SUM(waitwait.wait_time_ms) AS NVARCHAR(128))\n\t\t\t\t\t\t\t\t\t\t\t\t           + N'' ms), ''\n\t\t\t\t\t\t\t\t\t\t\t\t FROM      sys.dm_exec_session_wait_stats AS waitwait\n\t\t\t\t\t\t\t\t\t\t\t\t WHERE     waitwait.session_id = wait.session_id\n\t\t\t\t\t\t\t\t\t\t\t\t GROUP BY  waitwait.wait_type\n\t\t\t\t\t\t\t\t\t\t\t\t HAVING SUM(waitwait.wait_time_ms) > 5\n\t\t\t\t\t\t\t\t\t\t\t\t ORDER BY  SUM(waitwait.wait_time_ms) DESC\n\t\t\t\t\t\t\t\t\t\t\t\t FOR\n\t\t\t\t\t\t\t\t\t\t\t\t XML PATH('''') ) AS session_wait_info\n\t\t\t\t\t\t\t\t\t\tFROM    sys.dm_exec_session_wait_stats AS wait ) AS wt2\n\t\t\t\t\t\tON      s.session_id = wt2.session_id\n\t\t\t\t\t\tLEFT JOIN sys.dm_exec_query_stats AS session_stats\n\t\t\t\t\t\tON      r.sql_handle = session_stats.sql_handle\n\t\t\t\t\t\t\t\tAND r.plan_handle = session_stats.plan_handle\n\t\t\t\t\t\t        AND r.statement_start_offset = session_stats.statement_start_offset\n\t\t\t\t\t\t        AND r.statement_end_offset = session_stats.statement_end_offset' \n\t\t,@QueryStatsXML BIT = 0\n\t\t,@QueryStatsXMLselect NVARCHAR(MAX) = N' CAST(COALESCE(qs_live.query_plan, ''<?No live query plan available. To turn on live plans, see https://www.BrentOzar.com/go/liveplans ?>'') AS XML) AS live_query_plan , ' \n\t\t,@QueryStatsXMLSQL NVARCHAR(MAX) = N'OUTER APPLY sys.dm_exec_query_statistics_xml(s.session_id) qs_live' \n\n\nSET @ProductVersion = CAST(SERVERPROPERTY('ProductVersion') AS NVARCHAR(128));\nSELECT @ProductVersionMajor = SUBSTRING(@ProductVersion, 1,CHARINDEX('.', @ProductVersion) + 1 ),\n       @ProductVersionMinor = PARSENAME(CONVERT(VARCHAR(32), @ProductVersion), 2)\nIF EXISTS (SELECT * FROM sys.all_columns WHERE object_id = OBJECT_ID('sys.dm_exec_query_statistics_xml') AND name = 'query_plan')\n\tSET @QueryStatsXML = 1;\n\n\nIF @ProductVersionMajor > 9 and @ProductVersionMajor < 11\nBEGIN\nSET @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\n    \n    \n\t\t\t\t\t\tDECLARE @blocked TABLE \n\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t  dbid SMALLINT NOT NULL,\n\t\t\t\t\t\t\t\t  last_batch DATETIME NOT NULL,\n\t\t\t\t\t\t\t\t  open_tran SMALLINT NOT NULL,\n\t\t\t\t\t\t\t\t  sql_handle BINARY(20) NOT NULL,\n\t\t\t\t\t\t\t\t  session_id SMALLINT NOT NULL,\n\t\t\t\t\t\t\t\t  blocking_session_id SMALLINT NOT NULL,\n\t\t\t\t\t\t\t\t  lastwaittype NCHAR(32) NOT NULL,\n\t\t\t\t\t\t\t\t  waittime BIGINT NOT NULL,\n\t\t\t\t\t\t\t\t  cpu INT NOT NULL,\n\t\t\t\t\t\t\t\t  physical_io BIGINT NOT NULL,\n\t\t\t\t\t\t\t\t  memusage INT NOT NULL\n\t\t\t\t\t\t\t\t); \n\t\t\t\t\t\t\n\t\t\t\t\t\tINSERT @blocked ( dbid, last_batch, open_tran, sql_handle, session_id, blocking_session_id, lastwaittype, waittime, cpu, physical_io, memusage )\n\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t\tsys1.dbid, sys1.last_batch, sys1.open_tran, sys1.sql_handle, \n\t\t\t\t\t\t\tsys2.spid AS session_id, sys2.blocked AS blocking_session_id, sys2.lastwaittype, sys2.waittime, sys2.cpu, sys2.physical_io, sys2.memusage\n\t\t\t\t\t\tFROM sys.sysprocesses AS sys1\n\t\t\t\t\t\tJOIN sys.sysprocesses AS sys2\n\t\t\t\t\t\tON sys1.spid = sys2.blocked;\n\n\t\t\t\t\t    SELECT  GETDATE() AS run_date ,\n\t\t\t            COALESCE(\n\t\t\t\t\t\t\tCONVERT(VARCHAR(20), (ABS(r.total_elapsed_time) / 1000) / 86400) + '':'' + CONVERT(VARCHAR(20), DATEADD(SECOND, (r.total_elapsed_time / 1000), 0), 114) ,\n\t\t\t\t\t\t\tCONVERT(VARCHAR(20), DATEDIFF(SECOND, s.last_request_start_time, GETDATE()) / 86400) + '':''\n\t\t\t\t\t\t\t\t+ CONVERT(VARCHAR(20), DATEADD(SECOND,  DATEDIFF(SECOND, s.last_request_start_time, GETDATE()), 0), 114)\n\t\t\t\t\t\t\t\t) AS [elapsed_time] ,\n\t\t\t            s.session_id ,\n\t\t\t\t\t\tCOALESCE(DB_NAME(r.database_id), DB_NAME(blocked.dbid), ''N/A'') AS database_name,\n\t\t\t            ISNULL(SUBSTRING(dest.text,\n\t\t\t                             ( query_stats.statement_start_offset / 2 ) + 1,\n\t\t\t                             ( ( CASE query_stats.statement_end_offset\n\t\t\t                                   WHEN -1 THEN DATALENGTH(dest.text)\n\t\t\t                                   ELSE query_stats.statement_end_offset\n\t\t\t                                 END - query_stats.statement_start_offset )\n\t\t\t                               / 2 ) + 1), dest.text) AS query_text ,\n\t\t\t            derp.query_plan ,\n\t\t\t\t\t\tqmg.query_cost ,\t\t\t\t\t\t\t\t\t\t   \t\t            \n\t\t\t\t\t\ts.status ,\n\t\t\t            COALESCE(wt.wait_info, RTRIM(blocked.lastwaittype) + '' ('' + CONVERT(VARCHAR(10), \n\t\t\t\t\t\tblocked.waittime) + '')'' ) AS wait_info ,\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tCASE WHEN r.blocking_session_id <> 0 AND blocked.session_id IS NULL \n\t\t\t\t\t\t\t THEN r.blocking_session_id\n\t\t\t\t\t\t\t WHEN r.blocking_session_id <> 0 AND s.session_id <> blocked.blocking_session_id \n\t\t\t\t\t\t\t THEN blocked.blocking_session_id\n\t\t\t\t\t\t\tELSE NULL \n\t\t\t\t\t\tEND AS blocking_session_id,\n\t\t\t            COALESCE(r.open_transaction_count, blocked.open_tran) AS open_transaction_count ,\n\t\t\t\t\t    s.nt_domain ,\n\t\t\t            s.host_name ,\n\t\t\t            s.login_name ,\n\t\t\t            s.nt_user_name ,\n\t\t\t            s.program_name \n\t\t\t\t\t\t'\n\t\t\t\t\t\t\n\t\t\t\t\tIF @ExpertMode = 1\n\t\t\t\t\tBEGIN\n\t\t\t\t\tSET @StringToExecute += \n\t\t\t            N',\n\t\t\t            s.client_interface_name ,\n\t\t\t            s.login_time ,\n\t\t\t            r.start_time ,\n\t\t\t            qmg.request_time ,\n\t\t\t\t\t\tCOALESCE(r.cpu_time, s.cpu_time) AS request_cpu_time,\n\t\t\t            COALESCE(r.logical_reads, s.logical_reads) AS request_logical_reads,\n\t\t\t            COALESCE(r.writes, s.writes) AS request_writes,\n\t\t\t            COALESCE(r.reads, s.reads) AS request_physical_reads ,\n\t\t\t            s.cpu_time AS session_cpu,\n\t\t\t            s.logical_reads AS session_logical_reads,\n\t\t\t            s.reads AS session_physical_reads ,\n\t\t\t            s.writes AS session_writes,\t\t\t\t\t\n\t\t\t\t\t\ttempdb_allocations.tempdb_allocations_mb,\n\t\t\t            s.memory_usage ,\n\t\t\t            r.estimated_completion_time , \t\n\t\t\t\t\t\tr.percent_complete , \n\t\t\t            r.deadlock_priority ,\n\t\t\t            CASE \n\t\t\t              WHEN s.transaction_isolation_level = 0 THEN ''Unspecified''\n\t\t\t              WHEN s.transaction_isolation_level = 1 THEN ''Read Uncommitted''\n\t\t\t              WHEN s.transaction_isolation_level = 2 AND EXISTS (SELECT 1 FROM sys.dm_tran_active_snapshot_database_transactions AS trn WHERE s.session_id = trn.session_id AND is_snapshot = 0 ) THEN ''Read Committed Snapshot Isolation''\n\t\t\t\t\t\t  WHEN s.transaction_isolation_level = 2 AND NOT EXISTS (SELECT 1 FROM sys.dm_tran_active_snapshot_database_transactions AS trn WHERE s.session_id = trn.session_id AND is_snapshot = 0 ) THEN ''Read Committed''\n\t\t\t              WHEN s.transaction_isolation_level = 3 THEN ''Repeatable Read''\n\t\t\t              WHEN s.transaction_isolation_level = 4 THEN ''Serializable''\n\t\t\t              WHEN s.transaction_isolation_level = 5 THEN ''Snapshot''\n\t\t\t              ELSE ''WHAT HAVE YOU DONE?''\n\t\t\t            END AS transaction_isolation_level ,\t\t\t\t\n\t\t\t\t\t\tqmg.dop AS degree_of_parallelism ,\n\t\t\t            COALESCE(CAST(qmg.grant_time AS VARCHAR(20)), ''N/A'') AS grant_time ,\n\t\t\t            qmg.requested_memory_kb ,\n\t\t\t            qmg.granted_memory_kb AS grant_memory_kb,\n\t\t\t            CASE WHEN qmg.grant_time IS NULL THEN ''N/A''\n                             WHEN qmg.requested_memory_kb < qmg.granted_memory_kb\n\t\t\t                 THEN ''Query Granted Less Than Query Requested''\n\t\t\t                 ELSE ''Memory Request Granted''\n\t\t\t            END AS is_request_granted ,\n\t\t\t            qmg.required_memory_kb ,\n\t\t\t            qmg.used_memory_kb AS query_memory_grant_used_memory_kb,\n\t\t\t            qmg.ideal_memory_kb ,\n\t\t\t            qmg.is_small ,\n\t\t\t            qmg.timeout_sec ,\n\t\t\t            qmg.resource_semaphore_id ,\n\t\t\t            COALESCE(CAST(qmg.wait_order AS VARCHAR(20)), ''N/A'') AS wait_order ,\n\t\t\t            COALESCE(CAST(qmg.wait_time_ms AS VARCHAR(20)),\n\t\t\t                     ''N/A'') AS wait_time_ms ,\n\t\t\t            CASE qmg.is_next_candidate\n\t\t\t              WHEN 0 THEN ''No''\n\t\t\t              WHEN 1 THEN ''Yes''\n\t\t\t              ELSE ''N/A''\n\t\t\t            END AS next_candidate_for_memory_grant ,\n\t\t\t            qrs.target_memory_kb ,\n\t\t\t            COALESCE(CAST(qrs.max_target_memory_kb AS VARCHAR(20)),\n\t\t\t                     ''Small Query Resource Semaphore'') AS max_target_memory_kb ,\n\t\t\t            qrs.total_memory_kb ,\n\t\t\t            qrs.available_memory_kb ,\n\t\t\t            qrs.granted_memory_kb ,\n\t\t\t            qrs.used_memory_kb AS query_resource_semaphore_used_memory_kb,\n\t\t\t            qrs.grantee_count ,\n\t\t\t            qrs.waiter_count ,\n\t\t\t            qrs.timeout_error_count ,\n\t\t\t            COALESCE(CAST(qrs.forced_grant_count AS VARCHAR(20)),\n\t\t\t                     ''Small Query Resource Semaphore'') AS forced_grant_count,\n\t\t\t\t\t\twg.name AS workload_group_name , \n\t\t\t\t\t\trp.name AS resource_pool_name,\n \t\t\t\t\t\tCONVERT(VARCHAR(128), r.context_info)  AS context_info\n\t\t\t\t\t\t'\n\t\t\t\t\tEND\n\t\t\t\t\n\t\t\tSET @StringToExecute += \t\t\t    \n\t\t\t\tN'FROM    sys.dm_exec_sessions AS s\n\t\t\t    LEFT JOIN    sys.dm_exec_requests AS r\n\t\t\t    ON      r.session_id = s.session_id\n\t\t\t    LEFT JOIN ( SELECT DISTINCT\n\t\t\t                        wait.session_id ,\n\t\t\t                        ( SELECT    waitwait.wait_type + N'' (''\n\t\t\t                                    + CAST(SUM(waitwait.wait_duration_ms) AS NVARCHAR(128))\n\t\t\t                                    + N'' ms) ''\n\t\t\t                          FROM      sys.dm_os_waiting_tasks AS waitwait\n\t\t\t                          WHERE     waitwait.session_id = wait.session_id\n\t\t\t                          GROUP BY  waitwait.wait_type\n\t\t\t                          ORDER BY  SUM(waitwait.wait_duration_ms) DESC\n\t\t\t                        FOR\n\t\t\t                          XML PATH('''') ) AS wait_info\n\t\t\t                FROM    sys.dm_os_waiting_tasks AS wait ) AS wt\n\t\t\t    ON      s.session_id = wt.session_id\n\t\t\t    LEFT JOIN sys.dm_exec_query_stats AS query_stats\n\t\t\t    ON      r.sql_handle = query_stats.sql_handle\n\t\t\t\t\t\tAND r.plan_handle = query_stats.plan_handle\n\t\t\t            AND r.statement_start_offset = query_stats.statement_start_offset\n\t\t\t            AND r.statement_end_offset = query_stats.statement_end_offset\n\t\t\t    LEFT JOIN sys.dm_exec_query_memory_grants qmg\n\t\t\t    ON      r.session_id = qmg.session_id\n\t\t\t\t\t\tAND r.request_id = qmg.request_id\n\t\t\t    LEFT JOIN sys.dm_exec_query_resource_semaphores qrs\n\t\t\t    ON      qmg.resource_semaphore_id = qrs.resource_semaphore_id\n\t\t\t\t\t    AND qmg.pool_id = qrs.pool_id\n\t\t\t\tLEFT JOIN sys.resource_governor_workload_groups wg \n\t\t\t\tON \t\ts.group_id = wg.group_id\n\t\t\t\tLEFT JOIN sys.resource_governor_resource_pools rp \n\t\t\t\tON\t\twg.pool_id = rp.pool_id\n\t\t\t\tOUTER APPLY (\n\t\t\t\t\t\t\t\tSELECT TOP 1\n\t\t\t\t\t\t\t\tb.dbid, b.last_batch, b.open_tran, b.sql_handle, \n\t\t\t\t\t\t\t\tb.session_id, b.blocking_session_id, b.lastwaittype, b.waittime\n\t\t\t\t\t\t\t\tFROM @blocked b\n\t\t\t\t\t\t\t\tWHERE (s.session_id = b.session_id\n\t\t\t\t\t\t\t\t\t\tOR s.session_id = b.blocking_session_id)\n\t\t\t\t\t\t\t) AS blocked\t\t\t\t\n\t\t\t\tOUTER APPLY sys.dm_exec_sql_text(COALESCE(r.sql_handle, blocked.sql_handle)) AS dest\n\t\t\t    OUTER APPLY sys.dm_exec_query_plan(r.plan_handle) AS derp\n\t\t\t\tOUTER APPLY (\n\t\t\t\t\t\tSELECT CONVERT(DECIMAL(38,2), SUM( (((tsu.user_objects_alloc_page_count - user_objects_dealloc_page_count) * 8) / 1024.)) ) AS tempdb_allocations_mb\n\t\t\t\t\t\tFROM sys.dm_db_task_space_usage tsu\n\t\t\t\t\t\tWHERE tsu.request_id = r.request_id\n\t\t\t\t\t\tAND tsu.session_id = r.session_id\n\t\t\t\t\t\tAND tsu.session_id = s.session_id\n\t\t\t\t) as tempdb_allocations\n\t\t\t    WHERE s.session_id <> @@SPID \n\t\t\t\tAND s.host_name IS NOT NULL\n\t\t\t\t'\n\t\t\t\t+ CASE WHEN @ShowSleepingSPIDs = 0 THEN\n\t\t\t\t\t\tN' AND COALESCE(DB_NAME(r.database_id), DB_NAME(blocked.dbid)) IS NOT NULL'\n\t\t\t\t\t  WHEN @ShowSleepingSPIDs = 1 THEN\n\t\t\t\t\t\tN' OR COALESCE(r.open_transaction_count, blocked.open_tran) >= 1'\n\t\t\t\t\t ELSE N'' END\n\t\t\t\t+\n\t\t\t\t' ORDER BY 2 DESC;\n\t\t\t    '\nEND\nIF @ProductVersionMajor >= 11 \nBEGIN\nSELECT @EnhanceFlag = \n\t    CASE WHEN @ProductVersionMajor = 11 AND @ProductVersionMinor >= 6020 THEN 1\n\t\t     WHEN @ProductVersionMajor = 12 AND @ProductVersionMinor >= 5000 THEN 1\n\t\t     WHEN @ProductVersionMajor = 13 AND\t@ProductVersionMinor >= 1601 THEN 1\n\t\t     ELSE 0 \n\t    END\n\n\nIF OBJECT_ID('sys.dm_exec_session_wait_stats') IS NOT NULL\nBEGIN\n\tSET @SessionWaits = 1\nEND\n\n\n\nSELECT @StringToExecute = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\n            \n\t\t\t\t\t\tDECLARE @blocked TABLE \n\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t  dbid SMALLINT NOT NULL,\n\t\t\t\t\t\t\t\t  last_batch DATETIME NOT NULL,\n\t\t\t\t\t\t\t\t  open_tran SMALLINT NOT NULL,\n\t\t\t\t\t\t\t\t  sql_handle BINARY(20) NOT NULL,\n\t\t\t\t\t\t\t\t  session_id SMALLINT NOT NULL,\n\t\t\t\t\t\t\t\t  blocking_session_id SMALLINT NOT NULL,\n\t\t\t\t\t\t\t\t  lastwaittype NCHAR(32) NOT NULL,\n\t\t\t\t\t\t\t\t  waittime BIGINT NOT NULL,\n\t\t\t\t\t\t\t\t  cpu INT NOT NULL,\n\t\t\t\t\t\t\t\t  physical_io BIGINT NOT NULL,\n\t\t\t\t\t\t\t\t  memusage INT NOT NULL\n\t\t\t\t\t\t\t\t); \n\t\t\t\t\t\t\n\t\t\t\t\t\tINSERT @blocked ( dbid, last_batch, open_tran, sql_handle, session_id, blocking_session_id, lastwaittype, waittime, cpu, physical_io, memusage )\n\t\t\t\t\t\tSELECT\n\t\t\t\t\t\t\tsys1.dbid, sys1.last_batch, sys1.open_tran, sys1.sql_handle, \n\t\t\t\t\t\t\tsys2.spid AS session_id, sys2.blocked AS blocking_session_id, sys2.lastwaittype, sys2.waittime, sys2.cpu, sys2.physical_io, sys2.memusage\n\t\t\t\t\t\tFROM sys.sysprocesses AS sys1\n\t\t\t\t\t\tJOIN sys.sysprocesses AS sys2\n\t\t\t\t\t\tON sys1.spid = sys2.blocked;\n\n\t\t\t\t\t    SELECT  GETDATE() AS run_date ,\n\t\t\t            COALESCE(\n\t\t\t\t\t\t\tCONVERT(VARCHAR(20), (ABS(r.total_elapsed_time) / 1000) / 86400) + '':'' + CONVERT(VARCHAR(20), DATEADD(SECOND, (r.total_elapsed_time / 1000), 0), 114) ,\n\t\t\t\t\t\t\tCONVERT(VARCHAR(20), DATEDIFF(SECOND, s.last_request_start_time, GETDATE()) / 86400) + '':''\n\t\t\t\t\t\t\t\t+ CONVERT(VARCHAR(20), DATEADD(SECOND,  DATEDIFF(SECOND, s.last_request_start_time, GETDATE()), 0), 114)\n\t\t\t\t\t\t\t\t) AS [elapsed_time] ,\n\t\t\t            s.session_id ,\n\t\t\t\t\t\tCOALESCE(DB_NAME(r.database_id), DB_NAME(blocked.dbid), ''N/A'') AS database_name,\n\t\t\t            ISNULL(SUBSTRING(dest.text,\n\t\t\t                             ( query_stats.statement_start_offset / 2 ) + 1,\n\t\t\t                             ( ( CASE query_stats.statement_end_offset\n\t\t\t                                   WHEN -1 THEN DATALENGTH(dest.text)\n\t\t\t                                   ELSE query_stats.statement_end_offset\n\t\t\t                                 END - query_stats.statement_start_offset )\n\t\t\t                               / 2 ) + 1), dest.text) AS query_text ,\n\t\t\t            derp.query_plan ,'\n\t\t\t\t\t\t +\n\t\t\t\t\t\tCASE @QueryStatsXML\n\t\t\t\t\t\t\t WHEN 1 THEN + @QueryStatsXMLselect\n\t\t\t\t\t\t\t ELSE N''\n\t\t\t\t\t\tEND\n\t\t\t\t\t\t+' \n\t\t\t            qmg.query_cost ,\n\t\t\t            s.status ,\n\t\t\t            COALESCE(wt.wait_info, RTRIM(blocked.lastwaittype) + '' ('' + CONVERT(VARCHAR(10), blocked.waittime) + '')'' ) AS wait_info ,'\n\t\t\t\t\t\t+\n\t\t\t\t\t\tCASE @SessionWaits\n\t\t\t\t\t\t\t WHEN 1 THEN + N'SUBSTRING(wt2.session_wait_info, 0, LEN(wt2.session_wait_info) ) AS top_session_waits ,'\n\t\t\t\t\t\t\t ELSE N''\n\t\t\t\t\t\tEND\n\t\t\t\t\t\t+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tN'CASE WHEN r.blocking_session_id <> 0 AND blocked.session_id IS NULL \n\t\t\t\t\t\t\t   THEN r.blocking_session_id\n\t\t\t\t\t\t\t   WHEN r.blocking_session_id <> 0 AND s.session_id <> blocked.blocking_session_id \n\t\t\t\t\t\t\t   THEN blocked.blocking_session_id\n\t\t\t\t\t\t\t   ELSE NULL \n\t\t\t\t\t\t  END AS blocking_session_id,\n\t\t\t            COALESCE(r.open_transaction_count, blocked.open_tran) AS open_transaction_count ,\t\t\n\t\t\t\t\t    s.nt_domain ,\n\t\t\t            s.host_name ,\n\t\t\t            s.login_name ,\n\t\t\t            s.nt_user_name ,\n\t\t\t            s.program_name \n\t\t\t\t\t\t'\t            \n\t\t\t\t\tIF @ExpertMode = 1\n\t\t\t\t\tBEGIN\n\t\t\t\t\tSET @StringToExecute += \t\t\t\t\t\t\n\t\t\t\t\t\tN',\n\t\t\t            s.client_interface_name ,\n\t\t\t            s.login_time ,\n\t\t\t            r.start_time ,\t\t\n\t\t\t            qmg.request_time ,\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tCOALESCE(r.cpu_time, s.cpu_time) AS request_cpu_time,\n\t\t\t            COALESCE(r.logical_reads, s.logical_reads) AS request_logical_reads,\n\t\t\t            COALESCE(r.writes, s.writes) AS request_writes,\n\t\t\t            COALESCE(r.reads, s.reads) AS request_physical_reads ,\n\t\t\t            s.cpu_time AS session_cpu,\n\t\t\t            s.logical_reads AS session_logical_reads,\n\t\t\t            s.reads AS session_physical_reads ,\n\t\t\t            s.writes AS session_writes,\n\t\t\t\t\t\ttempdb_allocations.tempdb_allocations_mb,\n\t\t\t            s.memory_usage ,\n\t\t\t            r.estimated_completion_time , \n\t\t\t\t\t\tr.percent_complete , \n\t\t\t            r.deadlock_priority ,\n\t\t\t\t\t\tCASE \n\t\t\t              WHEN s.transaction_isolation_level = 0 THEN ''Unspecified''\n\t\t\t              WHEN s.transaction_isolation_level = 1 THEN ''Read Uncommitted''\n\t\t\t              WHEN s.transaction_isolation_level = 2 AND EXISTS (SELECT 1 FROM sys.dm_tran_active_snapshot_database_transactions AS trn WHERE s.session_id = trn.session_id AND is_snapshot = 0 ) THEN ''Read Committed Snapshot Isolation''\n\t\t\t\t\t\t  WHEN s.transaction_isolation_level = 2 AND NOT EXISTS (SELECT 1 FROM sys.dm_tran_active_snapshot_database_transactions AS trn WHERE s.session_id = trn.session_id AND is_snapshot = 0 ) THEN ''Read Committed''\n\t\t\t              WHEN s.transaction_isolation_level = 3 THEN ''Repeatable Read''\n\t\t\t              WHEN s.transaction_isolation_level = 4 THEN ''Serializable''\n\t\t\t              WHEN s.transaction_isolation_level = 5 THEN ''Snapshot''\n\t\t\t              ELSE ''WHAT HAVE YOU DONE?''\n\t\t\t            END AS transaction_isolation_level ,\n\t\t\t\t\t\tqmg.dop AS degree_of_parallelism ,\t\t\t\t\t\t'\n\t\t\t\t\t    + \n\t\t\t\t\t    CASE @EnhanceFlag\n\t\t\t\t\t\t\t WHEN 1 THEN @EnhanceSQL\n\t\t\t\t\t\t\t ELSE N'' \n\t\t\t\t\t\tEND \n\t\t\t\t\t\t+\n\t\t\t\t\t    N'\n\t\t\t            COALESCE(CAST(qmg.grant_time AS VARCHAR(20)), ''Memory Not Granted'') AS grant_time ,\n\t\t\t            qmg.requested_memory_kb ,\n\t\t\t            qmg.granted_memory_kb AS grant_memory_kb,\n\t\t\t            CASE WHEN qmg.grant_time IS NULL THEN ''N/A''\n                             WHEN qmg.requested_memory_kb < qmg.granted_memory_kb\n\t\t\t                 THEN ''Query Granted Less Than Query Requested''\n\t\t\t                 ELSE ''Memory Request Granted''\n\t\t\t            END AS is_request_granted ,\n\t\t\t            qmg.required_memory_kb ,\n\t\t\t            qmg.used_memory_kb AS query_memory_grant_used_memory_kb,\n\t\t\t            qmg.ideal_memory_kb ,\n\t\t\t            qmg.is_small ,\n\t\t\t            qmg.timeout_sec ,\n\t\t\t            qmg.resource_semaphore_id ,\n\t\t\t            COALESCE(CAST(qmg.wait_order AS VARCHAR(20)), ''N/A'') AS wait_order ,\n\t\t\t            COALESCE(CAST(qmg.wait_time_ms AS VARCHAR(20)),\n\t\t\t                     ''N/A'') AS wait_time_ms ,\n\t\t\t            CASE qmg.is_next_candidate\n\t\t\t              WHEN 0 THEN ''No''\n\t\t\t              WHEN 1 THEN ''Yes''\n\t\t\t              ELSE ''N/A''\n\t\t\t            END AS next_candidate_for_memory_grant ,\n\t\t\t            qrs.target_memory_kb ,\n\t\t\t            COALESCE(CAST(qrs.max_target_memory_kb AS VARCHAR(20)),\n\t\t\t                     ''Small Query Resource Semaphore'') AS max_target_memory_kb ,\n\t\t\t            qrs.total_memory_kb ,\n\t\t\t            qrs.available_memory_kb ,\n\t\t\t            qrs.granted_memory_kb ,\n\t\t\t            qrs.used_memory_kb AS query_resource_semaphore_used_memory_kb,\n\t\t\t            qrs.grantee_count ,\n\t\t\t            qrs.waiter_count ,\n\t\t\t            qrs.timeout_error_count ,\n\t\t\t            COALESCE(CAST(qrs.forced_grant_count AS VARCHAR(20)),\n\t\t\t                     ''Small Query Resource Semaphore'') AS forced_grant_count,\n\t\t\t\t\t\twg.name AS workload_group_name, \n\t\t\t\t\t\trp.name AS resource_pool_name,\n \t\t\t\t\t\tCONVERT(VARCHAR(128), r.context_info)  AS context_info\n\t\t\t\t\t\t'\n\t\t\t\t\tEND\n\t\t\t\t\t\n\t\t\t\t\tSET @StringToExecute += \t\n\t\t\t\t\t\tN'FROM sys.dm_exec_sessions AS s\n\t\t\t\t\t\tLEFT JOIN    sys.dm_exec_requests AS r\n\t\t\t\t\t\t\t\t\t    ON      r.session_id = s.session_id\n\t\t\t\t\t\tLEFT JOIN ( SELECT DISTINCT\n\t\t\t\t\t\t\t\t\t                        wait.session_id ,\n\t\t\t\t\t\t\t\t\t                        ( SELECT    waitwait.wait_type + N'' (''\n\t\t\t\t\t\t\t\t\t                                    + CAST(SUM(waitwait.wait_duration_ms) AS NVARCHAR(128))\n\t\t\t\t\t\t\t\t\t                                    + N'' ms) ''\n\t\t\t\t\t\t\t\t\t                          FROM      sys.dm_os_waiting_tasks AS waitwait\n\t\t\t\t\t\t\t\t\t                          WHERE     waitwait.session_id = wait.session_id\n\t\t\t\t\t\t\t\t\t                          GROUP BY  waitwait.wait_type\n\t\t\t\t\t\t\t\t\t                          ORDER BY  SUM(waitwait.wait_duration_ms) DESC\n\t\t\t\t\t\t\t\t\t                        FOR\n\t\t\t\t\t\t\t\t\t                          XML PATH('''') ) AS wait_info\n\t\t\t\t\t\t\t\t\t                FROM    sys.dm_os_waiting_tasks AS wait ) AS wt\n\t\t\t\t\t\t\t\t\t    ON      s.session_id = wt.session_id\n\t\t\t\t\t\tLEFT JOIN sys.dm_exec_query_stats AS query_stats\n\t\t\t\t\t\tON      r.sql_handle = query_stats.sql_handle\n\t\t\t\t\t\t\t\tAND r.plan_handle = query_stats.plan_handle\n\t\t\t\t\t\t        AND r.statement_start_offset = query_stats.statement_start_offset\n\t\t\t\t\t\t        AND r.statement_end_offset = query_stats.statement_end_offset\n\t\t\t\t\t\t'\n\t\t\t\t\t\t+\n\t\t\t\t\t\tCASE @SessionWaits\n\t\t\t\t\t\t\t WHEN 1 THEN @SessionWaitsSQL\n\t\t\t\t\t\t\t ELSE N''\n\t\t\t\t\t\tEND\n\t\t\t\t\t\t+ \n\t\t\t\t\t\t'\n\t\t\t\t\t\tLEFT JOIN sys.dm_exec_query_memory_grants qmg\n\t\t\t\t\t\tON      r.session_id = qmg.session_id\n\t\t\t\t\t\t\t\tAND r.request_id = qmg.request_id\n\t\t\t\t\t\tLEFT JOIN sys.dm_exec_query_resource_semaphores qrs\n\t\t\t\t\t\tON      qmg.resource_semaphore_id = qrs.resource_semaphore_id\n\t\t\t\t\t\t\t    AND qmg.pool_id = qrs.pool_id\n\t\t\t\t\t\tLEFT JOIN sys.resource_governor_workload_groups wg \n\t\t\t\t\t\tON \t\ts.group_id = wg.group_id\n\t\t\t\t\t\tLEFT JOIN sys.resource_governor_resource_pools rp \n\t\t\t\t\t\tON\t\twg.pool_id = rp.pool_id\n\t\t\t\t\t\tOUTER APPLY (\n\t\t\t\t\t\t\t\tSELECT TOP 1\n\t\t\t\t\t\t\t\tb.dbid, b.last_batch, b.open_tran, b.sql_handle, \n\t\t\t\t\t\t\t\tb.session_id, b.blocking_session_id, b.lastwaittype, b.waittime\n\t\t\t\t\t\t\t\tFROM @blocked b\n\t\t\t\t\t\t\t\tWHERE (s.session_id = b.session_id\n\t\t\t\t\t\t\t\t\t\tOR s.session_id = b.blocking_session_id)\n\t\t\t\t\t\t\t) AS blocked\n\t\t\t\t\t\tOUTER APPLY sys.dm_exec_sql_text(COALESCE(r.sql_handle, blocked.sql_handle)) AS dest\n\t\t\t\t\t\tOUTER APPLY sys.dm_exec_query_plan(r.plan_handle) AS derp\n\t\t\t\t\t\tOUTER APPLY (\n\t\t\t\t\t\t\t\tSELECT CONVERT(DECIMAL(38,2), SUM( (((tsu.user_objects_alloc_page_count - user_objects_dealloc_page_count) * 8) / 1024.)) ) AS tempdb_allocations_mb\n\t\t\t\t\t\t\t\tFROM sys.dm_db_task_space_usage tsu\n\t\t\t\t\t\t\t\tWHERE tsu.request_id = r.request_id\n\t\t\t\t\t\t\t\tAND tsu.session_id = r.session_id\n\t\t\t\t\t\t\t\tAND tsu.session_id = s.session_id\n\t\t\t\t\t\t) as tempdb_allocations\n\t\t\t\t\t\t'\n\t\t\t\t\t\t+\n\t\t\t\t\t\tCASE @QueryStatsXML\n\t\t\t\t\t\t\t WHEN 1 THEN @QueryStatsXMLSQL\n\t\t\t\t\t\t\t ELSE N''\n\t\t\t\t\t\tEND\n\t\t\t\t\t\t+ \n\t\t\t\t\t\t'\n\t\t\t\t\t\tWHERE s.session_id <> @@SPID \n\t\t\t\t\t\tAND s.host_name IS NOT NULL\n\t\t\t\t\t\t'\n\t\t\t\t\t\t+ CASE WHEN @ShowSleepingSPIDs = 0 THEN\n\t\t\t\t\t\t\t\tN' AND COALESCE(DB_NAME(r.database_id), DB_NAME(blocked.dbid)) IS NOT NULL'\n\t\t\t\t\t\t\t  WHEN @ShowSleepingSPIDs = 1 THEN\n\t\t\t\t\t\t\t\tN' OR COALESCE(r.open_transaction_count, blocked.open_tran) >= 1'\n\t\t\t\t\t\t\t ELSE N'' END\n\t\t\t\t\t\t+\n\t\t\t\t\t\t' ORDER BY 2 DESC;\n\t\t\t\t\t\t'\n\nEND \n\nIF @Debug = 1\n\tBEGIN\n\t\tPRINT CONVERT(VARCHAR(8000), SUBSTRING(@StringToExecute, 0, 8000))\n\t\tPRINT CONVERT(VARCHAR(8000), SUBSTRING(@StringToExecute, 8000, 160000))\n\tEND\n\nEXEC(@StringToExecute);\n\nEND\nGO",
 "title": ""
}