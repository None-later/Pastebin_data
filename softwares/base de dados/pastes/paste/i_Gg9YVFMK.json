{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "kw_error",
  "re_php",
  "lg_en",
  "re_ast1",
  "kw_pass"
 ],
 "key": "Gg9YVFMK",
 "pasteDate": "Feb 28, 2018, 3:36:43 AM",
 "relevancy": -5.0,
 "relevant": false,
 "text": "//STRING CONCATENATION IN PHP IS USED WITH A DOT . e.g.: \"APPLES\" . \" ARE COOL\" = \"APPLES ARE COOL\"\n\necho;\n\n$heredoc = <<<\"HEREDOC\"\n\tThis is heredoc.\nHEREDOC;\n\n$nowdoc = <<<'NOWDOC'\n\tThis is nowdoc.\nNOWDOC;\n\ntrim();\nltrim();\nrtrim();\n\nhtmlspecialchars();\nhtmlspecialchars_decode();\n\nnl2br();\n\npreg_filter(); //regex search and replace\npreg_grep(); //returns array of matching results\npreg_replace(); \npreg_match();\npreg_match_all();\npreg_split();\n\nstrtoupper();\nstrtolower();\n\nucfirst(); // first character of string to uppercase\nucwords(); // first character of each word to uppercase\n\n\n//Substring but Returns the Position, returns false if no match\nstrpos(); //case sensitive\nstripos(); //case insensitive\n\nstrcmp(); //lexicographically compare strings\nstrncmp(); //lexicographically compare strings for the first n characters\n\nstr_replace(); //replaces all occurrences of one substring with another substring in a string\n\nprint;\nprintf(); //%[padding_character][-][width][.precision][type]     |     types: s = string f = float d is decimal x is hexadecimal. Padding_character needs escaping if not a 0 or space\n\nfunction name($params){}\nfunction optional($opt=\"red\"){}\nfunction getColor($opt=\"red\"){return $opt;}\n\n//variable (-to-) function scope same as python:\n$PI = 1.14;\nfunction getPI()\n{\n\tglobal $PI;\n\tif($PI != 3.14)\n\t{\n\t\t$PI = 3.14;\n\t}\n\t\n\treturn $PI;\n}\n\n//PHP can also pass parameters via reference (Like Pointers in C):\nfunction scalePI(&$scalar)\n{\n\tglobal $PI;\n\treturn $PI * $scalar;\n}\n\ninclude();//includes contents of file, generates warning if file is unavailable and continues execution.\ninclude_once();//same as above but will not include the same file more than once.\nrequire();//includes contents of file, generates a error if file is unavailable and stops execution.\nrequire_once();//same as above but will not include the same file more than once.\n\n//MODULARIZE WITH PHP to create standardized templates in one place and easily managed shared-content\n\nerror_reporting(); //error reporting controlled with this function\n//sensible to turn on in development and turn off once it moves to production server.\n//14 different error levels.\n//E_NOTICE minor, won't cause a problem but considered bad practise.\n//E_WARNING significant, should be fixed but won't stop execution.\n//E_ERROR, serious, halts code execution.\n//E_ALL, all errors.\n//0, off / no errors.\n//E_DEPRECATED, code will soon become obsolete and stop working.\n\n//If you want to modify the array use the pointer reference & for the value:\nforeach($array as $key => &$value){}\n\n//APPENDING TO ARRAYS\narr[] = 'D'; //indexed array\narr['D'] = 'Dylan'; //associative array\narray_push(); //array function\n\n//DUMPING OBJECTS/ARRAYS, EVEN DUMPS NESTED ARRAYS\nprint_r();\nvar_dump();\n\nmerge(); //merges arrays, indexed arrays will be re-indexed and no data is lost, however, assocative arrays will lose data if duplicate keys exist.\n\n//SORTING ARRAYS\nsort(); //sorts values ascending\nrsort(); //sorts values descending\narray_values(); //returns a re-indexed array, useful for removing gaps cased by unsetting array elements.\n\n//SORTING ASSOCIATIVE ARRAYS\nksort(); //sorts by keys ascending\nkrsort(); //sorts by keys descending\nasort(); //sorts by values ascending\narsort(); //sorts by values descending\n\narray_splice(); //removes entries\nunset(); //removes specified entry/unsets it.\nin_array(); //returns true or false if $value exists\nkey_exists(); //returns true or false if $key exists\nshuffle(); //elements are shuffled\narray_rand(); //pick $num random elements from $arr array\narray_reverse(); //reverse order of array\n\n//for forms, to submit data as an array add [] to end of name:\n<input type='checkbox' name='extras[]' ... />\n\n//above applies for associative arrays:\n<input type='checkbox' name='pizza[size]' ... />\n\n//SUPER GLOBALS\n$_SERVER\n$_ENV\n$_GET\n$_POST\n$_COOKIE\n$_REQUEST\n$_SESSION\n$_FILES\n\nheader(); //redirects page, must be done before any html has been written\nheader(\"Location: form.php\");\nheader(\"Location: \" . $_SERVER[\"HTTP_REFERER\"]); //can redirect back to referer\nheader($_SERVER[\"SERVER_PROTOCOL\"] . \" 404 Not Found\"); //can redirect to error pages\n\n//String Treating (Sanitisation) Functions\nhtmlentities();\nhtml_entity_decode();\nhtmlspecialchars();\nhtmlspecialchars_decode();\nstrip_tags(); //strips the tags instead of encoding them\n\nfilter_var(); //common validation/sanitization tasks can be performed with this function, returns true or false\n//FILTERS\nFILTER_VALIDATE_EMAIL\nFILTER_VALIDATE_INT\nFILTER_VALIDATE_URL\netc...\n//SANITIZING FILTERS\nFILTER_SANITIZE_EMAIL\n\n//Need to have session_start(); before accessing the session array (data).\nsession_start();\n\nisset();\nunset();\n\ntime(); //in seconds\nsetcookie('key', 'value', 'time'); //time of 0 = expire at end of session\n\n$_COOKIE array is read only as it does not affect the client's cookies.\n\n//File Manipulation\n//One shot reading\nfile();\n//One shot 'flat file' writing\nfile_put_contents(); //FLAGS LOCK_EX | FILE_APPEND\n\n//Line by line reading\n//Mode flags: r -> reading, w -> writing, a -> appending\n//Modes can be combined with +, a+ usefull can append to file with out changing writing position\nfopen(); //opens file and creates a file pointer or handler\nfgets(); //gets a single line\nfclose(); //closes a file\nftell(); //gets the file pointer's position\nfseek(); //moves the file pointer\nrewind(); //moves the file pointer to the start\n\n//locking files\nflock(); //augments file access\n//flags: LOCK_SH -> (SHared) read only lock, others can read but no write\n\t\t LOCK_EX -> (EXclusive) write lock, others have no access\n\t\t LOCK_UN -> (UNlock) unlocks the file, access restriction for others is removed\n\t\t \n//Basic File flow\nOPEN -> LOCK -> MANIPULATE -> UNLOCK -> CLOSE\n\nexplode(); //splits a string by a delimeter and returns the resulting array\nimplode(); //combines an array into a string which is separated by the specified delimiter, returns the resulting string\n\nfgetcsv(); //reads one line of a open file and returns an array of cells OR false if the end of the file is reached. Can specify the length of characters to read in a line, 0 is default = unlimited\nfputcsv(); //writes an array of cells to one line of a open file\n//delimiters can also be specified after the length param i.e: fgetcsv($file, 0, \"delimiter\");\n//same applies for fputcsv(); i.e: fputcsv($file, $array, \"delimiter\");\n\n//Basic CSV file flow\nOPEN -> LOCK -> MANIPULATE -> UNLOCK -> CLOSE\n\n//ERROR HANDLING\n//halt execution near problem areas with:\nexit(\"message\");\ndie(\"message\");\n//use try-catch blocks\n//Customized error handlers to replace generic default\n//Triggering errors, if error has not occured but a parameter has an unwanted value (e.g.: out of range error)\n\ntry\n{\n\tif($a != 0)\n\t{\n\t\t...\n\t}\n\telse\n\t{\n\t\tthrow new Exception(\"Can't divide by 0\");\n\t}\n}\ncatch(Exception $e)\n{\n\treturn \"Exception: \".$e->getMessage();\n}\n\n\ntrigger_error(\"Why you do dis ? \", E_USER_ERROR); //Default error flag is E_USER_NOTICE\n\n//Can create custom error handlers and set it with:\nset_error_handler();\n\nfunction logError($errnum, $errmsg)\n{\n\techo \"<script> console.log('[PHP] Error #$errnum: $errmsg'); </script>\";\n}\n\nset_error_handler(\"logError\");\n\n//Restore the previous error handler (e.g: the default) with:\nreset_error_handler();\n\nerror_log(); //logs error to server's logging system\nerror_log(\"message\");\nerror_log(\"message\", message_type, \"log file\"); //when using custom log file message_type must be 3\nerror_log(\"message\", 1, \"email\"); //error is sent to the email address, extra_headers can be set up and included in the email for a more stylish email.\n\nini_set(\"key\", \"value\");\nmail();\nsystem(\"command\", [optional]$return_var);//return var is optional and indicates the return status, which is either the last line of output or false\nexec(\"command\", $outputArr);\n\n//if using user input for command arg use escapeshellarg() to make the command arg a single safe string\nescapeshellarg();\n\nphp -f your_script_file.php\n#!/path/to/php -f\n\n$argc -> num of args received from cli\n$argv -> array of arugments from cli\n$argv[0] -> name of the script",
 "title": "PHP Cheat sheet"
}