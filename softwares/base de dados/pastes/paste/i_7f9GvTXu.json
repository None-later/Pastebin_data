{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "lg_en"
 ],
 "key": "7f9GvTXu",
 "pasteDate": "Feb 11, 2018, 3:15:30 PM",
 "relevancy": 2.0,
 "relevant": false,
 "text": "using System;\nusing System.Linq;\nusing System.Collections.Generic;\nusing NewWidget.Core;\nusing NewWidget.Core.Native;\nusing NewWidget.Core.Scripting;\n\npublic class Script : ScriptBase {\n\n\nconst int skilluse = 1436; //  \n //id   \n \n readonly int[] High = new int[] {1016,1254,2049,22104,2321,2062,455,1420,914,10518,3282,1418,1414,701,761,762,3284,9955,9959,1425};\n readonly int[] UltraHigh = new int[] {1409,745,702};\n readonly int[] Medium = new int[] {1505,1428,762,528,1556,1422,1335,990,88,987,1470,1532,1533};\n readonly int[] Low = new int[] {999999};\n readonly int[] stealeffects =  new int[] {761}; //seed of revenge \n public uint _castEndTime; \n public int castEndTimeHigh; \n public int castEndTimeMedium; \n public int castEndTimeLow;\n public bool isHighPrioritet;\n public bool isMediumhPrioritet;\n public bool isLowPrioritet;\n public bool isUltraHighPrioritet;\n  \n   public override void OnStart() {\n   \n        base.OnStart();\n        CreateTimer(10, sopInterruptUltraHigh);\n        CreateTimer(10, sopInterruptHigh);\n        CreateTimer(10, sopInterruptMedium);\n         CreateTimer(10, sopInterruptLow);\n        \n    }\n\n\n\n\n\t\t\t\tvoid sopInterruptUltraHigh ()\n \t\t\t\t{\n\t\t\t\t  foreach (var enemy in Players)\n\t\t\t\t\n\t\t\t\n\t\t\t\t\tif (    cancast()  && shouldInterruptUltraHigh(enemy) && ( !isInterrupted(enemy, castEndTimeHigh) ) ) {\n\t\t\t\t\tvar actor = enemy;\n\t\t\t\t\tif (  ( Me.Target != actor) ) {Client.FSetTarget(enemy);}\n\t\t\t\t\telse \n\t\t\t\t\twhile ( cancast() &&  enemy.Cast.EndTime > 0   ) \n\t\t\t\t\t{ Client.FUseSkill(skilluse,true,false);\n\t\t\t\t\tWait(55);}\n\t\t\t\t\tisUltraHighPrioritet = false;\n\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t}\n\t\t\t\n\n \t\t\t\tvoid sopInterruptHigh ()\n \t\t\t\t{\n\t\t\t\t  foreach (var enemy in Players)\n\t\t\t\t\n\t\t\t\n\t\t\t\t\tif ( !isUltraHighPrioritet && enemy.DistanceToUser < 850 && enemy.IsAttackable && cancast()  && shouldInterruptHigh(enemy) && ( !isInterrupted(enemy, castEndTimeHigh) ) ) {\n\t\t\t\t\tvar actor = enemy;\n\t\t\t\t\tif (  ( Me.Target != actor) ) {Client.FSetTarget(enemy);}\n\t\t\t\t\telse \n\t\t\t\t\twhile ( cancast() &&  enemy.Cast.EndTime > 0   ) \n\t\t\t\t\t{ Client.FUseSkill(skilluse,true,false);\n\t\t\t\t\tWait(55);}\n\t\t\t\t\tisHighPrioritet = false;\n\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t}\n\n\n\t\t\t\tvoid sopInterruptMedium () {\n\t\t\t\tforeach (var enemy in Players)\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\tif ( shouldInterruptMedium(enemy) && cancast() && ( !isInterrupted(enemy, castEndTimeMedium) )\n\t\t\t\t\t\t&& !isHighPrioritet) {\n\t\t\t\t\t\tvar actor = enemy;\n\t\t\t\t\t\tif (  ( Me.Target != actor) ) {Client.FSetTarget(enemy);}\n\t\t\t\t\telse \n\t\t\t\t\twhile ( cancast() &&  enemy.Cast.EndTime > 0   ) \n\t\t\t\t\t{ Client.FUseSkill(skilluse);Wait(55); }\n\t\t\t\t\tisMediumhPrioritet = false;\n\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t} \n\n\n\t\t\t\n\t\t\t\t\tvoid sopInterruptLow () { \n\t\t\t\t\tforeach (var enemy in Players)\n\t\t\t\t\tif ( shouldInterruptLow(enemy) && cancast() &&  ( !isInterrupted(enemy , castEndTimeLow) ) \n\t\t\t\t\t&& !isHighPrioritet && isMediumhPrioritet) {\n\t\t\t\t\tvar actor = enemy;\n\t\t\t\t\tif (  ( Me.Target != actor) ) {Client.FSetTarget(enemy);}\n\t\t\t\t\telse \n\t\t\t\t\twhile ( cancast() &&  enemy.Cast.EndTime > 0   ) \n\t\t\t\t\t{ Client.FUseSkill(skilluse);Wait(55); }\n\t\t\t\t\tisLowPrioritet = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\n\t\t\t\t\tvoid stealthread () {\n\t\t\t\tforeach (var enemy in Players)\n\t\t\t\t\n\t\t\t\tif ( shouldsteal(enemy) && cancast() && Me.SkillCooltime(1440) < 1050 && ( !isInterrupted(enemy , castEndTimeHigh)) && enemy.DistanceToUser < 850  )\n\t\t\t\t{ Wait(enemy.Cast.EndTime + 100 );\n\t\t\t\tClient.FSetTarget(enemy);\n\t\t\t\tClient.FUseSkill(1440);\n\t\t\t\t}\n\t\t\t\t}\n                \n                \n  \n  \n  \t\t\t\tpublic bool shouldsteal(L2Live actor) { \n        \t\treturn ( actor.Cast.EndTime > 0 && stealeffects.Contains(actor.Cast.Id) ) && cancast() ; \n        \t\t}\t\t\n\t\n\t\t\t\n\t\t\tpublic bool shouldInterruptUltraHigh(L2Live actor){\n\n    \t\tif (  (actor.Cast.EndTime > 0) && (UltraHigh.Contains(actor.Cast.Id) ) && actor.Target.IsAffraid )\n    \t\t{\n    \tcastEndTimeHigh = Environment.TickCount + actor.Cast.EndTime;\t\n        isUltraHighPrioritet = true;\n        \n        return true;\n        \t}\n        \telse\n        return false;\n        \t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tpublic bool shouldInterruptHigh(L2Live actor){\n\n    \t\tif (  (actor.Cast.EndTime > 0) && (High.Contains(actor.Cast.Id) ) )\n    \t\t{\n    \tcastEndTimeHigh = Environment.TickCount + actor.Cast.EndTime;\t\n        isHighPrioritet = true;\n        \n        return true;\n        \t}\n        \telse\n        return false;\n        \t}\n        \t\n        \t\n        \tpublic bool shouldInterruptMedium(L2Live actor){\n    \t\tif (  (actor.Cast.EndTime > 550 ) && (Medium.Contains(actor.Cast.Id) ) )\n    \t\t{\n    \tcastEndTimeMedium = Environment.TickCount + actor.Cast.EndTime;\t\n        isMediumhPrioritet = true;\n        return true;\n        \t}\n        \telse\n        return false;\n        \t}\n        \t\n        \tpublic bool shouldInterruptLow(L2Live actor){\n    \t\tif (  (actor.Cast.EndTime > 550 ) && (Low.Contains(actor.Cast.Id) ) )\n    \t\t{\n    \t\t\n    \tcastEndTimeLow = Environment.TickCount + actor.Cast.EndTime;\t\n        isLowPrioritet = true;\n        return true;\n        \t}\n        \telse\n        return false;\n        \t}\n        \t\n\n\t\t\t\t public bool isInterrupted(L2Live actor, int _castEndTime){\n \t\t\t\treturn (actor.Cast.EndTime == 0) && (Environment.TickCount < _castEndTime);\n\t\t\t\t\t\t\t}\t\n        \t\n        \t\n\t\tpublic bool cancast()\n\t\t{\n\t\tint[] celesids = {1418, 1427};\n\t\treturn ( !Me.IsAffraid || !Me.IsTranced || !Me.IsDead || !Me.IsAnchored || !Me.IsMedused || \n\t\t !Me.IsDead || (!Me.Buffs.Any(b1 => celesids.Contains(b1.Id))) || !Me.IsSilenced  );\n\t\t \n\t\t }\n\t\t \n\t\t \n\t}",
 "title": ""
}