{
 "espireDate": "N",
 "format": "csharp",
 "jSonReasons": [
  "kw_error",
  "lg_en"
 ],
 "key": "3NYXKM6g",
 "pasteDate": "Feb 21, 2018, 7:04:49 AM",
 "relevancy": 1.0,
 "relevant": false,
 "text": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Flow {\n    class Program {\n        static void Main(string[] args) {\n\n            var inputModel = new TestCreateModel { Number = 5, Text = \"hallo\" };\n\n            var someService = new SomeService();\n\n            var result = Worker<TestCreateModel, TestEntity>\n                            .Start(inputModel, new TestValidator())\n                            .OnSuccess((x) => {\n                                x.Entity.Id = Guid.NewGuid();\n                                x.Map(y => y.Number, z => z.Number);\n                                x.Map(y => y.Text, z => z.Text);\n                                return x;\n                            })\n                            .OnSuccess(someService.SetAutoGeneratedThing)\n                            .OnSuccessAsync(someService.CalculateSomething)\n                            .GetResult();\n\n        }\n    }\n\n    class SomeService\n    {\n        private readonly Random random;\n\n        public SomeService()\n        {\n            this.random = new Random();\n        }\n\n        public WorkExecutionContext<TestCreateModel, TestEntity> SetAutoGeneratedThing(WorkExecutionContext<TestCreateModel, TestEntity> context)\n        {\n            context.AddError(\"Something went wrong\");\n            return context;\n\n\n            var strBuilder = new StringBuilder();\n            for (int i = 0; i < context.Entity.Number; i++)\n            {\n                strBuilder.Append((char)this.random.Next(0, 256));\n            }\n\n            context.Entity.SomethingAutoGenerated = strBuilder.ToString();\n\n            return context;\n        }\n\n        public async Task<WorkExecutionContext<TestCreateModel, TestEntity>> CalculateSomething(WorkExecutionContext<TestCreateModel, TestEntity> context)\n        {\n            await Task.Delay(1000);\n\n            context.Entity.SomethingCalculated = context.Entity.Number * (decimal) random.NextDouble();\n\n            return context;\n        }\n    }\n\n    class TestValidator : IValidator<TestCreateModel>\n    {\n        public bool Validate(TestCreateModel input)\n        {\n            if (input.Number < 1)\n            {\n                return false;\n            }\n\n            if (input.Text.Length > 10)\n            {\n                return false;\n            }\n\n            return true;\n        }\n    }\n\n    class TestCreateModel\n    {\n        public string Text { get; set; }\n\n        public int Number { get; set; }\n    }\n\n    class TestEntity\n    {\n        public Guid Id { get; set; }\n\n        public string SomethingAutoGenerated { get; set; }\n\n        public decimal SomethingCalculated { get; set; }\n\n        public string Text { get; set; }\n\n        public int Number { get; set; }\n    }\n\n    public static class WorkExtensions\n    {\n        public static WorkExecutionContext<TInput, TEntity> OnSuccess<TInput, TEntity>(this WorkExecutionContext<TInput, TEntity> context, Func<WorkExecutionContext<TInput, TEntity>, WorkExecutionContext<TInput, TEntity>> worker)\n            where TEntity : new()\n        {\n            if (context.Valid)\n            {\n                return worker(context);\n            }\n\n            return context;\n        }\n\n        public static WorkExecutionContext<TInput, TEntity> OnSuccessAsync<TInput, TEntity>(this WorkExecutionContext<TInput, TEntity> context, Func<WorkExecutionContext<TInput, TEntity>, Task<WorkExecutionContext<TInput, TEntity>>> worker)\n            where TEntity : new()\n        {\n            if (context.Valid)\n            {\n                return worker(context).Result;\n            }\n\n            return context;\n        }\n\n        public static TEntity ResultOnSuccess<TInput, TEntity>(this WorkExecutionContext<TInput, TEntity> context)\n            where TEntity : new()\n        {\n            if (context.Valid)\n            {\n                return context.Entity;\n            }\n\n            return default(TEntity);\n        }\n\n        public static TEntity ResultAnytime<TInput, TEntity>(this WorkExecutionContext<TInput, TEntity> context)\n            where TEntity : new()\n        {\n            return context.Entity;\n        }\n    }\n}\n\n\n------------------------------------------------------------------------------------------------------------------------------------------------\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Flow\n{\n    public class WorkerResult<TEntity>\n        where TEntity : new()\n    {\n        public WorkerResult(TEntity entity, bool valid, IList<string> messages)\n        {\n            this.Entity = entity;\n            this.Valid = valid;\n            this.Messages = messages;\n        }\n\n        public TEntity Entity { get; }\n\n        public bool Valid { get; }\n\n        public IList<string> Messages { get; }\n\n    }\n}\n----------------------------------------------------------------------------------------------------------------------------------------------------\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Reflection;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Flow\n{\n    public class WorkExecutionContext<TInput, TEntity>\n        where TEntity : new()\n    {\n        private readonly IList<string> messages = new List<string>();\n\n        internal WorkExecutionContext(TInput input, bool valid)\n        {\n            this.Input = input;\n            this.Valid = valid;\n            this.Entity = new TEntity();\n        }\n\n        public TInput Input { get; }\n\n        public TEntity Entity { get; }\n\n        public bool Valid { get; private set; }\n\n        public void Map<TProp>(Expression<Func<TInput, TProp>> inputProp, Expression<Func<TEntity, TProp>> entityProp)\n        {\n            if (entityProp.Body is MemberExpression)\n            {\n                ((entityProp.Body as MemberExpression).Member as PropertyInfo).SetValue(this.Entity, inputProp.Compile()(this.Input));\n            }\n        }\n\n        public void AddError(string error)\n        {\n            this.messages.Add(error);\n            this.Valid = false;\n        }\n\n        public void AddInformation(string information)\n        {\n            this.messages.Add(information);\n        }\n\n        public WorkerResult<TEntity> GetResult()\n        {\n            return new WorkerResult<TEntity>(this.Entity, this.Valid, this.messages);\n        }\n\n    }\n}\n---------------------------------------------------------------------------------------------------------------------------------------------\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Flow\n{\n    public interface IValidator<TInput>\n    {\n        bool Validate(TInput input);\n    }\n}\n\n----------------------------------------------------------------------------------------------------------------------------------------------\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Flow\n{\n    public class Worker<TInput, TEntity>\n        where TEntity : new()\n    {\n\n        public static WorkExecutionContext<TInput, TEntity> Start(TInput input, IValidator<TInput> validator)\n        {\n            var validationResult = validator.Validate(input);\n            return new WorkExecutionContext<TInput, TEntity>(input, validationResult);\n        }\n\n    }\n}",
 "title": "worker"
}