{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "lg_en"
 ],
 "key": "p7DhRwww",
 "pasteDate": "Feb 12, 2018, 2:10:05 PM",
 "relevancy": 0.0,
 "relevant": false,
 "text": "public class Money\n    {\n        private readonly decimal _cost;\n        private readonly decimal _payment;\n        private readonly ICurrency _currency;\n\n        public Money(decimal cost, decimal payment, ICurrency currency)\n        {\n            if(cost<0)\n                throw new ArgumentException(\"Cost cannot be less than zero\", \"Cost\");\n            if (payment < 0)\n                throw new ArgumentException(\"Payment Received cannot be less than zero\", \"payment\");\n            if (payment < cost)\n                throw new ArgumentException(\"Cost cannot be less than Payment Received\");\n            if (decimal.Round(cost, 2) != cost)\n                    throw new ArgumentException(string.Concat(\"Cost has too many decimal places.  It should only have: \", currency.DecimalPlaces),\"Cost\");\n            if (decimal.Round(payment, 2) != payment)\n                throw new ArgumentException(string.Concat(\"payment has too many decimal places.  It should only have: \", currency.DecimalPlaces), \"payment\");\n            if(currency ==null)\n                throw new ArgumentNullException(\"Currency cannot be null\", \"ICurrency\");\n            _cost = cost;\n            _payment = payment;\n            _currency = currency;\n        }\n\n\n        public decimal Cost\n        {\n            get { return _cost; }\n        }\n\n        public decimal payment\n        {\n            get { return _payment; }\n        }\n\n        public ICurrency Currency\n        {\n            get { return _currency; }\n        }\n\n        public static bool operator ==(Money money1, Money money2)\n        {\n            if (!ReferenceEquals(money1, null) &&\n                ReferenceEquals(money2, null))\n            {\n                return false;\n            }\n            if (ReferenceEquals(money1, null) &&\n                 !ReferenceEquals(money2, null))\n            {\n                return false;\n            }\n            if (ReferenceEquals(money1, null) &&\n                 ReferenceEquals(money2, null))\n            {\n                return true;\n            }\n            return money1.Equals(money2);\n        }\n\n        public static bool operator !=(Money money1, Money money2)\n        {\n            return !(money1 == money2);\n        }\n\n        public bool Equals(Money other)\n        {\n            if (ReferenceEquals(other, null))\n                return false;\n            return _cost == other._cost && _payment == other._payment && _currency == other._currency;\n        }\n\n        public override bool Equals(object obj)\n        {\n            return Equals(obj as Money);\n        }\n\n        public override int GetHashCode()\n        {\n            unchecked\n            {\n                int hash = 17;\n                hash = hash * 23 + _cost.GetHashCode();\n                hash = hash * 23 + _payment.GetHashCode();\n                hash = hash * 23 + _currency.GetHashCode();\n                return hash;\n            }\n        }\n    }\n\t\npublic decimal CalculateChange(decimal cost, decimal payment, ICurrency currency)\n{\n   return payment-cost;\n}\n\t\npublic decimal CalculateChange(Money money)\n{\n   return money.payment-money.cost;\n}",
 "title": ""
}