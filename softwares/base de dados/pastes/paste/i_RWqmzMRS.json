{
 "espireDate": "N",
 "format": "cpp",
 "jSonReasons": [
  "lg_af"
 ],
 "key": "RWqmzMRS",
 "pasteDate": "Feb 8, 2018, 9:00:33 AM",
 "relevancy": 0.0,
 "relevant": false,
 "text": "#include <iostream>\n#include <cstdlib>\n\nusing namespace std;\n\nclass kulka{\npublic:\n    int number;\n    int value;\n    kulka* next;\n    kulka* right;\n    kulka* left;\n\n    kulka(int n){\n        number = n;\n        value = rand()%100;\n        next = NULL;\n        right = NULL;\n        left = NULL;\n    }\n\n    void add_sort(kulka* new_one){\n        if (next!=NULL){\n            if (next->value > new_one->value) next->add_sort(new_one); //dodawanie z sortowaniem\n            else{\n                new_one->next = next;\n                next = new_one;\n            }\n        }\n        else next = new_one;\n    }\n\n    void add(kulka* new_one) { //najprostszy algorytm dodawania\n        if (next==NULL) next = new_one;\n        else next->add(new_one);\n    }\n\n    void show(){\n        cout << \"kulka nr. \" << number << \":\" << value << \" \" << endl;\n        if (next!=NULL){\n            next->show();\n        }\n    }\n\n    void addtree(kulka *wsk){\n        if(wsk->number < number ){\n            if(left!=NULL)\n                left->addtree(wsk);\n            else\n                left=wsk;\n        }\n        else\n            if(right!=NULL)\n                right->addtree(wsk);\n            else\n                right=wsk;\n    }\n\n    void showtree(){\n        if(left!=NULL)\n            left->showtree();\n        cout<<value<<\" \";\n        if(right!=NULL)\n            right->showtree();\n    }\n\n};\n\nint main(){\n    kulka* list1 = new kulka(0);\n    kulka* list2 = new kulka(0);\n\n    for (int i=0; i<30; i++){\n        kulka* nowa = new kulka(i);\n        if (nowa->value%2==0) list1->add(nowa);\n        else list2->add(nowa);\n    }\n\n    list1=list1->next;\n    list2=list2->next;\n\n    cout << \"lista 1:\" << endl;\n    list1->show();\n    cout << endl << endl;\n    cout << \"lista 2:\" << endl;\n    list2->show();\n    cout << endl << endl;\n\n    //root drzewa\n    kulka* tree = NULL;\n\n    //dodawanie pierwszej listy na drzewo\n    while(list1!=0){\n        kulka* deleted = NULL; //wskaznik\n        deleted=list1;  //na pierwszy element listy\n        list1=list1->next; //ucinam liste o pierwszy element\n        deleted->next=NULL; //usuwam wartosc next wyciaganego elementu - nie jest potrzebna w drzewie\n\n        if(tree==NULL)\n            tree=deleted;\n        else\n            tree->addtree(deleted);\n    }\n\n    //dodawanie drugiej listy na drzewo\n    while(list2!=0){\n        kulka* deleted = NULL;\n        deleted=list2;\n        list2=list2->next;\n        deleted->next=NULL;\n\n        if(tree==NULL)\n            tree=deleted;\n        else\n            tree->addtree(deleted);\n    }\n\n    cout << \"drzewo: \" << endl;\n    tree->showtree();\n    cout << endl << endl;\n}",
 "title": ""
}