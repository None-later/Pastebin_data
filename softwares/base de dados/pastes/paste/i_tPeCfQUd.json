{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "re_sql",
  "lg_en",
  "re_ast1"
 ],
 "key": "tPeCfQUd",
 "pasteDate": "Feb 12, 2018, 11:56:26 AM",
 "relevancy": -1.0,
 "relevant": false,
 "text": "import sqlite3 as lite\nimport mail_param\nfrom c_logger import CustomLogger\nfrom datetime import datetime as dt\n\nlog = CustomLogger('{0}_log_file.txt'.format(dt.now().date()))\n\ndef p_decorate(func):\n    def func_wrapper(*args, **kwargs):\n        log.debug(\"Running function {0} with number of arguments {1}\".format(func.__name__, len(args) + len(kwargs)))\n        return func(*args, **kwargs)\n    return func_wrapper\n\n@p_decorate\ndef put_sigle_row_into_table(issue_id, current_status, historical_status, issue_type, issue_name, db_file_name,\n                             db_table, con=None, cur=None, notified=False):\n    \"\"\"\n    :param issue_id:\n    :param current_status:\n    :param historical_status:\n    :param issue_type:\n    :param issue_name:\n    :param db_file_name:\n    :param db_table:\n    :param con:\n    :param cur:\n    :param notified:\n    :return:\n    \"\"\"\n    created_inline = False\n    if not con and not cur:\n        cur, con = create_connection_to_db(db_file_name)\n        created_inline = True\n    try:\n        cur.execute('INSERT INTO {0}(\"issue_id\", \"current_status\", \"historical_status\", \"notified\", \"issue_type\", '\n                    '\"friendly_name\") VALUES ({1}, \"{2}\", \"{3}\", \"{4}\", \"{5}\", \"{6}\");'.format(db_table, issue_id,\n                                                                                               current_status,\n                                                                                               historical_status,\n                                                                                               notified, issue_type,\n                                                                                               issue_name))\n    except lite.IntegrityError:\n        cur.execute('UPDATE {0} SET \"current_status\" = \"{1}\", \"historical_status\" = \"{2}\",'\n                    '\"issue_type\" = \"{5}\", \"friendly_name\" = \"{6}\" WHERE \"issue_id\" = \"{4}\";'.format(db_table,\n                                                                                                     current_status,\n                                                                                                     historical_status,\n                                                                                                     notified, issue_id,\n                                                                                                     issue_type,\n                                                                                                     issue_name))\n    except:\n        # create new table if the one with name not exists\n        cur.execute('CREATE TABLE {0}(\"issue_id\" INTEGER, \"current_status\", \"historical_status\", \"notified\", '\n                    '\"issue_type\", \"friendly_name\", UNIQUE(\"issue_id\"));'.format(db_table))\n        cur.execute('INSERT INTO {0}(\"issue_id\", \"current_status\", \"historical_status\", \"notified\", \"issue_type\", '\n                    '\"friendly_name\") VALUES ({1}, \"{2}\", \"{3}\", \"{4}\", \"{5}\", \"{6}\");'.format(db_table, issue_id,\n                                                                                               current_status,\n                                                                                               historical_status,\n                                                                                               notified, issue_type,\n                                                                                               issue_name))\n    if created_inline:\n        con.commit()\n    else:\n        return con\n\n@p_decorate\ndef update_notification_column(db_file_name, db_table_name, issue_id, notified=False):\n    cur, con = create_connection_to_db(db_file_name)\n    cur.execute('UPDATE {0} SET \"notified\" = \"{1}\" WHERE \"issue_id\" = \"{2}\";'.format(db_table_name, notified, issue_id))\n    con.commit()\n\n@p_decorate\ndef get_full_data_from_table(db_file_name, db_table_name):\n    \"\"\"\n    :param db_file_name: path to db file\n    :param db_table_name: name of table in db\n    :return: data from db\n    \"\"\"\n    cur, con = create_connection_to_db(db_file_name)\n    cur.execute('SELECT * FROM {0};'.format(db_table_name))\n    data = cur.fetchall()\n    return data\n\n@p_decorate\ndef get_data_with_issue_id(db_file_name, db_table_name, issue_id, cur=False, con=False):\n    \"\"\"\n    :param db_file_name:\n    :param db_table_name:\n    :param issue_id:\n    :return:\n    \"\"\"\n    if not con and not cur:\n        cur, con = create_connection_to_db(db_file_name)\n    cur.execute('SELECT * FROM {0} WHERE \"issue_id\" = {1};'.format(db_table_name, issue_id))\n    data = cur.fetchall()\n    return data\n\n@p_decorate\ndef get_data_for_notification(db_file_name, db_table_name):\n    \"\"\"\n    :param db_file_name:\n    :param db_table_name:\n    :return:\n    \"\"\"\n    cur, con = create_connection_to_db(db_file_name)\n    cur.execute('SELECT * FROM {0} WHERE \"current_status\" = \"done\" AND \"notified\" = \"False\";'.format(db_table_name))\n    data = cur.fetchall()\n    return data\n\n@p_decorate\ndef delete_row_from_table(db_file_name, db_table_name, line):\n    \"\"\"\n    :param db_file_name: path to db file\n    :param db_table_name: name of table in db\n    :return: None\n    \"\"\"\n    cur, con = create_connection_to_db(db_file_name)\n    cur.execute('DELETE FROM {0} WHERE lines = \"{1}\";'.format(db_table_name, line))\n    con.commit()\n\n\n@p_decorate\ndef create_connection_to_db(db_file_name):\n    \"\"\"\n    :param db_file_name: name of db file\n    :return: cursor and connection objects\n    \"\"\"\n    connection = lite.connect(db_file_name)\n    cur = connection.cursor()\n    return cur, connection\n\n@p_decorate\ndef put_multiple_data_into_table(db_file_name, table_name, in_list, val_list, drop_db=False):\n    \"\"\"\n    :param db_file_name:\n    :param table_name:\n    :param in_list:\n    :param val_list:\n    :param drop_db:\n    :return:\n    \"\"\"\n    cur, con = create_connection_to_db(db_file_name)\n    if not drop_db:\n        cur.execute('DELETE FROM {0};'.format(table_name))\n    for line, value in zip(in_list, val_list):\n        con = put_sigle_row_into_table(line, value, db_file_name, table_name, con, cur)\n    con.commit()\n\n@p_decorate\ndef generate_sql_input(file):\n    \"\"\"Temporary func to create input list from txt file\n    :param file: name of file contains lines with mail intent\n    :return: prepared text with \" added on start and end\n    \"\"\"\n    with open(file, 'r') as f:\n        data = f.readlines()\n    stripped_data = ['\"{0}\"'.format(item.strip()) for item in data]\n    return stripped_data\n\n# if __name__ == '__main__':\n#     # put_sigle_row_into_table('12241', 'closed', 'candidate', mail_param.db_path, 'RECRUITT')\n#     # print(get_data_for_notification(mail_param.db_path, 'RECRUITT'))\n#     print(get_data_with_issue_id(mail_param.db_path, 'RECRUITT', '12241'))",
 "title": ""
}