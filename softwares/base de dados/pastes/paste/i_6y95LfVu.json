{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "lg_fi"
 ],
 "key": "6y95LfVu",
 "pasteDate": "Feb 17, 2018, 7:19:25 AM",
 "relevancy": 0.0,
 "relevant": false,
 "text": "package demokuusi;\n\n\n\n    /**\n     * Ohjelmalla testataan pivmrn lisyst.\n     * Pivmr on talukossa muodossa pp,kk,vv\n     * Taulukko ei ole hyv ratkaisu, parempi on kunnon\n     * Pvm-luokka.  Tulee myhemmiss demoissa.\n     * @author Vesa Lappalainen\n     * @version 1.0, 17.01.2002\n     * @since 1.4\n     */\n\n    public class Pvm {\n\n        private final static int PP = 0, KK = 1, VV = 2;\n        private int paiva;\n        private int kuukausi;\n        private int vuosi;\n        /** Taulukko kuukausien pituuksista. Oma rivi  karkausvuosille */\n        public static final int KPITUUDET[][] = {\n                // 1  2  3  4  5  6  7  8  9 10 11 12\n                { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 },\n                { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }\n        };\n\n        \n        \n        /**\n         * Alustetaan Pvm-olio\n         * @param paiva mik paiva\n         * @param kuukausi mik kuukausi\n         * @param vuosi mik vuosi\n         */\n        public Pvm(int paiva, int kuukausi, int vuosi){\n            this.paiva = paiva;\n            this.kuukausi = kuukausi;\n            this.vuosi = vuosi;\n        }\n        \n\n        /**\n         * Palautetaan tieto siit onko tutkittava vuosi karkausvuosi vai ei\n         * @param vv tutkittava vuosi\n         * @return 1 jos on karkausvuosi ja 0 jos ei ole\n         * @example\n         * <pre name=\"test\">\n         *   karkausvuosi(1900) === 0\n         *   karkausvuosi(1900) === 0\n         *   karkausvuosi(1901) === 0\n         *   karkausvuosi(1996) === 1\n         *   karkausvuosi(2000) === 1\n         *   karkausvuosi(2001) === 0\n         *   karkausvuosi(2004) === 1\n         * </pre>\n         */\n        public static int karkausvuosi(int vv) {\n            if ( vv % 400 == 0 ) return 1;\n            if ( vv % 100 == 0 ) return 0;\n            if ( vv % 4 == 0 ) return 1;\n            return 0;\n        }\n\n\n        /**\n         * Aliohjelmalla listn taulukossa olevaa pivmr yhdell \n         * @param pvm listtv pivmr\n         * @example\n         * <pre name=\"test\">\n         * int [] pv; \n         * pv = new int[]{$pp1,$kk1,$vv1}; lisaaPvm(pv); pv[0] === $pp2; pv[1] === $kk2; pv[2] === $vv2;\n         * \n         * | $pp1 | $kk1 | $vv1 |   $pp2 | $kk2 | $vv2 |\n         * ----------------------------------------------\n         * |   1  |   1  | 1999 |    2   |  1   | 1999 |    \n         * |  31  |   1  | 1999 |    1   |  2   | 1999 |    \n         * |  27  |   2  | 1999 |   28   |  2   | 1999 |    \n         * |      |      |  --- |    1   |  3   | 1999 |    \n         * |      |      |  --- |    2   |  3   | 1999 |    \n         * |  29  |   4  | 1999 |   30   |  4   | 1999 |    \n         * |      |      |  --- |    1   |  5   | 1999 |    \n         * |  30  |  12  | 1999 |   31   | 12   | 1999 |    \n         * |      |      |  --- |    1   |  1   | 2000 |    \n         * |      |      |  --- |    2   |  1   | 2000 |    \n         * |  27  |   2  | 2004 |   28   |  2   | 2004 |    \n         * |      |      |  --- |   29   |  2   | 2004 |    \n         * |      |      |  --- |    1   |  3   | 2004 |    \n         * |  27  |  14  | 2004 |   28   |  2   | 2004 | #THROWS ArrayIndexOutOfBoundsException    \n         * </pre>\n         */\n        public static void lisaaPvm(int pvm[]) {\n            ++pvm[PP];\n            int kv = karkausvuosi(pvm[VV]); //palauttaa 0 jos ei, 1 jos on\n            int pv_lkm = KPITUUDET[kv][pvm[KK] - 1];\n            if ( pvm[PP] > pv_lkm ) {\n                pvm[PP] = 1;\n                ++pvm[KK];\n            }\n            if ( pvm[KK] > 12 ) {\n                pvm[KK] = 1;\n                ++pvm[VV];\n            }\n        }\n        \n        \n        \n        /**\n         * @return pvm merkkijonona muodossa 12.11.2015\n         * @example\n         * <pre name=\"test\">\n         * new Pvm(12,11,2015).toString() === \"12.11.2015\";\n         * </pre>\n         */\n           @Override\n            public String toString(){\n                return paiva + \".\" + kuukausi + \".\" + vuosi;\n            }\n\n\n\n        private static void testaa(int pvm[], int kpl) {\n            System.out.println(\"Aluksi: \" + pvm[PP] + \".\" + pvm[KK] + \".\" + pvm[VV]);\n            for (int i = 0; i < kpl; i++) {\n                lisaaPvm(pvm);\n                System.out.println(\" +1 =>  \" + pvm[PP] + \".\" + pvm[KK] + \".\" + pvm[VV]);\n            }\n        }\n\n            \n        /**\n         * @return Pivmrn vuosi\n         * @example\n         * <pre name=\"test\">\n         * Pvm vuosi = new Pvm(3, 12, 1934);\n         * vuosi.getVv() === 1934;\n         * </pre>\n         */\n        public int getVv() {       \n            return this.vuosi;\n        }\n\n\n        private int getKk() {\n            return this.kuukausi;\n        }\n\n\n        private int getPv() {\n            return this.paiva;\n        }\n\n        /**\n         * Testataan lisaaPvm aliohjelmaa\n         * @param args ei kytss\n         */\n        public static void main(String[] args) {\n            int pvm[] = { 27, 2, 1999 };\n            testaa(pvm, 3);\n            int pvm2[] = { 27, 2, 2000 };\n            testaa(pvm2, 3);\n            int pvm3[] = { 31, 12, 2002 };\n            testaa(pvm3, 2);\n            \n            \n             Pvm pv1 = new Pvm(1, 1, 1990);\n             Pvm pv2 = new Pvm(21, 1, 2015);\n             Pvm pv3 = new Pvm(1, 1, 1990);\n             if ( compareTo(pv1,pv2) < 0 ) System.out.println(pv1 + \" < \" + pv2);\n             if ( pv1.compareTo(pv2) != 0 ) System.out.println(pv1 + \" != \" + pv2);\n             if ( pv2.compareTo(pv3) != 0 ) System.out.println(pv2 + \" != \" + pv3);\n             if ( pv1.equals(pv3) ) System.out.println(pv1 + \" == \" + pv3);\n             if ( pv1.equals(pv2) ) System.out.println(pv1 + \" == \" + pv2);\n        }\n    \n        public boolean equals(Pvm pv1) {\n          if (compareTo(pv1) == 0) return true;\n         return false;\n        }\n        \n\n\n        private int compareTo(Pvm pv2) {\n            if (this.vuosi < pv2.vuosi) return -1;\n            else if (this.vuosi == pv2.vuosi) {\n            if (this.kuukausi < pv2.kuukausi) return -1;\n            else if (this.kuukausi == pv2.kuukausi) {\n            if (this.paiva < pv2.paiva) return -1;\n            else if (this.paiva == pv2.paiva) return 0;\n            else return 1;\n            }\n            else return 1;\n            }\n            else return 1;\n        }\n\n\n        /**\n         * Verrataan kahta pivmr joka \n         * @param pv1 paiva jota verrataan\n         * @param pv2 paiva jota verrataan\n         * @return palauttaa -1, mikli pivmr pv1 on ennen pivmr pv2, 0 jos pivmrt ovat samoja ja 1 muissa tapauksissa.\n         * @example\n         * <pre name=\"test\">\n         * #PACKAGEIMPORT=demo.d5\n         * Pvm pv1 = new Pvm(21, 1, 2015);\n         * Pvm pv2 = new Pvm(1, 1, 1990);\n         * Pvm.compareTo(pv1, pv2) === 1;\n         * Pvm.compareTo(pv2, pv1) === -1;\n         * Pvm pv3 = new Pvm(1,1,1990);\n         * Pvm.compareTo(pv1, pv3) === 1;\n         * Pvm.compareTo(pv2, pv3) === 0;\n         * </pre>\n         */\n          private static int compareTo(Pvm pv1, Pvm pv2) {  \n              \n              if (pv1.vuosi < pv2.vuosi) return -1;\n              else if (pv1.vuosi == pv2.vuosi) {\n              if (pv1.kuukausi < pv2.kuukausi) return -1;\n              else if (pv1.kuukausi == pv2.kuukausi) {\n              if (pv1.paiva < pv2.paiva) return -1;\n              else if (pv1.paiva == pv2.paiva) return 0;\n              else return 1;\n              }\n              else return 1;\n              }\n              else return 1;\n            \n              \n           \n          }\n                   \n          \n          \n}",
 "title": "Kulli"
}