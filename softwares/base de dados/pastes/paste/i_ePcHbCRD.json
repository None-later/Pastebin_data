{
 "espireDate": "N",
 "format": "cpp",
 "jSonReasons": [
  "kw_error",
  "lg_en"
 ],
 "key": "ePcHbCRD",
 "pasteDate": "Feb 18, 2018, 4:39:38 PM",
 "relevancy": 3.0,
 "relevant": false,
 "text": "#include <SPI.h> // \n#include <SD.h> //\n#include <Wire.h> //\n#include \"RTClib.h\" //\n#include <SoftwareSerial.h>\n\nint pumpRelayPin = 9;\nint sensorPin = A0;\nint sensorValue = 0;\nint percent = 0;\nunsigned long wateringDelay = 1000 *       1     ; //Time in Seconds\nunsigned long readingDelay =  1000 *       5    ;\n\nint pumpStatus = 0;\n\n\n//SIM800L TX is connected to Arduino D7\n#define SIM800L_TX_PIN 7\n\n//SIM800L RX is connected to Arduino D6\n#define SIM800L_RX_PIN 6\n\n//Create software serial object to communicate with SIM800L\nSoftwareSerial serialSIM800L(SIM800L_TX_PIN, SIM800L_RX_PIN);\n\n\n\n\n// A simple data logger for the Arduino analog pins\n\n// how many milliseconds between grabbing data and logging it. 1000 ms is once a second\n#define LOG_INTERVAL  1000 // mills between entries (reduce to take more/faster data)\n#define SYNC_INTERVAL 1000 // mills between calls to flush() - to write data to the card\nuint32_t syncTime = 0; // time of last sync()\nint buttonReading = 1;\n#define ECHO_TO_SERIAL   1 // echo data to serial port\n#define WAIT_TO_START    0 // Wait for serial input in setup()\n\n\nRTC_DS1307 RTC; // define the Real Time Clock object\n\n// for the data logging shield, we use digital pin 10 for the SD cs line\nconst int chipSelect = 10;\n\n// the logging file\nFile logfile;\n\nvoid error(char *str)\n{\n  Serial.print(\"error: \");\n  Serial.println(str);\n\n  while (1);\n}\n\nvoid setup() {\n  Serial.begin(9600);\n  SPI.begin();      // Initiate  SPI bus\n  //Being serial communication witj Arduino and SIM800L\n  serialSIM800L.begin(9600);\n  delay(15000);\n  Serial.println(\"Setup Complete!\");\n\n  pinMode(pumpRelayPin, OUTPUT);\n  pinMode(sensorPin, INPUT);\n\n  digitalWrite(pumpRelayPin, LOW);\n\n#if WAIT_TO_START\n  Serial.println(\"Type any character to start\");\n  while (!Serial.available());\n#endif //WAIT_TO_START\n\n  // initialize the SD card\n  Serial.print(\"Initializing SD card...\");\n  // make sure that the default chip select pin is set to\n  // output, even if you don't use it:\n  pinMode(10, OUTPUT);\n  //  pinMode(buttonPin, INPUT);\n  // see if the card is present and can be initialized:\n  if (!SD.begin(chipSelect)) {\n    error(\"Card failed, or not present\");\n  }\n  Serial.println(\"card initialized.\");\n\n  // create a new file\n  char filename[] = \"LOGGER00.CSV\";\n  for (uint8_t i = 0; i < 100; i++) {\n    filename[6] = i / 10 + '0';\n    filename[7] = i % 10 + '0';\n    if (! SD.exists(filename)) {\n      // only open a new file if it doesn't exist\n      logfile = SD.open(filename, FILE_WRITE);\n      break;  // leave the loop!\n    }\n  }\n\n  if (! logfile) {\n    error(\"couldnt create file\");\n  }\n\n  Serial.print(\"Logging to: \");\n  Serial.println(filename);\n\n  // connect to RTC\n  Wire.begin();\n  if (!RTC.begin()) {\n    logfile.println(\"RTC failed\");\n#if ECHO_TO_SERIAL\n    Serial.println(\"RTC failed\");\n#endif  //ECHO_TO_SERIAL\n  }\n\n\n  logfile.println(\"Date-Time,RAW Values,Percent\");\n#if ECHO_TO_SERIAL\n  Serial.println(\" Date-Time \\t\\t\\t RAW Value \\t Percent\");\n#endif //ECHO_TO_SERIAL\n\n}\n\nvoid loop() {\n  DateTime now = RTC.now();\n\n  sensorValue = analogRead(sensorPin);\n  percent = convertToPercent(sensorValue);\n\n  Serial.println(pumpStatus);\n\n  if (pumpStatus == 0 && percent < 90) {\n    digitalWrite(pumpRelayPin, HIGH);\n    sendSMSon();\n    pumpStatus = 1;\n    Serial.println(\"Text is Sent\");\n  }\n  else if (pumpStatus == 1 && percent < 90) {\n    digitalWrite(pumpRelayPin, HIGH);\n    pumpStatus = 1;\n    Serial.println(pumpStatus);\n  }\n  else if (pumpStatus == 1 && percent > 90) {\n    digitalWrite(pumpRelayPin, LOW);\n    sendSMSoff();\n    pumpStatus = 0;\n    Serial.println(pumpStatus);\n  }\n\n  printValuesToSerial();\n\n  printValuesToSDcard();\n\n\n\n  delay(readingDelay);\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvoid printValuesToSDcard() {\n  DateTime now;\n  // fetch the time\n  now = RTC.now();\n  // log time\n  logfile.print('\"');\n  logfile.print(now.year(), DEC);\n  logfile.print(\"/\");\n  logfile.print(now.month(), DEC);\n  logfile.print(\"/\");\n  logfile.print(now.day(), DEC);\n  logfile.print(\" \");\n  logfile.print(now.hour(), DEC);\n  logfile.print(\":\");\n  logfile.print(now.minute(), DEC);\n  logfile.print(\":\");\n  logfile.print(now.second(), DEC);\n  logfile.print('\"');\n  delay(10);\n  logfile.print(\", \");\n  logfile.print(sensorValue);\n  delay(10);\n  logfile.print(\", \");\n  logfile.print(percent);\n  logfile.println();\n  if ((millis() - syncTime) < SYNC_INTERVAL) return;\n  syncTime = millis();\n  // blink LED to show we are syncing data to the card & updating FAT!\n  logfile.flush();\n  delay(1000);\n}\n\n\n\nint convertToPercent(int value)\n{\n  int percentValue = 0;\n  percentValue = map(value, 1023, 465, 0, 100);\n  return percentValue;\n}\n\nvoid printValuesToSerial()\n{\n  DateTime now;\n  // fetch the time\n  now = RTC.now();\n  Serial.print(' ');\n  Serial.print(now.year(), DEC);\n  Serial.print(\"/\");\n  Serial.print(now.month(), DEC);\n  Serial.print(\"/\");\n  Serial.print(now.day(), DEC);\n  Serial.print(\" \");\n  Serial.print(now.hour(), DEC);\n  Serial.print(\":\");\n  Serial.print(now.minute(), DEC);\n  Serial.print(\":\");\n  Serial.print(now.second(), DEC);\n  Serial.print(' ');\n\n  Serial.print(\"\\t\\t \");\n  Serial.print(sensorValue);\n  Serial.print(\"\\t\\t \");\n  Serial.print(percent);\n  Serial.print(\"%\");\n  Serial.println();\n}\n\n\n\nvoid sendSMSon() {\n\n  Serial.println(\"Sending Text...\");\n  serialSIM800L.print(\"AT+CMGF=1\\r\"); // Set the shield to SMS mode\n  delay(100);\n  serialSIM800L.print(\"AT+CMGS=\\\"0556983765\\\"\\r\");\n  delay(200);\n  serialSIM800L.print(\"Water Pump is ON   \");\n  serialSIM800L.print(\"Sensor Value:\");\n  serialSIM800L.print(sensorValue);\n  serialSIM800L.print(\" , Moisture:\");\n  serialSIM800L.print(percent);\n  serialSIM800L.print(\"%\");\n  serialSIM800L.print(\"\\r\"); //the content of the message\n  delay(500);\n  serialSIM800L.print((char)26);//the ASCII code of the ctrl+z is 26 (required according to the datasheet)\n  delay(100);\n  serialSIM800L.println();\n  Serial.println(\"Text Sent.\");\n  delay(500);\n\n}\n\n\nvoid sendSMSoff() {\n\n  Serial.println(\"Sending Text...\");\n  serialSIM800L.print(\"AT+CMGF=1\\r\"); // Set the shield to SMS mode\n  delay(100);\n  serialSIM800L.print(\"AT+CMGS=\\\"0556983765\\\"\\r\");\n  delay(200);\n  serialSIM800L.print(\"Water Pump is OFF   \");\n  serialSIM800L.print(\"Sensor Value:\");\n  serialSIM800L.print(sensorValue);\n  serialSIM800L.print(\" , Moisture:\");\n  serialSIM800L.print(percent);\n  serialSIM800L.print(\"%\");\n  serialSIM800L.print(\"\\r\"); //the content of the message\n  delay(500);\n  serialSIM800L.print((char)26);//the ASCII code of the ctrl+z is 26 (required according to the datasheet)\n  delay(100);\n  serialSIM800L.println();\n  Serial.println(\"Text Sent.\");\n  delay(500);\n\n}",
 "title": "Fixed Code for Automatic Irrigation with SMS DataLogger RTC"
}