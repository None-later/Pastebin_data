{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "kw_target",
  "lg_en"
 ],
 "key": "fhU3k1BT",
 "pasteDate": "Feb 28, 2018, 12:35:02 AM",
 "relevancy": 0.0,
 "relevant": false,
 "text": "public interface Scoreboard {\n    \n    /**\n     * @param line  - The text to display on the new line, 64 characters max.\n     * @param score - The score value to give the new line.\n     */\n    void set(Object line, int score);\n    \n    /**\n     * Removes the line with the given score.\n     *\n     * @param score - The score value associated with the target line.\n     */\n    void remove(int score);\n    \n    /**\n     * Sets both {@link org.bukkit.scoreboard.Objective}s display names.\n     *\n     * @param title - The desired title for the {@link org.bukkit.scoreboard.Scoreboard}.\n     */\n    void setTitle(Object title);\n    \n    /**\n     * @param score - The score value to give the new blank line.\n     */\n    default void blank(int score) {\n        set(\"\", score);\n    }\n    \n    /**\n     * Returns the underlying {@link org.bukkit.scoreboard.Scoreboard}.\n     *\n     * @return - The underlying {@link org.bukkit.scoreboard.Scoreboard}.\n     */\n    org.bukkit.scoreboard.Scoreboard getScoreboard();\n}\n\n/**\n * A 32 character no flicker scoreboard implementation, fast and lightweight.\n */\npublic class TeamsScoreboard implements Scoreboard {\n\n    private final Objective objective;\n    private final org.bukkit.scoreboard.Scoreboard board;\n    private final Map<Integer, String> entries = new HashMap<>();\n    private final List<Integer> shown = new ArrayList<>();\n    private int index = 0;\n    private int times = 0;\n\n    public TeamsScoreboard() {\n        this.board = Bukkit.getScoreboardManager().getNewScoreboard();\n        objective = board.registerNewObjective(\"test\", \"dummy\");\n        objective.setDisplaySlot(DisplaySlot.SIDEBAR);\n    }\n\n    @Override\n    public void set(Object line, int score) {\n        String stringLine = ChatColor.translateAlternateColorCodes('&', line.toString());\n        Team team = board.getTeam(String.valueOf(score));\n        if (team == null) {\n            team = board.registerNewTeam(String.valueOf(score));\n            String entry = getNextEntry();\n            team.addEntry(entry);\n            entries.put(score, entry);\n        }\n        if (!shown.contains(score)) {\n            objective.getScore(entries.get(score)).setScore(score);\n            shown.add(score);\n        }\n\n        String prefix = stringLine.substring(0, min(stringLine.length(), 16));\n        team.setPrefix(prefix);\n        String lastColors = ChatColor.getLastColors(prefix);\n        if (stringLine.length() > 16)\n            team.setSuffix(lastColors + stringLine.substring(16, min(stringLine.length(), 32 - lastColors.length())));\n\n        if (stringLine.length() > 32)\n            System.err.println(\"[Scoreboard] A \" + stringLine.length() + \" character line was truncated to 32 characters. Line: \" + score + \" Text: '\" + stringLine + \"'\");\n    }\n\n    @Override\n    public void remove(int score) {\n        if (entries.containsKey(score))\n            board.resetScores(entries.get(score));\n        if (shown.contains(score))\n            shown.remove(Integer.valueOf(score));\n    }\n\n    @Override\n    public void setTitle(Object title) {\n        objective.setDisplayName(ChatColor.translateAlternateColorCodes('&', title.toString()));\n    }\n\n    @Override\n    public org.bukkit.scoreboard.Scoreboard getScoreboard() {\n        return board;\n    }\n\n    private String getNextEntry() {\n        ChatColor color = ChatColor.values()[index++];\n        if (index >= ChatColor.values().length) {\n            index = 0;\n            times++;\n        }\n        return color.toString() + ChatColor.values()[times] + ChatColor.RESET;\n    }\n}",
 "title": ""
}