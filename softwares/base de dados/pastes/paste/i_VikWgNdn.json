{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "lg_en"
 ],
 "key": "VikWgNdn",
 "pasteDate": "Feb 26, 2018, 11:02:01 AM",
 "relevancy": 0.0,
 "relevant": false,
 "text": "package search;\n\npublic class BinarySearch {\n    // pre: n >= 0 && x >= 0 && forall i: i >= 0 && i < a.length - 1: a[i] >= a[i + 1]\n    // post: r == min i: a[i] <= x\n    public static int binSearchIt(int[] a, int x, int n) {\n        //pre: b == - 1\n        //post: l == b\n        int l = -1;\n        //pre: b == n\n        //post: r == b\n        int r = n;\n        int m;\n        //pre: l == -1 ^ r == n\n        //post: r == min i: a[i] <= x\n        while (l < r - 1) {\n            //inv: l < r - 1\n            //pre: b == (l + r) / 2\n            //post: m == b\n            m = (l + r) / 2;\n            //pre: a[m] > x\n            //post: l == m\n            if (a[m] > x) {\n                //pre: b == m\n                //post: l == b\n                l = m;\n                //l' == m, r' == r\n                //a[m] > x -> a[l'] > x\n            }\n            //pre: a[m] <= x\n            //post: r == m\n            else {\n                //pre: b == m\n                //post: r == b\n                r = m;\n                //l' == l, r' == m\n                //a[m] <= x -> a[r'] <= x\n            }\n        }\n        //((a[r] <= x && r >= 1 && a[r - 1] > x) || (r == 0 && a[r] <= x)) && l >= r - 1\n        return r;\n    }\n\n    // pre: x >= 0 && l == [-1; a.length - 1] && r == [0; a.length - 1] && ((a[l..r] > x && r == a.length - 1) || (a[l] >= x >= a[r])) &&\n    // && forall i: i >= 0 && i < a.length - 1: a[i] >= a[i + 1]\n    // post: r == min i: a[i] <= x\n    public static int binSearchRec(int[] a, int x, int l, int r) {\n        //pre: b == l + (r - l) / 2\n        //post: m == b\n        int m = l + (r - l) / 2;\n        if (l >= r - 1) {\n            //pre: l >= r - 1\n            //(a[r] <= x && r >= 1 && a[r - 1] > x) || (r == 0 && a[r] <= x)\n            return r;\n        }\n        //pre: l < r - 1 && a[m] > x\n        //post: l' == m\n        //a[m] > x -> a[l'] > x\n        else if (a[m] > x) {\n            return binSearchRec(a, x, m, r);\n        }\n        //pre: l < r - 1 && a[m] <= x\n        //post: r' == m\n        //a[m] <= x -> a[r'] <= x\n        else {\n            return binSearchRec(a, x, l, m);\n        }\n    }\n\n    public static void main(String[] args) {\n        int x = Integer.parseInt(args[0]);\n        int[] a = new int[args.length];\n        for (int i = 1; i < args.length; i++){\n            //inv: i < args.length && i >= 1\n            a[i - 1] = Integer.parseInt(args[i]);\n        }\n        int ans = binSearchIt(a, x, a.length - 1);\n        //int ans = binSearchRec(a, x, -1, a.length - 1);\n        System.out.println(ans);\n    }\n}",
 "title": ""
}