{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "lg_en"
 ],
 "key": "gZhYtiNT",
 "pasteDate": "Feb 26, 2018, 11:08:07 AM",
 "relevancy": 1.0,
 "relevant": false,
 "text": "const config = {\n  height:55,\n  duration: 50,\n  iconSize: 25,\n  radius:28,\n  border:1,\n  transparency:0.3,\n  offset:1\n};\n\nconst items = [\n  {\n    uid: 1,\n    label: \"Left\",\n    icon: \"ios-cloudy\",\n    iconActive: \"ios-cloudy\",\n    color: Theme.color.base,\n    colorActive: Theme.color.beta\n  },\n  {\n    uid: 2,\n    label: \"Middle\",\n    icon: \"ios-aperture-outline\",\n    iconActive: \"ios-aperture\",\n    color: Theme.color.base,\n    colorActive: Theme.color.beta\n  },\n  {\n    uid: 3,\n    label: \"right\",\n    icon: \"ios-analytics-outline\",\n    iconActive: \"ios-analytics\",\n    color: Theme.color.base,\n    colorActive: Theme.color.beta\n  }\n];\n\nconst Button = props => {\n  return (\n    <View>\n      <TouchableOpacity onPress={props.onPress} style={styles.buttonStyle}>\n        {props.active ? (\n          <Ionicons name={props.icon} size={props.size} color={props.color} />\n        ) : (\n          <Ionicons\n            name={props.iconActive}\n            size={props.size}\n            color={props.colorActive}\n          />\n        )}\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nButton.propTypes = {\n  type: PropTypes.string,\n  active: PropTypes.bool,\n  onPress: PropTypes.func\n};\n\nButton.defaultProps = {\n  active: false\n};\n\nexport default class Switch extends React.Component {\n  state = {\n    isComponentReady: false,\n    position: new Animated.Value(0),\n    current: items[0],\n    idx: 1,\n    ctn: 0,\n    xx: new Animated.Value(0)\n  };\n\n  measureRef(ref, key) {\n    if (!ref) return;\n    if (this.state.ctn === 0) {\n      requestAnimationFrame(() => {\n        ref.measure((ox, oy, width, height, px, py) => {\n          this.setState({\n            [key]: width\n          });\n        });\n      });\n    } else return;\n  }\n\n  componentDidMount() {\n    this.isParentScrollDisabled = false;\n    this.xx =0;\n    this.panListener = this.state.xx.addListener((value) => this.xx = value);\n  }\n  componentWillUnmount(){\n    this.state.xx.removeListener(this.panListener);\n  }\n  componentWillMount() {\n\n    this._panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: () => true,\n      onStartShouldSetPanResponderCapture: () => true,\n      onMoveShouldSetPanResponder: () => true,\n      onMoveShouldSetPanResponderCapture: () => true,\n      onPanResponderGrant: () => {\n        // disable parent scroll if slider is inside a scrollview\n        if (!this.isParentScrollDisabled) {\n          this.props.disableScroll(false);\n          this.isParentScrollDisabled = true;\n        }\n        this.state.xx.setOffset(this.xx);\n        this.state.xx.setValue(0);\n      },\n      onPanResponderMove: (evt, gestureState) =>  { Animated.event([null, { dx: this.state.xx }])(\n              evt,\n              gestureState\n            )\n          },\n\n      onPanResponderTerminationRequest: () => true,\n      onPanResponderRelease: (evt, gestureState) => {\n        const { moveX } = gestureState;\n        this.isParentScrollDisabled = false;\n        this.props.disableScroll(true);\n\n        if (moveX >= 0 && moveX <= this.state.ctn / 3) {\n          this.goTo(1);\n        } else if (\n          moveX >= this.state.ctn / 3 &&\n          moveX <= this.state.ctn / 3 * 2\n        ) {\n          this.goTo(2);\n        } else {\n          this.goTo(3);\n        } \n        \n        this.state.xx.setOffset(this.xx);\n        this.state.xx.setValue(0);\n      },\n      onPanResponderTerminate: () => {},\n      onShouldBlockNativeResponder: () => {\n        return true;\n      }\n    });\n  }\n\n  output(idx){\n    if (idx == 1) return 0;\n    if (idx == 2) return this.state.ctn / 3;\n    if (idx == 3) return this.state.ctn / 3 * 2;\n  }\n\n  goTo(idx) {\n    const curr = items.find(item => item.uid === idx),\n      pos = this.output(idx);\n\n    this.setState(\n      {\n        current: curr,\n        idx: idx,\n      },\n      () =>\n        Animated.timing(this.state.position, {\n          toValue:pos,\n          duration: config.duration\n        }).start(\n          this.state.isComponentReady && this.props.onStatusChanged(idx)\n    ))\n  }\n\n  render() {\n    return (\n      <View\n        style={styles.container}\n        ref={el => {\n          this.measureRef(el, \"ctn\");\n        }}\n      >\n\n        {\n          items.map(button => (\n            <Button\n              key={button.uid}\n              icon={button.icon}\n              iconActive={button.iconActive}\n              color={button.color}\n              colorActive={button.colorActive}\n              onPress={() => this.goTo(button.uid)}\n              size={config.iconSize}\n            />\n          ))\n        }\n\n        <Animated.View\n          {...this._panResponder.panHandlers}\n          style={[\n            styles.switcher,\n            {\n              transform:[\n              {translateX:this.state.position //translation\n              }]\n            }\n          ]}\n        >\n          <Button\n            key={this.state.current.uid}\n            icon={this.state.current.icon}\n            iconActive={this.state.current.iconActive}\n            size={config.iconSize}\n            active={true}\n          />\n        </Animated.View>\n      </View>\n    );\n  }\n}\n\nSwitch.propTypes = {\n  disableScroll: PropTypes.func,\n  onStatusChanged: PropTypes.func\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    width: WIDTH - WIDE,\n    height: config.height,\n    flexDirection: \"row\",\n    backgroundColor: Theme.color.bg,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    alignSelf: \"center\",\n    borderWidth: config.border,\n    borderColor: Theme.color.rey,\n    borderRadius: config.radius,\n  },\n\n  switcher: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: (WIDTH - WIDE) / 3,\n    height: config.height - 2, // MAGIC NUMBER, SORRY GODS\n    backgroundColor: Theme.color.rey,\n    borderRadius: config.radius,\n    shadowOpacity: config.transparency,\n    shadowOffset: { x: config.offset, y: config.offset },\n    shadowColor: Theme.color.palpatine,\n    shadowRadius: config.radius,\n    elevation: 4,\n  },\n  buttonStyle: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: (WIDTH - WIDE) / 3,\n    height: config.height - 1 // MAGIC NUMBER, SORRY GODS\n  }\n});",
 "title": ""
}