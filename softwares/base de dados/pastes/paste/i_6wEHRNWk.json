{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "lg_en"
 ],
 "key": "6wEHRNWk",
 "pasteDate": "Feb 18, 2018, 4:43:32 PM",
 "relevancy": 1.0,
 "relevant": false,
 "text": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace RatSockServer\n{\n    public class Program\n    {\n        //Both\n        static string match = \"test\";\n\n        static int port = 1337;\n\n        //Server\n        static IPAddress ipRecieve = IPAddress.Any;\n\n        static TcpListener server = new TcpListener(ipRecieve, port);\n        \n        static List<Connection> connections = new List<Connection>();\n\n        static void Main(string[] args)\n        {\n            server.Start();\n            Thread checkCon_Thread = new Thread(checkNewConnection);\n            Thread returnList_Thread = new Thread(returnList);\n            checkCon_Thread.Start();\n            returnList_Thread.Start();\n        }\n\n        static void checkNewConnection()\n        {\n            Connection connection = new Connection(null, server.AcceptTcpClient());\n            if (connection.client != null)\n            {\n                Thread newCon_Thread = new Thread(()=>newConnection(connection));\n                newCon_Thread.Start();\n            }\n            checkNewConnection();\n        }\n\n        static void returnList()\n        {\n            if (connections.Count != 0)\n            {\n                foreach (var a_con in connections)\n                {\n                    foreach (var a_str in a_con.connection)\n                    {\n                        Console.Write(a_str + \"    \");\n                    }\n                    Console.WriteLine();\n                }\n            }\n            else\n            {\n                Console.WriteLine(\"Waiting for Connections\");\n            }\n\n            checkStates();\n            Thread.Sleep(5000);\n            Console.Clear();\n            returnList();\n        }\n\n        static void checkStates()\n        {\n            try\n            {\n                foreach (var a_con in connections)\n                {\n               \n                    sendData(a_con.client, \"check_state\");\n\n                    string r_raw = recieveData(a_con.client);\n                    string[] r_msg = null;\n                    if (r_raw != null)\n                    {\n                        r_msg = r_raw.Split('_');\n                        if (r_msg[0] == a_con.connection[1])\n                        {\n                            if (r_msg[1] != \"alive\")\n                            {\n                                connections.Remove(a_con);\n                            }\n                        }\n                        else\n                        {\n                            connections.Remove(a_con);\n                        }\n                    }\n                    else\n                    {\n                        connections.Remove(a_con);\n                    }\n                \n                \n                }\n            }\n            catch (InvalidOperationException)\n            {\n\n            }\n        }\n\n        static void newConnection(Connection connection)\n        {\n            string r_Match = recieveData(connection.client);\n            if (r_Match == match)\n            {\n                sendData(connection.client, \"accept\");\n                addToList(connection);\n            }\n        }\n\n        static void addToList(Connection connection)\n        {\n            string[] t_connection = new string[3];\n            string t_data = connections.Count+1 + \"_\" + recieveData(connection.client);\n            t_connection =  t_data.Split('_');\n            connection.connection = t_connection;\n            connections.Add(connection);\n        }\n\n        static string recieveData(TcpClient client)\n        {\n            Byte[] bytes = new Byte[256];\n            string data = null;\n\n            // Get a stream object for reading and writing\n            NetworkStream stream = client.GetStream();\n\n            try\n            {\n                int i = stream.Read(bytes, 0, bytes.Length);\n                data = System.Text.Encoding.ASCII.GetString(bytes, 0, i);\n            }\n            catch (IOException e)\n            {\n                data = null;\n            }\n\n            return data;\n        }\n\n        static void sendData(TcpClient client, string message)\n        {\n            // Translate the passed message into ASCII and store it as a Byte array.\n            Byte[] data = System.Text.Encoding.ASCII.GetBytes(message);\n\n            NetworkStream stream = client.GetStream();\n            stream.Write(data, 0, data.Length);\n        }\n    }\n}",
 "title": ""
}