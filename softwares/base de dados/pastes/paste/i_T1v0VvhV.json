{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "kw_op",
  "lg_en"
 ],
 "key": "T1v0VvhV",
 "pasteDate": "Feb 12, 2018, 11:56:02 AM",
 "relevancy": 1.0,
 "relevant": false,
 "text": "using System;\nusing System.Collections.Generic;\nusing System.Drawing;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Xml;\n\nnamespace STE.CIMXML\n{\n    public class CIMObjBase\n    {\n        public override String ToString()\n        {\n            return this.GetType().Name + \":\" + this.ID;\n        }\n\n        public String ID { set; get; }\n\n        public String cim_IdentifiedObjectname { get; set; }\n        public String cim_IdentifiedObjectpathName { get; set; }\n\n        private static Dictionary<string, CIMObjBase> _objects = new Dictionary<string, CIMObjBase>();\n        public static IEnumerable<CIMObjBase> CIMObjects\n        {\n            get\n            {\n                return _objects.Values;\n            }\n        }\n\n        public static void AddCIMObjects(IEnumerable<CIMObjBase> CIMObjects)\n        {\n            new List<CIMObjBase>(CIMObjects).ForEach(o => _objects.Add(o.ID, o));\n        }\n\n        public static CIMObjBase GetCIMObject(string ID)\n        {\n            if (_objects.ContainsKey(ID))\n            {\n                return _objects[ID];\n            }\n            else\n            {\n                return null;\n            }\n        }\n\n        public static T[] TypedCIMObjects<T>()\n        {\n            List<T> results = new List<T>();\n            foreach (var o in _objects.Values)\n            {\n                if (o.GetType() == typeof(T))\n                {\n                    T val = (T)ValueAs(typeof(T), o, null);\n                    results.Add(val);\n                }\n            }\n            return results.Where(r => r != null).ToArray();\n        }\n\n        private static object ValueAs(System.Type type, CIMObjBase obj, object defaultValue)\n        {\n            object result = null;\n\n            if (obj == null)\n            {\n                result = null;\n            }\n            else\n            {\n                if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Nullable))\n                {\n                    Type underlyingtype = Nullable.GetUnderlyingType(type);\n                    Type constructed = type.GetGenericTypeDefinition().MakeGenericType(underlyingtype);\n                    Object value = System.Convert.ChangeType(obj, underlyingtype);\n\n                    if (value != null)\n                        result = Activator.CreateInstance(constructed, value);\n                }\n                else\n                {\n                    result = System.Convert.ChangeType(obj, type);\n                }\n\n            }\n            return result;\n        }\n\n        public static CIMObjBase[] ParseXML(string XMLString)\n        {\n            List<CIMObjBase> Results = new List<CIMObjBase>();\n            XmlDocument XD = new XmlDocument();\n            XD.Load(XMLString);\n            foreach (XmlNode N in XD.GetElementsByTagName(\"rdf:RDF\")[0])\n            {\n                string NodeName = N.Name;\n                string ClassName = NodeName.Replace(\":\", \"_\");\n                CIMObjBase obj = null;\n                switch (NodeName)\n                {\n                    case \"cim:ACLineSegment\":\n                        obj = new cim_ACLineSegment(N);\n                        break;\n                    case \"cim:Accumulator\":\n                        obj = new cim_Accumulator(N);\n                        break;\n                    case \"cim:Analog\":\n                        obj = new cim_Analog(N);\n                        break;\n                    case \"cim:AnalogLimit\":\n                        obj = new cim_AnalogLimit(N);\n                        break;\n                    case \"cim:AnalogLimitSet\":\n                        obj = new cim_AnalogLimitSet(N);\n                        break;\n                    case \"cim:ApparentPowerLimit\":\n                        obj = new cim_ApparentPowerLimit(N);\n                        break;\n                    case \"cim:BranchGroupTerminal\":\n                        obj = new cim_BranchGroupTerminal(N);\n                        break;\n                    case \"cim:Breaker\":\n                        obj = new cim_Breaker(N);\n                        break;\n                    case \"cim:BusbarSection\":\n                        obj = new cim_BusbarSection(N);\n                        break;\n                    case \"cim:Calculation\":\n                        obj = new cim_Calculation(N);\n                        break;\n                    case \"cim:ConformLoad\":\n                        obj = new cim_ConformLoad(N);\n                        break;\n                    case \"cim:ConnectivityNode\":\n                        obj = new cim_ConnectivityNode(N);\n                        break;\n                    case \"cim:Diagram\":\n                        obj = new cim_Diagram(N);\n                        break;\n                    case \"cim:DiagramObject\":\n                        obj = new cim_DiagramObject(N);\n                        break;\n                    case \"cim:DiagramObjectGluePoint\":\n                        obj = new cim_DiagramObjectGluePoint(N);\n                        break;\n                    case \"cim:DiagramObjectPoint\":\n                        obj = new cim_DiagramObjectPoint(N);\n                        break;\n                    case \"cim:DiagramObjectStyle\":\n                        obj = new cim_DiagramObjectStyle(N);\n                        break;\n                    case \"cim:Disconnector\":\n                        obj = new cim_Disconnector(N);\n                        break;\n                    case \"cim:Discrete\":\n                        obj = new cim_Discrete(N);\n                        break;\n                    case \"cim:EquipmentGroup\":\n                        obj = new cim_EquipmentGroup(N);\n                        break;\n                    case \"cim:GeneratingUnit\":\n                        obj = new cim_GeneratingUnit(N);\n                        break;\n                    case \"cim:Line\":\n                        obj = new cim_Line(N);\n                        break;\n                    case \"cim:NonConformLoad\":\n                        obj = new cim_NonConformLoad(N);\n                        break;\n                    case \"cim:OperationalLimitSet\":\n                        obj = new cim_OperationalLimitSet(N);\n                        break;\n                    case \"cim:PowerTransformer\":\n                        obj = new cim_PowerTransformer(N);\n                        break;\n                    case \"cim:SeriesCompensator\":\n                        obj = new cim_SeriesCompensator(N);\n                        break;\n                    case \"cim:ShuntCompensator\":\n                        obj = new cim_ShuntCompensator(N);\n                        break;\n                    case \"cim:StaticVarCompensator\":\n                        obj = new cim_StaticVarCompensator(N);\n                        break;\n                    case \"cim:SubGeographicalRegion\":\n                        obj = new cim_SubGeographicalRegion(N);\n                        break;\n                    case \"cim:Substation\":\n                        obj = new cim_Substation(N);\n                        break;\n                    case \"cim:SynchronousMachine\":\n                        obj = new cim_SynchronousMachine(N);\n                        break;\n                    case \"cim:TapChanger\":\n                        obj = new cim_TapChanger(N);\n                        break;\n                    case \"cim:Terminal\":\n                        obj = new cim_Terminal(N);\n                        break;\n                    case \"cim:TextDiagramObject\":\n                        obj = new cim_TextDiagramObject(N);\n                        break;\n                    case \"cim:TransformerWinding\":\n                        obj = new cim_TransformerWinding(N);\n                        break;\n                    case \"cim:VoltageLevel\":\n                        obj = new cim_VoltageLevel(N);\n                        break;\n                }\n                if (obj != null)\n                    Results.Add(obj);\n            }\n            AddCIMObjects(Results.ToArray());\n            return Results.ToArray();\n        }\n    }\n\n    public class cim_ACLineSegment : CIMObjBase\n    {\n        public cim_ACLineSegment(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:ACLineSegment.NearVoltageLevel\":\n                        _cim_ACLineSegmentNearVoltageLevelID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:ACLineSegment.FarVoltageLevel\":\n                        _cim_ACLineSegmentFarVoltageLevelID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:Equipment.MemberOf_EquipmentContainer\":\n                        string ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_EquipmentMemberOf_EquipmentContainerID = ID;\n                        break;\n                    case \"cim:ConductingEquipment.BaseVoltage\":\n                        cim_ConductingEquipmentBaseVoltage = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:Conductor.x0\":\n                        cim_ConductorX0 = cn.InnerText;\n                        break;\n                    case \"cim:Equipment.SortOrder\":\n                        cim_EquipmentSortOrder = cn.InnerText;\n                        break;\n                    case \"cim:Conductor.RemoveEnable\":\n                        cim_ConductorRemoveEnable = cn.InnerText;\n                        break;\n                    case \"cim:Conductor.r0\":\n                        cim_ConductorR0 = cn.InnerText;\n                        break;\n                    case \"cim:Conductor.BCHPU\":\n                        cim_ConductorBCHPU = cn.InnerText;\n                        break;\n                    case \"cim:Conductor.CalculateEngineeringFromPU\":\n                        cim_ConductorCalculateEngineeringFromPU = cn.InnerText;\n                        break;\n                    case \"cim:Conductor.Remove\":\n                        cim_ConductorRemove = cn.InnerText;\n                        break;\n                    case \"cim:Conductor.R0PU\":\n                        cim_ConductorR0PU = cn.InnerText;\n                        break;\n                    case \"cim:Conductor.r\":\n                        cim_ConductorR = cn.InnerText;\n                        break;\n                    case \"cim:Conductor.BaseMVAPU\":\n                        cim_ConductorBaseMVAPU = cn.InnerText;\n                        break;\n                    case \"cim:Conductor.BaseKVPU\":\n                        cim_ConductorBaseKVPU = cn.InnerText;\n                        break;\n                    case \"cim:Conductor.x\":\n                        cim_ConductorX = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.aliasName\":\n                        cim_IdentifiedObjectaliasName = cn.InnerText;\n                        break;\n                    case \"cim:ACLineSegment.ZeroImpedanceLine\":\n                        cim_ACLineSegmentZeroImpedanceLine = cn.InnerText;\n                        break;\n                    case \"cim:ACLineSegment.EMSName\":\n                        cim_ACLineSegmentEMSName = cn.InnerText;\n                        break;\n                    case \"cim:Conductor.X0PU\":\n                        cim_ConductorX0PU = cn.InnerText;\n                        break;\n                    case \"cim:ACLineSegment.ForSCADA\":\n                        cim_ACLineSegmentForSCADA = cn.InnerText;\n                        break;\n                    case \"cim:ACLineSegment.ForNetwork\":\n                        cim_ACLineSegmentForNetwork = cn.InnerText;\n                        break;\n                    case \"cim:Conductor.bch\":\n                        cim_ConductorBCH = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"cim:ACLineSegment.PartialModel\":\n                        cim_ACLineSegmentPartialModel = cn.InnerText;\n                        break;\n                    case \"cim:Conductor.XPU\":\n                        cim_ConductorXPU = cn.InnerText;\n                        break;\n                    case \"cim:Conductor.length\":\n                        cim_ConductorLength = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.pathName\":\n                        cim_IdentifiedObjectpathName = cn.InnerText;\n                        break;\n                    case \"cim:Conductor.RPU\":\n                        cim_ConductorRPU = cn.InnerText;\n                        break;\n                    case \"cim:ACLineSegment.FarEquipmentGroup\":\n                        cim_ACLineSegmentFarEquipmentGroup = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                }\n            }\n        }\n\n        private cim_DiagramObject _diagramObject = null;\n        public cim_DiagramObject DiagramObject\n        {\n            get\n            {\n                if (_diagramObject == null)\n                    _diagramObject = CIMObjBase.TypedCIMObjects<cim_DiagramObject>().Where(x => x.cim_DiagramObjectIdentifiedObject == this).FirstOrDefault();\n                return _diagramObject;\n            }\n        }\n        private cim_Terminal[] _terminals = null;\n        public cim_Terminal[] Terminals\n        {\n            get\n            {\n                if (_terminals == null)\n                    _terminals = CIMObjBase.TypedCIMObjects<cim_Terminal>().Where(x => x.cim_TerminalConductingEquipment == this).ToArray();\n                return _terminals;\n            }\n        }\n\n        private String _cim_ACLineSegmentNearVoltageLevelID = String.Empty;\n        private cim_VoltageLevel _nearVoltageLevel = null;\n        public cim_VoltageLevel NearVoltageLevel\n        {\n            get\n            {\n                if (_nearVoltageLevel == null)\n                    _nearVoltageLevel = CIMObjBase.TypedCIMObjects<cim_VoltageLevel>().Where(x => x.ID.Equals(_cim_ACLineSegmentNearVoltageLevelID)).FirstOrDefault();\n                return _nearVoltageLevel;\n            }\n        }\n        private String _cim_ACLineSegmentFarVoltageLevelID = String.Empty;\n        private cim_VoltageLevel _farVoltageLevel = null;\n        public cim_VoltageLevel FarVoltageLevel\n        {\n            get\n            {\n                if (_farVoltageLevel == null)\n                    _farVoltageLevel = CIMObjBase.TypedCIMObjects<cim_VoltageLevel>().Where(x => x.ID.Equals(_cim_ACLineSegmentFarVoltageLevelID)).FirstOrDefault();\n                return _farVoltageLevel;\n            }\n        }\n\n        public CIMObjBase cim_EquipmentMemberOf_EquipmentContainer\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_EquipmentMemberOf_EquipmentContainerID))\n                {\n                    Result = GetCIMObject(_cim_EquipmentMemberOf_EquipmentContainerID);\n                }\n\n                return Result;\n            }\n            set\n            {\n                // No Op\n            }\n        }\n        \n        private String _cim_EquipmentMemberOf_EquipmentContainerID { get; set; }\n        public String cim_ConductingEquipmentBaseVoltage { get; set; }\n        public String cim_ConductorX0 { get; set; }\n        public String cim_EquipmentSortOrder { get; set; }\n        public String cim_ConductorRemoveEnable { get; set; }\n        public String cim_ConductorR0 { get; set; }\n        public String cim_ConductorBCHPU { get; set; }\n        public String cim_ConductorCalculateEngineeringFromPU { get; set; }\n        public String cim_ConductorRemove { get; set; }\n        public String cim_ConductorR0PU { get; set; }\n        public String cim_ConductorR { get; set; }\n        public String cim_ConductorBaseMVAPU { get; set; }\n        public String cim_ConductorBaseKVPU { get; set; }\n        public String cim_ConductorX { get; set; }\n        public String cim_IdentifiedObjectaliasName { get; set; }\n        public String cim_ACLineSegmentZeroImpedanceLine { get; set; }\n        public String cim_ACLineSegmentEMSName { get; set; }\n        public String cim_ConductorX0PU { get; set; }\n        public String cim_ACLineSegmentForSCADA { get; set; }\n        public String cim_ACLineSegmentForNetwork { get; set; }\n        public String cim_ConductorBCH { get; set; }\n        public String cim_ACLineSegmentPartialModel { get; set; }\n        public String cim_ConductorXPU { get; set; }\n        public String cim_ConductorLength { get; set; }\n        public String cim_ConductorRPU { get; set; }\n        public String cim_ACLineSegmentFarEquipmentGroup { get; set; }\n\n    }\n\n    public class cim_Accumulator : CIMObjBase\n    {\n        string _cim_MeasurementTerminalID;\n        public CIMObjBase cim_MeasurementTerminal\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_MeasurementTerminalID))\n                {\n                    Result = GetCIMObject(_cim_MeasurementTerminalID);\n                }\n\n                return Result;\n            }\n            set\n            {\n\n            }\n        }\n        public cim_Accumulator(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:Measurement.Terminal\":\n                        string ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_MeasurementTerminalID = ID;\n                        break;\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.pathName\":\n                        cim_IdentifiedObjectpathName = cn.InnerText;\n                        break;\n                }\n            }\n        }\n    }\n\n    public class cim_Analog : CIMObjBase\n    {\n        string _cim_MeasurementTerminalID;\n        public CIMObjBase cim_MeasurementTerminal\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_MeasurementTerminalID))\n                {\n                    Result = GetCIMObject(_cim_MeasurementTerminalID);\n                }\n\n                return Result;\n            }\n            set\n            {\n\n            }\n        }\n        public String cim_MeasurementMeasurementType { get; set; }\n        public String cim_AnalogpositiveFlowIn { get; set; }\n        public String cim_AnalognormalValue { get; set; }\n\n        public cim_Analog(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:Measurement.Terminal\":\n                        string ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_MeasurementTerminalID = ID;\n                        break;\n                    case \"cim:Measurement.MeasurementType\":\n                        cim_MeasurementMeasurementType = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:Analog.positiveFlowIn\":\n                        cim_AnalogpositiveFlowIn = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"cim:Analog.normalValue\":\n                        cim_AnalognormalValue = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.pathName\":\n                        cim_IdentifiedObjectpathName = cn.InnerText;\n                        break;\n                }\n            }\n        }\n    }\n\n    public class cim_AnalogLimit : CIMObjBase\n    {\n        string _cim_AnalogLimitLimitSetID;\n        public CIMObjBase cim_AnalogLimitLimitSet\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_AnalogLimitLimitSetID))\n                {\n                    Result = GetCIMObject(_cim_AnalogLimitLimitSetID);\n                }\n\n                return Result;\n            }\n            set\n            {\n\n            }\n        }\n        public String cim_AnalogLimitValue { get; set; }\n        public cim_AnalogLimit(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:AnalogLimit.LimitSet\":\n                        string ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_AnalogLimitLimitSetID = ID;\n                        break;\n                    case \"cim:AnalogLimit.value\":\n                        cim_AnalogLimitValue = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.pathName\":\n                        cim_IdentifiedObjectpathName = cn.InnerText;\n                        break;\n                }\n            }\n        }\n    }\n\n    public class cim_AnalogLimitSet : CIMObjBase\n    {\n        String _cim_AnalogLimitSetMeasurementsID;\n        public CIMObjBase cim_AnalogLimitSetMeasurements\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_AnalogLimitSetMeasurementsID))\n                {\n                    Result = GetCIMObject(_cim_AnalogLimitSetMeasurementsID);\n                }\n                return Result;\n            }\n            set\n            {\n                // nothing\n            }\n        }\n        public String cim_LimitSetisPercentageLimits { get; set; }\n        public cim_AnalogLimitSet(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n                switch (cn.Name)\n                {\n                    case \"cim:AnalogLimitSet.Measurements\":\n                        String ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_AnalogLimitSetMeasurementsID = ID;\n\n                        break;\n                    case \"cim:LimitSet.isPercentageLimits\":\n                        cim_LimitSetisPercentageLimits = cn.InnerText;\n\n                        break;\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n\n                        break;\n                    case \"cim:IdentifiedObject.pathName\":\n                        cim_IdentifiedObjectpathName = cn.InnerText;\n\n                        break;\n                }\n        }\n    }\n\n    public class cim_ApparentPowerLimit : CIMObjBase\n    {\n        public String cim_OperationalLimitOperationalLimitType { get; set; }\n        String _cim_OperationalLimitOperationalLimitSetID;\n        public CIMObjBase cim_OperationalLimitOperationalLimitset\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_OperationalLimitOperationalLimitSetID))\n                {\n                    Result = GetCIMObject(_cim_OperationalLimitOperationalLimitSetID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        public String cim_OperationalLimitOpLimitType { get; set; }\n        public String cim_OperationalLimitNETMOMCompositeId { get; set; }\n        public String cim_OperationalLimitPathName { get; set; }\n        public String cim_OperationalLimitSubstationContainer { get; set; }\n        public String cim_OperationalLimitValue { get; set; }\n        public cim_ApparentPowerLimit(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:OperationalLimit.OperationalLimitType\":\n                        cim_OperationalLimitOperationalLimitType = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:OperationalLimit.OperationalLimitSet\":\n                        String ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_OperationalLimitOperationalLimitSetID = ID;\n                        break;\n                    case \"cim:OperationalLimit.OpLimitType\":\n                        cim_OperationalLimitOpLimitType = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:OperationalLimit.NETMOMCompositeId\":\n                        cim_OperationalLimitNETMOMCompositeId = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"cim:OperationalLimit.PathName\":\n                        cim_OperationalLimitPathName = cn.InnerText;\n                        break;\n                    case \"cim:OperationalLimit.SubstationContainer\":\n                        cim_OperationalLimitSubstationContainer = cn.InnerText;\n                        break;\n                    case \"cim:OperationalLimit.Value\":\n                        cim_OperationalLimitValue = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.pathName\":\n                        cim_IdentifiedObjectpathName = cn.InnerText;\n                        break;\n                }\n            }\n        }\n    }\n\n    public class cim_BranchGroupTerminal : CIMObjBase\n    {\n        public String cim_BranchGroupTerminalBranchGroup { get; set; }\n        String _cim_BranchGroupTerminalTerminalID;\n        public CIMObjBase cim_BranchGroupTerminalTerminal\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_BranchGroupTerminalTerminalID))\n                {\n                    Result = GetCIMObject(_cim_BranchGroupTerminalTerminalID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        //public String cim_IdentifiedObjectname { get; set; }\n        public String cim_BranchGroupTerminalPathName { get; set; }\n        //public String cim_IdentifiedObjectpathName { get; set; }\n        public String cim_BranchGroupTerminalPositiveFlowIn { get; set; }\n        public cim_BranchGroupTerminal(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:BranchGroupTerminal.BranchGroup\":\n                        cim_BranchGroupTerminalBranchGroup = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:BranchGroupTerminal.Terminal\":\n                        String ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_BranchGroupTerminalTerminalID = ID;\n                        break;\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"cim:BranchGroupTerminal.PathName\":\n                        cim_BranchGroupTerminalPathName = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.pathName\":\n                        cim_IdentifiedObjectpathName = cn.InnerText;\n                        break;\n                    case \"cim:BranchGroupTerminal.PositiveFlowIn\":\n                        cim_BranchGroupTerminalPositiveFlowIn = cn.InnerText;\n                        break;\n                }\n            }\n        }\n    }\n\n    public class cim_Breaker : CIMObjBase\n    {\n        public String cim_SwitchCBType { get; set; }\n        String _cim_EquipmentMemberOf_EquipmentContainerID;\n        public CIMObjBase cim_EquipmentMemberOf_EquipmentContainer\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_EquipmentMemberOf_EquipmentContainerID))\n                {\n                    Result = GetCIMObject(_cim_EquipmentMemberOf_EquipmentContainerID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        public String cim_ConductingEquipmentBaseVoltage { get; set; }\n        public String cim_SwitchPartialModel { get; set; }\n        public String cim_SwitchnormalOpen { get; set; }\n        public String cim_SwitchSCADAMOMCompositeId { get; set; }\n        public String cim_EquipmentSortOrder { get; set; }\n        public String cim_SwitchIsLiveBusDeadLine { get; set; }\n        public String cim_SwitchForSCADA { get; set; }\n        public String cim_SwitchIsAutomatic { get; set; }\n        public String cim_SwitchSubstationContainer { get; set; }\n        public String cim_SwitchForNetwork { get; set; }\n        public String cim_SwitchIsDeadBusDeadLine { get; set; }\n        public String cim_SwitchLiveBusClose { get; set; }\n        public String cim_SwitchEMSName { get; set; }\n        public String cim_SwitchMinSynchCloseRange { get; set; }\n        public String cim_SwitchLiveLineClose { get; set; }\n        public String cim_SwitchIsDeadBusLiveLine { get; set; }\n        public String cim_SwitchPathName { get; set; }\n        public String cim_SwitchOpenEnable { get; set; }\n        public String cim_SwitchIsLiveBusLiveLine { get; set; }\n        public String cim_SwitchNETMOMCompositeId { get; set; }\n        public String cim_SwitchTimeDelayLockout { get; set; }\n        public String cim_SwitchTriggerNetwork { get; set; }\n        public String cim_SwitchVoltageLevelContainer { get; set; }\n        public String cim_SwitchTimeDelayLiveBusDeadLine2 { get; set; }\n        public String cim_SwitchTimeDelayLiveBusDeadLine1 { get; set; }\n        public String cim_SwitchSynchronizationCheck { get; set; }\n        public String cim_SwitchMaxSynchCloseRange { get; set; }\n        public String cim_SwitchForecast { get; set; }\n        public String cim_SwitchIsHighSpeed { get; set; }\n        public String cim_SwitchTimeDelayDeadBusDeadLine { get; set; }\n        public String cim_SwitchTimeDelayReset { get; set; }\n        public String cim_SwitchTimeDelayDeadBusLiveLine1 { get; set; }\n        public String cim_SwitchTimeDelayDeadBusLiveLine2 { get; set; }\n        public String cim_SwitchTimeDelayLiveBusLiveLine { get; set; }\n        public String cim_SwitchCurrentOpen { get; set; }\n        public String cim_SwitchForecastMonitor { get; set; }\n        public String cim_SwitchBayPathName { get; set; }\n\n        private cim_VoltageLevel _voltageLevel = null;\n        public cim_VoltageLevel VoltageLevel\n        {\n            get\n            {\n                if (_voltageLevel == null)\n                    _voltageLevel = CIMObjBase.TypedCIMObjects<cim_VoltageLevel>().Where(x => x.ID.Equals(this.cim_EquipmentMemberOf_EquipmentContainer.ID)).FirstOrDefault();\n                return _voltageLevel;\n            }\n        }\n        private cim_Terminal[] _terminals = null;\n        public cim_Terminal[] Terminals\n        {\n            get\n            {\n                if (_terminals == null)\n                    _terminals = CIMObjBase.TypedCIMObjects<cim_Terminal>().Where(x => x.cim_TerminalConductingEquipment == this).ToArray();\n                return _terminals;\n            }\n        }\n\n        public cim_Breaker(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:Switch.CBType\":\n                        cim_SwitchCBType = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:Equipment.MemberOf_EquipmentContainer\":\n                        String ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_EquipmentMemberOf_EquipmentContainerID = ID;\n                        break;\n                    case \"cim:ConductingEquipment.BaseVoltage\":\n                        cim_ConductingEquipmentBaseVoltage = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:Switch.PartialModel\":\n                        cim_SwitchPartialModel = cn.InnerText;\n                        break;\n                    case \"cim:Switch.normalOpen\":\n                        cim_SwitchnormalOpen = cn.InnerText;\n                        break;\n                    case \"cim:Switch.SCADAMOMCompositeId\":\n                        cim_SwitchSCADAMOMCompositeId = cn.InnerText;\n                        break;\n                    case \"cim:Equipment.SortOrder\":\n                        cim_EquipmentSortOrder = cn.InnerText;\n                        break;\n                    case \"cim:Switch.IsLiveBusDeadLine\":\n                        cim_SwitchIsLiveBusDeadLine = cn.InnerText;\n                        break;\n                    case \"cim:Switch.ForSCADA\":\n                        cim_SwitchForSCADA = cn.InnerText;\n                        break;\n                    case \"cim:Switch.IsAutomatic\":\n                        cim_SwitchIsAutomatic = cn.InnerText;\n                        break;\n                    case \"cim:Switch.SubstationContainer\":\n                        cim_SwitchSubstationContainer = cn.InnerText;\n                        break;\n                    case \"cim:Switch.ForNetwork\":\n                        cim_SwitchForNetwork = cn.InnerText;\n                        break;\n                    case \"cim:Switch.IsDeadBusDeadLine\":\n                        cim_SwitchIsDeadBusDeadLine = cn.InnerText;\n                        break;\n                    case \"cim:Switch.LiveBusClose\":\n                        cim_SwitchLiveBusClose = cn.InnerText;\n                        break;\n                    case \"cim:Switch.EMSName\":\n                        cim_SwitchEMSName = cn.InnerText;\n                        break;\n                    case \"cim:Switch.MinSynchCloseRange\":\n                        cim_SwitchMinSynchCloseRange = cn.InnerText;\n                        break;\n                    case \"cim:Switch.LiveLineClose\":\n                        cim_SwitchLiveLineClose = cn.InnerText;\n                        break;\n                    case \"cim:Switch.IsDeadBusLiveLine\":\n                        cim_SwitchIsDeadBusLiveLine = cn.InnerText;\n                        break;\n                    case \"cim:Switch.PathName\":\n                        cim_SwitchPathName = cn.InnerText;\n                        break;\n                    case \"cim:Switch.OpenEnable\":\n                        cim_SwitchOpenEnable = cn.InnerText;\n                        break;\n                    case \"cim:Switch.IsLiveBusLiveLine\":\n                        cim_SwitchIsLiveBusLiveLine = cn.InnerText;\n                        break;\n                    case \"cim:Switch.NETMOMCompositeId\":\n                        cim_SwitchNETMOMCompositeId = cn.InnerText;\n                        break;\n                    case \"cim:Switch.TimeDelayLockout\":\n                        cim_SwitchTimeDelayLockout = cn.InnerText;\n                        break;\n                    case \"cim:Switch.TriggerNetwork\":\n                        cim_SwitchTriggerNetwork = cn.InnerText;\n                        break;\n                    case \"cim:Switch.VoltageLevelContainer\":\n                        cim_SwitchVoltageLevelContainer = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"cim:Switch.TimeDelayLiveBusDeadLine2\":\n                        cim_SwitchTimeDelayLiveBusDeadLine2 = cn.InnerText;\n                        break;\n                    case \"cim:Switch.TimeDelayLiveBusDeadLine1\":\n                        cim_SwitchTimeDelayLiveBusDeadLine1 = cn.InnerText;\n                        break;\n                    case \"cim:Switch.SynchronizationCheck\":\n                        cim_SwitchSynchronizationCheck = cn.InnerText;\n                        break;\n                    case \"cim:Switch.MaxSynchCloseRange\":\n                        cim_SwitchMaxSynchCloseRange = cn.InnerText;\n                        break;\n                    case \"cim:Switch.Forecast\":\n                        cim_SwitchForecast = cn.InnerText;\n                        break;\n                    case \"cim:Switch.IsHighSpeed\":\n                        cim_SwitchIsHighSpeed = cn.InnerText;\n                        break;\n                    case \"cim:Switch.TimeDelayDeadBusDeadLine\":\n                        cim_SwitchTimeDelayDeadBusDeadLine = cn.InnerText;\n                        break;\n                    case \"cim:Switch.TimeDelayReset\":\n                        cim_SwitchTimeDelayReset = cn.InnerText;\n                        break;\n                    case \"cim:Switch.TimeDelayDeadBusLiveLine1\":\n                        cim_SwitchTimeDelayDeadBusLiveLine1 = cn.InnerText;\n                        break;\n                    case \"cim:Switch.TimeDelayDeadBusLiveLine2\":\n                        cim_SwitchTimeDelayDeadBusLiveLine2 = cn.InnerText;\n                        break;\n                    case \"cim:Switch.TimeDelayLiveBusLiveLine\":\n                        cim_SwitchTimeDelayLiveBusLiveLine = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.pathName\":\n                        cim_IdentifiedObjectpathName = cn.InnerText;\n                        break;\n                    case \"cim:Switch.CurrentOpen\":\n                        cim_SwitchCurrentOpen = cn.InnerText;\n                        break;\n                    case \"cim:Switch.ForecastMonitor\":\n                        cim_SwitchForecastMonitor = cn.InnerText;\n                        break;\n                    case \"cim:Switch.BayPathName\":\n                        cim_SwitchBayPathName = cn.InnerText;\n                        break;\n                }\n            }\n        }\n    }\n\n    public class cim_BusbarSection : CIMObjBase\n    {\n        String _cim_EquipmentMemberOf_EquipmentContainerID;\n        public CIMObjBase cim_EquipmentMemberOf_EquipmentContainer\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_EquipmentMemberOf_EquipmentContainerID))\n                {\n                    Result = GetCIMObject(_cim_EquipmentMemberOf_EquipmentContainerID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        public String cim_ConductingEquipmentBaseVoltage { get; set; }\n        public String cim_BusbarSectionEMSName { get; set; }\n        public String cim_BusbarSectionSubstationContainer { get; set; }\n        public String cim_BusbarSectionPathName { get; set; }\n\n        private cim_Terminal[] _terminals = null;\n        public cim_Terminal[] Terminals\n        {\n            get\n            {\n                if (_terminals == null)\n                    _terminals = CIMObjBase.TypedCIMObjects<cim_Terminal>().Where(x => x.cim_TerminalConductingEquipment == this).ToArray();\n                return _terminals;\n            }\n        }\n        private cim_ConnectivityNode _connectivityNode = null;\n        public cim_ConnectivityNode ConnectivityNode\n        {\n            get\n            {\n                if (_connectivityNode == null)\n                    _connectivityNode = CIMObjBase.TypedCIMObjects<cim_ConnectivityNode>().Where(x => x.ID.Equals(this.ID.Replace(\"_bb\", String.Empty))).FirstOrDefault();\n                return _connectivityNode;\n            }\n        }\n\n        public cim_BusbarSection(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:Equipment.MemberOf_EquipmentContainer\":\n                        String ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_EquipmentMemberOf_EquipmentContainerID = ID;\n                        break;\n                    case \"cim:ConductingEquipment.BaseVoltage\":\n                        cim_ConductingEquipmentBaseVoltage = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:BusbarSection.EMSName\":\n                        cim_BusbarSectionEMSName = cn.InnerText;\n                        break;\n                    case \"cim:BusbarSection.SubstationContainer\":\n                        cim_BusbarSectionSubstationContainer = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.pathName\":\n                        cim_IdentifiedObjectpathName = cn.InnerText;\n                        break;\n                    case \"cim:BusbarSection.PathName\":\n                        cim_BusbarSectionPathName = cn.InnerText;\n                        break;\n                }\n            }\n        }\n    }\n    \n    public class cim_Calculation : CIMObjBase\n    {\n        public String cim_CalculationSortOrder { get; set; }\n        public String cim_CalculationSCADAMOMCompositeId { get; set; }\n        public String cim_CalculationMeasurementGroupingID { get; set; }\n        public String cim_CalculationEMSName { get; set; }\n        public String cim_CalculationPathName { get; set; }\n        String _cim_CalculationTerminalID;\n        public CIMObjBase cim_CalculationTerminal\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_CalculationTerminalID))\n                {\n                    Result = GetCIMObject(_cim_CalculationTerminalID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        public cim_Calculation(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:Calculation.SortOrder\":\n                        cim_CalculationSortOrder = cn.InnerText;\n                        break;\n                    case \"cim:Calculation.SCADAMOMCompositeId\":\n                        cim_CalculationSCADAMOMCompositeId = cn.InnerText;\n                        break;\n                    case \"cim:Calculation.MeasurementGroupingID\":\n                        cim_CalculationMeasurementGroupingID = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"cim:Calculation.EMSName\":\n                        cim_CalculationEMSName = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.pathName\":\n                        cim_IdentifiedObjectpathName = cn.InnerText;\n                        break;\n                    case \"cim:Calculation.PathName\":\n                        cim_CalculationPathName = cn.InnerText;\n                        break;\n                    case \"cim:Calculation.Terminal\":\n                        String ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_CalculationTerminalID = ID;\n                        break;\n                }\n            }\n        }\n    }\n\n    public class cim_ConformLoad : CIMObjBase\n    {\n        String _cim_EquipmentMemberOf_EquipmentContainerID;\n        public CIMObjBase cim_EquipmentMemberOf_EquipmentContainer\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_EquipmentMemberOf_EquipmentContainerID))\n                {\n                    Result = GetCIMObject(_cim_EquipmentMemberOf_EquipmentContainerID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        public String cim_ConductingEquipmentBaseVoltage { get; set; }\n        public String cim_ConformLoadLoadGroup { get; set; }\n        public String cim_EquipmentSortOrder { get; set; }\n        public String cim_EnergyConsumerqVexp { get; set; }\n        public String cim_EnergyConsumerpFexp { get; set; }\n        public String cim_EnergyConsumerqfixedPct { get; set; }\n        public String cim_EnergyConsumerpfixedPct { get; set; }\n        public String cim_EnergyConsumerqFexp { get; set; }\n        public String cim_EnergyConsumerpVexp { get; set; }\n        public String cim_EnergyConsumerpfixed { get; set; }\n        public String cim_EnergyConsumerqfixed { get; set; }\n        public cim_ConformLoad(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:Equipment.MemberOf_EquipmentContainer\":\n                        String ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_EquipmentMemberOf_EquipmentContainerID = ID;\n                        break;\n                    case \"cim:ConductingEquipment.BaseVoltage\":\n                        cim_ConductingEquipmentBaseVoltage = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:ConformLoad.LoadGroup\":\n                        cim_ConformLoadLoadGroup = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:Equipment.SortOrder\":\n                        cim_EquipmentSortOrder = cn.InnerText;\n                        break;\n                    case \"cim:EnergyConsumer.qVexp\":\n                        cim_EnergyConsumerqVexp = cn.InnerText;\n                        break;\n                    case \"cim:EnergyConsumer.pFexp\":\n                        cim_EnergyConsumerpFexp = cn.InnerText;\n                        break;\n                    case \"cim:EnergyConsumer.qfixedPct\":\n                        cim_EnergyConsumerqfixedPct = cn.InnerText;\n                        break;\n                    case \"cim:EnergyConsumer.pfixedPct\":\n                        cim_EnergyConsumerpfixedPct = cn.InnerText;\n                        break;\n                    case \"cim:EnergyConsumer.qFexp\":\n                        cim_EnergyConsumerqFexp = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"cim:EnergyConsumer.pVexp\":\n                        cim_EnergyConsumerpVexp = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.pathName\":\n                        cim_IdentifiedObjectpathName = cn.InnerText;\n                        break;\n                    case \"cim:EnergyConsumer.pfixed\":\n                        cim_EnergyConsumerpfixed = cn.InnerText;\n                        break;\n                    case \"cim:EnergyConsumer.qfixed\":\n                        cim_EnergyConsumerqfixed = cn.InnerText;\n                        break;\n                }\n            }\n        }\n    }\n\n    public class cim_ConnectivityNode : CIMObjBase\n    {\n        String _cim_ConnectivityNodeMemberOf_EquipmentContainerID;\n        public CIMObjBase cim_ConnectivityNodeMemberOf_EquipmentContainer\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_ConnectivityNodeMemberOf_EquipmentContainerID))\n                {\n                    Result = GetCIMObject(_cim_ConnectivityNodeMemberOf_EquipmentContainerID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        String _cim_ConnectivityNodeConnectivityNodeContainerID;\n        public CIMObjBase cim_ConnectivityNodeConnectivityNodeContainer\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_ConnectivityNodeConnectivityNodeContainerID))\n                {\n                    Result = GetCIMObject(_cim_ConnectivityNodeConnectivityNodeContainerID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        public String cim_ConnectivityNodeNodeType { get; set; }\n        public String cim_ConnectivityNodeForScada { get; set; }\n        public String cim_ConnectivityNodeEMSName { get; set; }\n        public String cim_ConnectivityNodeForNetwork { get; set; }\n        public String cim_ConnectivityNodeMonitorEligible { get; set; }\n        public String cim_ConnectivityNodeSortOrder { get; set; }\n        public String cim_ConnectivityNodePathName { get; set; }\n        public String cim_ConnectivityNodeEnforcement { get; set; }\n        public String cim_ConnectivityNodeMonitorSelect { get; set; }\n\n        private cim_VoltageLevel _voltageLevel = null;\n        public cim_VoltageLevel VoltageLevel\n        {\n            get\n            {\n                if (_voltageLevel == null)\n                    _voltageLevel = CIMObjBase.TypedCIMObjects<cim_VoltageLevel>().Where(x => x.ID.Equals(this.cim_ConnectivityNodeMemberOf_EquipmentContainer.ID)).FirstOrDefault();\n                return _voltageLevel;\n            }\n        }\n        private cim_DiagramObject _diagramObject = null;\n        public cim_DiagramObject DiagramObject\n        {\n            get\n            {\n                if (_diagramObject == null)\n                    _diagramObject = CIMObjBase.TypedCIMObjects<cim_DiagramObject>().Where(x => x.cim_DiagramObjectIdentifiedObject == this).FirstOrDefault();\n                return _diagramObject;\n            }\n        }\n        public cim_ConnectivityNode(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:ConnectivityNode.MemberOf_EquipmentContainer\":\n                        String ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_ConnectivityNodeMemberOf_EquipmentContainerID = ID;\n                        break;\n                    case \"cim:ConnectivityNode.ConnectivityNodeContainer\":\n                        String ID2 = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_ConnectivityNodeConnectivityNodeContainerID = ID2;\n                        break;\n                    case \"cim:ConnectivityNode.NodeType\":\n                        cim_ConnectivityNodeNodeType = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:ConnectivityNode.ForScada\":\n                        cim_ConnectivityNodeForScada = cn.InnerText;\n                        break;\n                    case \"cim:ConnectivityNode.EMSName\":\n                        cim_ConnectivityNodeEMSName = cn.InnerText;\n                        break;\n                    case \"cim:ConnectivityNode.ForNetwork\":\n                        cim_ConnectivityNodeForNetwork = cn.InnerText;\n                        break;\n                    case \"cim:ConnectivityNode.MonitorEligible\":\n                        cim_ConnectivityNodeMonitorEligible = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"cim:ConnectivityNode.SortOrder\":\n                        cim_ConnectivityNodeSortOrder = cn.InnerText;\n                        break;\n                    case \"cim:ConnectivityNode.PathName\":\n                        cim_ConnectivityNodePathName = cn.InnerText;\n                        break;\n                    case \"cim:ConnectivityNode.Enforcement\":\n                        cim_ConnectivityNodeEnforcement = cn.InnerText;\n                        break;\n                    case \"cim:ConnectivityNode.MonitorSelect\":\n                        cim_ConnectivityNodeMonitorSelect = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.pathName\":\n                        cim_IdentifiedObjectpathName = cn.InnerText;\n                        break;\n                }\n            }\n        }\n    }\n\n    public class cim_Diagram : CIMObjBase\n    {\n        public String pid_DiagramrestfulQuerystring { get; set; }\n        public String cim_Diagramorientation { get; set; }\n        public cim_Diagram(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"pid:Diagram.restfulQuerystring\":\n                        pid_DiagramrestfulQuerystring = cn.InnerText;\n                        break;\n                    case \"cim:Diagram.orientation\":\n                        cim_Diagramorientation = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                }\n            }\n        }\n    }\n\n    public class cim_DiagramObject : CIMObjBase\n    {\n        String _cim_DiagramObjectDiagramID;\n        public CIMObjBase cim_DiagramObjectDiagram\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_DiagramObjectDiagramID))\n                {\n                    Result = GetCIMObject(_cim_DiagramObjectDiagramID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        String _cim_DiagramObjectIdentifiedObjectID;\n        public CIMObjBase cim_DiagramObjectIdentifiedObject\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_DiagramObjectIdentifiedObjectID))\n                {\n                    Result = GetCIMObject(_cim_DiagramObjectIdentifiedObjectID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        String _cim_DiagramObjectDiagramObjectStyleID;\n        public CIMObjBase cim_DiagramObjectDiagramObjectStyle\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_DiagramObjectDiagramObjectStyleID))\n                {\n                    Result = GetCIMObject(_cim_DiagramObjectDiagramObjectStyleID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n\n        private cim_DiagramObjectPoint[] _points = null;\n        public cim_DiagramObjectPoint[] Points\n        {\n            get\n            {\n                if (_points == null)\n                    _points = CIMObjBase.TypedCIMObjects<cim_DiagramObjectPoint>().Where(x => x.cim_DiagramObjectPointDiagramObject == this).ToArray();\n                return _points;\n            }\n        }\n        private cim_TextDiagramObject[] _textObjects = null;\n        public cim_TextDiagramObject[] TextObjects\n        {\n            get\n            {\n                if (_textObjects == null)\n                    _textObjects = CIMObjBase.TypedCIMObjects<cim_TextDiagramObject>().Where(x => x.cim_DiagramObjectDiagram == this).ToArray();\n                return _textObjects;\n            }\n        }\n\n        public cim_DiagramObject(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"cim:DiagramObject.Diagram\":\n                        String ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_DiagramObjectDiagramID = ID;\n                        break;\n                    case \"cim:DiagramObject.IdentifiedObject\":\n                        String ID2 = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_DiagramObjectIdentifiedObjectID = ID2;\n                        break;\n                    case \"cim:DiagramObject.DiagramObjectStyle\":\n                        String ID3 = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_DiagramObjectDiagramObjectStyleID = ID3;\n                        break;\n                }\n            }\n        }\n    }\n\n    public class cim_DiagramObjectStyle : CIMObjBase\n    {\n        public cim_DiagramObjectStyle(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                }\n            }\n        }\n    }\n\n    public class cim_Disconnector : CIMObjBase\n    {\n        public String cim_SwitchCBType { get; set; }\n        String _cim_EquipmentMemberOf_EquipmentContainerID;\n        public CIMObjBase cim_EquipmentMemberOf_EquipmentContainer\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_EquipmentMemberOf_EquipmentContainerID))\n                {\n                    Result = GetCIMObject(_cim_EquipmentMemberOf_EquipmentContainerID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        public String cim_ConductingEquipmentBaseVoltage { get; set; }\n        public String cim_SwitchPartialModel { get; set; }\n        public String cim_SwitchnormalOpen { get; set; }\n        public String cim_SwitchSCADAMOMCompositeId { get; set; }\n        public String cim_EquipmentSortOrder { get; set; }\n        public String cim_SwitchIsLiveBusDeadLine { get; set; }\n        public String cim_SwitchForSCADA { get; set; }\n        public String cim_SwitchIsAutomatic { get; set; }\n        public String cim_SwitchSubstationContainer { get; set; }\n        public String cim_SwitchForNetwork { get; set; }\n        public String cim_SwitchIsDeadBusDeadLine { get; set; }\n        public String cim_SwitchLiveBusClose { get; set; }\n        public String cim_SwitchEMSName { get; set; }\n        public String cim_SwitchMinSynchCloseRange { get; set; }\n        public String cim_SwitchLiveLineClose { get; set; }\n        public String cim_SwitchIsDeadBusLiveLine { get; set; }\n        public String cim_SwitchPathName { get; set; }\n        public String cim_SwitchOpenEnable { get; set; }\n        public String cim_SwitchIsLiveBusLiveLine { get; set; }\n        public String cim_SwitchNETMOMCompositeId { get; set; }\n        public String cim_SwitchTimeDelayLockout { get; set; }\n        public String cim_SwitchTriggerNetwork { get; set; }\n        public String cim_SwitchVoltageLevelContainer { get; set; }\n        public String cim_SwitchTimeDelayLiveBusDeadLine2 { get; set; }\n        public String cim_SwitchTimeDelayLiveBusDeadLine1 { get; set; }\n        public String cim_SwitchSynchronizationCheck { get; set; }\n        public String cim_SwitchMaxSynchCloseRange { get; set; }\n        public String cim_SwitchForecast { get; set; }\n        public String cim_SwitchIsHighSpeed { get; set; }\n        public String cim_SwitchTimeDelayDeadBusDeadLine { get; set; }\n        public String cim_SwitchTimeDelayReset { get; set; }\n        public String cim_SwitchTimeDelayDeadBusLiveLine1 { get; set; }\n        public String cim_SwitchTimeDelayDeadBusLiveLine2 { get; set; }\n        public String cim_SwitchTimeDelayLiveBusLiveLine { get; set; }\n        public String cim_SwitchCurrentOpen { get; set; }\n        public String cim_SwitchForecastMonitor { get; set; }\n        public String cim_SwitchBayPathName { get; set; }\n\n        private cim_VoltageLevel _voltageLevel = null;\n        public cim_VoltageLevel VoltageLevel\n        {\n            get\n            {\n                if (_voltageLevel == null)\n                    _voltageLevel = CIMObjBase.TypedCIMObjects<cim_VoltageLevel>().Where(x => x.ID.Equals(this.cim_EquipmentMemberOf_EquipmentContainer.ID)).FirstOrDefault();\n                return _voltageLevel;\n            }\n        }\n        private cim_Terminal[] _terminals = null;\n        public cim_Terminal[] Terminals\n        {\n            get\n            {\n                if (_terminals == null)\n                    _terminals = CIMObjBase.TypedCIMObjects<cim_Terminal>().Where(x => x.cim_TerminalConductingEquipment == this).ToArray();\n                return _terminals;\n            }\n        }\n\n        public cim_Disconnector(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:Switch.CBType\":\n                        cim_SwitchCBType = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:Equipment.MemberOf_EquipmentContainer\":\n                        String ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_EquipmentMemberOf_EquipmentContainerID = ID;\n                        break;\n                    case \"cim:ConductingEquipment.BaseVoltage\":\n                        cim_ConductingEquipmentBaseVoltage = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:Switch.PartialModel\":\n                        cim_SwitchPartialModel = cn.InnerText;\n                        break;\n                    case \"cim:Switch.normalOpen\":\n                        cim_SwitchnormalOpen = cn.InnerText;\n                        break;\n                    case \"cim:Switch.SCADAMOMCompositeId\":\n                        cim_SwitchSCADAMOMCompositeId = cn.InnerText;\n                        break;\n                    case \"cim:Equipment.SortOrder\":\n                        cim_EquipmentSortOrder = cn.InnerText;\n                        break;\n                    case \"cim:Switch.IsLiveBusDeadLine\":\n                        cim_SwitchIsLiveBusDeadLine = cn.InnerText;\n                        break;\n                    case \"cim:Switch.ForSCADA\":\n                        cim_SwitchForSCADA = cn.InnerText;\n                        break;\n                    case \"cim:Switch.IsAutomatic\":\n                        cim_SwitchIsAutomatic = cn.InnerText;\n                        break;\n                    case \"cim:Switch.SubstationContainer\":\n                        cim_SwitchSubstationContainer = cn.InnerText;\n                        break;\n                    case \"cim:Switch.ForNetwork\":\n                        cim_SwitchForNetwork = cn.InnerText;\n                        break;\n                    case \"cim:Switch.IsDeadBusDeadLine\":\n                        cim_SwitchIsDeadBusDeadLine = cn.InnerText;\n                        break;\n                    case \"cim:Switch.LiveBusClose\":\n                        cim_SwitchLiveBusClose = cn.InnerText;\n                        break;\n                    case \"cim:Switch.EMSName\":\n                        cim_SwitchEMSName = cn.InnerText;\n                        break;\n                    case \"cim:Switch.MinSynchCloseRange\":\n                        cim_SwitchMinSynchCloseRange = cn.InnerText;\n                        break;\n                    case \"cim:Switch.LiveLineClose\":\n                        cim_SwitchLiveLineClose = cn.InnerText;\n                        break;\n                    case \"cim:Switch.IsDeadBusLiveLine\":\n                        cim_SwitchIsDeadBusLiveLine = cn.InnerText;\n                        break;\n                    case \"cim:Switch.PathName\":\n                        cim_SwitchPathName = cn.InnerText;\n                        break;\n                    case \"cim:Switch.OpenEnable\":\n                        cim_SwitchOpenEnable = cn.InnerText;\n                        break;\n                    case \"cim:Switch.IsLiveBusLiveLine\":\n                        cim_SwitchIsLiveBusLiveLine = cn.InnerText;\n                        break;\n                    case \"cim:Switch.NETMOMCompositeId\":\n                        cim_SwitchNETMOMCompositeId = cn.InnerText;\n                        break;\n                    case \"cim:Switch.TimeDelayLockout\":\n                        cim_SwitchTimeDelayLockout = cn.InnerText;\n                        break;\n                    case \"cim:Switch.TriggerNetwork\":\n                        cim_SwitchTriggerNetwork = cn.InnerText;\n                        break;\n                    case \"cim:Switch.VoltageLevelContainer\":\n                        cim_SwitchVoltageLevelContainer = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"cim:Switch.TimeDelayLiveBusDeadLine2\":\n                        cim_SwitchTimeDelayLiveBusDeadLine2 = cn.InnerText;\n                        break;\n                    case \"cim:Switch.TimeDelayLiveBusDeadLine1\":\n                        cim_SwitchTimeDelayLiveBusDeadLine1 = cn.InnerText;\n                        break;\n                    case \"cim:Switch.SynchronizationCheck\":\n                        cim_SwitchSynchronizationCheck = cn.InnerText;\n                        break;\n                    case \"cim:Switch.MaxSynchCloseRange\":\n                        cim_SwitchMaxSynchCloseRange = cn.InnerText;\n                        break;\n                    case \"cim:Switch.Forecast\":\n                        cim_SwitchForecast = cn.InnerText;\n                        break;\n                    case \"cim:Switch.IsHighSpeed\":\n                        cim_SwitchIsHighSpeed = cn.InnerText;\n                        break;\n                    case \"cim:Switch.TimeDelayDeadBusDeadLine\":\n                        cim_SwitchTimeDelayDeadBusDeadLine = cn.InnerText;\n                        break;\n                    case \"cim:Switch.TimeDelayReset\":\n                        cim_SwitchTimeDelayReset = cn.InnerText;\n                        break;\n                    case \"cim:Switch.TimeDelayDeadBusLiveLine1\":\n                        cim_SwitchTimeDelayDeadBusLiveLine1 = cn.InnerText;\n                        break;\n                    case \"cim:Switch.TimeDelayDeadBusLiveLine2\":\n                        cim_SwitchTimeDelayDeadBusLiveLine2 = cn.InnerText;\n                        break;\n                    case \"cim:Switch.TimeDelayLiveBusLiveLine\":\n                        cim_SwitchTimeDelayLiveBusLiveLine = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.pathName\":\n                        cim_IdentifiedObjectpathName = cn.InnerText;\n                        break;\n                    case \"cim:Switch.CurrentOpen\":\n                        cim_SwitchCurrentOpen = cn.InnerText;\n                        break;\n                    case \"cim:Switch.ForecastMonitor\":\n                        cim_SwitchForecastMonitor = cn.InnerText;\n                        break;\n                    case \"cim:Switch.BayPathName\":\n                        cim_SwitchBayPathName = cn.InnerText;\n                        break;\n                }\n            }\n        }\n    }\n    \n    public class cim_Discrete : CIMObjBase\n    {\n        public String cim_MeasurementMeasurementType { get; set; }\n        String _cim_MeasurementMemberOf_PSRID;\n        public CIMObjBase cim_MeasurementMemberOf_PSR\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_MeasurementMemberOf_PSRID))\n                {\n                    Result = GetCIMObject(_cim_MeasurementMemberOf_PSRID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        public cim_Discrete(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:Measurement.MeasurementType\":\n                        cim_MeasurementMeasurementType = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:Measurement.MemberOf_PSR\":\n                        String ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_MeasurementMemberOf_PSRID = ID;\n                        break;\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.pathName\":\n                        cim_IdentifiedObjectpathName = cn.InnerText;\n                        break;\n                }\n            }\n        }\n    }\n\n    public class cim_EquipmentGroup : CIMObjBase\n    {\n        public String cim_EquipmentGroupEquipmentGroupType { get; set; }\n        String _cim_EquipmentGroupSubstationID;\n        public CIMObjBase cim_EquipmentGroupSubstation\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_EquipmentGroupSubstationID))\n                {\n                    Result = GetCIMObject(_cim_EquipmentGroupSubstationID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        public String cim_EquipmentGroupAreaOfResponsibility { get; set; }\n        String _cim_EquipmentGroupPowerSystemResourceID;\n        public CIMObjBase cim_EquipmentGroupPowerSystemResource\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_EquipmentGroupPowerSystemResourceID))\n                {\n                    Result = GetCIMObject(_cim_EquipmentGroupPowerSystemResourceID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        public String cim_EquipmentGroupBayEquipmentGroup { get; set; }\n        public String cim_EquipmentGroupPathName { get; set; }\n        public String cim_EquipmentGroupCheckDisabled { get; set; }\n        public String cim_EquipmentGroupRecordHistoricalData { get; set; }\n        public String cim_EquipmentGroupEMSName { get; set; }\n        public String cim_EquipmentGroupBayTopologyAlarmOnOpen { get; set; }\n        public String cim_EquipmentGroupSortOrder { get; set; }\n        public String cim_EquipmentGroupSCADAMOMCompositeId { get; set; }\n        public String cim_EquipmentGroupGlobalAlarmDevtyp { get; set; }\n        public String cim_EquipmentGroupChildDisabled { get; set; }\n        public cim_EquipmentGroup(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:EquipmentGroup.EquipmentGroupType\":\n                        cim_EquipmentGroupEquipmentGroupType = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:EquipmentGroup.Substation\":\n                        String ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_EquipmentGroupSubstationID = ID;\n                        break;\n                    case \"cim:EquipmentGroup.AreaOfResponsibility\":\n                        cim_EquipmentGroupAreaOfResponsibility = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:EquipmentGroup.PowerSystemResource\":\n                        String ID2 = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_EquipmentGroupPowerSystemResourceID = ID2;\n                        break;\n                    case \"cim:EquipmentGroup.BayEquipmentGroup\":\n                        cim_EquipmentGroupBayEquipmentGroup = cn.InnerText;\n                        break;\n                    case \"cim:EquipmentGroup.PathName\":\n                        cim_EquipmentGroupPathName = cn.InnerText;\n                        break;\n                    case \"cim:EquipmentGroup.CheckDisabled\":\n                        cim_EquipmentGroupCheckDisabled = cn.InnerText;\n                        break;\n                    case \"cim:EquipmentGroup.RecordHistoricalData\":\n                        cim_EquipmentGroupRecordHistoricalData = cn.InnerText;\n                        break;\n                    case \"cim:EquipmentGroup.EMSName\":\n                        cim_EquipmentGroupEMSName = cn.InnerText;\n                        break;\n                    case \"cim:EquipmentGroup.BayTopologyAlarmOnOpen\":\n                        cim_EquipmentGroupBayTopologyAlarmOnOpen = cn.InnerText;\n                        break;\n                    case \"cim:EquipmentGroup.SortOrder\":\n                        cim_EquipmentGroupSortOrder = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"cim:EquipmentGroup.SCADAMOMCompositeId\":\n                        cim_EquipmentGroupSCADAMOMCompositeId = cn.InnerText;\n                        break;\n                    case \"cim:EquipmentGroup.GlobalAlarmDevtyp\":\n                        cim_EquipmentGroupGlobalAlarmDevtyp = cn.InnerText;\n                        break;\n                    case \"cim:EquipmentGroup.ChildDisabled\":\n                        cim_EquipmentGroupChildDisabled = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.pathName\":\n                        cim_IdentifiedObjectpathName = cn.InnerText;\n                        break;\n                }\n            }\n        }\n    }\n\n    public class cim_GeneratingUnit : CIMObjBase\n    {\n        String _cim_EquipmentMemberOf_EquipmentContainerID;\n        public CIMObjBase cim_EquipmentMemberOf_EquipmentContainer\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_EquipmentMemberOf_EquipmentContainerID))\n                {\n                    Result = GetCIMObject(_cim_EquipmentMemberOf_EquipmentContainerID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        public String cim_GeneratingUnitnormalPF { get; set; }\n        public String cim_GeneratingUnitmaxOperatingP { get; set; }\n        public String cim_GeneratingUnitratedNetMaxP { get; set; }\n        public String cim_GeneratingUnitshortPF { get; set; }\n        public String cim_GeneratingUnitratedGrossMaxP { get; set; }\n        public String cim_GeneratingUnitlongPF { get; set; }\n        public String cim_GeneratingUnitminOperatingP { get; set; }\n        public String cim_GeneratingUnitratedGrossMinP { get; set; }\n        public cim_GeneratingUnit(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:Equipment.MemberOf_EquipmentContainer\":\n                        String ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_EquipmentMemberOf_EquipmentContainerID = ID;\n                        break;\n                    case \"cim:GeneratingUnit.normalPF\":\n                        cim_GeneratingUnitnormalPF = cn.InnerText;\n                        break;\n                    case \"cim:GeneratingUnit.maxOperatingP\":\n                        cim_GeneratingUnitmaxOperatingP = cn.InnerText;\n                        break;\n                    case \"cim:GeneratingUnit.ratedNetMaxP\":\n                        cim_GeneratingUnitratedNetMaxP = cn.InnerText;\n                        break;\n                    case \"cim:GeneratingUnit.shortPF\":\n                        cim_GeneratingUnitshortPF = cn.InnerText;\n                        break;\n                    case \"cim:GeneratingUnit.ratedGrossMaxP\":\n                        cim_GeneratingUnitratedGrossMaxP = cn.InnerText;\n                        break;\n                    case \"cim:GeneratingUnit.longPF\":\n                        cim_GeneratingUnitlongPF = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"cim:GeneratingUnit.minOperatingP\":\n                        cim_GeneratingUnitminOperatingP = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.pathName\":\n                        cim_IdentifiedObjectpathName = cn.InnerText;\n                        break;\n                    case \"cim:GeneratingUnit.ratedGrossMinP\":\n                        cim_GeneratingUnitratedGrossMinP = cn.InnerText;\n                        break;\n                }\n            }\n        }\n    }\n    \n    public class cim_Line : CIMObjBase\n    {\n        String _cim_LineRegionID;\n        public CIMObjBase cim_LineRegion\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_LineRegionID))\n                {\n                    Result = GetCIMObject(_cim_LineRegionID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n\n        private cim_ACLineSegment[] _lineSegments = null;\n        public cim_ACLineSegment[] LineSegments\n        {\n            get\n            {\n                if (_lineSegments == null)\n                    _lineSegments = CIMObjBase.TypedCIMObjects<cim_ACLineSegment>().Where(x => x.cim_EquipmentMemberOf_EquipmentContainer == this).ToArray();\n                return _lineSegments;\n            }\n        }\n\n        public cim_Line(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:Line.Region\":\n                        String ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_LineRegionID = ID;\n                        break;\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.pathName\":\n                        cim_IdentifiedObjectpathName = cn.InnerText;\n                        break;\n                }\n            }\n        }\n    }\n    \n    public class cim_NonConformLoad : CIMObjBase\n    {\n        public String cim_NonConformLoadLoadGroup { get; set; }\n        String _cim_EquipmentMemberOf_EquipmentContainerID;\n        public CIMObjBase cim_EquipmentMemberOf_EquipmentContainer\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_EquipmentMemberOf_EquipmentContainerID))\n                {\n                    Result = GetCIMObject(_cim_EquipmentMemberOf_EquipmentContainerID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        public String cim_ConductingEquipmentBaseVoltage { get; set; }\n        public String cim_EquipmentSortOrder { get; set; }\n        public String cim_EnergyConsumerqVexp { get; set; }\n        public String cim_EnergyConsumerpFexp { get; set; }\n        public String cim_EnergyConsumerqfixedPct { get; set; }\n        public String cim_EnergyConsumerpfixedPct { get; set; }\n        public String cim_EnergyConsumerqFexp { get; set; }\n        public String cim_EnergyConsumerpVexp { get; set; }\n        public String cim_EnergyConsumerpfixed { get; set; }\n        public String cim_EnergyConsumerqfixed { get; set; }\n        public cim_NonConformLoad(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:NonConformLoad.LoadGroup\":\n                        cim_NonConformLoadLoadGroup = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:Equipment.MemberOf_EquipmentContainer\":\n                        String ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_EquipmentMemberOf_EquipmentContainerID = ID;\n                        break;\n                    case \"cim:ConductingEquipment.BaseVoltage\":\n                        cim_ConductingEquipmentBaseVoltage = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:Equipment.SortOrder\":\n                        cim_EquipmentSortOrder = cn.InnerText;\n                        break;\n                    case \"cim:EnergyConsumer.qVexp\":\n                        cim_EnergyConsumerqVexp = cn.InnerText;\n                        break;\n                    case \"cim:EnergyConsumer.pFexp\":\n                        cim_EnergyConsumerpFexp = cn.InnerText;\n                        break;\n                    case \"cim:EnergyConsumer.qfixedPct\":\n                        cim_EnergyConsumerqfixedPct = cn.InnerText;\n                        break;\n                    case \"cim:EnergyConsumer.pfixedPct\":\n                        cim_EnergyConsumerpfixedPct = cn.InnerText;\n                        break;\n                    case \"cim:EnergyConsumer.qFexp\":\n                        cim_EnergyConsumerqFexp = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"cim:EnergyConsumer.pVexp\":\n                        cim_EnergyConsumerpVexp = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.pathName\":\n                        cim_IdentifiedObjectpathName = cn.InnerText;\n                        break;\n                    case \"cim:EnergyConsumer.pfixed\":\n                        cim_EnergyConsumerpfixed = cn.InnerText;\n                        break;\n                    case \"cim:EnergyConsumer.qfixed\":\n                        cim_EnergyConsumerqfixed = cn.InnerText;\n                        break;\n                }\n            }\n        }\n    }\n\n    public class cim_OperationalLimitSet : CIMObjBase\n    {\n        String _cim_OperationalLimitSetEquipmentID;\n        public CIMObjBase cim_OperationalLimitSetEquipment\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_OperationalLimitSetEquipmentID))\n                {\n                    Result = GetCIMObject(_cim_OperationalLimitSetEquipmentID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        public String cim_OperationalLimitSetNETMOMCompositeId { get; set; }\n        public String cim_OperationalLimitSetSortOrder { get; set; }\n        public String cim_OperationalLimitSetEMSName { get; set; }\n        public String cim_OperationalLimitSetPathName { get; set; }\n        public String cim_OperationalLimitSetSubstationContainer { get; set; }\n        public String cim_OperationalLimitSetIsSelected { get; set; }\n        public String cim_OperationalLimitSetIsEligible { get; set; }\n        public String cim_OperationalLimitSetEnforcementActive { get; set; }\n        public String cim_OperationalLimitSetEnforcementPostCA { get; set; }\n        public String cim_OperationalLimitSetEnforcementBasecase { get; set; }\n        public String cim_OperationalLimitSetManual { get; set; }\n        public cim_OperationalLimitSet(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:OperationalLimitSet.Equipment\":\n                        String ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_OperationalLimitSetEquipmentID = ID;\n                        break;\n                    case \"cim:OperationalLimitSet.NETMOMCompositeId\":\n                        cim_OperationalLimitSetNETMOMCompositeId = cn.InnerText;\n                        break;\n                    case \"cim:OperationalLimitSet.SortOrder\":\n                        cim_OperationalLimitSetSortOrder = cn.InnerText;\n                        break;\n                    case \"cim:OperationalLimitSet.EMSName\":\n                        cim_OperationalLimitSetEMSName = cn.InnerText;\n                        break;\n                    case \"cim:OperationalLimitSet.PathName\":\n                        cim_OperationalLimitSetPathName = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"cim:OperationalLimitSet.SubstationContainer\":\n                        cim_OperationalLimitSetSubstationContainer = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.pathName\":\n                        cim_IdentifiedObjectpathName = cn.InnerText;\n                        break;\n                    case \"cim:OperationalLimitSet.IsSelected\":\n                        cim_OperationalLimitSetIsSelected = cn.InnerText;\n                        break;\n                    case \"cim:OperationalLimitSet.IsEligible\":\n                        cim_OperationalLimitSetIsEligible = cn.InnerText;\n                        break;\n                    case \"cim:OperationalLimitSet.EnforcementActive\":\n                        cim_OperationalLimitSetEnforcementActive = cn.InnerText;\n                        break;\n                    case \"cim:OperationalLimitSet.EnforcementPostCA\":\n                        cim_OperationalLimitSetEnforcementPostCA = cn.InnerText;\n                        break;\n                    case \"cim:OperationalLimitSet.EnforcementBasecase\":\n                        cim_OperationalLimitSetEnforcementBasecase = cn.InnerText;\n                        break;\n                    case \"cim:OperationalLimitSet.Manual\":\n                        cim_OperationalLimitSetManual = cn.InnerText;\n                        break;\n                }\n            }\n        }\n    }\n\n    public class cim_PowerTransformer : CIMObjBase\n    {\n        String _cim_EquipmentMemberOf_EquipmentContainerID;\n        public CIMObjBase cim_EquipmentMemberOf_EquipmentContainer\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_EquipmentMemberOf_EquipmentContainerID))\n                {\n                    Result = GetCIMObject(_cim_EquipmentMemberOf_EquipmentContainerID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        public String cim_PowerTransformertransformerType { get; set; }\n        public String cim_EquipmentSortOrder { get; set; }\n\n        private cim_TransformerWinding[] _windings = null;\n        private cim_TransformerWinding _winding_primary = null;\n        private cim_TransformerWinding _winding_secondary = null;\n        private cim_TransformerWinding _winding_tertiary = null;\n        public cim_TransformerWinding[] Windings\n        {\n            get\n            {\n                if (_windings == null)\n                    _windings = CIMObjBase.TypedCIMObjects<cim_TransformerWinding>().Where(x => x.cim_TransformerWindingPowerTransformer == this).OrderByDescending(x => float.Parse(x.cim_TransformerWindingRatedKV)).ToArray();\n                return _windings;\n            }\n        }\n        public cim_TransformerWinding Winding_Primary\n        {\n            get\n            {\n                if (_winding_primary == null)\n                    _winding_primary = Windings.Where(x => x.cim_TransformerWindingWindingType.EndsWith(\"WindingType.Primary\")).FirstOrDefault();\n                return _winding_primary;\n            }\n        }\n        public cim_TransformerWinding Winding_Secondary\n        {\n            get\n            {\n                if (_winding_secondary == null)\n                    _winding_secondary = Windings.Where(x => x.cim_TransformerWindingWindingType.EndsWith(\"WindingType.Secondary\")).FirstOrDefault();\n                return _winding_secondary;\n            }\n        }\n        public cim_TransformerWinding Winding_Tertiary\n        {\n            get\n            {\n                if (_winding_tertiary == null)\n                    _winding_tertiary = Windings.Where(x => x.cim_TransformerWindingWindingType.EndsWith(\"WindingType.Tertiary\")).FirstOrDefault();\n                return _winding_tertiary;\n            }\n        }\n\n        public cim_PowerTransformer(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:Equipment.MemberOf_EquipmentContainer\":\n                        String ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_EquipmentMemberOf_EquipmentContainerID = ID;\n                        break;\n                    case \"cim:PowerTransformer.transformerType\":\n                        cim_PowerTransformertransformerType = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:Equipment.SortOrder\":\n                        cim_EquipmentSortOrder = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.pathName\":\n                        cim_IdentifiedObjectpathName = cn.InnerText;\n                        break;\n                }\n            }\n        }\n    }\n\n    public class cim_SeriesCompensator : CIMObjBase\n    {\n        String _cim_SeriesCompensatorFarVoltageLevelID;\n\n\n        private cim_VoltageLevel _nearVoltageLevel = null;\n        public cim_VoltageLevel NearVoltageLevel\n        {\n            get\n            {\n                if (_nearVoltageLevel == null)\n                    _nearVoltageLevel = CIMObjBase.TypedCIMObjects<cim_VoltageLevel>().Where(x => x.ID.Equals(_cim_SeriesCompensatorNearVoltageLevelID)).FirstOrDefault();\n                return _nearVoltageLevel;\n            }\n        }\n        private cim_VoltageLevel _farVoltageLevel = null;\n        public cim_VoltageLevel FarVoltageLevel\n        {\n            get\n            {\n                if (_farVoltageLevel == null)\n                    _farVoltageLevel = CIMObjBase.TypedCIMObjects<cim_VoltageLevel>().Where(x => x.ID.Equals(_cim_SeriesCompensatorFarVoltageLevelID)).FirstOrDefault();\n                return _farVoltageLevel;\n            }\n        }\n\n\n        //public CIMObjBase cim_SeriesCompensatorFarVoltageLevel\n        //{\n        //    get\n        //    {\n        //        CIMObjBase Result = null;\n        //        if (!string.IsNullOrEmpty(_cim_SeriesCompensatorFarVoltageLevelID))\n        //        {\n        //            Result = GetCIMObject(_cim_SeriesCompensatorFarVoltageLevelID);\n        //        }\n        //        return Result;\n        //    }\n        //    set\n        //    {\n        //    }\n        //}\n        String _cim_EquipmentMemberOf_EquipmentContainerID;\n        public CIMObjBase cim_EquipmentMemberOf_EquipmentContainer\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_EquipmentMemberOf_EquipmentContainerID))\n                {\n                    Result = GetCIMObject(_cim_EquipmentMemberOf_EquipmentContainerID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        String _cim_SeriesCompensatorNearVoltageLevelID;\n        //public CIMObjBase cim_SeriesCompensatorNearVoltageLevel\n        //{\n        //    get\n        //    {\n        //        CIMObjBase Result = null;\n        //        if (!string.IsNullOrEmpty(_cim_SeriesCompensatorNearVoltageLevelID))\n        //        {\n        //            Result = GetCIMObject(_cim_SeriesCompensatorNearVoltageLevelID);\n        //        }\n        //        return Result;\n        //    }\n        //    set\n        //    {\n        //    }\n        //}\n        public String cim_ConductingEquipmentBaseVoltage { get; set; }\n        public String cim_SeriesCompensatorRPU { get; set; }\n        public String cim_SeriesCompensatorVoltageLevelContainer { get; set; }\n        public String cim_SeriesCompensatorB0CH { get; set; }\n        public String cim_SeriesCompensatorRemove { get; set; }\n        public String cim_SeriesCompensatorEMSName { get; set; }\n        public String cim_EquipmentSortOrder { get; set; }\n        public String cim_SeriesCompensatorPartialModel { get; set; }\n        public String cim_SeriesCompensatorLinePathName { get; set; }\n        public String cim_SeriesCompensatorXPU { get; set; }\n        public String cim_SeriesCompensatorSubstationContainer { get; set; }\n        public String cim_SeriesCompensatorBaseKVPU { get; set; }\n        public String cim_SeriesCompensatorCalculateEngineeringFromPU { get; set; }\n        public String cim_SeriesCompensatorR0 { get; set; }\n        public String cim_SeriesCompensatorX0 { get; set; }\n        public String cim_SeriesCompensatorx { get; set; }\n        public String cim_SeriesCompensatorBCH { get; set; }\n        public String cim_SeriesCompensatorr { get; set; }\n        public String cim_SeriesCompensatorRemoveEnable { get; set; }\n        public String cim_SeriesCompensatorForSCADA { get; set; }\n        public String cim_SeriesCompensatorPathName { get; set; }\n        public String cim_SeriesCompensatorBaseMVAPU { get; set; }\n        public String cim_SeriesCompensatorForNetwork { get; set; }\n        public String cim_SeriesCompensatorBCHPU { get; set; }\n        public String cim_SeriesCompensatorBayPathName { get; set; }\n        public String cim_SeriesCompensatorNETMOMCompositeId { get; set; }\n        public String cim_SeriesCompensatorX0PU { get; set; }\n        public String cim_SeriesCompensatorB0CHPU { get; set; }\n        public String cim_SeriesCompensatorR0PU { get; set; }\n        public cim_SeriesCompensator(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:SeriesCompensator.FarVoltageLevel\":\n                        String ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_SeriesCompensatorFarVoltageLevelID = ID;\n                        break;\n                    case \"cim:Equipment.MemberOf_EquipmentContainer\":\n                        String ID2 = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_EquipmentMemberOf_EquipmentContainerID = ID2;\n                        break;\n                    case \"cim:SeriesCompensator.NearVoltageLevel\":\n                        String ID3 = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_SeriesCompensatorNearVoltageLevelID = ID3;\n                        break;\n                    case \"cim:ConductingEquipment.BaseVoltage\":\n                        cim_ConductingEquipmentBaseVoltage = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:SeriesCompensator.RPU\":\n                        cim_SeriesCompensatorRPU = cn.InnerText;\n                        break;\n                    case \"cim:SeriesCompensator.VoltageLevelContainer\":\n                        cim_SeriesCompensatorVoltageLevelContainer = cn.InnerText;\n                        break;\n                    case \"cim:SeriesCompensator.B0CH\":\n                        cim_SeriesCompensatorB0CH = cn.InnerText;\n                        break;\n                    case \"cim:SeriesCompensator.Remove\":\n                        cim_SeriesCompensatorRemove = cn.InnerText;\n                        break;\n                    case \"cim:SeriesCompensator.EMSName\":\n                        cim_SeriesCompensatorEMSName = cn.InnerText;\n                        break;\n                    case \"cim:Equipment.SortOrder\":\n                        cim_EquipmentSortOrder = cn.InnerText;\n                        break;\n                    case \"cim:SeriesCompensator.PartialModel\":\n                        cim_SeriesCompensatorPartialModel = cn.InnerText;\n                        break;\n                    case \"cim:SeriesCompensator.LinePathName\":\n                        cim_SeriesCompensatorLinePathName = cn.InnerText;\n                        break;\n                    case \"cim:SeriesCompensator.XPU\":\n                        cim_SeriesCompensatorXPU = cn.InnerText;\n                        break;\n                    case \"cim:SeriesCompensator.SubstationContainer\":\n                        cim_SeriesCompensatorSubstationContainer = cn.InnerText;\n                        break;\n                    case \"cim:SeriesCompensator.BaseKVPU\":\n                        cim_SeriesCompensatorBaseKVPU = cn.InnerText;\n                        break;\n                    case \"cim:SeriesCompensator.CalculateEngineeringFromPU\":\n                        cim_SeriesCompensatorCalculateEngineeringFromPU = cn.InnerText;\n                        break;\n                    case \"cim:SeriesCompensator.R0\":\n                        cim_SeriesCompensatorR0 = cn.InnerText;\n                        break;\n                    case \"cim:SeriesCompensator.X0\":\n                        cim_SeriesCompensatorX0 = cn.InnerText;\n                        break;\n                    case \"cim:SeriesCompensator.x\":\n                        cim_SeriesCompensatorx = cn.InnerText;\n                        break;\n                    case \"cim:SeriesCompensator.BCH\":\n                        cim_SeriesCompensatorBCH = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"cim:SeriesCompensator.r\":\n                        cim_SeriesCompensatorr = cn.InnerText;\n                        break;\n                    case \"cim:SeriesCompensator.RemoveEnable\":\n                        cim_SeriesCompensatorRemoveEnable = cn.InnerText;\n                        break;\n                    case \"cim:SeriesCompensator.ForSCADA\":\n                        cim_SeriesCompensatorForSCADA = cn.InnerText;\n                        break;\n                    case \"cim:SeriesCompensator.PathName\":\n                        cim_SeriesCompensatorPathName = cn.InnerText;\n                        break;\n                    case \"cim:SeriesCompensator.BaseMVAPU\":\n                        cim_SeriesCompensatorBaseMVAPU = cn.InnerText;\n                        break;\n                    case \"cim:SeriesCompensator.ForNetwork\":\n                        cim_SeriesCompensatorForNetwork = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.pathName\":\n                        cim_IdentifiedObjectpathName = cn.InnerText;\n                        break;\n                    case \"cim:SeriesCompensator.BCHPU\":\n                        cim_SeriesCompensatorBCHPU = cn.InnerText;\n                        break;\n                    case \"cim:SeriesCompensator.BayPathName\":\n                        cim_SeriesCompensatorBayPathName = cn.InnerText;\n                        break;\n                    case \"cim:SeriesCompensator.NETMOMCompositeId\":\n                        cim_SeriesCompensatorNETMOMCompositeId = cn.InnerText;\n                        break;\n                    case \"cim:SeriesCompensator.X0PU\":\n                        cim_SeriesCompensatorX0PU = cn.InnerText;\n                        break;\n                    case \"cim:SeriesCompensator.B0CHPU\":\n                        cim_SeriesCompensatorB0CHPU = cn.InnerText;\n                        break;\n                    case \"cim:SeriesCompensator.R0PU\":\n                        cim_SeriesCompensatorR0PU = cn.InnerText;\n                        break;\n                }\n            }\n        }\n    }\n    \n    public class cim_ShuntCompensator : CIMObjBase\n    {\n        String _cim_ShuntCompensatorSwitchID;\n        public CIMObjBase cim_ShuntCompensatorSwitch\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_ShuntCompensatorSwitchID))\n                {\n                    Result = GetCIMObject(_cim_ShuntCompensatorSwitchID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        public String cim_RegulatingCondEqRegulationSchedule { get; set; }\n        String _cim_EquipmentMemberOf_EquipmentContainerID;\n        public CIMObjBase cim_EquipmentMemberOf_EquipmentContainer\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_EquipmentMemberOf_EquipmentContainerID))\n                {\n                    Result = GetCIMObject(_cim_EquipmentMemberOf_EquipmentContainerID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        public String cim_ConductingEquipmentBaseVoltage { get; set; }\n        public String cim_ShuntCompensatorRemove { get; set; }\n        public String cim_ShuntCompensatorSubstationContainer { get; set; }\n        public String cim_ShuntCompensatorreactivePerSection { get; set; }\n        public String cim_ShuntCompensatornomU { get; set; }\n        public String cim_ShuntCompensatormaximumSections { get; set; }\n        public String cim_ShuntCompensatorAVR { get; set; }\n        public String cim_EquipmentSortOrder { get; set; }\n        public String cim_ShuntCompensatorNominalKV { get; set; }\n        public String cim_ShuntCompensatorMVARPerSection { get; set; }\n        public String cim_ShuntCompensatorNETMOMCompositeId { get; set; }\n        public String cim_ShuntCompensatorPriorityOverride { get; set; }\n        public String cim_ShuntCompensatornormalSections { get; set; }\n        public String cim_ShuntCompensatorLoadBasedRegulation { get; set; }\n        public String cim_ShuntCompensatorForNetwork { get; set; }\n        public String cim_ShuntCompensatorSwitchingPriority { get; set; }\n        public String cim_ShuntCompensatorRemoveEnable { get; set; }\n        public String cim_ShuntCompensatorAVRDelay { get; set; }\n        public String cim_ShuntCompensatorReacMonGroupExclude { get; set; }\n        public String cim_ShuntCompensatorEMSName { get; set; }\n        public String cim_ShuntCompensatorVoltageLevelContainer { get; set; }\n        public String cim_ShuntCompensatorForSCADA { get; set; }\n        public String cim_ShuntCompensatorSwitchOnCount { get; set; }\n        public String cim_ShuntCompensatorReacMonGroupForce { get; set; }\n        public String cim_ShuntCompensatorPathName { get; set; }\n        public String cim_ShuntCompensatorAVREnable { get; set; }\n        public String cim_ShuntCompensatorVoltSensitivity { get; set; }\n        public String cim_ShuntCompensatorNominalMVAR { get; set; }\n        public String cim_ShuntCompensatorPartialModel { get; set; }\n        public cim_ShuntCompensator(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:ShuntCompensator.Switch\":\n                        String ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_ShuntCompensatorSwitchID = ID;\n                        break;\n                    case \"cim:RegulatingCondEq.RegulationSchedule\":\n                        cim_RegulatingCondEqRegulationSchedule = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:Equipment.MemberOf_EquipmentContainer\":\n                        String ID2 = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_EquipmentMemberOf_EquipmentContainerID = ID2;\n                        break;\n                    case \"cim:ConductingEquipment.BaseVoltage\":\n                        cim_ConductingEquipmentBaseVoltage = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:ShuntCompensator.Remove\":\n                        cim_ShuntCompensatorRemove = cn.InnerText;\n                        break;\n                    case \"cim:ShuntCompensator.SubstationContainer\":\n                        cim_ShuntCompensatorSubstationContainer = cn.InnerText;\n                        break;\n                    case \"cim:ShuntCompensator.reactivePerSection\":\n                        cim_ShuntCompensatorreactivePerSection = cn.InnerText;\n                        break;\n                    case \"cim:ShuntCompensator.nomU\":\n                        cim_ShuntCompensatornomU = cn.InnerText;\n                        break;\n                    case \"cim:ShuntCompensator.maximumSections\":\n                        cim_ShuntCompensatormaximumSections = cn.InnerText;\n                        break;\n                    case \"cim:ShuntCompensator.AVR\":\n                        cim_ShuntCompensatorAVR = cn.InnerText;\n                        break;\n                    case \"cim:Equipment.SortOrder\":\n                        cim_EquipmentSortOrder = cn.InnerText;\n                        break;\n                    case \"cim:ShuntCompensator.NominalKV\":\n                        cim_ShuntCompensatorNominalKV = cn.InnerText;\n                        break;\n                    case \"cim:ShuntCompensator.MVARPerSection\":\n                        cim_ShuntCompensatorMVARPerSection = cn.InnerText;\n                        break;\n                    case \"cim:ShuntCompensator.NETMOMCompositeId\":\n                        cim_ShuntCompensatorNETMOMCompositeId = cn.InnerText;\n                        break;\n                    case \"cim:ShuntCompensator.PriorityOverride\":\n                        cim_ShuntCompensatorPriorityOverride = cn.InnerText;\n                        break;\n                    case \"cim:ShuntCompensator.normalSections\":\n                        cim_ShuntCompensatornormalSections = cn.InnerText;\n                        break;\n                    case \"cim:ShuntCompensator.LoadBasedRegulation\":\n                        cim_ShuntCompensatorLoadBasedRegulation = cn.InnerText;\n                        break;\n                    case \"cim:ShuntCompensator.ForNetwork\":\n                        cim_ShuntCompensatorForNetwork = cn.InnerText;\n                        break;\n                    case \"cim:ShuntCompensator.SwitchingPriority\":\n                        cim_ShuntCompensatorSwitchingPriority = cn.InnerText;\n                        break;\n                    case \"cim:ShuntCompensator.RemoveEnable\":\n                        cim_ShuntCompensatorRemoveEnable = cn.InnerText;\n                        break;\n                    case \"cim:ShuntCompensator.AVRDelay\":\n                        cim_ShuntCompensatorAVRDelay = cn.InnerText;\n                        break;\n                    case \"cim:ShuntCompensator.ReacMonGroupExclude\":\n                        cim_ShuntCompensatorReacMonGroupExclude = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"cim:ShuntCompensator.EMSName\":\n                        cim_ShuntCompensatorEMSName = cn.InnerText;\n                        break;\n                    case \"cim:ShuntCompensator.VoltageLevelContainer\":\n                        cim_ShuntCompensatorVoltageLevelContainer = cn.InnerText;\n                        break;\n                    case \"cim:ShuntCompensator.ForSCADA\":\n                        cim_ShuntCompensatorForSCADA = cn.InnerText;\n                        break;\n                    case \"cim:ShuntCompensator.SwitchOnCount\":\n                        cim_ShuntCompensatorSwitchOnCount = cn.InnerText;\n                        break;\n                    case \"cim:ShuntCompensator.ReacMonGroupForce\":\n                        cim_ShuntCompensatorReacMonGroupForce = cn.InnerText;\n                        break;\n                    case \"cim:ShuntCompensator.PathName\":\n                        cim_ShuntCompensatorPathName = cn.InnerText;\n                        break;\n                    case \"cim:ShuntCompensator.AVREnable\":\n                        cim_ShuntCompensatorAVREnable = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.pathName\":\n                        cim_IdentifiedObjectpathName = cn.InnerText;\n                        break;\n                    case \"cim:ShuntCompensator.VoltSensitivity\":\n                        cim_ShuntCompensatorVoltSensitivity = cn.InnerText;\n                        break;\n                    case \"cim:ShuntCompensator.NominalMVAR\":\n                        cim_ShuntCompensatorNominalMVAR = cn.InnerText;\n                        break;\n                    case \"cim:ShuntCompensator.PartialModel\":\n                        cim_ShuntCompensatorPartialModel = cn.InnerText;\n                        break;\n                }\n            }\n        }\n    }\n    \n    public class cim_StaticVarCompensator : CIMObjBase\n    {\n        public String cim_RegulatingCondEqRegulationSchedule { get; set; }\n        String _cim_EquipmentMemberOf_EquipmentContainerID;\n        public CIMObjBase cim_EquipmentMemberOf_EquipmentContainer\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_EquipmentMemberOf_EquipmentContainerID))\n                {\n                    Result = GetCIMObject(_cim_EquipmentMemberOf_EquipmentContainerID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        public String cim_ConductingEquipmentBaseVoltage { get; set; }\n        public String cim_StaticVarCompensatorsVCControlMode { get; set; }\n        public String cim_StaticVarCompensatorRampDelay { get; set; }\n        public String cim_StaticVarCompensatorReacMonGroupExclude { get; set; }\n        public String cim_StaticVarCompensatorSteadyStateMVARMax { get; set; }\n        public String cim_StaticVarCompensatorPostContingencyMVARMin { get; set; }\n        public String cim_EquipmentSortOrder { get; set; }\n        public String cim_StaticVarCompensatorForNetwork { get; set; }\n        public String cim_StaticVarCompensatorslope { get; set; }\n        public String cim_StaticVarCompensatorNETMOMCompositeId { get; set; }\n        public String cim_StaticVarCompensatorRemove { get; set; }\n        public String cim_StaticVarCompensatorVoltageLevelContainer { get; set; }\n        public String cim_StaticVarCompensatorQPostCtgMaxMVAR { get; set; }\n        public String cim_StaticVarCompensatorSubstationContainer { get; set; }\n        public String cim_StaticVarCompensatorvoltageSetPoint { get; set; }\n        public String cim_StaticVarCompensatorcapacitiveRating { get; set; }\n        public String cim_StaticVarCompensatorinductiveRating { get; set; }\n        public String cim_StaticVarCompensatorPartialModel { get; set; }\n        public String cim_StaticVarCompensatorSCADAMOMCompositeId { get; set; }\n        public String cim_StaticVarCompensatorEMSName { get; set; }\n        public String cim_StaticVarCompensatorReacMonGroupForce { get; set; }\n        public String cim_StaticVarCompensatorRampDurationThreshold { get; set; }\n        public String cim_StaticVarCompensatorSteadyStateMVARMin { get; set; }\n        public String cim_StaticVarCompensatorPostContingencyMVARMax { get; set; }\n        public String cim_StaticVarCompensatorHighVoltageChangeThreshold { get; set; }\n        public String cim_StaticVarCompensatorPathName { get; set; }\n        public String cim_StaticVarCompensatorLoadBasedRegulation { get; set; }\n        public String cim_StaticVarCompensatorForSCADA { get; set; }\n        public String cim_StaticVarCompensatorRemoveEnable { get; set; }\n        public String cim_StaticVarCompensatorLowVoltageChangeThreshold { get; set; }\n        public String cim_StaticVarCompensatorQExceedDurationSteadyState { get; set; }\n        public String cim_StaticVarCompensatorFixedMVAR { get; set; }\n        public cim_StaticVarCompensator(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:RegulatingCondEq.RegulationSchedule\":\n                        cim_RegulatingCondEqRegulationSchedule = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:Equipment.MemberOf_EquipmentContainer\":\n                        String ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_EquipmentMemberOf_EquipmentContainerID = ID;\n                        break;\n                    case \"cim:ConductingEquipment.BaseVoltage\":\n                        cim_ConductingEquipmentBaseVoltage = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:StaticVarCompensator.sVCControlMode\":\n                        cim_StaticVarCompensatorsVCControlMode = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:StaticVarCompensator.RampDelay\":\n                        cim_StaticVarCompensatorRampDelay = cn.InnerText;\n                        break;\n                    case \"cim:StaticVarCompensator.ReacMonGroupExclude\":\n                        cim_StaticVarCompensatorReacMonGroupExclude = cn.InnerText;\n                        break;\n                    case \"cim:StaticVarCompensator.SteadyStateMVARMax\":\n                        cim_StaticVarCompensatorSteadyStateMVARMax = cn.InnerText;\n                        break;\n                    case \"cim:StaticVarCompensator.PostContingencyMVARMin\":\n                        cim_StaticVarCompensatorPostContingencyMVARMin = cn.InnerText;\n                        break;\n                    case \"cim:Equipment.SortOrder\":\n                        cim_EquipmentSortOrder = cn.InnerText;\n                        break;\n                    case \"cim:StaticVarCompensator.ForNetwork\":\n                        cim_StaticVarCompensatorForNetwork = cn.InnerText;\n                        break;\n                    case \"cim:StaticVarCompensator.slope\":\n                        cim_StaticVarCompensatorslope = cn.InnerText;\n                        break;\n                    case \"cim:StaticVarCompensator.NETMOMCompositeId\":\n                        cim_StaticVarCompensatorNETMOMCompositeId = cn.InnerText;\n                        break;\n                    case \"cim:StaticVarCompensator.Remove\":\n                        cim_StaticVarCompensatorRemove = cn.InnerText;\n                        break;\n                    case \"cim:StaticVarCompensator.VoltageLevelContainer\":\n                        cim_StaticVarCompensatorVoltageLevelContainer = cn.InnerText;\n                        break;\n                    case \"cim:StaticVarCompensator.QPostCtgMaxMVAR\":\n                        cim_StaticVarCompensatorQPostCtgMaxMVAR = cn.InnerText;\n                        break;\n                    case \"cim:StaticVarCompensator.SubstationContainer\":\n                        cim_StaticVarCompensatorSubstationContainer = cn.InnerText;\n                        break;\n                    case \"cim:StaticVarCompensator.voltageSetPoint\":\n                        cim_StaticVarCompensatorvoltageSetPoint = cn.InnerText;\n                        break;\n                    case \"cim:StaticVarCompensator.capacitiveRating\":\n                        cim_StaticVarCompensatorcapacitiveRating = cn.InnerText;\n                        break;\n                    case \"cim:StaticVarCompensator.inductiveRating\":\n                        cim_StaticVarCompensatorinductiveRating = cn.InnerText;\n                        break;\n                    case \"cim:StaticVarCompensator.PartialModel\":\n                        cim_StaticVarCompensatorPartialModel = cn.InnerText;\n                        break;\n                    case \"cim:StaticVarCompensator.SCADAMOMCompositeId\":\n                        cim_StaticVarCompensatorSCADAMOMCompositeId = cn.InnerText;\n                        break;\n                    case \"cim:StaticVarCompensator.EMSName\":\n                        cim_StaticVarCompensatorEMSName = cn.InnerText;\n                        break;\n                    case \"cim:StaticVarCompensator.ReacMonGroupForce\":\n                        cim_StaticVarCompensatorReacMonGroupForce = cn.InnerText;\n                        break;\n                    case \"cim:StaticVarCompensator.RampDurationThreshold\":\n                        cim_StaticVarCompensatorRampDurationThreshold = cn.InnerText;\n                        break;\n                    case \"cim:StaticVarCompensator.SteadyStateMVARMin\":\n                        cim_StaticVarCompensatorSteadyStateMVARMin = cn.InnerText;\n                        break;\n                    case \"cim:StaticVarCompensator.PostContingencyMVARMax\":\n                        cim_StaticVarCompensatorPostContingencyMVARMax = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"cim:StaticVarCompensator.HighVoltageChangeThreshold\":\n                        cim_StaticVarCompensatorHighVoltageChangeThreshold = cn.InnerText;\n                        break;\n                    case \"cim:StaticVarCompensator.PathName\":\n                        cim_StaticVarCompensatorPathName = cn.InnerText;\n                        break;\n                    case \"cim:StaticVarCompensator.LoadBasedRegulation\":\n                        cim_StaticVarCompensatorLoadBasedRegulation = cn.InnerText;\n                        break;\n                    case \"cim:StaticVarCompensator.ForSCADA\":\n                        cim_StaticVarCompensatorForSCADA = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.pathName\":\n                        cim_IdentifiedObjectpathName = cn.InnerText;\n                        break;\n                    case \"cim:StaticVarCompensator.RemoveEnable\":\n                        cim_StaticVarCompensatorRemoveEnable = cn.InnerText;\n                        break;\n                    case \"cim:StaticVarCompensator.LowVoltageChangeThreshold\":\n                        cim_StaticVarCompensatorLowVoltageChangeThreshold = cn.InnerText;\n                        break;\n                    case \"cim:StaticVarCompensator.QExceedDurationSteadyState\":\n                        cim_StaticVarCompensatorQExceedDurationSteadyState = cn.InnerText;\n                        break;\n                    case \"cim:StaticVarCompensator.FixedMVAR\":\n                        cim_StaticVarCompensatorFixedMVAR = cn.InnerText;\n                        break;\n                }\n            }\n        }\n    }\n\n    public class cim_SubGeographicalRegion : CIMObjBase\n    {\n        public String cim_SubGeographicalRegionRegion { get; set; }\n        public cim_SubGeographicalRegion(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:SubGeographicalRegion.Region\":\n                        cim_SubGeographicalRegionRegion = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.pathName\":\n                        cim_IdentifiedObjectpathName = cn.InnerText;\n                        break;\n                }\n            }\n        }\n    }\n\n    public class cim_Substation : CIMObjBase\n    {\n        String _cim_SubstationRegionID;\n        public CIMObjBase cim_SubstationRegion\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_SubstationRegionID))\n                {\n                    Result = GetCIMObject(_cim_SubstationRegionID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        public String cim_IdentifiedObjectdescription { get; set; }\n\n        private cim_Terminal[] _terminals = null;\n        public cim_Terminal[] Terminals\n        {\n            get\n            {\n                if (_terminals == null)\n                    _terminals = CIMObjBase.TypedCIMObjects<cim_Terminal>().Where(x => x.cim_TerminalConductingEquipment == this).ToArray();\n                return _terminals;\n            }\n        }\n\n        public cim_Substation(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:Substation.Region\":\n                        String ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_SubstationRegionID = ID;\n                        break;\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.pathName\":\n                        cim_IdentifiedObjectpathName = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.description\":\n                        cim_IdentifiedObjectdescription = cn.InnerText;\n                        break;\n                }\n            }\n        }\n    }\n\n    public class cim_SynchronousMachine : CIMObjBase\n    {\n        public String cim_RegulatingCondEqRegulationSchedule { get; set; }\n        public String cim_SynchronousMachineAccuracyClass { get; set; }\n        public String cim_SynchronousMachineInitialMvarCapCurve { get; set; }\n        String _cim_SynchronousMachineGeneratingUnitID;\n        public CIMObjBase cim_SynchronousMachineGeneratingUnit\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_SynchronousMachineGeneratingUnitID))\n                {\n                    Result = GetCIMObject(_cim_SynchronousMachineGeneratingUnitID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        String _cim_SynchronousMachineMemberOf_GeneratingUnitID;\n        public CIMObjBase cim_SynchronousMachineMemberOf_GeneratingUnit\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_SynchronousMachineMemberOf_GeneratingUnitID))\n                {\n                    Result = GetCIMObject(_cim_SynchronousMachineMemberOf_GeneratingUnitID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        public String cim_SynchronousMachineInitialReactiveCapabilityCurve { get; set; }\n        String _cim_EquipmentMemberOf_EquipmentContainerID;\n        public CIMObjBase cim_EquipmentMemberOf_EquipmentContainer\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_EquipmentMemberOf_EquipmentContainerID))\n                {\n                    Result = GetCIMObject(_cim_EquipmentMemberOf_EquipmentContainerID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        public String cim_ConductingEquipmentBaseVoltage { get; set; }\n        public String cim_SynchronousMachinetype { get; set; }\n        public String cim_SynchronousMachineRemoveEnable { get; set; }\n        public String cim_EquipmentSortOrder { get; set; }\n        public String cim_SynchronousMachineManualToAVR { get; set; }\n        public String cim_SynchronousMachineWLimitExpansion { get; set; }\n        public String cim_SynchronousMachineEnableLDC { get; set; }\n        public String cim_SynchronousMachineNoAGC { get; set; }\n        public String cim_SynchronousMachineIncludeInSensitivityCalc { get; set; }\n        public String cim_SynchronousMachineBaseMW { get; set; }\n        public String cim_SynchronousMachineCalculateEngineeringFromPU { get; set; }\n        public String cim_SynchronousMachineAVR { get; set; }\n        public String cim_SynchronousMachineDamping { get; set; }\n        public String cim_SynchronousMachineMinOperatingMW { get; set; }\n        public String cim_SynchronousMachineLoadBasedRegulation { get; set; }\n        public String cim_SynchronousMachineForNetwork { get; set; }\n        public String cim_SynchronousMachineReacMonGroupForce { get; set; }\n        public String cim_SynchronousMachineVoltageLevelContainer { get; set; }\n        public String cim_SynchronousMachineSignalLocalGain { get; set; }\n        public String cim_SynchronousMachineShowGenInertia { get; set; }\n        public String cim_SynchronousMachineVarMan { get; set; }\n        public String cim_SynchronousMachineratedS { get; set; }\n        public String cim_SynchronousMachineEnableLimitExp { get; set; }\n        public String cim_SynchronousMachinePartialModel { get; set; }\n        public String cim_SynchronousMachinemaxQ { get; set; }\n        public String cim_SynchronousMachineRLimitExpansion { get; set; }\n        public String cim_SynchronousMachineBaseMVAPU { get; set; }\n        public String cim_SynchronousMachineRemove { get; set; }\n        public String cim_SynchronousMachineBaseKVPU { get; set; }\n        public String cim_SynchronousMachineShortPF { get; set; }\n        public String cim_SynchronousMachineDTSMOMCompositeId { get; set; }\n        public String cim_SynchronousMachineMaxOperatingMW { get; set; }\n        public String cim_SynchronousMachineInitialMW { get; set; }\n        public String cim_SynchronousMachineInertia { get; set; }\n        public String cim_SynchronousMachineIsUnitTripDisabled { get; set; }\n        public String cim_SynchronousMachineAVRToManualLead { get; set; }\n        public String cim_SynchronousMachinereferencePriority { get; set; }\n        public String cim_SynchronousMachineShowSyncInertia { get; set; }\n        public String cim_SynchronousMachineEMSName { get; set; }\n        public String cim_SynchronousMachineBaseMVAR { get; set; }\n        public String cim_SynchronousMachineNormalPF { get; set; }\n        public String cim_SynchronousMachineNETMOMCompositeId { get; set; }\n        public String cim_SynchronousMachineLongPF { get; set; }\n        public String cim_SynchronousMachineMinimumMVAR { get; set; }\n        public String cim_SynchronousMachineRatedMVA { get; set; }\n        public String cim_SynchronousMachineSubstationContainer { get; set; }\n        public String cim_SynchronousMachineLDCFraction { get; set; }\n        public String cim_SynchronousMachineminQ { get; set; }\n        public String cim_SynchronousMachinePathName { get; set; }\n        public String cim_SynchronousMachineReacMonGroupExclude { get; set; }\n        public String cim_SynchronousMachineErrorSignalLocalGain { get; set; }\n        public String cim_SynchronousMachineHasDetailedSteamTurbine { get; set; }\n        public String cim_SynchronousMachineMaximumMVAR { get; set; }\n        public String cim_SynchronousMachineCondenserMW { get; set; }\n        public String cim_SynchronousMachineAVRToManualLag { get; set; }\n        public String cim_SynchronousMachineNoAVR { get; set; }\n        public cim_SynchronousMachine(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:RegulatingCondEq.RegulationSchedule\":\n                        cim_RegulatingCondEqRegulationSchedule = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:SynchronousMachine.AccuracyClass\":\n                        cim_SynchronousMachineAccuracyClass = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:SynchronousMachine.InitialMvarCapCurve\":\n                        cim_SynchronousMachineInitialMvarCapCurve = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:SynchronousMachine.GeneratingUnit\":\n                        String ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_SynchronousMachineGeneratingUnitID = ID;\n                        break;\n                    case \"cim:SynchronousMachine.MemberOf_GeneratingUnit\":\n                        String ID2 = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_SynchronousMachineMemberOf_GeneratingUnitID = ID2;\n                        break;\n                    case \"cim:SynchronousMachine.InitialReactiveCapabilityCurve\":\n                        cim_SynchronousMachineInitialReactiveCapabilityCurve = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:Equipment.MemberOf_EquipmentContainer\":\n                        String ID3 = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_EquipmentMemberOf_EquipmentContainerID = ID3;\n                        break;\n                    case \"cim:ConductingEquipment.BaseVoltage\":\n                        cim_ConductingEquipmentBaseVoltage = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:SynchronousMachine.type\":\n                        cim_SynchronousMachinetype = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:SynchronousMachine.RemoveEnable\":\n                        cim_SynchronousMachineRemoveEnable = cn.InnerText;\n                        break;\n                    case \"cim:Equipment.SortOrder\":\n                        cim_EquipmentSortOrder = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.ManualToAVR\":\n                        cim_SynchronousMachineManualToAVR = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.WLimitExpansion\":\n                        cim_SynchronousMachineWLimitExpansion = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.EnableLDC\":\n                        cim_SynchronousMachineEnableLDC = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.NoAGC\":\n                        cim_SynchronousMachineNoAGC = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.IncludeInSensitivityCalc\":\n                        cim_SynchronousMachineIncludeInSensitivityCalc = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.BaseMW\":\n                        cim_SynchronousMachineBaseMW = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.CalculateEngineeringFromPU\":\n                        cim_SynchronousMachineCalculateEngineeringFromPU = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.AVR\":\n                        cim_SynchronousMachineAVR = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.Damping\":\n                        cim_SynchronousMachineDamping = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.MinOperatingMW\":\n                        cim_SynchronousMachineMinOperatingMW = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.LoadBasedRegulation\":\n                        cim_SynchronousMachineLoadBasedRegulation = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.ForNetwork\":\n                        cim_SynchronousMachineForNetwork = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.ReacMonGroupForce\":\n                        cim_SynchronousMachineReacMonGroupForce = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.VoltageLevelContainer\":\n                        cim_SynchronousMachineVoltageLevelContainer = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.SignalLocalGain\":\n                        cim_SynchronousMachineSignalLocalGain = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.ShowGenInertia\":\n                        cim_SynchronousMachineShowGenInertia = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.VarMan\":\n                        cim_SynchronousMachineVarMan = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.ratedS\":\n                        cim_SynchronousMachineratedS = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.EnableLimitExp\":\n                        cim_SynchronousMachineEnableLimitExp = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.PartialModel\":\n                        cim_SynchronousMachinePartialModel = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.maxQ\":\n                        cim_SynchronousMachinemaxQ = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.RLimitExpansion\":\n                        cim_SynchronousMachineRLimitExpansion = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.BaseMVAPU\":\n                        cim_SynchronousMachineBaseMVAPU = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.Remove\":\n                        cim_SynchronousMachineRemove = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.BaseKVPU\":\n                        cim_SynchronousMachineBaseKVPU = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.ShortPF\":\n                        cim_SynchronousMachineShortPF = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.DTSMOMCompositeId\":\n                        cim_SynchronousMachineDTSMOMCompositeId = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.MaxOperatingMW\":\n                        cim_SynchronousMachineMaxOperatingMW = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.InitialMW\":\n                        cim_SynchronousMachineInitialMW = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.Inertia\":\n                        cim_SynchronousMachineInertia = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.IsUnitTripDisabled\":\n                        cim_SynchronousMachineIsUnitTripDisabled = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.AVRToManualLead\":\n                        cim_SynchronousMachineAVRToManualLead = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.referencePriority\":\n                        cim_SynchronousMachinereferencePriority = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.ShowSyncInertia\":\n                        cim_SynchronousMachineShowSyncInertia = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.EMSName\":\n                        cim_SynchronousMachineEMSName = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.BaseMVAR\":\n                        cim_SynchronousMachineBaseMVAR = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.NormalPF\":\n                        cim_SynchronousMachineNormalPF = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.NETMOMCompositeId\":\n                        cim_SynchronousMachineNETMOMCompositeId = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.LongPF\":\n                        cim_SynchronousMachineLongPF = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.MinimumMVAR\":\n                        cim_SynchronousMachineMinimumMVAR = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.RatedMVA\":\n                        cim_SynchronousMachineRatedMVA = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.SubstationContainer\":\n                        cim_SynchronousMachineSubstationContainer = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.LDCFraction\":\n                        cim_SynchronousMachineLDCFraction = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.minQ\":\n                        cim_SynchronousMachineminQ = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.PathName\":\n                        cim_SynchronousMachinePathName = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.ReacMonGroupExclude\":\n                        cim_SynchronousMachineReacMonGroupExclude = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.pathName\":\n                        cim_IdentifiedObjectpathName = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.ErrorSignalLocalGain\":\n                        cim_SynchronousMachineErrorSignalLocalGain = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.HasDetailedSteamTurbine\":\n                        cim_SynchronousMachineHasDetailedSteamTurbine = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.MaximumMVAR\":\n                        cim_SynchronousMachineMaximumMVAR = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.CondenserMW\":\n                        cim_SynchronousMachineCondenserMW = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.AVRToManualLag\":\n                        cim_SynchronousMachineAVRToManualLag = cn.InnerText;\n                        break;\n                    case \"cim:SynchronousMachine.NoAVR\":\n                        cim_SynchronousMachineNoAVR = cn.InnerText;\n                        break;\n                }\n            }\n        }\n    }\n\n    public class cim_TapChanger : CIMObjBase\n    {\n        public String cim_TapChangerRegulationSchedule { get; set; }\n        String _cim_TapChangerTransformerWindingID;\n        public CIMObjBase cim_TapChangerTransformerWinding\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_TapChangerTransformerWindingID))\n                {\n                    Result = GetCIMObject(_cim_TapChangerTransformerWindingID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        public String cim_TapChangerTCULControlMode { get; set; }\n        public String cim_TapChangerLoadBasedRegulation { get; set; }\n        public String cim_TapChangerNeutralStep { get; set; }\n        public String cim_TapChangernormalStep { get; set; }\n        public String cim_TapChangerVoltageSensitivity { get; set; }\n        public String cim_TapChangerlowStep { get; set; }\n        public String cim_TapChangerhighStep { get; set; }\n        public String cim_TapChangerIncludeInSensitivityCalc { get; set; }\n        public String cim_TapChangerEMSName { get; set; }\n        public String cim_TapChangerPathName { get; set; }\n        public String cim_TapChangerSubsequentDelay { get; set; }\n        public String cim_TapChangerStepVoltageIncrement { get; set; }\n        public String cim_TapChangerCurrentStep { get; set; }\n        public String cim_TapChangerInitialDelay { get; set; }\n        String _cim_TapChangerTapChangerID;\n        public CIMObjBase cim_TapChangerTapChanger\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_TapChangerTapChangerID))\n                {\n                    Result = GetCIMObject(_cim_TapChangerTapChangerID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        String _cim_TapChangerConnectivityNodeID;\n        public CIMObjBase cim_TapChangerConnectivityNode\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_TapChangerConnectivityNodeID))\n                {\n                    Result = GetCIMObject(_cim_TapChangerConnectivityNodeID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        public String cim_TapChangerMaximumKV { get; set; }\n        public String cim_TapChangerMinimumKV { get; set; }\n        public cim_TapChanger(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:TapChanger.RegulationSchedule\":\n                        cim_TapChangerRegulationSchedule = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:TapChanger.TransformerWinding\":\n                        String ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_TapChangerTransformerWindingID = ID;\n                        break;\n                    case \"cim:TapChanger.TCULControlMode\":\n                        cim_TapChangerTCULControlMode = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:TapChanger.LoadBasedRegulation\":\n                        cim_TapChangerLoadBasedRegulation = cn.InnerText;\n                        break;\n                    case \"cim:TapChanger.NeutralStep\":\n                        cim_TapChangerNeutralStep = cn.InnerText;\n                        break;\n                    case \"cim:TapChanger.normalStep\":\n                        cim_TapChangernormalStep = cn.InnerText;\n                        break;\n                    case \"cim:TapChanger.VoltageSensitivity\":\n                        cim_TapChangerVoltageSensitivity = cn.InnerText;\n                        break;\n                    case \"cim:TapChanger.lowStep\":\n                        cim_TapChangerlowStep = cn.InnerText;\n                        break;\n                    case \"cim:TapChanger.highStep\":\n                        cim_TapChangerhighStep = cn.InnerText;\n                        break;\n                    case \"cim:TapChanger.IncludeInSensitivityCalc\":\n                        cim_TapChangerIncludeInSensitivityCalc = cn.InnerText;\n                        break;\n                    case \"cim:TapChanger.EMSName\":\n                        cim_TapChangerEMSName = cn.InnerText;\n                        break;\n                    case \"cim:TapChanger.PathName\":\n                        cim_TapChangerPathName = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"cim:TapChanger.SubsequentDelay\":\n                        cim_TapChangerSubsequentDelay = cn.InnerText;\n                        break;\n                    case \"cim:TapChanger.StepVoltageIncrement\":\n                        cim_TapChangerStepVoltageIncrement = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.pathName\":\n                        cim_IdentifiedObjectpathName = cn.InnerText;\n                        break;\n                    case \"cim:TapChanger.CurrentStep\":\n                        cim_TapChangerCurrentStep = cn.InnerText;\n                        break;\n                    case \"cim:TapChanger.InitialDelay\":\n                        cim_TapChangerInitialDelay = cn.InnerText;\n                        break;\n                    case \"cim:TapChanger.TapChanger\":\n                        String ID2 = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_TapChangerTapChangerID = ID2;\n                        break;\n                    case \"cim:TapChanger.ConnectivityNode\":\n                        String ID3 = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_TapChangerConnectivityNodeID = ID3;\n                        break;\n                    case \"cim:TapChanger.MaximumKV\":\n                        cim_TapChangerMaximumKV = cn.InnerText;\n                        break;\n                    case \"cim:TapChanger.MinimumKV\":\n                        cim_TapChangerMinimumKV = cn.InnerText;\n                        break;\n                }\n            }\n        }\n    }\n\n    public class cim_Terminal : CIMObjBase\n    {\n        String _cim_TerminalConnectivityNodeID;\n        public CIMObjBase cim_TerminalConnectivityNode\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_TerminalConnectivityNodeID))\n                {\n                    Result = GetCIMObject(_cim_TerminalConnectivityNodeID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        String _cim_TerminalConductingEquipmentID;\n        public CIMObjBase cim_TerminalConductingEquipment\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_TerminalConductingEquipmentID))\n                {\n                    Result = GetCIMObject(_cim_TerminalConductingEquipmentID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        public cim_Terminal(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:Terminal.ConnectivityNode\":\n                        String ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_TerminalConnectivityNodeID = ID;\n                        break;\n                    case \"cim:Terminal.ConductingEquipment\":\n                        String ID2 = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_TerminalConductingEquipmentID = ID2;\n                        break;\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.pathName\":\n                        cim_IdentifiedObjectpathName = cn.InnerText;\n                        break;\n                }\n            }\n        }\n    }\n\n    public class cim_TextDiagramObject : CIMObjBase\n    {\n        String _cim_DiagramObjectDiagramID;\n        public CIMObjBase cim_DiagramObjectDiagram\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_DiagramObjectDiagramID))\n                {\n                    Result = GetCIMObject(_cim_DiagramObjectDiagramID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        public String cim_TextDiagramObjecttext { get; set; }\n        String _cim_DiagramObjectDiagramObjectStyleID;\n        public CIMObjBase cim_DiagramObjectDiagramObjectStyle\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_DiagramObjectDiagramObjectStyleID))\n                {\n                    Result = GetCIMObject(_cim_DiagramObjectDiagramObjectStyleID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        String _pid_TextDiagramObjectDiagramObjectID;\n        public CIMObjBase pid_TextDiagramObjectDiagramObject\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_pid_TextDiagramObjectDiagramObjectID))\n                {\n                    Result = GetCIMObject(_pid_TextDiagramObjectDiagramObjectID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        public cim_TextDiagramObject(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"cim:DiagramObject.Diagram\":\n                        String ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_DiagramObjectDiagramID = ID;\n                        break;\n                    case \"cim:TextDiagramObject.text\":\n                        cim_TextDiagramObjecttext = cn.InnerText;\n                        break;\n                    case \"cim:DiagramObject.DiagramObjectStyle\":\n                        String ID2 = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_DiagramObjectDiagramObjectStyleID = ID2;\n                        break;\n                    case \"pid:TextDiagramObject.DiagramObject\":\n                        String ID3 = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _pid_TextDiagramObjectDiagramObjectID = ID3;\n                        break;\n                }\n            }\n        }\n    }\n\n    public class cim_TransformerWinding : CIMObjBase\n    {\n        String _cim_TransformerWindingPowerTransformerID;\n        public CIMObjBase cim_TransformerWindingPowerTransformer\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_TransformerWindingPowerTransformerID))\n                {\n                    Result = GetCIMObject(_cim_TransformerWindingPowerTransformerID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        String _cim_TransformerWindingMemberOf_PowerTransformerID;\n        public CIMObjBase cim_TransformerWindingMemberOf_PowerTransformer\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_TransformerWindingMemberOf_PowerTransformerID))\n                {\n                    Result = GetCIMObject(_cim_TransformerWindingMemberOf_PowerTransformerID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        String _cim_EquipmentMemberOf_EquipmentContainerID;\n        public CIMObjBase cim_EquipmentMemberOf_EquipmentContainer\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_EquipmentMemberOf_EquipmentContainerID))\n                {\n                    Result = GetCIMObject(_cim_EquipmentMemberOf_EquipmentContainerID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        public String cim_ConductingEquipmentBaseVoltage { get; set; }\n        public String cim_TransformerWindingWindingType { get; set; }\n        public String cim_TransformerWindingRemoveEnable { get; set; }\n        public String cim_TransformerWindingCalculateEngineeringFromPU { get; set; }\n        public String cim_TransformerWindingLTC { get; set; }\n        public String cim_EquipmentSortOrder { get; set; }\n        public String cim_TransformerWindingPathName { get; set; }\n        public String cim_TransformerWindingAVR { get; set; }\n        public String cim_TransformerWindingSubstationContainer { get; set; }\n        public String cim_TransformerWindingKneeSat { get; set; }\n        public String cim_TransformerWindingRPU { get; set; }\n        public String cim_TransformerWindingNETMOMCompositeId { get; set; }\n        public String cim_TransformerWindingBaseKVPU { get; set; }\n        public String cim_TransformerWindingFollow { get; set; }\n        public String cim_TransformerWindingXPU { get; set; }\n        public String cim_TransformerWindingR { get; set; }\n        public String cim_TransformerWindingBaseMVAPU { get; set; }\n        public String cim_TransformerWindingShortTermMVA { get; set; }\n        public String cim_TransformerWindingX { get; set; }\n        public String cim_TransformerWindingEmergencyMVA { get; set; }\n        public String cim_TransformerWindingForNetwork { get; set; }\n        public String cim_TransformerWindingCurrentBalancing { get; set; }\n        public String cim_TransformerWindingRatedKV { get; set; }\n        public String cim_TransformerWindingratedS { get; set; }\n        public String cim_TransformerWindingratedU { get; set; }\n        public String cim_TransformerWindingRatedMVA { get; set; }\n        public String cim_TransformerWindingEMSName { get; set; }\n        public String cim_TransformerWindingForSCADA { get; set; }\n        public String cim_TransformerWindingPartialModel { get; set; }\n        public String cim_TransformerWindingVoltageLevelContainer { get; set; }\n        public String cim_TransformerWindingRemove { get; set; }\n        public String cim_TransformerWindingEMSPathName { get; set; }\n        public String cim_TransformerWindingR0PU { get; set; }\n        public String cim_TransformerWindingR0 { get; set; }\n        public String cim_TransformerWindingX0 { get; set; }\n        public String cim_TransformerWindingX0PU { get; set; }\n\n        public Color VoltageLevelColor_STE\n        {\n            get\n            {\n                float v = float.Parse(this.cim_TransformerWindingRatedKV);\n                return cim_VoltageLevel.VoltageLevelColor_STE(v);\n            }\n        }\n        private cim_Terminal[] _terminals = null;\n        public cim_Terminal[] Terminals\n        {\n            get\n            {\n                if (_terminals == null)\n                    _terminals = CIMObjBase.TypedCIMObjects<cim_Terminal>().Where(x => x.cim_TerminalConductingEquipment == this).ToArray();\n                return _terminals;\n            }\n        }\n        private cim_TapChanger[] _tapChangers = null;\n        public cim_TapChanger[] TapChangers\n        {\n            get\n            {\n                if (_tapChangers == null)\n                    _tapChangers = CIMObjBase.TypedCIMObjects<cim_TapChanger>().Where(x => x.cim_TapChangerTransformerWinding == this).ToArray();\n                return _tapChangers;\n            }\n        }\n\n        public cim_TransformerWinding(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:TransformerWinding.PowerTransformer\":\n                        String ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_TransformerWindingPowerTransformerID = ID;\n                        break;\n                    case \"cim:TransformerWinding.MemberOf_PowerTransformer\":\n                        String ID2 = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_TransformerWindingMemberOf_PowerTransformerID = ID2;\n                        break;\n                    case \"cim:Equipment.MemberOf_EquipmentContainer\":\n                        String ID3 = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_EquipmentMemberOf_EquipmentContainerID = ID3;\n                        break;\n                    case \"cim:ConductingEquipment.BaseVoltage\":\n                        cim_ConductingEquipmentBaseVoltage = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:TransformerWinding.WindingType\":\n                        cim_TransformerWindingWindingType = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:TransformerWinding.RemoveEnable\":\n                        cim_TransformerWindingRemoveEnable = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.CalculateEngineeringFromPU\":\n                        cim_TransformerWindingCalculateEngineeringFromPU = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.LTC\":\n                        cim_TransformerWindingLTC = cn.InnerText;\n                        break;\n                    case \"cim:Equipment.SortOrder\":\n                        cim_EquipmentSortOrder = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.PathName\":\n                        cim_TransformerWindingPathName = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.AVR\":\n                        cim_TransformerWindingAVR = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.SubstationContainer\":\n                        cim_TransformerWindingSubstationContainer = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.KneeSat\":\n                        cim_TransformerWindingKneeSat = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.RPU\":\n                        cim_TransformerWindingRPU = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.NETMOMCompositeId\":\n                        cim_TransformerWindingNETMOMCompositeId = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.BaseKVPU\":\n                        cim_TransformerWindingBaseKVPU = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.Follow\":\n                        cim_TransformerWindingFollow = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.XPU\":\n                        cim_TransformerWindingXPU = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.R\":\n                        cim_TransformerWindingR = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.BaseMVAPU\":\n                        cim_TransformerWindingBaseMVAPU = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.ShortTermMVA\":\n                        cim_TransformerWindingShortTermMVA = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.X\":\n                        cim_TransformerWindingX = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.EmergencyMVA\":\n                        cim_TransformerWindingEmergencyMVA = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.ForNetwork\":\n                        cim_TransformerWindingForNetwork = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.CurrentBalancing\":\n                        cim_TransformerWindingCurrentBalancing = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.RatedKV\":\n                        cim_TransformerWindingRatedKV = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.ratedS\":\n                        cim_TransformerWindingratedS = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.ratedU\":\n                        cim_TransformerWindingratedU = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.RatedMVA\":\n                        cim_TransformerWindingRatedMVA = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.EMSName\":\n                        cim_TransformerWindingEMSName = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.ForSCADA\":\n                        cim_TransformerWindingForSCADA = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.PartialModel\":\n                        cim_TransformerWindingPartialModel = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.pathName\":\n                        cim_IdentifiedObjectpathName = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.VoltageLevelContainer\":\n                        cim_TransformerWindingVoltageLevelContainer = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.Remove\":\n                        cim_TransformerWindingRemove = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.EMSPathName\":\n                        cim_TransformerWindingEMSPathName = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.R0PU\":\n                        cim_TransformerWindingR0PU = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.R0\":\n                        cim_TransformerWindingR0 = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.X0\":\n                        cim_TransformerWindingX0 = cn.InnerText;\n                        break;\n                    case \"cim:TransformerWinding.X0PU\":\n                        cim_TransformerWindingX0PU = cn.InnerText;\n                        break;\n                }\n            }\n        }\n    }\n\n    public class cim_VoltageLevel : CIMObjBase\n    {\n        String _cim_VoltageLevelMemberOf_SubstationID;\n        public CIMObjBase cim_VoltageLevelMemberOf_Substation\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_VoltageLevelMemberOf_SubstationID))\n                {\n                    Result = GetCIMObject(_cim_VoltageLevelMemberOf_SubstationID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        public String cim_VoltageLevelBaseVoltage { get; set; }\n        String _cim_VoltageLevelSubstationID;\n        public CIMObjBase cim_VoltageLevelSubstation\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_VoltageLevelSubstationID))\n                {\n                    Result = GetCIMObject(_cim_VoltageLevelSubstationID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        public String cim_VoltageLevelMonitorEligible { get; set; }\n        public String cim_VoltageLevelEMSName { get; set; }\n        public String cim_VoltageLevelHighVoltageLimit { get; set; }\n        public String cim_VoltageLevelCBTopology { get; set; }\n        public String cim_VoltageLevelEnableBaseEnforceHighLimit { get; set; }\n        public String cim_VoltageLevelSubstationContainer { get; set; }\n        public String cim_VoltageLevelHasAutomaticSwitch { get; set; }\n        public String cim_VoltageLevelNETMOMCompositeId { get; set; }\n        public String cim_VoltageLevelMonitorSelect { get; set; }\n        public String cim_VoltageLevelEnablePostContEnforceLowLimit { get; set; }\n        public String cim_VoltageLevelPathName { get; set; }\n        public String cim_VoltageLevelVoltageLevelContainer { get; set; }\n        public String cim_VoltageLevelEnablePostContEnforceHighLimit { get; set; }\n        public String cim_VoltageLevelHasDetailedSteamTurbine { get; set; }\n        public String cim_VoltageLevelLowVoltageLimit { get; set; }\n        public String cim_VoltageLevelEnableBaseEnforceLowLimit { get; set; }\n        public String cim_VoltageLevelSortOrder { get; set; }\n        public String cim_VoltageLevelEnforce { get; set; }\n\n        public Color VoltageLevelColor_STE()\n        {\n            float V = float.Parse(cim_VoltageLevelEMSName);\n            return cim_VoltageLevel.VoltageLevelColor_STE(V);\n        }\n\n        public cim_VoltageLevel(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:VoltageLevel.MemberOf_Substation\":\n                        String ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_VoltageLevelMemberOf_SubstationID = ID;\n                        break;\n                    case \"cim:VoltageLevel.BaseVoltage\":\n                        cim_VoltageLevelBaseVoltage = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        break;\n                    case \"cim:VoltageLevel.Substation\":\n                        String ID2 = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_VoltageLevelSubstationID = ID2;\n                        break;\n                    case \"cim:VoltageLevel.MonitorEligible\":\n                        cim_VoltageLevelMonitorEligible = cn.InnerText;\n                        break;\n                    case \"cim:VoltageLevel.EMSName\":\n                        cim_VoltageLevelEMSName = cn.InnerText;\n                        break;\n                    case \"cim:VoltageLevel.HighVoltageLimit\":\n                        cim_VoltageLevelHighVoltageLimit = cn.InnerText;\n                        break;\n                    case \"cim:VoltageLevel.CBTopology\":\n                        cim_VoltageLevelCBTopology = cn.InnerText;\n                        break;\n                    case \"cim:VoltageLevel.EnableBaseEnforceHighLimit\":\n                        cim_VoltageLevelEnableBaseEnforceHighLimit = cn.InnerText;\n                        break;\n                    case \"cim:VoltageLevel.SubstationContainer\":\n                        cim_VoltageLevelSubstationContainer = cn.InnerText;\n                        break;\n                    case \"cim:VoltageLevel.HasAutomaticSwitch\":\n                        cim_VoltageLevelHasAutomaticSwitch = cn.InnerText;\n                        break;\n                    case \"cim:VoltageLevel.NETMOMCompositeId\":\n                        cim_VoltageLevelNETMOMCompositeId = cn.InnerText;\n                        break;\n                    case \"cim:VoltageLevel.MonitorSelect\":\n                        cim_VoltageLevelMonitorSelect = cn.InnerText;\n                        break;\n                    case \"cim:VoltageLevel.EnablePostContEnforceLowLimit\":\n                        cim_VoltageLevelEnablePostContEnforceLowLimit = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.name\":\n                        cim_IdentifiedObjectname = cn.InnerText;\n                        break;\n                    case \"cim:VoltageLevel.PathName\":\n                        cim_VoltageLevelPathName = cn.InnerText;\n                        break;\n                    case \"cim:VoltageLevel.VoltageLevelContainer\":\n                        cim_VoltageLevelVoltageLevelContainer = cn.InnerText;\n                        break;\n                    case \"cim:VoltageLevel.EnablePostContEnforceHighLimit\":\n                        cim_VoltageLevelEnablePostContEnforceHighLimit = cn.InnerText;\n                        break;\n                    case \"cim:VoltageLevel.HasDetailedSteamTurbine\":\n                        cim_VoltageLevelHasDetailedSteamTurbine = cn.InnerText;\n                        break;\n                    case \"cim:VoltageLevel.LowVoltageLimit\":\n                        cim_VoltageLevelLowVoltageLimit = cn.InnerText;\n                        break;\n                    case \"cim:VoltageLevel.EnableBaseEnforceLowLimit\":\n                        cim_VoltageLevelEnableBaseEnforceLowLimit = cn.InnerText;\n                        break;\n                    case \"cim:VoltageLevel.SortOrder\":\n                        cim_VoltageLevelSortOrder = cn.InnerText;\n                        break;\n                    case \"cim:IdentifiedObject.pathName\":\n                        cim_IdentifiedObjectpathName = cn.InnerText;\n                        break;\n                    case \"cim:VoltageLevel.Enforce\":\n                        cim_VoltageLevelEnforce = cn.InnerText;\n                        break;\n                }\n            }\n        }\n\n        public static Color VoltageLevelColor_STE(float voltage)\n        {\n            Byte R = 255;\n            Byte G = 255;\n            Byte B = 255;\n\n            switch (voltage)\n            {\n                case 1f:\n                    R = 255;\n                    G = 245;\n                    B = 238;\n                    break;\n                case 2.4f:\n                    R = 100;\n                    G = 149;\n                    B = 237;\n                    break;\n                case 12.5f:\n                    R = 0;\n                    G = 255;\n                    B = 255;\n                    break;\n                case 13.8f:\n                    R = 0;\n                    G = 255;\n                    B = 255;\n                    break;\n                case 24f:\n                    R = 250;\n                    G = 128;\n                    B = 114;\n                    break;\n                case 34.5f:\n                    R = 210;\n                    G = 180;\n                    B = 140;\n                    break;\n                case 69f:\n                    R = 221;\n                    G = 160;\n                    B = 221;\n                    break;\n                case 138f:\n                    R = 255;\n                    G = 165;\n                    B = 0;\n                    break;\n                case 345f:\n                    R = 255;\n                    G = 255;\n                    B = 255;\n                    break;\n                case 500f:\n                    R = 100;\n                    G = 159;\n                    B = 237;\n                    break;\n                case 765f:\n                    R = 0;\n                    G = 223;\n                    B = 0;\n                    break;\n                default: // Unknown\n                    R = 255;\n                    R = 0;\n                    R = 255;\n                    break;\n            }\n\n            return Color.FromArgb(R, G, B);\n        }\n    }\n\n    // no identifiedobjectname \n    public class cim_DiagramObjectGluePoint : CIMObjBase\n    {\n        String _pid_DiagramObjectGluePointDiagramID;\n        public CIMObjBase pid_DiagramObjectGluePointDiagram\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_pid_DiagramObjectGluePointDiagramID))\n                {\n                    Result = GetCIMObject(_pid_DiagramObjectGluePointDiagramID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        public cim_DiagramObjectGluePoint(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"pid:DiagramObjectGluePoint.Diagram\":\n                        String ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _pid_DiagramObjectGluePointDiagramID = ID;\n                        break;\n                }\n            }\n        }\n    }\n\n    // no identifiedobjectname \n    public class cim_DiagramObjectPoint : CIMObjBase\n    {\n        private String cim_DiagramObjectPointxPosition = String.Empty;\n        private String cim_DiagramObjectPointyPosition = String.Empty;\n        private PointF _location = PointF.Empty;\n        public PointF Location\n        {\n            get\n            {\n                if (_location.IsEmpty)\n                {\n                    float x = 0;\n                    float y = 0;\n                    if (float.TryParse(this.cim_DiagramObjectPointxPosition, out x) && float.TryParse(this.cim_DiagramObjectPointyPosition, out y))\n                    {\n                        _location = new PointF(x, y);\n                    }\n                }\n                return _location;\n            }\n        }\n        public String cim_DiagramObjectPointsequenceNumber { get; set; }\n        String _cim_DiagramObjectPointDiagramObjectID;\n        public CIMObjBase cim_DiagramObjectPointDiagramObject\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_DiagramObjectPointDiagramObjectID))\n                {\n                    Result = GetCIMObject(_cim_DiagramObjectPointDiagramObjectID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        String _cim_DiagramObjectPointDiagramObjectGluePointID;\n        public CIMObjBase cim_DiagramObjectPointDiagramObjectGluePoint\n        {\n            get\n            {\n                CIMObjBase Result = null;\n                if (!string.IsNullOrEmpty(_cim_DiagramObjectPointDiagramObjectGluePointID))\n                {\n                    Result = GetCIMObject(_cim_DiagramObjectPointDiagramObjectGluePointID);\n                }\n                return Result;\n            }\n            set\n            {\n            }\n        }\n        public cim_DiagramObjectPoint(XmlNode n)\n        {\n            this.ID = n.Attributes[\"rdf:ID\"].Value;\n\n            foreach (XmlNode cn in n.ChildNodes)\n            {\n                switch (cn.Name)\n                {\n                    case \"cim:DiagramObjectPoint.xPosition\":\n                        cim_DiagramObjectPointxPosition = cn.InnerText;\n                        break;\n                    case \"cim:DiagramObjectPoint.yPosition\":\n                        cim_DiagramObjectPointyPosition = cn.InnerText;\n                        break;\n                    case \"cim:DiagramObjectPoint.sequenceNumber\":\n                        cim_DiagramObjectPointsequenceNumber = cn.InnerText;\n                        break;\n                    case \"cim:DiagramObjectPoint.DiagramObject\":\n                        String ID = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_DiagramObjectPointDiagramObjectID = ID;\n                        break;\n                    case \"cim:DiagramObjectPoint.DiagramObjectGluePoint\":\n                        String ID2 = cn.Attributes[\"rdf:resource\"].Value.Substring(1);\n                        _cim_DiagramObjectPointDiagramObjectGluePointID = ID2;\n                        break;\n                }\n            }\n        }\n    }\n\n}",
 "title": ""
}