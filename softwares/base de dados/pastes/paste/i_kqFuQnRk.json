{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "lg_en",
  "re_ast1"
 ],
 "key": "kqFuQnRk",
 "pasteDate": "Feb 18, 2018, 2:42:07 PM",
 "relevancy": 2.0,
 "relevant": false,
 "text": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Code\n(defun add-function-to-hook (hook-name function-key function)\n  (let (hook-hash (alexandria:ensure-gethash\n                    hook-name\n                    *available-hooks*\n                    (make-hash-table :test #'equalp)))\n    (setf (gethash function-key hook-hash) function)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Error\nWhile compiling ADD-FUNCTION-TO-HOOK :\nBad initialization form: (ALEXANDRIA.0.DEV:ENSURE-GETHASH\n                          HOOK-NAME\n                          *AVAILABLE-HOOKS*\n                          (MAKE-HASH-TABLE :TEST #'EQUALP)).\n   [Condition of type CCL::COMPILE-TIME-PROGRAM-ERROR]\n\nRestarts:\n 0: [CONTINUE] continue compilation ignoring this form\n 1: [RETRY] Retry SLIME interactive evaluation request.\n 2: [*ABORT] Return to SLIME's top level.\n 3: [ABORT-BREAK] Reset this thread\n 4: [ABORT] Kill this thread\n\nBacktrace:\n  0: ((:INTERNAL CCL::NX1-COMPILE-LAMBDA) #<CCL::COMPILE-TIME-PROGRAM-ERROR #x302003DBDD3D>)\n  1: (SIGNAL #<CCL::COMPILE-TIME-PROGRAM-ERROR #x302003DBDD3D>)\n  2: (CCL::%ERROR #<CCL::COMPILE-TIME-PROGRAM-ERROR #x302003DBDD3D> NIL 106049983)\n  3: (CCL::NX-ERROR \"Bad initialization form: ~S.\" (ALEXANDRIA.0.DEV:ENSURE-GETHASH HOOK-NAME *AVAILABLE-HOOKS* (MAKE-HASH-TABLE :TEST #'EQUALP)))\n  4: (CCL::NX1-LET :RETURN (LET (HOOK-HASH (ALEXANDRIA.0.DEV:ENSURE-GETHASH HOOK-NAME *AVAILABLE-HOOKS* (MAKE-HASH-TABLE :TEST #'EQUALP))) (SETF (GETHASH FUNCTION-KEY HOOK-HASH) FUNCTION)) #<CCL::LEXICAL-E..\n  5: (CCL::NX1-COMBINATION :RETURN (LET (HOOK-HASH (ALEXANDRIA.0.DEV:ENSURE-GETHASH HOOK-NAME *AVAILABLE-HOOKS* (MAKE-HASH-TABLE :TEST #'EQUALP))) (SETF (GETHASH FUNCTION-KEY HOOK-HASH) FUNCTION)) #<CCL::L..\n  6: (CCL::NX1-TRANSFORMED-FORM :RETURN (LET (HOOK-HASH (ALEXANDRIA.0.DEV:ENSURE-GETHASH HOOK-NAME *AVAILABLE-HOOKS* (MAKE-HASH-TABLE :TEST #'EQUALP))) (SETF (GETHASH FUNCTION-KEY HOOK-HASH) FUNCTION)) #<C..\n  7: (CCL::NX1-TYPED-FORM :RETURN (LET (HOOK-HASH (ALEXANDRIA.0.DEV:ENSURE-GETHASH HOOK-NAME *AVAILABLE-HOOKS* (MAKE-HASH-TABLE :TEST #'EQUALP))) (SETF (GETHASH FUNCTION-KEY HOOK-HASH) FUNCTION)) #<CCL::LE..\n  8: (CCL::NX1-FORM :RETURN (LET (HOOK-HASH (ALEXANDRIA.0.DEV:ENSURE-GETHASH HOOK-NAME *AVAILABLE-HOOKS* (MAKE-HASH-TABLE :TEST #'EQUALP))) (SETF (GETHASH FUNCTION-KEY HOOK-HASH) FUNCTION)) #<CCL::LEXICAL-..\n  9: (CCL::NX1-BLOCK :RETURN (BLOCK ADD-FUNCTION-TO-HOOK (LET (HOOK-HASH (ALEXANDRIA.0.DEV:ENSURE-GETHASH HOOK-NAME *AVAILABLE-HOOKS* #)) (SETF (GETHASH FUNCTION-KEY HOOK-HASH) FUNCTION))) #<CCL::LEXICAL-E..\n 10: (CCL::NX1-COMBINATION :RETURN (BLOCK ADD-FUNCTION-TO-HOOK (LET (HOOK-HASH (ALEXANDRIA.0.DEV:ENSURE-GETHASH HOOK-NAME *AVAILABLE-HOOKS* #)) (SETF (GETHASH FUNCTION-KEY HOOK-HASH) FUNCTION))) #<CCL::LEX..\n 11: (CCL::NX1-TRANSFORMED-FORM :RETURN (BLOCK ADD-FUNCTION-TO-HOOK (LET (HOOK-HASH (ALEXANDRIA.0.DEV:ENSURE-GETHASH HOOK-NAME *AVAILABLE-HOOKS* #)) (SETF (GETHASH FUNCTION-KEY HOOK-HASH) FUNCTION))) #<CCL..\n 12: (CCL::NX1-TYPED-FORM :RETURN (BLOCK ADD-FUNCTION-TO-HOOK (LET (HOOK-HASH (ALEXANDRIA.0.DEV:ENSURE-GETHASH HOOK-NAME *AVAILABLE-HOOKS* #)) (SETF (GETHASH FUNCTION-KEY HOOK-HASH) FUNCTION))) #<CCL::LEXI..\n 13: (CCL::NX1-FORM :RETURN (BLOCK ADD-FUNCTION-TO-HOOK (LET (HOOK-HASH (ALEXANDRIA.0.DEV:ENSURE-GETHASH HOOK-NAME *AVAILABLE-HOOKS* #)) (SETF (GETHASH FUNCTION-KEY HOOK-HASH) FUNCTION))) #<CCL::LEXICAL-EN..\n 14: (CCL::NX1-ENV-BODY :RETURN ((BLOCK ADD-FUNCTION-TO-HOOK (LET (HOOK-HASH #) (SETF # FUNCTION)))) #<CCL::LEXICAL-ENVIRONMENT #x302003DBE43D> NIL)\n 15: (CCL::NX1-LAMBDA (HOOK-NAME FUNCTION-KEY FUNCTION) ((BLOCK ADD-FUNCTION-TO-HOOK (LET (HOOK-HASH #) (SETF # FUNCTION)))) ((DECLARE (CCL::GLOBAL-FUNCTION-NAME ADD-FUNCTION-TO-HOOK))))\n 16: (CCL::NX1-COMPILE-LAMBDA ADD-FUNCTION-TO-HOOK (LAMBDA (HOOK-NAME FUNCTION-KEY FUNCTION) ..) #<CCL::AFUNC #x302003DBE48D> NIL #<CCL::LEXICAL-ENVIRONMENT #x302003DBE55D> #<CCL:COMPILER-POLICY #x3020001B..\n 17: (CCL::COMPILE-NAMED-FUNCTION (LAMBDA (HOOK-NAME FUNCTION-KEY FUNCTION) (DECLARE (CCL::GLOBAL-FUNCTION-NAME ADD-FUNCTION-TO-HOOK)) (BLOCK ADD-FUNCTION-TO-HOOK (LET (HOOK-HASH #) (SETF # FUNCTION)))) :N..\n 18: (CCL::CHEAP-EVAL-FUNCTION ADD-FUNCTION-TO-HOOK (LAMBDA (HOOK-NAME FUNCTION-KEY FUNCTION) ..) #<CCL::LEXICAL-ENVIRONMENT #x302003DBE5AD>)\n 19: (CCL::CHEAP-EVAL-IN-ENVIRONMENT (CCL::%DEFUN (CCL:NFUNCTION ADD-FUNCTION-TO-HOOK (LAMBDA (HOOK-NAME FUNCTION-KEY FUNCTION) (DECLARE #) (BLOCK ADD-FUNCTION-TO-HOOK #))) 'NIL) #<CCL::LEXICAL-ENVIRONMENT..\n --more--",
 "title": ""
}