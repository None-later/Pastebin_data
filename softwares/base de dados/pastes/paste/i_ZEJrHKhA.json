{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "lg_en"
 ],
 "key": "ZEJrHKhA",
 "pasteDate": "Feb 10, 2018, 9:13:12 AM",
 "relevancy": 0.0,
 "relevant": false,
 "text": "#include <iostream>\n#include <fstream>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n#include <set>\n#include <map>\n#include <stack>\n#include <queue>\n#include <cstdlib>\n#include <cstdio>\n#include <string>\n#include <cstring>\n#include <cassert>\n#include <utility>\n#include <iomanip>\n\nusing namespace std;\n\nconst int MAXN = 105000;\n\nstruct node {\n    int suff_link, par;\n    char c;\n    map < char, int > go;\n    bool is_word;   \n\n    node() {\n        suff_link = -1, par = -1;\n        is_word = false;\n    }\n};\n\nint n;\nchar s[MAXN];\nvector <node> trie;\n\nvoid trieInsert(char s[MAXN]) {\n    int cur_node = 0;\n    int len = strlen(s);\n    for (int i = 0; i < len; i++) {\n        int go = trie[cur_node].go[s[i]];\n        if (go == 0) {\n            node add;\n            add.par = cur_node; add.c = s[i];\n            trie.push_back(add);\n            go = (int) trie.size() - 1;\n            trie[cur_node].go[s[i]] = go;\n        }\n        cur_node = go;\n    }   \n    trie[cur_node].is_word = true;\n}\n\nint go(int cur_node, char c);\n\nint getSuffLink(int cur_node) {\n    if (trie[cur_node].suff_link != -1)\n        return trie[cur_node].suff_link;\n    if (trie[cur_node].par == 0) \n        return trie[cur_node].suff_link = 0;\n    char c = trie[cur_node].c;\n    int parent = trie[cur_node].par;\n    return trie[cur_node].suff_link = go(trie[parent].suff_link, c); \n}\n\nint go(int cur_node, char c) {\n    if (trie[cur_node].go.count(c) > 0)\n        return trie[cur_node].go[c];\n    if (cur_node == 0)\n        return trie[cur_node].go[c] = 0;\n    int suff_link = getSuffLink(cur_node);\n    return trie[cur_node].go[c] = go(suff_link, c);\n}\n\nvoid buildAhoCorasick() {\n    queue <int> q;\n    q.push(0);\n    while (!q.empty()) {\n        int cur_node = q.front();\n        q.pop();\n\n        for (map <char, int> :: iterator it = trie[cur_node].go.begin(); it != trie[cur_node].go.end(); it++) {\n            q.push(it->second);\n        }\n\n        int suff_link = getSuffLink(cur_node);\n        trie[cur_node].suff_link = suff_link;\n        if (trie[suff_link].is_word)\n            trie[cur_node].is_word = true;\n    }\n}\n\nint main() {\n    assert(freopen(\"console.in\",\"r\",stdin));\n    assert(freopen(\"console.out\",\"w\",stdout));\n\n    node root;\n    root.suff_link = 0;\n    trie.push_back(root);\n\n    scanf(\"%d\", &n);\n    gets(s);\n\n    for (int i = 1; i <= n; i++) {\n        gets(s);\n        trieInsert(s);\n    }\n\n    buildAhoCorasick();\n\n    while (gets(s)) {\n        int cur_node = 0;\n        int len = strlen(s);\n        for (int i = 0; i < len; i++) {\n            cur_node = go(cur_node, s[i]);\n            if (trie[cur_node].is_word) {\n                puts(s);\n                break;\n            }\n        }\n    }\n\n    return 0;\n}",
 "title": ""
}