{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "lg_en"
 ],
 "key": "sDbvWmj4",
 "pasteDate": "Feb 12, 2018, 4:12:01 AM",
 "relevancy": 1.0,
 "relevant": false,
 "text": "public class SinglyLinkedList {\n  private Node head;\n\n  private class Node {\n    int data;\n    Node next;\n  }\n\n  public SinglyLinkedList() {\n\n  }\n\n  public int size() {\n    if (isEmpty()) {\n      return 0;\n    }\n\n    int size = 0;\n    Node currentNode = head;\n    while (true) {\n      size += 1;\n      if (currentNode.next == null) {\n        break;\n      }\n      currentNode = currentNode.next;\n    }\n\n    return size;\n  }\n\n  public boolean isEmpty() {\n    return head == null;\n  }\n\n  /**\n   * \n   * @param index\n   *          0\n   * @return null\n   */\n  public Integer get(int index) {\n    if (isEmpty()) {\n      return null;\n    }\n\n    int currentIndex = -1;\n    Node currentNode = head;\n    Integer data = null;\n    while (true) {\n      currentIndex += 1;\n      if (currentIndex == index) {\n        data = currentNode.data;\n        break;\n      }\n      if (currentNode.next == null) {\n        break;\n      }\n      currentNode = currentNode.next;\n    }\n\n    return data;\n  }\n\n  /**\n   * \n   * \n   * @param data\n   * @return\n   */\n  public boolean add(int data) {\n    Node newNode = new Node();\n    newNode.data = data;\n    newNode.next = null;\n\n    if (isEmpty()) {\n      head = newNode;\n      return true;\n    }\n\n    Node lastNode = getLastNode();\n    lastNode.next = newNode;\n\n    return true;\n  }\n\n  /**\n   * \n   * \n   * @param index\n   * @param node\n   * @return\n   */\n  public boolean add(int index, int data) {\n    Node newNode = new Node();\n    newNode.data = data;\n    newNode.next = null;\n\n    if (isEmpty()) {\n      head = newNode;\n      return true;\n    }\n\n    if (index == 0) {\n      newNode.next = head;\n      head = newNode;\n      return true;\n    }\n\n    Node preNode = null;\n    Node currentNode = head;\n    int currentIndex = -1;\n    while (true) {\n      currentIndex += 1;\n      if (currentIndex == index) {\n        break;\n      }\n      if (currentNode.next == null) {\n        break;\n      }\n      preNode = currentNode;\n      currentNode = currentNode.next;\n    }\n\n    if (currentIndex != index) {// \n      return false;\n    }\n\n    newNode.next = currentNode;\n    preNode.next = newNode;\n\n    return true;\n  }\n\n  private Node getLastNode() {\n    Node currentNode = head;\n    while (true) {\n      if (currentNode.next == null) {\n        break;\n      }\n      currentNode = currentNode.next;\n    }\n    return currentNode;\n  }\n\n  public Integer removeLast() {\n    if (isEmpty()) {\n      return null;\n    }\n\n    Integer value;\n\n    if (head.next == null) {\n      value = head.data;\n      head = null;\n      return value;\n    }\n\n    Node preNode = null;\n    Node currentNode = head;\n    while (true) {\n      if (currentNode.next == null) {\n        break;\n      }\n      preNode = currentNode;\n      currentNode = currentNode.next;\n    }\n\n    value = currentNode.data;\n\n    currentNode = null;\n    preNode.next = null;\n\n    return value;\n  }\n\n  public Integer remove(int index) {\n    if (index < 0) {\n      return null;\n    }\n\n    if (isEmpty()) {\n      return null;\n    }\n\n    Integer value;\n\n    if (index == 0 && head.next == null) {\n      value = head.data;\n      head = null;\n      return value;\n    } else if (index == 0 && head.next != null) {\n      value = head.data;\n      head = head.next;\n      return value;\n    } else if (index > 0 && head.next == null) {\n      return null;\n    }\n\n    Node preNode = null;\n    Node currentNode = head;\n    int currentIndex = -1;\n    while (true) {\n      currentIndex += 1;\n      if (currentIndex == index) {\n        break;\n      }\n      if (currentNode.next == null) {\n        break;\n      }\n      preNode = currentNode;\n      currentNode = currentNode.next;\n    }\n\n    if (currentIndex != index) {// \n      return null;\n    }\n\n    value = currentNode.data;\n\n    preNode.next = currentNode.next;\n    currentNode = null;\n\n    return value;\n  }\n}",
 "title": ""
}