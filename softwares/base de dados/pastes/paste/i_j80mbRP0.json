{
 "espireDate": "N",
 "format": "c",
 "jSonReasons": [
  "lg_en"
 ],
 "key": "j80mbRP0",
 "pasteDate": "Feb 17, 2018, 10:45:04 PM",
 "relevancy": 0.0,
 "relevant": false,
 "text": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nstruct polynomial {\n    int *coeff;\n    int deg;\n};\n\ntypedef struct polynomial Poly;\n\nvoid initialize_poly(Poly* p);\nvoid print_poly(Poly* p);\nvoid fill_poly(Poly* p, int deg, int* coeff);\nvoid fill_poly_rand(Poly* p, int deg);\nvoid clean_poly(Poly* p);\nvoid extend_poly(Poly* p, int new_deg);\nint evaluate_poly(Poly* p, int x);\nvoid sum_polly(Poly* p1, Poly* p2, Poly* p3);\n\n\nint main()\n{\n\n\tPoly p1, p2, p3;\n\n\tprintf(\"\\n************** Task 1 (1 points) **************\\n\");\n\tinitialize_poly(&p1);\n\tinitialize_poly(&p2);\n    initialize_poly(&p3);\n\tprintf(\"p1: \"); print_poly(&p1);\n\n\tprintf(\"\\n************** Task 2 (2 points) **************\\n\");\n\tint coeff[] = {1, -2, 3, -4, 5, -6};\n\tfill_poly(&p1, 5, coeff);\n\tfill_poly_rand(&p2, 2);\n\tprintf(\"p1: \"); print_poly(&p1);\n\tprintf(\"p2: \"); print_poly(&p2);\n\n\tprintf(\"\\n************** Task 3 (1 points) **************\\n\");\n\textend_poly(&p2,4);\n\tprintf(\"p2: \"); print_poly(&p2);\n\n\tprintf(\"\\n************** Task 4 (2 points) **************\\n\");\n\tprintf(\"p1(1): \"); printf(\"%d\\n\", evaluate_poly(&p1, 1));\n\n\tprintf(\"\\n************** Task 5 (2 points) **************\\n\");\n\tsum_polly(&p1, &p2, &p3);\n\tprintf(\"p1: \"); print_poly(&p1);\n\tprintf(\"p2: \"); print_poly(&p2);\n\tprintf(\"p1+p2: \"); print_poly(&p3);\n\tsum_polly(&p2, &p1, &p3);\n\tprintf(\"p2+p1: \"); print_poly(&p3);\n\tclean_poly(&p1);\n\tclean_poly(&p2);\n\tclean_poly(&p3);\n\n\treturn 0;\n}\n\n\nvoid initialize_poly(Poly* p) {\n    p->coeff = NULL;\n    p->deg = -1;\n}\n\nvoid print_poly(Poly* p) {\n    int i = p->deg;\n    if(p->coeff != NULL) {\n        while(i > 0) {\n            if(i < p->deg) {\n                if(p->coeff[i] >= 0)\n                    printf(\"+\");\n            }\n            if(i == 0)\n                printf(\"%d\", p->coeff[i]);\n\n            else\n                printf(\"%dx^%d\", p->coeff[i], i);\n            i--;\n        }\n    }\n    else {\n        printf(\"Empty polynomial\");\n    }\n    printf(\"\\n\");\n}\n\nvoid fill_poly(Poly* p, int deg, int* coeff) {\n    p->coeff = (int*)malloc((deg+1)*sizeof(int));\n    int i = 0;\n    while(i < deg+1) {\n        p->coeff[i] = coeff[i];\n        i++;\n    }\n    p->deg = deg;\n}\n\nvoid fill_poly_rand(Poly* p, int deg) {\n    int i = 0;\n    srand(time(0));\n    p->coeff = (int*)malloc((deg+1)*sizeof(int));\n    for(i = 0; i < deg + 1; i++) {\n        p->coeff[i] = rand()%10;\n    }\n    p->deg = deg;\n}\n\nvoid clean_poly(Poly* p) {\n    if(p->coeff != NULL) {\n        free(p->coeff);\n        p->deg = -1;\n    }\n}\n\nvoid extend_poly(Poly* p, int new_deg) {\n    int i, k = p->deg;\n    p->coeff = (int*)realloc(p->coeff, (new_deg+1)*sizeof(int));\n    p->deg = new_deg;\n    for(i = k+1; i < new_deg+1; i++) {\n        p->coeff[i] = 0;\n    }\n}\n\nint evaluate_poly(Poly* p, int x) {\n    int i = 0, sum = 0;\n    for(i = 0; i < p->deg + 1; i++) {\n        sum = sum + p->coeff[i]*(x^i);\n    }\n    return sum;\n}\n\nvoid sum_polly(Poly* p1, Poly* p2, Poly* p3) {\n    int i = 0;\n    int len, diff = 0;\n    if(p1->deg > p2->deg) {\n        len = p1->deg + 1;\n        diff = p2->deg + 1;\n    }\n    else if(p1->deg < p2->deg) {\n        len = p2->deg + 1;\n        diff = p1->deg + 1;\n    }\n    else {\n        len = p1->deg + 1;\n        diff = len;\n    }\n\n    p3->coeff = (int*)malloc(len*sizeof(int));\n\n    while(i < diff) {\n        p3->coeff[i] = p1->coeff[i] + p2->coeff[i];\n        i++;\n    }\n    if(diff != len) {\n        if(len == p1->deg + 1) {\n            while(i < len) {\n                p3->coeff[i] = p1->coeff[i];\n                i++;\n            }\n        }\n        else {\n            while(i < len) {\n                p3->coeff[i] = p2->coeff[i];\n                i++;\n            }\n        }\n    }\n    p3->deg = len-1;\n}",
 "title": ""
}