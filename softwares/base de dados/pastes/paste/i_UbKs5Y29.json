{
 "espireDate": "1W",
 "format": "csharp",
 "jSonReasons": [
  "lg_en"
 ],
 "key": "UbKs5Y29",
 "pasteDate": "Feb 21, 2018, 2:20:37 PM",
 "relevancy": 0.0,
 "relevant": false,
 "text": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace ConsoleApplication2\n{\n    public enum Verb\n    {\n        Must,\n        MustNot,\n        Should\n    }\n\n    class ConditionBuilder<T> : IConditionBuilderBase<T>\n    {\n        protected List<Rule> _rules = new List<Rule>();\n\n        public IMatchBuilder<T> MustNot => new MatchBuilder<T>(this, _rules.Add, Verb.MustNot);\n\n        public IMatchBuilder<T> Must => new MatchBuilder<T>(this, _rules.Add, Verb.Must);\n\n        public IMatchBuilder<T> Should => new MatchBuilder<T>(this, _rules.Add, Verb.Should);\n    }\n\n    class RoolBuilder : ConditionBuilder<IRootConditionBuilder>, IRootConditionBuilder\n    {\n        public Rule[] Done()\n        {\n            return _rules.ToArray();\n        }\n    }\n    internal class MatchBuilder<T> : IMatchBuilder<T>\n    {\n        protected Verb _verb;\n        protected readonly Action<Rule> _addToParent;\n        private readonly object _builder;\n\n        public MatchBuilder(object builder, Action<Rule> addToParent, Verb verb)\n        {\n            _builder = builder;\n            this._verb = verb;\n            _addToParent = addToParent;\n        }\n\n        public IBlockConditionBuilder<T> MatchBlock()\n        {\n            return new BlockConditionBuilder<T>(_builder, _addToParent, _verb);\n        }\n\n        public T MatchStrict()\n        {\n            _addToParent(new Rule(_verb));\n            return (T)_builder;\n        }\n\n        public T MatchWildcard()\n        {\n            _addToParent(new Rule(_verb));\n            return (T)_builder;\n        }\n    }\n\n    internal class BlockConditionBuilder<T> : ConditionBuilder<IBlockConditionBuilder<T>>, IBlockConditionBuilder<T>\n    {\n        private object _builder;\n        private readonly Action<Rule> _addToParent;\n        private readonly Verb _verb;\n\n        public BlockConditionBuilder(object builder, Action<Rule> addToParent, Verb verb)\n        {\n            this._builder = builder;\n            _addToParent = addToParent;\n            _verb = verb;\n        }\n\n        public T End\n        {\n            get\n            {\n                _addToParent(new BlockRule(_verb, _rules));\n                return (T)_builder;\n            }\n        }\n    }\n\n    internal class BlockRule : Rule\n    {\n        private List<Rule> _rules;\n\n        public BlockRule(Verb verb, List<Rule> rules) : base(verb)\n        {\n            this._rules = rules;\n        }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var c = new RoolBuilder();\n            var k = c.Must.MatchBlock().Must.MatchBlock();\n\n            c = new RoolBuilder();\n            c.MustNot.MatchStrict()\n                .Must.MatchWildcard()\n                .Must.MatchBlock()\n                     .Must.MatchStrict()\n                     .Must.MatchBlock()\n                        .Must.MatchStrict()\n                        .End\n                     .Must.MatchStrict()\n                 .End\n                .Done();\n\n            c = new RoolBuilder();\n            var b = c.MustNot.MatchStrict()\n                .Must.MatchWildcard()\n                .Must.MatchBlock()\n                     .Must.MatchStrict()\n                     .End\n                .Must.MatchBlock()\n                    .Must.MatchStrict()\n                .End\n                .Must.MatchBlock()\n                    .Must.MatchStrict()\n                    .End\n                 .Must.MatchBlock()\n                    .Must.MatchBlock()\n                        .Must.MatchStrict()\n                        .End\n                    .End\n                .Done();\n\n            c = new RoolBuilder();\n            var d = c.Must.MatchBlock().End\n                .Done();\n        }\n    }\n\n    public interface IRootConditionBuilder : IConditionBuilderBase<IRootConditionBuilder>\n    {\n        Rule[] Done();\n    }\n\n    public interface IConditionBuilderBase<T>\n    {\n        IMatchBuilder<T> Should { get; }\n        IMatchBuilder<T> MustNot { get; }\n        IMatchBuilder<T> Must { get; }\n    }\n\n    public interface IMatchBuilder<TBuilder>\n    {\n        TBuilder MatchStrict();\n\n        TBuilder MatchWildcard();\n\n        IBlockConditionBuilder<TBuilder> MatchBlock();\n    }\n\n    public interface IBlockConditionBuilder<T> : IBlockConditionBuilderBase<T, IBlockConditionBuilder<T>>\n    {\n    }\n\n    public interface IBlockConditionBuilderBase<TPrevious, TCurrent> : IConditionBuilderBase<TCurrent>\n    {\n        TPrevious End { get; }\n    }\n\n    public class Rule\n    {\n        private Verb _verb;\n\n        public Rule(Verb _verb)\n        {\n            this._verb = _verb;\n        }\n    }\n}",
 "title": ""
}