{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "lg_en"
 ],
 "key": "MUnvR0VF",
 "pasteDate": "Feb 24, 2018, 4:34:01 PM",
 "relevancy": 1.0,
 "relevant": false,
 "text": "class Owner(models.Model):\nOWNER_CHOICES = []\nfor user in User.objects.filter(name = ' '):\n    if user.has_perm('helpdesk.can_close'):\n       OWNER_CHOICES.append(user)\n\nname = models.CharField(max_length=50, choices=OWNER_CHOICES)\n\ndef __str__(self):\n    return self.name\n\nclass Application(models.Model):\nSTATUS_CHOICES = (\n    ('in_the_work', ' '),\n    ('new', ''),\n    ('completed', '')\n)\n\nauthors = models.ForeignKey('auth.User')\ntitle = models.CharField(max_length=50)\ntext = models.TextField()\nroom = models.CharField(max_length = 4)\npublished_date = models.DateField(blank=True, null=True, default = datetime.datetime.now)\nstatus = models.CharField(max_length=15, choices=STATUS_CHOICES, default='new')\nowner = models.ManyToManyField(Owner)\n\nclass Meta:\n    permissions = (\n        (\"can_add_change\", \"  \"),\n        (\"can_close\", \"\"),\n        (\"can_assign\", \"\"),\n    )\n\ndef publish(self):\n    self.publish_date = datetime.datetime.now()\n    self.save()\n\ndef __str__(self):\n    return self.title\n\t\nclass Owner(models.Model):\nOWNER_CHOICES = []\nfor user in Group.objects.filter(name = ' '):\n    #if user.has_perm('helpdesk.can_close'):\n        OWNER_CHOICES.append(user)\n\nname = models.CharField(max_length=50, choices=OWNER_CHOICES)\n\ndef __str__(self):\n    return self.name\n\nclass Application(models.Model):\n\nSTATUS_CHOICES = (\n    ('in_the_work', ' '),\n    ('new', ''),\n    ('completed', '')\n)\n\nauthors = models.ForeignKey('auth.User')\ntitle = models.CharField(max_length=50)\ntext = models.TextField()\nroom = models.CharField(max_length = 4)\npublished_date = models.DateField(blank=True, null=True, default = datetime.datetime.now)\nstatus = models.CharField(max_length=15, choices=STATUS_CHOICES, default='new')\nowner = models.ManyToManyField(Owner)\n\nclass Meta:\n    permissions = (\n        (\"can_add_change\", \"  \"),\n        (\"can_close\", \"\"),\n        (\"can_assign\", \"\"),\n    )\n\ndef publish(self):\n    self.publish_date = datetime.datetime.now()\n    self.save()\n\ndef __str__(self):\n    return self.title\n\t\nSystemCheckError: System check identified some issues:\n\nERRORS:\n<class 'helpdesk.admin.ApplicationAdmin'>: (admin.E002) The value of \n'raw_id_fields[0]' refers to 'user', which is not an attribute of \n'helpdesk.Application'.\n<class 'helpdesk.admin.ApplicationAdmin'>: (admin.E108) The value of \n'list_display[0]' refers to 'user', which is not a callable, an attribute of \n\n'ApplicationAdmin', or an attribute or method on 'helpdesk.Application'.\n<class 'helpdesk.admin.ApplicationAdmin'>: (admin.E116) The value of \n'list_filter[2]' refers to 'user', which does not refer to a Field.\nhelpdesk.Owner.name: (fields.E005) 'choices' must be an iterable containing \n(actual value, human readable name) tuples.",
 "title": ""
}