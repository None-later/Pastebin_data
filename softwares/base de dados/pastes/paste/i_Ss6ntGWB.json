{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "lg_en",
  "kw_scan"
 ],
 "key": "Ss6ntGWB",
 "pasteDate": "Feb 20, 2018, 6:18:58 PM",
 "relevancy": 1.0,
 "relevant": false,
 "text": "#\n#\n#\n\nclass BoolExp\n  \n  def initialize(expression = nil)\n    @expression = expression\n    @postfix = nil\n    @@symbols ||= {\"(\" => :lparen, \")\" => :rparen, \"&\" => :and, \"|\" => :or, \"!\" => :not}\n    @@precedence ||= {:lparen => 0, :rparen => 0, :and => 1, :or => 1, :not => 2}\n    compile unless @expression.empty?\n  end\n\n  def compile(expression = nil)\n    @expression = expression || @expression\n    @postfix = []\n    stack = []\n    puts \"BEGIN compile of expr: '#{@expression}'\"\n    print \"stack: \"\n    p stack\n    print \"postfix: \"\n    p @postfix\n    @expression.scan(/(\\w+|\\W)/).flatten.each do |term|\n      term = @@symbols[term] || term.strip\n      next if term.to_s.empty?\n      puts '='*30\n      puts \"current term: #{term}\"\n\n      case term\n        when :lparen\n          puts \"pushing :lparen on the stack\"\n          stack.push term\n          print \"stack: \"\n          p stack\n          print \"postfix: \"\n          p @postfix\n        when :and, :or, :not\n          until stack.empty?\n            break if @@precedence[term] > @@precedence[stack.last]\n            @postfix << stack.pop\n            puts \"pop #{term} off the stack and push into postfix\"\n            print \"stack: \"\n            p stack\n            print \"postfix: \"\n            p @postfix\n          end\n          stack.push term\n          puts \"pushing #{term} onto the stack\"\n          print \"stack: \"\n          p stack\n          print \"postfix: \"\n          p @postfix\n        when :rparen\n          puts \"got :rparen, popping the stack and pushing into postfix until the top of the stack is :lparen\"\n          while stack.last != :lparen\n            @postfix << stack.pop\n            print \"stack: \"\n            p stack\n            print \"postfix: \"\n            p @postfix\n          end\n          puts \"pop stack #{stack.pop}\"\n          print \"stack: \"\n          p stack\n          print \"postfix: \"\n          p @postfix\n        else\n        @postfix << term\n        puts \"append #{term} to postfix\"\n        print \"stack: \"\n        p stack\n        print \"postfix: \"\n        p @postfix\n      end\n    end\n    @postfix.concat(stack.reverse)\n    puts \"doing @postfix.concat(stack.reverse)\"\n    print \"stack: \"\n    p stack\n    print \"postfix: \"\n    p @postfix\n  end\n\n  def compute\n    return false if @postfix.empty?\n    puts '='*30\n    stack = []\n    puts \"Start compilation\"\n    print \"stack: \"\n    p stack\n    print \"postfix: \"\n    p @postfix\n    @postfix.each do |term|\n      puts '='*30\n      puts \"in compute. current term of postfix: #{term}\"\n      print \"stack: \"\n      p stack\n      print \"postfix: \"\n      p @postfix\n      case term\n        when :and\n          rhs = stack.pop\n          stack.push(stack.pop && rhs)\n          puts \"received :and\"\n          print \"stack: \"\n          p stack\n          print \"postfix: \"\n          p @postfix\n        when :or\n          rhs = stack.pop\n          stack.push(stack.pop || rhs)\n          puts \"received :or\"\n          print \"stack: \"\n          p stack\n          print \"postfix: \"\n          p @postfix\n        when :not\n          stack.push(!stack.pop)\n          puts \"received :not\"\n          print \"stack: \"\n          p stack\n          print \"postfix: \"\n          p @postfix\n        else\n          stack.push(yield(term))\n          puts \"after yield(#{term})\"\n          print \"stack: \"\n          p stack\n          print \"postfix: \"\n          p @postfix\n      end\n    end\n    print \"result:#{stack.first} \"\n    print \"stack: \"\n    p stack\n    print \"postfix: \"\n    p @postfix\n    stack.first\n  end\n  \nend\n\nbool = BoolExp.new \"(foo | bar & !baz) | nik & foo\"\nroles=['foo', 'bar']\nbool.compute {|term| roles.include? term}",
 "title": ""
}