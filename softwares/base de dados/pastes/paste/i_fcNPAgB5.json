{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "lg_en"
 ],
 "key": "fcNPAgB5",
 "pasteDate": "Feb 25, 2018, 11:04:25 PM",
 "relevancy": 0.0,
 "relevant": false,
 "text": "//\n//  main.cpp\n//  mp2\n//\n//  Created by Jack Shirley on 2/14/18.\n//  Copyright  2018 Jack Shirley. All rights reserved.\n//\n\n#include <iostream>\n#include <stdio.h>\n#include <string.h>\n#include <vector>\n#include <sstream>\n#include <unistd.h>\n#include <time.h>\n#include <ctime>\n\nusing namespace std;\n\n\nstring str;\nstring command = \"\";\nvector<string> tokens;\nvector<vector<string> > commands;\n\nint pid;\nint pipe1[2];\nint pipe2[2];\n\n\n\n\n\n\nvoid multInputs(vector<vector<string> > &commands){     //for when theres piping\n    cout << \"HERE\" << endl;\n    for(int i = 0; i < commands.size(); i++){\n        char * args[commands[i].size()];\n        \n            for(int j = 0; j < tokens.size(); j++){\n                args[j] =  (char *)commands[i][j].c_str();\n            }\n        \n        args[commands[i].size()] = NULL;\n        execvp(args[0],args);\n    }\n    tokens.clear();\n}\n\n\n\nvoid singleInput(vector<vector<string> > &commands, int index){    // jumps here if there is no piping involved\n    char * args[commands[index].size()];\n    for(int j = 0; j < commands[index].size(); j++){\n        args[j] =  (char *)commands[index][j].c_str();\n    }\n    args[commands[index].size()] = NULL;\n    execvp(args[index], args);\n}\n\n\n\n\nvoid split(const string &s) {   //Parser function\n    stringstream ss(s);\n    string item = \"\";\n    while (ss >> item) {\n        if(item == \"|\"){\n            commands.push_back(tokens);\n            tokens.clear();\n        }else{\n            tokens.push_back(item);\n        }\n    }\n    commands.push_back(tokens);\n    tokens.clear();\n    \n    \n}\n\n\nint main() {\n\n    //*********************************************************\n    //Custom Prompt features\n\n    bool cust = false;\n\n    time_t now;\n    struct tm nowLocal;\n    now = time(NULL);\n    nowLocal = *localtime(&now);\n\n    string terminalOut = \"asdf\";\n    cout << \"Custom or Default Prompt?\" << endl;\n    cin >> str;\n    if(str == \"Custom\"){ //custom prompt or no?\n            terminalOut = \"/Users/jshirley/Documents/mp2.1 \";\n            cust = true;\n\n    }else{\n        terminalOut = \"$ \";\n    }\n    //*********************************************************\n\n    \n        \n\n    while(true){                 //continuosly ask for user input\n        if(cust == true){\n            cout << terminalOut << nowLocal.tm_mon << \"/\" << nowLocal.tm_year << \" \" << nowLocal.tm_hour << \"-\" << nowLocal.tm_min;\n        }\n        cout << terminalOut;\n        command = \"\";\n        getline(cin, command);\n        if(command == \"logout\"){     //exit loop if user logs out\n            cout << \"Logging off\" << endl;\n            break;\n        }\n        \n        split(command);\n\n        int fs [commands.size()][2];\n        \n\n        //piping attempt *WARNING* BAD CODE ALERT\n\n        \n        if(fork() == 0){\n            if(commands.size() == 1){    //only run if single command\n                singleInput(commands, 0);\n            }else{\n\n                for(int i = 0; i < commands.size() - 1; i++){\n                    if( i < commands.size() - 1 ) {\n                        pipe( fs[i] );\n                    }\n\n                    if(i == 0){\n                        dup2( fs[0][1], 1);\n\n                        close(fs[0][0]);\n                        close(fs[0][0]);\n\n                        singleInput(commands, 1);\n                    }\n                    else if( ( i < commands.size()) - 1 )\n                    {\n                        dup2( fs[i][1], 1 );\n                        dup2( fs[i-1][0], 0 );\n\n                        close(fs[i][0]);\n                        close(fs[i][1]);\n                        close(fs[i-1][0]);\n                        close(fs[i-1][1]);\n\n                        singleInput(commands, 2);\n                    }\n                    else\n                    {\n                        dup2(fs[i-1][0], 0);\n\n                        close(fs[i-1][0]);\n                        close(fs[i-1][1]);\n\n                        singleInput(commands, 3);\n                    }\n\n                }\n                cout << \"HERE2\" << endl;\n                multInputs(commands);\n            }\n        }else{\n            wait(0);\n        }\n        commands.clear();\n    }\n    \n    return 0;\n}",
 "title": ""
}