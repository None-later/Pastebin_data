{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "kw_scanner",
  "kw_target",
  "kw_shutdown",
  "re_url",
  "kw_pass",
  "kw_encrypted",
  "lg_en",
  "kw_password",
  "re_ast2",
  "kw_down",
  "kw_error",
  "kw_encrypt"
 ],
 "key": "M8tapnaX",
 "pasteDate": "Feb 11, 2018, 2:23:47 AM",
 "relevancy": 3.0,
 "relevant": false,
 "text": "#!/bin/bash\n# Copyright (c) 2012 Tom Wambold\n# \n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n# \n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n# \n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n\n# This script will set up an Arch installation with a 100 MB /boot partition\n# and an encrypted LVM partition with swap and / inside.  It also installs\n# and configures systemd as the init system (removing sysvinit).\n#\n# You should read through this script before running it in case you want to\n# make any modifications, in particular, the variables just below, and the\n# following functions:\n#\n#    partition_drive - Customize to change partition sizes (/boot vs LVM)\n#    setup_lvm - Customize for partitions inside LVM\n#    install_packages - Customize packages installed in base system\n#                       (desktop environment, etc.)\n#    install_aur_packages - More packages after packer (AUR helper) is\n#                           installed\n#    set_netcfg - Preload netcfg profiles\n\n## CONFIGURE THESE VARIABLES\n## ALSO LOOK AT THE install_packages FUNCTION TO SEE WHAT IS ACTUALLY INSTALLED\n\n# Drive to install to.\nDRIVE='/dev/sda'\n\n# Hostname of the installed machine.\nHOSTNAME='host100'\n\n# Encrypt everything (except /boot).  Leave blank to disable.\nENCRYPT_DRIVE='TRUE'\n\n# Passphrase used to encrypt the drive (leave blank to be prompted).\nDRIVE_PASSPHRASE='a'\n\n# Root password (leave blank to be prompted).\nROOT_PASSWORD='a'\n\n# Main user to create (by default, added to wheel group, and others).\nUSER_NAME='user'\n\n# The main user's password (leave blank to be prompted).\nUSER_PASSWORD='a'\n\n# System timezone.\nTIMEZONE='America/New_York'\n\n# Have /tmp on a tmpfs or not.  Leave blank to disable.\n# Only leave this blank on systems with very little RAM.\nTMP_ON_TMPFS='TRUE'\n\nKEYMAP='us'\n# KEYMAP='dvorak'\n\n# Choose your video driver\n# For Intel\nVIDEO_DRIVER=\"i915\"\n# For nVidia\n#VIDEO_DRIVER=\"nouveau\"\n# For ATI\n#VIDEO_DRIVER=\"radeon\"\n# For generic stuff\n#VIDEO_DRIVER=\"vesa\"\n\n# Wireless device, leave blank to not use wireless and use DHCP instead.\nWIRELESS_DEVICE=\"wlan0\"\n# For tc4200's\n#WIRELESS_DEVICE=\"eth1\"\n\nsetup() {\n    local boot_dev=\"$DRIVE\"1\n    local lvm_dev=\"$DRIVE\"2\n\n    echo 'Creating partitions'\n    partition_drive \"$DRIVE\"\n\n    if [ -n \"$ENCRYPT_DRIVE\" ]\n    then\n        local lvm_part=\"/dev/mapper/lvm\"\n\n        if [ -z \"$DRIVE_PASSPHRASE\" ]\n        then\n            echo 'Enter a passphrase to encrypt the disk:'\n            stty -echo\n            read DRIVE_PASSPHRASE\n            stty echo\n        fi\n\n        echo 'Encrypting partition'\n        encrypt_drive \"$lvm_dev\" \"$DRIVE_PASSPHRASE\" lvm\n\n    else\n        local lvm_part=\"$lvm_dev\"\n    fi\n\n    echo 'Setting up LVM'\n    setup_lvm \"$lvm_part\" vg00\n\n    echo 'Formatting filesystems'\n    format_filesystems \"$boot_dev\"\n\n    echo 'Mounting filesystems'\n    mount_filesystems \"$boot_dev\"\n\n    echo 'Installing base system'\n    install_base\n\n    echo 'Chrooting into installed system to continue setup...'\n    cp $0 /mnt/setup.sh\n    arch-chroot /mnt ./setup.sh chroot\n\n    if [ -f /mnt/setup.sh ]\n    then\n        echo 'ERROR: Something failed inside the chroot, not unmounting filesystems so you can investigate.'\n        echo 'Make sure you unmount everything before you try to run this script again.'\n    else\n        echo 'Unmounting filesystems'\n        unmount_filesystems\n        echo 'Done! Reboot system.'\n    fi\n}\n\nconfigure() {\n    local boot_dev=\"$DRIVE\"1\n    local lvm_dev=\"$DRIVE\"2\n\n    echo 'Installing additional packages'\n    install_packages\n\n    echo 'Installing packer'\n    install_packer\n\n    echo 'Installing AUR packages'\n    install_aur_packages\n\n    echo 'Clearing package tarballs'\n    clean_packages\n\n    echo 'Updating pkgfile database'\n    update_pkgfile\n\n    echo 'Setting hostname'\n    set_hostname \"$HOSTNAME\"\n\n    echo 'Setting timezone'\n    set_timezone \"$TIMEZONE\"\n\n    echo 'Setting locale'\n    set_locale\n\n    echo 'Setting console keymap'\n    set_keymap\n\n    echo 'Setting hosts file'\n    set_hosts \"$HOSTNAME\"\n\n    echo 'Setting fstab'\n    set_fstab \"$TMP_ON_TMPFS\" \"$boot_dev\"\n\n    echo 'Setting initial modules to load'\n    set_modules_load\n\n    echo 'Configuring initial ramdisk'\n    set_initcpio\n\n    echo 'Setting initial daemons'\n    set_daemons \"$TMP_ON_TMPFS\"\n\n    echo 'Configuring bootloader'\n    set_syslinux \"$lvm_dev\"\n\n    echo 'Configuring sudo'\n    set_sudoers\n\n    echo 'Configuring slim'\n    set_slim\n\n    if [ -n \"$WIRELESS_DEVICE\" ]\n    then\n        echo 'Configuring netcfg'\n        set_netcfg\n    fi\n\n    if [ -z \"$ROOT_PASSWORD\" ]\n    then\n        echo 'Enter the root password:'\n        stty -echo\n        read ROOT_PASSWORD\n        stty echo\n    fi\n    echo 'Setting root password'\n    set_root_password \"$ROOT_PASSWORD\"\n\n    if [ -z \"$USER_PASSWORD\" ]\n    then\n        echo \"Enter the password for user $USER_NAME\"\n        stty -echo\n        read USER_PASSWORD\n        stty echo\n    fi\n    echo 'Creating initial user'\n    create_user \"$USER_NAME\" \"$USER_PASSWORD\"\n\n    echo 'Building locate database'\n    update_locate\n\n    rm /setup.sh\n}\n\npartition_drive() {\n    local dev=\"$1\"; shift\n\n    # 100 MB /boot partition, everything else under LVM\n    parted -s \"$dev\" \\\n        mklabel msdos \\\n        mkpart primary ext2 1 100M \\\n        mkpart primary ext2 100M 100% \\\n        set 1 boot on \\\n        set 2 LVM on\n}\n\nencrypt_drive() {\n    local dev=\"$1\"; shift\n    local passphrase=\"$1\"; shift\n    local name=\"$1\"; shift\n\n    echo -en \"$passphrase\" | cryptsetup -c aes-xts-plain -y -s 512 luksFormat \"$dev\"\n    echo -en \"$passphrase\" | cryptsetup luksOpen \"$dev\" lvm\n}\n\nsetup_lvm() {\n    local partition=\"$1\"; shift\n    local volgroup=\"$1\"; shift\n\n    pvcreate \"$partition\"\n    vgcreate \"$volgroup\" \"$partition\"\n\n    # Create a 1GB swap partition\n    lvcreate -C y -L1G \"$volgroup\" -n swap\n\n    # Use the rest of the space for root\n    lvcreate -l '+100%FREE' \"$volgroup\" -n root\n\n    # Enable the new volumes\n    vgchange -ay\n}\n\nformat_filesystems() {\n    local boot_dev=\"$1\"; shift\n\n    mkfs.ext2 -L boot \"$boot_dev\"\n    mkfs.ext4 -L root /dev/vg00/root\n    mkswap /dev/vg00/swap\n}\n\nmount_filesystems() {\n    local boot_dev=\"$1\"; shift\n\n    mount /dev/vg00/root /mnt\n    mkdir /mnt/boot\n    mount \"$boot_dev\" /mnt/boot\n    swapon /dev/vg00/swap\n}\n\ninstall_base() {\n    echo 'Server = http://mirrors.kernel.org/archlinux/$repo/os/$arch' >> /etc/pacman.d/mirrorlist\n\n    pacstrap /mnt base base-devel\n    pacstrap /mnt syslinux\n}\n\nunmount_filesystems() {\n    umount /mnt/boot\n    umount /mnt\n    swapoff /dev/vg00/swap\n    vgchange -an\n    if [ -n \"$ENCRYPT_DRIVE\" ]\n    then\n        cryptsetup luksClose lvm\n    fi\n}\n\ninstall_packages() {\n    local packages=''\n\n    # General utilities/libraries\n    packages+=' alsa-utils aspell-en chromium cpupower gvim mlocate net-tools ntp openssh p7zip pkgfile powertop python python2 rfkill rsync sudo unrar unzip wget zip systemd-sysvcompat zsh grml-zsh-config'\n\n    # Development packages\n    packages+=' apache-ant cmake gdb git maven mercurial subversion tcpdump valgrind wireshark-gtk'\n\n    # Netcfg\n    if [ -n \"$WIRELESS_DEVICE\" ]\n    then\n        packages+=' netcfg ifplugd dialog wireless_tools wpa_actiond wpa_supplicant'\n    fi\n\n    # Java stuff\n    packages+=' icedtea-web-java7 jdk7-openjdk jre7-openjdk'\n\n    # Libreoffice\n    packages+=' libreoffice-calc libreoffice-en-US libreoffice-gnome libreoffice-impress libreoffice-writer hunspell-en hyphen-en mythes-en'\n\n    # Misc programs\n    packages+=' mplayer pidgin vlc xscreensaver gparted dosfstools ntfsprogs'\n\n    # Xserver\n    packages+=' xorg-apps xorg-server xorg-xinit xterm'\n\n    # Slim login manager\n    packages+=' slim archlinux-themes-slim'\n\n    # Fonts\n    packages+=' ttf-dejavu ttf-liberation'\n\n    # On Intel processors\n    packages+=' intel-ucode'\n\n    # For laptops\n    packages+=' xf86-input-synaptics'\n\n    # Extra packages for tc4200 tablet\n    #packages+=' ipw2200-fw xf86-input-wacom'\n\n    if [ \"$VIDEO_DRIVER\" = \"i915\" ]\n    then\n        packages+=' xf86-video-intel libva-intel-driver'\n    elif [ \"$VIDEO_DRIVER\" = \"nouveau\" ]\n    then\n        packages+=' xf86-video-nouveau'\n    elif [ \"$VIDEO_DRIVER\" = \"radeon\" ]\n    then\n        packages+=' xf86-video-ati'\n    elif [ \"$VIDEO_DRIVER\" = \"vesa\" ]\n    then\n        packages+=' xf86-video-vesa'\n    fi\n\n    pacman -Sy --noconfirm $packages\n}\n\ninstall_packer() {\n    mkdir /foo\n    cd /foo\n    curl https://aur.archlinux.org/packages/pa/packer/packer.tar.gz | tar xzf -\n    cd packer\n    makepkg -si --noconfirm --asroot\n\n    cd /\n    rm -rf /foo\n}\n\ninstall_aur_packages() {\n    mkdir /foo\n    export TMPDIR=/foo\n    packer -S --noconfirm android-udev\n    packer -S --noconfirm chromium-pepper-flash-stable\n    packer -S --noconfirm chromium-libpdf-stable\n    unset TMPDIR\n    rm -rf /foo\n}\n\nclean_packages() {\n    yes | pacman -Scc\n}\n\nupdate_pkgfile() {\n    pkgfile -u\n}\n\nset_hostname() {\n    local hostname=\"$1\"; shift\n\n    echo \"$hostname\" > /etc/hostname\n}\n\nset_timezone() {\n    local timezone=\"$1\"; shift\n\n    ln -sT \"/usr/share/zoneinfo/$TIMEZONE\" /etc/localtime\n}\n\nset_locale() {\n    echo 'LANG=\"en_US.UTF-8\"' >> /etc/locale.conf\n    echo 'LC_COLLATE=\"C\"' >> /etc/locale.conf\n    echo \"en_US.UTF-8 UTF-8\" >> /etc/locale.gen\n    locale-gen\n}\n\nset_keymap() {\n    echo \"KEYMAP=$KEYMAP\" > /etc/vconsole.conf\n}\n\nset_hosts() {\n    local hostname=\"$1\"; shift\n\n    cat > /etc/hosts <<EOF\n127.0.0.1 localhost.localdomain localhost $hostname\n::1       localhost.localdomain localhost $hostname\nEOF\n}\n\nset_fstab() {\n    local tmp_on_tmpfs=\"$1\"; shift\n    local boot_dev=\"$1\"; shift\n\n    local boot_uuid=$(get_uuid \"$boot_dev\")\n\n    cat > /etc/fstab <<EOF\n#\n# /etc/fstab: static file system information\n#\n# <file system> <dir>    <type> <options>    <dump> <pass>\n\n/dev/vg00/swap none swap  sw                0 0\n/dev/vg00/root /    ext4  defaults,relatime 0 1\n\nUUID=$boot_uuid /boot ext2 defaults,relatime 0 2\nEOF\n}\n\nset_modules_load() {\n    echo 'microcode' > /etc/modules-load.d/intel-ucode.conf\n}\n\nset_initcpio() {\n    local vid\n\n    if [ \"$VIDEO_DRIVER\" = \"i915\" ]\n    then\n        vid='i915'\n    elif [ \"$VIDEO_DRIVER\" = \"nouveau\" ]\n    then\n        vid='nouveau'\n    elif [ \"$VIDEO_DRIVER\" = \"radeon\" ]\n    then\n        vid='radeon'\n    fi\n\n    local encrypt=\"\"\n    if [ -n \"$ENCRYPT_DRIVE\" ]\n    then\n        encrypt=\"encrypt\"\n    fi\n\n\n    # Set MODULES with your video driver\n    cat > /etc/mkinitcpio.conf <<EOF\n# vim:set ft=sh\n# MODULES\n# The following modules are loaded before any boot hooks are\n# run.  Advanced users may wish to specify all system modules\n# in this array.  For instance:\n#     MODULES=\"piix ide_disk reiserfs\"\nMODULES=\"ext4 $vid\"\n\n# BINARIES\n# This setting includes any additional binaries a given user may\n# wish into the CPIO image.  This is run last, so it may be used to\n# override the actual binaries included by a given hook\n# BINARIES are dependency parsed, so you may safely ignore libraries\nBINARIES=\"\"\n\n# FILES\n# This setting is similar to BINARIES above, however, files are added\n# as-is and are not parsed in any way.  This is useful for config files.\n# Some users may wish to include modprobe.conf for custom module options\n# like so:\n#    FILES=\"/etc/modprobe.d/modprobe.conf\"\nFILES=\"\"\n\n# HOOKS\n# This is the most important setting in this file.  The HOOKS control the\n# modules and scripts added to the image, and what happens at boot time.\n# Order is important, and it is recommended that you do not change the\n# order in which HOOKS are added.  Run 'mkinitcpio -H <hook name>' for\n# help on a given hook.\n# 'base' is _required_ unless you know precisely what you are doing.\n# 'udev' is _required_ in order to automatically load modules\n# 'filesystems' is _required_ unless you specify your fs modules in MODULES\n# Examples:\n##   This setup specifies all modules in the MODULES setting above.\n##   No raid, lvm2, or encrypted root is needed.\n#    HOOKS=\"base\"\n#\n##   This setup will autodetect all modules for your system and should\n##   work as a sane default\n#    HOOKS=\"base udev autodetect pata scsi sata filesystems\"\n#\n##   This is identical to the above, except the old ide subsystem is\n##   used for IDE devices instead of the new pata subsystem.\n#    HOOKS=\"base udev autodetect ide scsi sata filesystems\"\n#\n##   This setup will generate a 'full' image which supports most systems.\n##   No autodetection is done.\n#    HOOKS=\"base udev pata scsi sata usb filesystems\"\n#\n##   This setup assembles a pata mdadm array with an encrypted root FS.\n##   Note: See 'mkinitcpio -H mdadm' for more information on raid devices.\n#    HOOKS=\"base udev pata mdadm encrypt filesystems\"\n#\n##   This setup loads an lvm2 volume group on a usb device.\n#    HOOKS=\"base udev usb lvm2 filesystems\"\n#\n##   NOTE: If you have /usr on a separate partition, you MUST include the\n#    usr, fsck and shutdown hooks.\nHOOKS=\"base udev autodetect modconf block keymap keyboard $encrypt lvm2 resume filesystems fsck\"\n\n# COMPRESSION\n# Use this to compress the initramfs image. By default, gzip compression\n# is used. Use 'cat' to create an uncompressed image.\n#COMPRESSION=\"gzip\"\n#COMPRESSION=\"bzip2\"\n#COMPRESSION=\"lzma\"\n#COMPRESSION=\"xz\"\n#COMPRESSION=\"lzop\"\n\n# COMPRESSION_OPTIONS\n# Additional options for the compressor\n#COMPRESSION_OPTIONS=\"\"\nEOF\n\n    mkinitcpio -p linux\n}\n\nset_daemons() {\n    local tmp_on_tmpfs=\"$1\"; shift\n\n    systemctl enable cronie.service cpupower.service ntpd.service slim.service\n\n    if [ -n \"$WIRELESS_DEVICE\" ]\n    then\n        systemctl enable net-auto-wired.service net-auto-wireless.service\n    else\n        systemctl enable dhcpcd@eth0.service\n    fi\n\n    if [ -z \"$tmp_on_tmpfs\" ]\n    then\n        systemctl mask tmp.mount\n    fi\n}\n\nset_syslinux() {\n    local lvm_dev=\"$1\"; shift\n\n    local lvm_uuid=$(get_uuid \"$lvm_dev\")\n\n    local crypt=\"\"\n    if [ -n \"$ENCRYPT_DRIVE\" ]\n    then\n        # Load in resources\n        crypt=\"cryptdevice=/dev/disk/by-uuid/$lvm_uuid:lvm\"\n    fi\n\n    cat > /boot/syslinux/syslinux.cfg <<EOF\n# Config file for Syslinux -\n# /boot/syslinux/syslinux.cfg\n#\n# Comboot modules:\n#   * menu.c32 - provides a text menu\n#   * vesamenu.c32 - provides a graphical menu\n#   * chain.c32 - chainload MBRs, partition boot sectors, Windows bootloaders\n#   * hdt.c32 - hardware detection tool\n#   * reboot.c32 - reboots the system\n#   * poweroff.com - shutdown the system\n#\n# To Use: Copy the respective files from /usr/lib/syslinux to /boot/syslinux.\n# If /usr and /boot are on the same file system, symlink the files instead\n# of copying them.\n#\n# If you do not use a menu, a 'boot:' prompt will be shown and the system\n# will boot automatically after 5 seconds.\n#\n# Please review the wiki: https://wiki.archlinux.org/index.php/Syslinux\n# The wiki provides further configuration examples\n\nDEFAULT arch\nPROMPT 0        # Set to 1 if you always want to display the boot: prompt \nTIMEOUT 50\n# You can create syslinux keymaps with the keytab-lilo tool\n#KBDMAP de.ktl\n\n# Menu Configuration\n# Either menu.c32 or vesamenu32.c32 must be copied to /boot/syslinux \nUI menu.c32\n#UI vesamenu.c32\n\n# Refer to http://syslinux.zytor.com/wiki/index.php/Doc/menu\nMENU TITLE Arch Linux\n#MENU BACKGROUND splash.png\nMENU COLOR border       30;44   #40ffffff #a0000000 std\nMENU COLOR title        1;36;44 #9033ccff #a0000000 std\nMENU COLOR sel          7;37;40 #e0ffffff #20ffffff all\nMENU COLOR unsel        37;44   #50ffffff #a0000000 std\nMENU COLOR help         37;40   #c0ffffff #a0000000 std\nMENU COLOR timeout_msg  37;40   #80ffffff #00000000 std\nMENU COLOR timeout      1;37;40 #c0ffffff #00000000 std\nMENU COLOR msg07        37;40   #90ffffff #a0000000 std\nMENU COLOR tabmsg       31;40   #30ffffff #00000000 std\n\n# boot sections follow\n#\n# TIP: If you want a 1024x768 framebuffer, add \"vga=773\" to your kernel line.\n#\n#-*\n\nLABEL arch\n\tMENU LABEL Arch Linux\n\tLINUX ../vmlinuz-linux\n\tAPPEND root=/dev/vg00/root ro $crypt resume=/dev/vg00/swap quiet\n\tINITRD ../initramfs-linux.img\n\nLABEL archfallback\n\tMENU LABEL Arch Linux Fallback\n\tLINUX ../vmlinuz-linux\n\tAPPEND root=/dev/vg00/root ro $crypt resume=/dev/vg00/swap\n\tINITRD ../initramfs-linux-fallback.img\n\nLABEL hdt\n        MENU LABEL HDT (Hardware Detection Tool)\n        COM32 hdt.c32\n\nLABEL reboot\n        MENU LABEL Reboot\n        COM32 reboot.c32\n\nLABEL off\n        MENU LABEL Power Off\n        COMBOOT poweroff.com\nEOF\n\n    syslinux-install_update -iam\n}\n\nset_sudoers() {\n    cat > /etc/sudoers <<EOF\n## sudoers file.\n##\n## This file MUST be edited with the 'visudo' command as root.\n## Failure to use 'visudo' may result in syntax or file permission errors\n## that prevent sudo from running.\n##\n## See the sudoers man page for the details on how to write a sudoers file.\n##\n\n##\n## Host alias specification\n##\n## Groups of machines. These may include host names (optionally with wildcards),\n## IP addresses, network numbers or netgroups.\n# Host_Alias\tWEBSERVERS = www1, www2, www3\n\n##\n## User alias specification\n##\n## Groups of users.  These may consist of user names, uids, Unix groups,\n## or netgroups.\n# User_Alias\tADMINS = millert, dowdy, mikef\n\n##\n## Cmnd alias specification\n##\n## Groups of commands.  Often used to group related commands together.\n# Cmnd_Alias\tPROCESSES = /usr/bin/nice, /bin/kill, /usr/bin/renice, \\\n# \t\t\t    /usr/bin/pkill, /usr/bin/top\n\n##\n## Defaults specification\n##\n## You may wish to keep some of the following environment variables\n## when running commands via sudo.\n##\n## Locale settings\n# Defaults env_keep += \"LANG LANGUAGE LINGUAS LC_* _XKB_CHARSET\"\n##\n## Run X applications through sudo; HOME is used to find the\n## .Xauthority file.  Note that other programs use HOME to find   \n## configuration files and this may lead to privilege escalation!\n# Defaults env_keep += \"HOME\"\n##\n## X11 resource path settings\n# Defaults env_keep += \"XAPPLRESDIR XFILESEARCHPATH XUSERFILESEARCHPATH\"\n##\n## Desktop path settings\n# Defaults env_keep += \"QTDIR KDEDIR\"\n##\n## Allow sudo-run commands to inherit the callers' ConsoleKit session\n# Defaults env_keep += \"XDG_SESSION_COOKIE\"\n##\n## Uncomment to enable special input methods.  Care should be taken as\n## this may allow users to subvert the command being run via sudo.\n# Defaults env_keep += \"XMODIFIERS GTK_IM_MODULE QT_IM_MODULE QT_IM_SWITCHER\"\n##\n## Uncomment to enable logging of a command's output, except for\n## sudoreplay and reboot.  Use sudoreplay to play back logged sessions.\n# Defaults log_output\n# Defaults!/usr/bin/sudoreplay !log_output\n# Defaults!/usr/local/bin/sudoreplay !log_output\n# Defaults!/sbin/reboot !log_output\n\n##\n## Runas alias specification\n##\n\n##\n## User privilege specification\n##\nroot ALL=(ALL) ALL\n\n## Uncomment to allow members of group wheel to execute any command\n%wheel ALL=(ALL) ALL\n\n## Same thing without a password\n# %wheel ALL=(ALL) NOPASSWD: ALL\n\n## Uncomment to allow members of group sudo to execute any command\n# %sudo ALL=(ALL) ALL\n\n## Uncomment to allow any user to run sudo if they know the password\n## of the user they are running the command as (root by default).\n# Defaults targetpw  # Ask for the password of the target user\n# ALL ALL=(ALL) ALL  # WARNING: only use this together with 'Defaults targetpw'\n\n%rfkill ALL=(ALL) NOPASSWD: /usr/sbin/rfkill\n%network ALL=(ALL) NOPASSWD: /usr/bin/netcfg, /usr/bin/wifi-menu\n\n## Read drop-in files from /etc/sudoers.d\n## (the '#' here does not indicate a comment)\n#includedir /etc/sudoers.d\nEOF\n\n    chmod 440 /etc/sudoers\n}\n\nset_slim() {\n    cat > /etc/slim.conf <<EOF\n# Path, X server and arguments (if needed)\n# Note: -xauth $authfile is automatically appended\ndefault_path        /bin:/usr/bin:/usr/local/bin\ndefault_xserver     /usr/bin/X\nxserver_arguments -nolisten tcp vt07\n\n# Commands for halt, login, etc.\nhalt_cmd            /sbin/poweroff\nreboot_cmd          /sbin/reboot\nconsole_cmd         /usr/bin/xterm -C -fg white -bg black +sb -T \"Console login\" -e /bin/sh -c \"/bin/cat /etc/issue; exec /bin/login\"\nsuspend_cmd         /usr/bin/systemctl hybrid-sleep\n\n# Full path to the xauth binary\nxauth_path         /usr/bin/xauth \n\n# Xauth file for server\nauthfile           /var/run/slim.auth\n\n# Activate numlock when slim starts. Valid values: on|off\n# numlock             on\n\n# Hide the mouse cursor (note: does not work with some WMs).\n# Valid values: true|false\n# hidecursor          false\n\n# This command is executed after a succesful login.\n# you can place the %session and %theme variables\n# to handle launching of specific commands in .xinitrc\n# depending of chosen session and slim theme\n#\n# NOTE: if your system does not have bash you need\n# to adjust the command according to your preferred shell,\n# i.e. for freebsd use:\n# login_cmd           exec /bin/sh - ~/.xinitrc %session\n# login_cmd           exec /bin/bash -login ~/.xinitrc %session\nlogin_cmd           exec /bin/zsh -l ~/.xinitrc %session\n\n# Commands executed when starting and exiting a session.\n# They can be used for registering a X11 session with\n# sessreg. You can use the %user variable\n#\n# sessionstart_cmd\tsome command\n# sessionstop_cmd\tsome command\n\n# Start in daemon mode. Valid values: yes | no\n# Note that this can be overriden by the command line\n# options \"-d\" and \"-nodaemon\"\n# daemon\tyes\n\n# Available sessions (first one is the default).\n# The current chosen session name is replaced in the login_cmd\n# above, so your login command can handle different sessions.\n# see the xinitrc.sample file shipped with slim sources\nsessions            foo\n\n# Executed when pressing F11 (requires imagemagick)\n#screenshot_cmd      import -window root /slim.png\n\n# welcome message. Available variables: %host, %domain\nwelcome_msg         %host\n\n# Session message. Prepended to the session name when pressing F1\n# session_msg         Session: \n\n# shutdown / reboot messages\nshutdown_msg       The system is shutting down...\nreboot_msg         The system is rebooting...\n\n# default user, leave blank or remove this line\n# for avoid pre-loading the username.\n#default_user        simone\n\n# Focus the password field on start when default_user is set\n# Set to \"yes\" to enable this feature\n#focus_password      no\n\n# Automatically login the default user (without entering\n# the password. Set to \"yes\" to enable this feature\n#auto_login          no\n\n# current theme, use comma separated list to specify a set to \n# randomly choose from\n#current_theme       default\ncurrent_theme       archlinux-simplyblack\n\n# Lock file\nlockfile            /run/lock/slim.lock\n\n# Log file\nlogfile             /var/log/slim.log\nEOF\n}\n\nset_netcfg() {\n    cat > /etc/network.d/wired <<EOF\nCONNECTION='ethernet'\nDESCRIPTION='Ethernet with DHCP'\nINTERFACE='eth0'\nIP='dhcp'\nEOF\n\n    chmod 600 /etc/network.d/wired\n\n    cat > /etc/conf.d/netcfg <<EOF\n# Enable these netcfg profiles at boot time.\n#   - prefix an entry with a '@' to background its startup\n#   - set to 'last' to restore the profiles running at the last shutdown\n#   - set to 'menu' to present a menu (requires the dialog package)\n# Network profiles are found in /etc/network.d\nNETWORKS=()\n\n# Specify the name of your wired interface for net-auto-wired\nWIRED_INTERFACE=\"eth0\"\n\n# Specify the name of your wireless interface for net-auto-wireless\nWIRELESS_INTERFACE=\"$WIRELESS_DEVICE\"\n\n# Array of profiles that may be started by net-auto-wireless.\n# When not specified, all wireless profiles are considered.\n#AUTO_PROFILES=(\"profile1\" \"profile2\")\nEOF\n}\n\nset_root_password() {\n    local password=\"$1\"; shift\n\n    echo -en \"$password\\n$password\" | passwd\n}\n\ncreate_user() {\n    local name=\"$1\"; shift\n    local password=\"$1\"; shift\n\n    useradd -m -s /bin/zsh -G adm,systemd-journal,wheel,rfkill,games,network,video,audio,optical,floppy,storage,scanner,power,adbusers,wireshark \"$name\"\n    echo -en \"$password\\n$password\" | passwd \"$name\"\n}\n\nupdate_locate() {\n    updatedb\n}\n\nget_uuid() {\n    blkid -o export \"$1\" | grep UUID | awk -F= '{print $2}'\n}\n\nset -ex\n\nif [ \"$1\" == \"chroot\" ]\nthen\n    configure\nelse\n    setup\nfi",
 "title": ""
}