{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "kw_error",
  "lg_en"
 ],
 "key": "GwzNSqA6",
 "pasteDate": "Feb 28, 2018, 4:58:05 AM",
 "relevancy": 2.0,
 "relevant": false,
 "text": "require 'amazon/search.rb'\ninclude Amazon::Search\nDEV_KEY = '1Y6YSGN6SEXHAXRSXD82'\nASSOCIATES_ID = 'stolafmovieex-20'\n\n\nmodule LoadsFromAmazon\n  # \n  # The LoadsFromAmazon plugin provides an easy way to declare that a model maps to a\n  # product offered by amazon with a matching ASIN code. It uses ruby/amazon to provide\n  # a method of creating objects for that model from the relevant amazon listing, and methods\n  # to declare how the attributes of the ruby/amazon results object map to the model's \n  # attributes\n  #\n  def self.included(mod)\n    mod.extend(ClassMethods)\n  end\n\n  module ClassMethods\n    def loads_from_amazon\n      class_eval do\n        extend LoadsFromAmazon::SingletonMethods\n      end\n    end\n    \n    # Provides for mapping model attributes to attributes of the returned ruby/amazon result \n    # object. An optional parameter allows for certain attributes which may occur multiple\n    # times (eg. the authors of a book) to be returned as a single string joined with a provided\n    # parameter\n    #\n    # eg.\n    #   maps_to_amazon_attribute :authorlist => 'authors', :combine => ';'\n    #   maps_to_amazon_attribute :title => 'product_name'\n    #   maps_to_amazon_attribute :isbn => 'asin'\n    #\n    def maps_to_amazon_attribute(args = {})\n      if @amazon_mappings.nil?\n        @amazon_mappings = Hash.new\n        @amazon_join_mappings = Hash.new\n      end\n\n      joiner = args.delete(:combine) if args[:combine]\n      args.each do |key, value|\n        if joiner\n          @amazon_join_mappings[key] = [value, joiner]\n        else\n          @amazon_mappings[key] = value\n        end\n      end\n      \n    end\n  end\n\n  module SingletonMethods\n    # LoadsFromAmazon provides a pair of singleton methods that allow the model to be created\n    # from the ruby/amazon result object. \n    #\n    #   Model.load_from_amazon(asin_value, dev_key, associates_id)\n    #\n    # will load the model from an amazon result (or return empty if the product couldn't be\n    # found). It will not save the resulting object.\n    #\n    # If no associates id is provided, the developer's associates ID will be used.\n    def load_from_amazon(asin_value, dev_key = DEV_KEY, associates_id = ASSOCIATES_ID)\n      begin\n        req = Request.new(dev_key, associates_id)\n        result = req.asin_search(asin_value.to_s)\n        create_instance_from_amazon(result.products[0])\n      rescue\n        raise\n        return\n      end\n    end\n    \n    #   Model.load_from_amazon!(asin_value, dev_key, associates_id)\n    #\n    # will load the model from an amazon result (or return empty if the product couldn't\n    # be found) and call the save method on the model object.\n    def load_from_amazon!(asin_value, dev_key = DEV_KEY, associates_id = ASSOCIATES_ID)\n      result = self.load_from_amazon(asin_value, dev_key, associates_id)\n      if result\n        result.save\n        return result\n      end\n    end\n    \n    def find_from_amazon_by_keyword(keyword, dev_key = DEV_KEY, associates_id = ASSOCIATES_ID)\n      req = Request.new(dev_key, associates_id)\n      search = [keyword, 'video', LIGHT]\n      response = req.keyword_search(*search)\n      return response.products.collect do |prod|\n        create_instance_from_amazon(prod)\n      end\n    end\n    \n    def find_from_amazon_by_keyword!(keyword, dev_key = DEV_KEY, associates_id = ASSOCIATES_ID)\n      products =  find_from_amazon_by_keyword(keyword, dev_key, associates_id)\n      products.each{|prod| prod.save()}\n    end\n    \n    \n    private\n    def create_instance_from_amazon(product)\n      newbie = self.new\n      @amazon_mappings.each do |key, value|\n        newbie.send key.to_s + '=', product.send(value)\n      end\n      @amazon_join_mappings.each do |key, value|\n        newbie.send key.to_s + '=', product.send(value[0]).join(value[1])\n      end\n      return newbie\n    end\n    \n    #automatically map atributes of the same name.\n    #DOESN'T WORK\n    #because self is a module when loaded in the environment which clearly doesn't have any column_names\n    #\n    #error message\n    #./script/../config/../config/../vendor/plugins/loads_from_amazon/lib/loads_from_amazon.rb:115:NoMethodError: undefined method `column_names' for Module:Class\n    #\n    self.column_names.each do |key|\n      if product.include? key\n        @amazon_mapings[key] = key\n      end\n    end\n    \n  end\nend\n\n\n\nActiveRecord::Base.class_eval do\n  include LoadsFromAmazon\nend",
 "title": ""
}