{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "lg_en"
 ],
 "key": "AVv9fKGU",
 "pasteDate": "Feb 24, 2018, 2:35:07 PM",
 "relevancy": 1.0,
 "relevant": false,
 "text": "import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM, Dropout, SimpleRNN\nfrom keras import regularizers\nimport numpy as np\nimport argparse\n\n\ndef main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--input_size', type=int, required=True)\n    parser.add_argument('--model_config', type=str, required=True,\n                        choices=['lstm', 'ffn', 'rnn'])\n    parser.add_argument('--epochs', type=int, required=True)\n    parser.add_argument('--reg', type=float, default=0)\n    parser.add_argument('--hidden_size', type=int, required=True)\n    parser.add_argument('--train_examples', type=int, default=100000)\n    parser.add_argument('--dropout', type=int, default=0)\n    parser.add_argument('--lr', type=float, required=True)\n    parser.add_argument('--batch_size', type=int, required=True)\n    args = parser.parse_args()\n\n    train_fts = np.random.randint(0, 2, (args.train_examples, args.input_size)) \n    train_lbl = (train_fts.sum(axis=1) % 2).astype(int)\n\n    test_fts = np.random.randint(0, 2, (args.train_examples // 10, args.input_size)) \n    test_lbl = (test_fts.sum(axis=1) % 2).astype(int)\n    \n    set_train_fts = set()\n    for x in train_fts:\n        set_train_fts.add(tuple(x))\n    count_test_present = sum(tuple(x) in set_train_fts for x in test_fts)\n    print(\"Fraction of test instances present in training set: {:.3f}\".format(count_test_present / len(test_fts)))\n    \n    model = Sequential()\n    if args.model_config == 'ffn':\n        model.add(Dense(args.hidden_size, activation='relu', input_dim=args.input_size))\n                        # kernel_regularizer=regularizers.l2(args.reg),\n                        # bias_regularizer=regularizers.l2(args.reg)))\n        if args.dropout > 0:\n            model.add(Dropout(args.dropout))\n        model.add(Dense(1, activation='sigmoid'))\n    elif args.model_config == 'rnn':\n        train_fts = np.expand_dims(train_fts, 2)\n        test_fts = np.expand_dims(test_fts, 2)\n        model.add(SimpleRNN(args.hidden_size, input_shape=(None, 1)))\n        model.add(Dense(1, activation='sigmoid'))\n    else:\n        train_fts = np.expand_dims(train_fts, 2)\n        test_fts = np.expand_dims(test_fts, 2)\n        model.add(LSTM(args.hidden_size, input_shape=(None, 1)))\n        model.add(Dense(1, activation='sigmoid'))\n\n    print(\"Model type:\", args.model_config)\n    \n    optimizer = keras.optimizers.Adam(lr=args.lr) \n\n    model.compile(loss='binary_crossentropy',\n                  optimizer=optimizer,\n                  metrics=['accuracy'])\n\n    model.fit(train_fts, train_lbl, epochs=args.epochs, batch_size=128,\n              validation_data=(test_fts, test_lbl))\n\n\nif __name__ == \"__main__\":\n    main()",
 "title": ""
}