{
 "espireDate": "1H",
 "format": "java",
 "jSonReasons": [
  "re_java",
  "lg_en"
 ],
 "key": "AJdFSRd9",
 "pasteDate": "Feb 12, 2018, 12:58:29 PM",
 "relevancy": -2.0,
 "relevant": false,
 "text": "package org.leanpoker.player;\n\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonObject;\nimport com.google.gson.JsonPrimitive;\n\nimport java.util.*;\n\npublic class Player {\n\n    static final String VERSION = \"Default Java folding player\";\n\n    public static int betRequest(JsonElement request) {\n        JsonObject jobject = request.getAsJsonObject();\n        int minRaise = jobject.getAsJsonPrimitive(\"minimum_raise\").getAsInt();\n        int pot = jobject.getAsJsonPrimitive(\"pot\").getAsInt();\n\n        int playerStack = 0;\n        boolean firstRound = true;\n        JsonArray allcards = new JsonArray();\n        JsonArray playerCards = new JsonArray();\n        List<Integer> enemyStacks = new ArrayList<>();\n        JsonArray players = jobject.getAsJsonArray(\"players\");\n        JsonArray communityCards = jobject.getAsJsonArray(\"community_cards\");\n\n        //start player bet buy in\n\n            int currentBuyIn = jobject.getAsJsonPrimitive(\"current_buy_in\").getAsInt();\n            int playerCurrentBet = 0;\n\n        //end player bet buy in\n        if (communityCards.size() > 0){\n            firstRound = false;\n        }\n\n        // get stacks\n        for (int i = 0; i < players.size(); i++) {\n            JsonObject player = players.get(i).getAsJsonObject();\n            int stack = player.getAsJsonPrimitive(\"stack\").getAsInt();\n            if(player.get(\"name\").toString().equals(\"Kekszemu Lowsarkany\")){\n                playerStack = stack;\n                playerCards = player.getAsJsonArray(\"hole_cards\");\n                // player current bet\n                playerCurrentBet = player.getAsJsonPrimitive(\"bet\").getAsInt();\n            } else{\n                enemyStacks.add(stack);\n            }\n        }\n\n        for (int i = 0; i< communityCards.size(); i++){\n            allcards.add(communityCards.get(i));\n        }\n        for (int i = 0; i< playerCards.size(); i++){\n            allcards.add(playerCards.get(i));\n        }\n\n\n        //check cards\n\n\n        return minRaise;\n    }\n\n    public static void CardCheck(JsonArray allCards){\n\n    }\n\n    public static void showdown(JsonElement game) {\n\n    }\n\n\n        public static int SameCardCases(JsonArray cards){\n            int pair = 0;\n            int drill = 0;\n            int poker = 0;\n            int flush = 0;\n            int straight = 0;\n            List<String> ranks = new ArrayList<>();\n            List<String> suits = new ArrayList<>();\n\n            for (int i = 0; i < cards.size(); i++) {\n                JsonObject actualCard = cards.get(i).getAsJsonObject();\n                ranks.add(actualCard.get(\"rank\").toString());\n            }\n\n            for (int i = 0; i < cards.size(); i++) {\n                JsonObject actualCard = cards.get(i).getAsJsonObject();\n                ranks.add(actualCard.get(\"suit\").toString());\n            }\n\n            Set<String> ranksSet = new HashSet<String>(ranks);\n            Set<String> suitsSet = new HashSet<String>(suits);\n            List<Integer> rankSetValue = new ArrayList<>();\n\n            for (String rank: ranksSet) {\n                switch (rank){\n                    case \"2\": rankSetValue.add(2);\n                    break;\n                    case \"3\": rankSetValue.add(3);\n                        break;\n                    case \"4\": rankSetValue.add(4);\n                        break;\n                    case \"5\": rankSetValue.add(5);\n                        break;\n                    case \"6\": rankSetValue.add(6);\n                        break;\n                    case \"7\": rankSetValue.add(7);\n                        break;\n                    case \"8\": rankSetValue.add(8);\n                        break;\n                    case \"9\": rankSetValue.add(9);\n                        break;\n                    case \"10\": rankSetValue.add(10);\n                        break;\n                    case \"J\": rankSetValue.add(11);\n                        break;\n                    case \"Q\": rankSetValue.add(12);\n                        break;\n                    case \"K\": rankSetValue.add(13);\n                        break;\n                    case \"A\": rankSetValue.add(14);\n                        break;\n                }\n            }\n\n            Collections.sort(rankSetValue);\n            int setMin = Collections.min(rankSetValue);\n            int sumSet = 0;\n            for (int setElement: rankSetValue) {\n                sumSet += setElement;\n            }\n\n            if(rankSetValue.size() == 5 && setMin * 5 + 10 == sumSet){\n                straight = 1;\n            } else if (rankSetValue.size() == 6){\n                sumSet = 0;\n                for (int i = 0; i < 5; i++) {\n                    sumSet += rankSetValue.get(i);\n                }\n                if (Collections.min(rankSetValue) * 5 + 10 == sumSet){\n                    straight = 1;\n                }\n                \n            }\n\n\n\n            Map<String, Integer> rankCounter = new HashMap<>();\n            Map<String, Integer> suitCounter = new HashMap<>();\n\n            for (String rank: ranksSet){\n                rankCounter.put(rank, Collections.frequency(ranks, rank));\n            }\n\n            for (String suit: suitsSet){\n                suitCounter.put(suit, Collections.frequency(suits, suit));\n            }\n\n\n            Iterator it = rankCounter.entrySet().iterator();\n            while (it.hasNext()) {\n                Map.Entry mapElement = (Map.Entry)it.next();\n                if (mapElement.getValue().equals(2)){\n                    pair += 1;\n                }\n                if (mapElement.getValue().equals(3)){\n                    drill += 1;\n                }\n                if (mapElement.getValue().equals(4)){\n                    poker += 1;\n                }\n\n                System.out.println(mapElement.getKey() + \" = \" + mapElement.getValue());\n                it.remove(); // avoids a ConcurrentModificationException\n            }\n\n            Iterator it2 = rankCounter.entrySet().iterator();\n            while (it.hasNext()) {\n                Map.Entry mapElement2 = (Map.Entry)it.next();\n                if (mapElement2.getValue().equals(5) || mapElement2.getValue().equals(6) || mapElement2.getValue().equals(7)){\n                    flush += 1;\n                }\n                System.out.println(mapElement2.getKey() + \" = \" + mapElement2   .getValue());\n                it.remove(); // avoids a ConcurrentModificationException\n            }\n\n\n            if (pair == 1){\n                return 1;\n            } else if (pair >= 2) {\n                return 2;\n            } else if (drill >= 1) {\n                return 3;\n            } else if (drill == 1 && pair >= 1) {\n                return 4;\n            } else if (poker == 1){\n                return 5;\n            } else if (flush == 1){\n                return 6;\n            } else if (straight == 1){\n                return 7;\n            } else {\n                return 0;\n            }\n\n    }\n\n    public static int calculateBet(int odds, boolean firstRound, int currentBuyIn, int playerCurrentBet, int minRaise){\n        int bet = 0;\n        if(firstRound){\n            if(odds == 0){\n                if(currentBuyIn == playerCurrentBet){\n                    bet = 0;\n                } else{\n                    bet = currentBuyIn - playerCurrentBet;\n                }\n            } else{\n                bet = currentBuyIn - playerCurrentBet + minRaise;\n            }\n        }\n        return bet;\n    }\n\n}",
 "title": ""
}