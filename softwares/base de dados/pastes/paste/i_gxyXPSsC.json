{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "kw_error",
  "lg_en"
 ],
 "key": "gxyXPSsC",
 "pasteDate": "Feb 8, 2018, 6:53:18 AM",
 "relevancy": 1.0,
 "relevant": false,
 "text": "public class MyCustomFilter extends OncePerRequestFilter{\n\n@Override\nprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n    String actionHeader = request.getHeader(RestApi.ACTION_HEADER_NAME);\n    if (actionHeader != null) {\n        String contentTypeValue = ContentTypeMap.getContentType(actionHeader);\n        if (contentTypeValue != null) { \n            try {\n                response.setHeader(RestApi.ACTION_HEADER_NAME, \"TRUE\");\n                log.debug(\"New Action - Action request detected: \" + request.getRequestURL());\n                ActionRequestWrapper actionRequest = new ActionRequestWrapper(request, contentTypeValue);\n                ActionResponseWrapper actionResponse = new ActionResponseWrapper(response);\n\n                performActionRequest(actionRequest);\n\n                filterChain.doFilter(actionRequest, actionResponse);\n\n                byte[] originalResponseBody = actionResponse.getResponseData();\n                byte[] updatedBody = performAction(originalResponseBody);\n                OutputStream os = response.getOutputStream();\n                os.write(updatedBody);\n                os.flush();\n                os.close();\n            }\n            catch (Exception e) {\n                log.error(\"New Action - An error occurred while trying to perform action\",e);\n            }\n        }\n        else {\n            filterChain.doFilter(request, response);\n        }\n    }\n    else {\n        filterChain.doFilter(request, response);\n    }\n}\n\t\npublic class ActionResponseWrapper extends HttpServletResponseWrapper {\n\nprivate final ByteArrayOutputStream capture;\nprivate ServletOutputStream output;\nprivate PrintWriter writer;\n\npublic ActionResponseWrapper(HttpServletResponse response) throws  IOException {\n    super(response);\n    capture = new ByteArrayOutputStream(response.getBufferSize());\n}\n\n@Override\npublic ServletOutputStream getOutputStream() {\n    if (writer != null) {\n        throw new IllegalStateException(\"getWriter() has already been called on this response.\");\n    }\n\n    if (output == null) {\n        output = new ServletOutputStream() {\n            @Override\n            public void write(int b) throws IOException {\n                capture.write(b);\n            }\n\n            @Override\n            public void flush() throws IOException {\n                capture.flush();\n            }\n\n            @Override\n            public void close() throws IOException {\n                capture.close();\n            }\n\n            @Override\n            public boolean isReady() {\n                return false;\n            }\n\n            @Override\n            public void setWriteListener(WriteListener arg0) {\n            }\n        };\n    }\n\n    return output;\n}\n\n@Override\npublic PrintWriter getWriter() throws IOException {\n    if (output != null) {\n        throw new IllegalStateException(\"getOutputStream() has already been called on this response.\");\n    }\n\n    if (writer == null) {\n        writer = new PrintWriter(new OutputStreamWriter(capture, getCharacterEncoding()));\n    }\n\n    return writer;\n}\n\n@Override\npublic void flushBuffer() throws IOException {\n    super.flushBuffer();\n\n    if (writer != null) {\n        writer.flush();\n    } else if (output != null) {\n        output.flush();\n    }\n}\n\npublic byte[] getResponseData() throws IOException {\n    if (writer != null) {\n        writer.close();\n    } else if (output != null) {\n        output.close();\n    }\n    return capture.toByteArray();\n}\n}\n\t\npublic class ActionRequestWrapper extends HttpServletRequestWrapper {\n\nprivate final String contentTypeValue;\nprivate final String contentLengthValue;\nprivate byte[] body;\n\npublic ActionRequestWrapper(HttpServletRequest request, String contentType) throws IOException{\n    super(request);\n    contentTypeValue = contentType;\n    StringBuilder _body = new StringBuilder();\n    try (BufferedReader bufferedReader = request.getReader()) {\n        String line;\n        while ((line = bufferedReader.readLine()) != null)\n            _body.append(line);\n    }\n    this.body = _body.toString().getBytes();\n    contentLengthValue = String.valueOf(body.length);\n}\n\n@Override\npublic String getHeader(String name) {\n    if (name.equalsIgnoreCase(CONTENT_TYPE_HEADER_NAME)) {\n        return contentTypeValue;\n    }\n    else if (name.equalsIgnoreCase(CONTENT_LENGTH_HEADER_NAME)) {\n        return contentLengthValue;\n    }\n    return super.getHeader(name);\n}\n\n@Override\npublic Enumeration<String> getHeaders(String headerName) {\n    if (headerName.equalsIgnoreCase(CONTENT_TYPE_HEADER_NAME)) {\n        return Collections.enumeration(Collections.singletonList(contentTypeValue));\n    }\n    else if (headerName.equalsIgnoreCase(CONTENT_LENGTH_HEADER_NAME)) {\n        return Collections.enumeration(Collections.singletonList(contentLengthValue));\n    }\n    return super.getHeaders(headerName);\n}\n\n@Override\npublic Enumeration<String> getHeaderNames(){\n    Enumeration<String> original = super.getHeaderNames();\n    List<String> newHeaders = new ArrayList<String>(){\n        @Override\n        public boolean contains(Object o){\n            String paramStr = (String)o;\n            for (String headerName : this){\n                if (headerName.equalsIgnoreCase(paramStr)) return true;\n            }\n            return false;\n        }\n    };\n\n    newHeaders.addAll(Collections.list(original));\n\n    if (!newHeaders.contains(CONTENT_TYPE_HEADER_NAME)){\n        newHeaders.add(CONTENT_TYPE_HEADER_NAME);\n    }\n    if (!newHeaders.contains(CONTENT_LENGTH_HEADER_NAME)){\n        newHeaders.add(CONTENT_LENGTH_HEADER_NAME);\n    }\n    return Collections.enumeration(newHeaders);\n}\n\n@Override\npublic ServletInputStream getInputStream() throws IOException {\n    final ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(body);\n    return new ServletInputStream() {\n        @Override\n        public boolean isFinished() {\n            return byteArrayInputStream.available() > 0;\n        }\n\n        @Override\n        public boolean isReady() {\n            return true;\n        }\n\n        @Override\n        public void setReadListener(ReadListener listener) {\n\n        }\n\n        @Override\n        public int read() throws IOException {\n            return byteArrayInputStream.read();\n        }\n    };\n}\n\n@Override\npublic BufferedReader getReader() throws IOException {\n    return new BufferedReader(new InputStreamReader(this.getInputStream()));\n}\n\npublic byte[] getBody() {\n    return body;\n}\n\npublic void setBody(byte[] body) {\n    this.body = body;\n}\n}",
 "title": ""
}