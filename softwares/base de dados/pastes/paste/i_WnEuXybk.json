{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "lg_en"
 ],
 "key": "WnEuXybk",
 "pasteDate": "Feb 18, 2018, 2:24:47 PM",
 "relevancy": 0.0,
 "relevant": false,
 "text": "/* CS121 A'11: Virtual Southern Blot\n * \n * java SouthernBlot <sequence file name> <restriction enzyme> <probe file name>\n *\n * Hannah Provenza 388257\n *\n */\n import Utility.*;\n \npublic class SouthernBlot {\n\t/* genFilm: \n     *  String sequence: the sequence to be examined\n     *  String enzyme: the restriction enzyme\n     *  String probe: the probe to be matched\n     *\n     *  returns a film represented a boolean array in which the ith\n     *  element is true if there is a restriction fragment with\n     *  log(size) equal to i that is the complement of the probe.\n     */\n\t public static boolean[] genFilm(String s, String enzyme, String probe) {\n\t\ts = Utility.readSequence(s);\n\t\tenzyme = Utility.readSequence(enzyme);\n\t\tprobe = Utility.readSequence(probe);\n\t\tString[] fragments = restrictFragments(s, enzyme);\n\t\tUtility.gelElectrophoresis(fragments);\n\t\tString probeReversed = convertProbe(probe);\n\t\tboolean[] film = new boolean[3];\n\t\tint j = 0;\n\t\tfor (int i = 0; i < fragments.length; i++){\n\t\t\t\tif (enzymeMatchAt(s, probe, j)){\n\t\t\t\t\tfilm[((int)Math.log10(fragments[i].length()))] = true;\n\t\t\t\t}\n\t\t\t}\n\treturn film;\n    }\n\n\n    /* drawFilm: draw a picture of the film with the largest fragments\n     *  at the top and the smallest at the bottom.  Each element in\n     *  the film will be represented by colored rectangle, RED for\n     *  slots where the corresponding element in the film is true and\n     *  BLACK otherwise.\n     */\n\n    public static void drawFilm(boolean[] film) {\n\t// YOUR CODE GOES HERE\n    }\n\n    // YOUR AUXILIARY FUNCTIONS GO HERE\n\t\t// Code for enzymeMatchAt is largely the same as that of a function presented in class.\n\tpublic static boolean enzymeMatchAt(String s, String enzyme, int start){\n\t\tif (s.length() < enzyme.length())\n\t\t\treturn false;\n\t\tfor (int i = 0; i < enzyme.length(); i++){\n\t\t\tif (s.charAt(start+i) != enzyme.charAt(i)){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\t\n\tpublic static String[] restrictFragments(String s, String enzyme){\n\t\tint a = Utility.countOccurrences(s, enzyme);\n\t\tString[] fragments = new String[a];\n\t\tint b = 0; // b tracks the slot in fragments\n\t\tint i = 0; // i tracks progress through s\n\t\twhile(i < s.length()){\n\t\t\tif (enzymeMatchAt(s, enzyme, i)){\n\t\t\t\tfragments[b] = fragments[b] + enzyme;\n\t\t\t\ti = i + enzyme.length();\n\t\t\t\tb++;\n\t\t\t}\n\t\t\tfragments[b] = fragments[b] + s.charAt(i);\n\t\t\ti++;\n\t\t}\n\t\treturn fragments;\n\t}\n\t\n\tpublic static String convertProbe(String probe){\n\t\tString probeReversed = \"\";\n\t\tint i = 0;\n\t\twhile(i < probe.length()){\n\t\t\tif (probe.charAt(i) == 'A'){\n\t\t\t\tprobeReversed = probeReversed + 'T';\n\t\t\t} else {\n\t\t\t\tif (probe.charAt(i) == 'T'){\n\t\t\t\t\tprobeReversed = probeReversed + 'A';\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (probe.charAt(i) == 'C'){\n\t\t\t\tprobeReversed = probeReversed + 'G';\n\t\t\t} else {\n\t\t\t\tif (probe.charAt(i) == 'G'){\n\t\t\t\t\tprobeReversed = probeReversed + 'C';\n\t\t\t\t}\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn probeReversed;\n\t}\n\t\n\n\t\t\t\t\n\t\n    public static void main(String[] args) {\n\tif (args.length != 3) {\n\t    System.err.println(\"usage: java SouthernBlot <sequence file name> <restriction enzyme> <probe file name>\");\n\t    System.exit(0);\n\t}\n\n\tString sequence = Utility.readSequence(args[0]);\n\tString enzyme = args[1].toUpperCase();\n\tString probe = Utility.readSequence(args[2]);\n\n\tboolean[] film = genFilm(sequence, enzyme, probe);\n\tdrawFilm(film);\n    }\n}",
 "title": ""
}