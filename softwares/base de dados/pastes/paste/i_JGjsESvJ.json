{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "lg_en"
 ],
 "key": "JGjsESvJ",
 "pasteDate": "Feb 20, 2018, 6:19:12 PM",
 "relevancy": 0.0,
 "relevant": false,
 "text": "#define FileHashDefaultChunkSizeForReadingData 1024*8 \n#include <CommonCrypto/CommonDigest.h>\n\n+ (NSString*)getFileMD5WithPath:(NSString*)path\n{\n    return (__bridge_transfer NSString *)FileMD5HashCreateWithPath((__bridge CFStringRef)path, FileHashDefaultChunkSizeForReadingData);\n}\n\nCFStringRef FileMD5HashCreateWithPath(CFStringRef filePath,size_t chunkSizeForReadingData) {\n    // Declare needed variables\n    CFStringRef result = NULL;\n    CFReadStreamRef readStream = NULL;\n    // Get the file URL\n    CFURLRef fileURL =\n    CFURLCreateWithFileSystemPath(kCFAllocatorDefault,\n                                  (CFStringRef)filePath,\n                                  kCFURLPOSIXPathStyle,\n                                  (Boolean)false);\n    if (!fileURL) goto done;\n    // Create and open the read stream\n    readStream = CFReadStreamCreateWithFile(kCFAllocatorDefault,\n                                            (CFURLRef)fileURL);\n    if (!readStream) goto done;\n    bool didSucceed = (bool)CFReadStreamOpen(readStream);\n    if (!didSucceed) goto done;\n    // Initialize the hash object\n    CC_MD5_CTX hashObject;\n    CC_MD5_Init(&hashObject);\n    // Make sure chunkSizeForReadingData is valid\n    if (!chunkSizeForReadingData) {\n        chunkSizeForReadingData = FileHashDefaultChunkSizeForReadingData;\n    }\n    // Feed the data to the hash object\n    bool hasMoreData = true;\n    while (hasMoreData) {\n        uint8_t buffer[chunkSizeForReadingData];\n        CFIndex readBytesCount = CFReadStreamRead(readStream,(UInt8 *)buffer,(CFIndex)sizeof(buffer));\n        if (readBytesCount == -1) break;\n        if (readBytesCount == 0) {\n            hasMoreData = false;\n            continue;\n        }\n        CC_MD5_Update(&hashObject,(const void *)buffer,(CC_LONG)readBytesCount);\n    }\n    // Check if the read operation succeeded\n    didSucceed = !hasMoreData;\n    // Compute the hash digest\n    unsigned char digest[CC_MD5_DIGEST_LENGTH];\n    CC_MD5_Final(digest, &hashObject);\n    // Abort if the read operation failed\n    if (!didSucceed) goto done;\n    // Compute the string result\n    char hash[2 * sizeof(digest) + 1];\n    for (size_t i = 0; i < sizeof(digest); ++i) {\n        snprintf(hash + (2 * i), 3, \"%02x\", (int)(digest[i]));\n    }\n    result = CFStringCreateWithCString(kCFAllocatorDefault,(const char *)hash,kCFStringEncodingUTF8);\n    \ndone:\n    if (readStream) {\n        CFReadStreamClose(readStream);\n        CFRelease(readStream);\n    }\n    if (fileURL) {\n        CFRelease(fileURL);\n    }\n    return result;\n}",
 "title": ""
}