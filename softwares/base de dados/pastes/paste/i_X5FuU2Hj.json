{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "lg_en"
 ],
 "key": "X5FuU2Hj",
 "pasteDate": "Feb 10, 2018, 4:30:12 AM",
 "relevancy": 1.0,
 "relevant": false,
 "text": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics.Contracts;\nusing System.Linq;\nusing System.Runtime.CompilerServices;\nusing System.Runtime.Serialization;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;\nusing ProtoBuf;\nusing System.Diagnostics;\n\nnamespace Marreco.Util\n{\n    [DataContract, ProtoContract, JsonConverter(typeof(MaybeJsonConverter))]\n    [DebuggerNonUserCode]\n    public struct Maybe<T> : IEquatable<T>, IEquatable<Maybe<T>>\n    {\n        [DataMember, ProtoMember(1)]\n        public readonly bool HasValue;\n        [DataMember, ProtoMember(2)]\n        [JsonProperty(ReferenceLoopHandling = ReferenceLoopHandling.Serialize)]\n        private readonly T _value;\n\n        static Maybe()  \n        {\n            var type = typeof (T);\n            if (type.IsGenericTypeDefinition && (type.GetGenericTypeDefinition() == typeof(Maybe<>)))\n                throw new TypeLoadException(\"Cannot have Maybe<Maybe<>>\");\n        } \n\n        public Maybe(T value)\n        {\n            _value = value;\n            HasValue = IsValidValue(value);\n        }\n\n        public static Maybe<T> None { get; } = default(Maybe<T>);\n\n        private static bool IsValidValue(T value)\n        {\n            if (value == null)\n                return false;\n\n            if (typeof (T) == typeof (string))\n                return !string.IsNullOrEmpty(value.ToString());\n\n            return true;\n        }\n\n        public T ValueOrDefault(T defaultValue = default(T))\n        {\n            if (HasValue)\n                return _value;\n            else\n                return defaultValue;\n        }\n\n\n        public Maybe<TResult> Select<TResult>(Func<T, TResult> f) => this.Select(x => (Maybe<TResult>) f(x));\n\n        public void Do(Action<T> f)\n        {\n            if (HasValue)\n                f(_value);\n        }\n\n        public Maybe<TResult> Select<TResult>(Func<T, Maybe<TResult>> f) //monad bind\n        {\n            if (HasValue)\n                return f(_value);\n            else\n                return default(Maybe<TResult>);\n        }\n\n        public Maybe<T> Where(Func<T, bool> f)\n        {\n            if (HasValue && f(_value))\n                return this;\n            else\n                return default(Maybe<T>);\n        }\n\n        public bool Equals(T other)\n        {\n            if (!HasValue)\n                return !IsValidValue(other);\n\n            return _value.Equals(other);\n        }\n\n        public bool Equals(Maybe<T> other)\n        {\n            if (!HasValue)\n                return !other.HasValue;\n\n            if (!other.HasValue)\n                return false;\n\n            if ((_value == null) || (other._value == null))\n                return false;\n\n            return _value.Equals(other._value);\n        }\n\n        public override bool Equals(object obj)\n        {\n            if (obj is Maybe<T>)\n                return this.Equals((Maybe<T>) obj);\n\n            if (obj is T)\n                return this.Equals((T) obj);\n\n            if (obj == null)\n                return !this.HasValue;\n\n            if (_value != null)\n                return _value.Equals(obj);\n\n            return false;\n        }\n\n        public override int GetHashCode()\n        {\n            return (!HasValue) ? 0 : _value.GetHashCode() + 1; \n        }\n\n        public static implicit operator Maybe<T>(T value) => new Maybe<T>(value);\n\n        public static bool operator ==(Maybe<T> x, Maybe<T> y) => x.Equals(y);\n        public static bool operator !=(Maybe<T> x, Maybe<T> y) => !(x == y);\n\n        public static bool operator ==(Maybe<T> x, T y) => x.Equals(y);\n        public static bool operator !=(Maybe<T> x, T y) => !(x == y);\n\n        public override string ToString() => HasValue ? $\"Some({_value.ToString()})\" : \"None\" ;\n\n        public Maybe<TResult> Cast<TResult>()\n            where TResult :  class\n        {\n            return this.Select(s => s as TResult);\n        }\n    }\n\n}",
 "title": ""
}