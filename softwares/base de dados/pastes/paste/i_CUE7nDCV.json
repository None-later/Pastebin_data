{
 "espireDate": "10M",
 "format": "javascript",
 "jSonReasons": [
  "kw_target",
  "kw_error",
  "lg_en",
  "kw_password",
  "re_ast1"
 ],
 "key": "CUE7nDCV",
 "pasteDate": "Feb 8, 2018, 6:22:19 PM",
 "relevancy": 0.0,
 "relevant": false,
 "text": "/*\nImport the bullshit`\n */\nrequire('dotenv').config();\nvar app = require('express')();\nvar server = require('http').Server(app);\nvar io = require('socket.io')(server);\nvar exec = require('child_process').exec;\nvar ftpClient = require('ftp');\nvar ncp = require('ncp').ncp;\nvar rimraf = require('rimraf');\nvar fs = require('fs');\n\n// Start the server\nserver.listen(65132);\nio.on('connection',function(socket)\n{\n\t// On client connection\n\tconsole.log('new connection...');\n\tsocket.on('ftpinfo',function(query)\n\t{\n\t\t// Client requeted a remote file list\n\t\tftpParams = require('querystring').parse(query);\n\t\tftpHost = ftpParams.ftpHost;\n\t\tftpUsername = ftpParams.ftpUsername;\n\t\tftpPassword = ftpParams.ftpPassword;\n\t\tftpDir = ftpParams.ftpDir;\n\t\tftpPassive = ftpParams.ftpPassive;\n\t\tif(typeof ftpHost !== 'undefined' && ftpHost)\n\t\t{\n\t\t\tgetFTPFileList(socket,ftpHost,ftpUsername,ftpPassword,ftpDir,ftpPassive);\n\t\t}\n\t})\n\tsocket.on('startftprestore',function(query)\n\t{\n\t\t// Client is restoring a remote backup\n\t\tconsole.log('Starting system restore');\n\t\t// Download the backup file\n\t\t// Decompress the backup file and put the contents in a temp directory\n\t\t// Restore the database\n\t\t// Delete existing sounds directory\n\t\t// Copy restore sound files\n\t\t// delete temp files\n\t});\n\tsocket.on('startftpbackup',function(query)\n\t{\n\t\t// Client asks for a new backup to be make\n\t\tconsole.log('Starting system backup')\n\t\tsocket.emit('backup-channel','Backup starting');\n\t\ttry\n\t\t{\n\t\t\t// Make the temporary directory to store the backup files\n\t\t\tfs.mkdirSync(__dirname + \"/storage/tmp/currentbackup\",function()\n\t\t\t{\n\n\t\t\t});\n\t\t}catch(err)\n\t\t{\n\n\t\t}\n\t\tif(typeof ftpHost !== 'undefined' && ftpHost)\n\t\t{\n\t\t\t// Client provided FTP info\n\t\t\tsocket.emit('backup-channel','Backing up database');\n\t\t\tvar dbHost = process.env.DB_HOST;\n\t\t\tvar dbUsername = process.env.DB_USERNAME;\n\t\t\tvar dbPassword = process.env.DB_PASSWORD;\n\t\t\tvar dbDatabase = process.env.DB_DATABASE;\n\t\t\tbackup_db = exec(\"mysqldump --user=\" + dbUsername + \" --password=\" + dbPassword + \" --host=\" + dbHost + \" \" +  dbDatabase + \" > \" + __dirname + \"/storage/tmp/currentbackup/myvoice_backup.sql\", function(err, stdout, stderr)\n\t\t\t{\n\t\t\t\t// Backup the database\n\t\t\t\tif(!err)\n\t\t\t\t{\n\t\t\t\t\t// Copy the relevant files\n\t\t\t\t\tsocket.emit('backup-channel','Copying files');\n\t\t\t\t\tncpOptions = {\n\t\t\t\t\t\tclobber: true,\n\t\t\t\t\t\tstopOnErr: true\n\t\t\t\t\t}\n\t\t\t\t\tncp.limit = 16;\n\t\t\t\t\tncp(__dirname + \"/storage/app/sounds/\", __dirname + \"/storage/tmp/currentbackup/\", ncpOptions, function(err)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Continue with that\n\t\t\t\t\t\tif(!err)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Compress the files into a tarball\n\t\t\t\t\t\t\tsocket.emit('backup-channel','Packaging files');\n\t\t\t\t\t\t\tstartDir = __dirname;\n\t\t\t\t\t\t\tprocess.chdir(__dirname + \"/storage/tmp/currentbackup\");\n\t\t\t\t\t\t\tcompress = exec(\"tar -czf \" + startDir + \"/backup.tgz *\", function(err, stdout, stderr)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Continue with THAT\n\t\t\t\t\t\t\t\tprocess.chdir(startDir);\n\t\t\t\t\t\t\t\tif(!err)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Connect to the remote server\n\t\t\t\t\t\t\t\t\tsocket.emit('backup-channel','Connecting to FTP server');\n\t\t\t\t\t\t\t\t\tconsole.log(new Date().toISOString());\n\t\t\t\t\t\t\t\t\ttimestamp = new Date().toISOString().\n\t\t\t\t\t\t\t\t\t\treplace(/T/, ' ').\n\t\t\t\t\t\t\t\t\t\treplace(/-/g,'_').\n\t\t\t\t\t\t\t\t\t\treplace(/\\..+$/,'')\n\n\t\t\t\t\t\t\t\t\tfileName = \"myvoice_backup_\" + timestamp + \".mbf\";\n\t\t\t\t\t\t\t\t\tftpOptions = {\n\t\t\t\t\t\t\t\t\t\thost: ftpHost,\n\t\t\t\t\t\t\t\t\t\tuser: ftpUsername,\n\t\t\t\t\t\t\t\t\t\tpassword: ftpPassword\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\tvar client = new ftpClient();\n\t\t\t\t\t\t\t\t\tclient.on('ready', function() {\n\t\t\t\t\t\t\t\t\t\t// Push the backup file to the remote server\n\t\t\t\t\t\t\t\t\t\tsocket.emit('backup-channel','Connected to FTP server, pushing backup file');\n\t\t\t\t\t\t\t\t\t\tclient.put(startDir + '/backup.tgz', ftpDir + \"/\" + fileName, function(err)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tdeleteTmpFiles();\n\t\t\t\t\t\t\t\t\t\t\tif(!err)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tsocket.emit('backup-channel','FTP upload success');\n\t\t\t\t\t\t\t\t\t\t\t\tgetFTPFileList(socket,ftpHost,ftpUsername,ftpPassword,ftpDir,ftpPassive);\n\t\t\t\t\t\t\t\t\t\t\t}else\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tsocket.emit('backup-channel','Error: Could not upload backup file to target FTP server. \"' + err + '\"');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tclient.end();\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tclient.on('error', function(err)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t// On nos, there was an issue with the remote server\n\t\t\t\t\t\t\t\t\t\tswitch(err.code)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tcase '530':\n\t\t\t\t\t\t\t\t\t\t\t\tsocket.emit('backup-channel',\"Error: Could not login to remote FTP server\");\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\tcase '421':\n\t\t\t\t\t\t\t\t\t\t\t\tsocket.emit('backup-channel',\"Error: The FTP service on the remote system is unavailable\");\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tconsole.log(err.code);\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tclient.connect(ftpOptions);\n\t\t\t\t\t\t\t\t}else\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// File compression fails\n\t\t\t\t\t\t\t\t\tsocket.emit('backup-channel','Error: Could not compress files');\n\t\t\t\t\t\t\t\t\tdeleteTmpFiles();\n\t\t\t\t\t\t\t\t\tconsole.error(err);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}else\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// File copying fails\n\t\t\t\t\t\t\tsocket.emit('backup-channel','Error: Could not copy files');\n\t\t\t\t\t\t\tdeleteTmpFiles();\n\t\t\t\t\t\t\tconsole.error(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}else\n\t\t\t\t{\n\t\t\t\t\t// Database dump fails\n\t\t\t\t\tsocket.emit('backup-channel', 'Error: Could not backup the database');\n\t\t\t\t\tdeleteTmpFiles();\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n});\nfunction deleteTmpFiles()\n{\n\trimraf(__dirname + \"/storage/tmp/currentbackup\",function()\n\t{\n\n\t});\n}\nfunction getFTPFileList(socket,ftpHost,ftpUsername,ftpPassword,ftpDir,ftpPassive)\n{\n\tfileNamePattern = /^myvoice_backup_[0-9]{4}_[0-9]{2}_[0-9]{2}\\s[0-9]{2}:[0-9]{2}:[0-9]{2}\\.mbf$/;\n\tfileList = [];\n\tftpOptions = {\n\t\thost: ftpHost,\n\t\tuser: ftpUsername,\n\t\tpassword: ftpPassword\n\t};\n\tvar client = new ftpClient();\n\tclient.on('ready', function() {\n\t\tclient.list(ftpDir,function(err, list) {\n\t\t\tif (err)\n\t\t\t{\n\t\t\t\tsocket.emit('ftp-file-dir',\"error\");\n\t\t\t\tclient.end();\n\t\t\t}\n\t\t\tfor(i=0, len = list.length; i < len; i++)\n\t\t\t{\n\t\t\t\tfile = {\n\t\t\t\t\tname: list[i].name,\n\t\t\t\t\tsize: require('pretty-bytes')(list[i].size),\n\t\t\t\t\tdate: list[i].date.toISOString().\n\t\t\t\t\t\treplace(/T.+$/, '')\n\t\t\t\t}\n\t\t\t\tif(fileNamePattern.test(file.name))\n\t\t\t\t{\n\t\t\t\t\tfile.backup_file = true;\n\t\t\t\t}else\n\t\t\t\t{\n\t\t\t\t\tfile.backup_file = false;\n\t\t\t\t}\n\t\t\t\tfileList.push(file);\n\t\t\t}\n\t\t\tsocket.emit('ftp-file-dir',fileList);\n\t\t\tclient.end();\n\t\t});\n\t});\n\tclient.on('error', function(err)\n\t{\n\t\tswitch(err.code)\n\t\t{\n\t\t\tcase 530:\n\t\t\t\tsocket.emit('ftp-file-dir',\"Error: Could not login to remote FTP server\");\n\t\t\t\tbreak;\n\t\t\tcase 421:\n\t\t\t\tsocket.emit('ftp-file-dir',\"Error: The FTP service on the remote system is unavailable\");\n\t\t\t\tbreak;\n\t\t}\n\t\tconsole.log(err.code);\n\t});\n\tclient.connect(ftpOptions);\n}",
 "title": ""
}