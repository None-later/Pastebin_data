{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "kw_down",
  "kw_error",
  "kw_target",
  "re_php",
  "lg_en",
  "re_ast1",
  "kw_bitcoin",
  "re_url"
 ],
 "key": "kRc74QNv",
 "pasteDate": "Feb 28, 2018, 4:50:17 AM",
 "relevancy": -3.0,
 "relevant": false,
 "text": "<?php\n/**\n * Plugin Name: Easy CryptoCurrency Ticker\n * Description: Display cryptocurrency ticker widget on your WordPress website\n * Plugin URI: https://urosevic.net/wordpress/plugins/cc-ticker/\n * Author: Aleksandar Uroevi\n * Author URI: https://urosevic.net\n * Version: 1.0.1\n * License: GPL3 or later\n * License URI: https://www.gnu.org/licenses/gpl-3.0.html\n * Text Domain: cc-ticker\n * Domain Path: languages\n * Network: false\n */\n\n// Exit if accessed directly\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\nif ( ! class_exists( 'Wpau_Cryptocurrency_Ticker' ) ) {\n\tfinal class Wpau_Cryptocurrency_Ticker {\n\t\t// Hold an instance of the class\n\t\tprivate static $instance;\n\n\t\tconst DB_VER = 1;\n\t\tconst VER = '1.0';\n\t\tpublic $plugin_name = 'Easy CryptoCurrency Ticker';\n\t\tpublic $plugin_url;\n\t\tprivate $cache_timeout = 2;\n\t\tprivate $messages;\n\t\tprivate static $coinlist;\n\t\tprivate static $upload_dir_path;\n\t\tpublic static $upload_dir_url;\n\n\t\tfunction __construct() {\n\n\t\t\t// Define various variables\n\t\t\t$this->plugin_url = plugin_dir_url( __FILE__ );\n\t\t\t$wp_upload_dir = wp_upload_dir();\n\t\t\tself::$upload_dir_path = $wp_upload_dir['basedir'] . '/cc-ticker';\n\t\t\tself::$upload_dir_url = $wp_upload_dir['baseurl'] . '/cc-ticker';\n\t\t\t$this->messages = array(\n\t\t\t\t'delay' => sprintf(\n\t\t\t\t\t__( '' ),\n\t\t\t\t\t$this->cache_timeout\n\t\t\t\t),\n\t\t\t\t'attribution' => sprintf(\n\t\t\t\t\t__( 'and provided by %s', 'cc-ticker' ),\n\t\t\t\t\t'<a href=\"https://creaptomania.com/bitcoin/\" target=\"_blank\"></a>'\n\t\t\t\t),\n\t\t\t);\n\n\t\t\t// If there is no upload dir, attempt to create one\n\t\t\tif ( ! is_dir( self::$upload_dir_path . '/ico' ) ) {\n\t\t\t\twp_mkdir_p( self::$upload_dir_path . '/ico' );\n\t\t\t}\n\n\t\t\t// Enqueue frontend scripts\n\t\t\tadd_action( 'wp_enqueue_scripts', array( $this, 'enqueue_scripts' ) );\n\n\t\t\t// Include widget\n\t\t\trequire_once( 'inc/widget.php' );\n\n\t\t\t// Register stock_ticker shortcode.\n\t\t\tadd_shortcode( 'cryptocurrency_ticker', array( $this, 'shortcode' ) );\n\n\t\t\t// AJAX calls\n\t\t\tadd_action( 'wp_ajax_cct_get_coinlist', array( $this, 'ajax_get_coinlist' ) );\n\t\t\tadd_action( 'wp_ajax_cct_parse_coinlist', array( $this, 'ajax_parse_coinlist' ) );\n\n\t\t\t// Helpers to get and scramble coinlist\n\t\t\tif ( ! empty( $_GET['cct-get-coinlist'] ) ) {\n\t\t\t\tself::get_coinlist();\n\t\t\t}\n\t\t\tif ( ! empty( $_GET['cct-parse-coinlist'] ) ) {\n\t\t\t\tself::parse_coinlist();\n\t\t\t}\n\n\t\t\t// Parse coinlist\n\t\t\tself::coinlist();\n\n\t\t} // END function __construct()\n\n\t\t/**\n\t\t * The singleton method\n\t\t * @return object Instance of class Wpau_Cryptocurrency_Ticker\n\t\t */\n\t\tpublic static function instance() {\n\t\t\tif ( ! isset( self::$instance ) ) {\n\t\t\t\tself::$instance = new Wpau_Cryptocurrency_Ticker();\n\t\t\t}\n\t\t\treturn self::$instance;\n\t\t} // END public static function instance()\n\n\t\t/**\n\t\t * Enqueue frontend assets\n\t\t */\n\t\tfunction enqueue_scripts() {\n\t\t\twp_enqueue_style(\n\t\t\t\t'cc-ticker',\n\t\t\t\t$this->plugin_url . 'assets/css/style.css',\n\t\t\t\tarray(),\n\t\t\t\tself::VER\n\t\t\t);\n\t\t} // END function enqueue_scripts()\n\n\t\t/**\n\t\t * Render widget\n\t\t * @param  array $atts  Array of shortcode parameters\n\t\t * @return string       Composed HTML output\n\t\t */\n\t\tfunction shortcode( $atts ) {\n\n\t\t\t// Parse shortcode with default values\n\t\t\t$atts = shortcode_atts( array(\n\t\t\t\t'f'          => 'BTC,ETC,XMR',\n\t\t\t\t't'          => 'USD',\n\t\t\t\t'noicon'     => false,\n\t\t\t\t'nolink'     => false,\n\t\t\t\t'coinbase'   => '',\n\t\t\t\t'showchange' => '',\n\t\t\t), $atts );\n\n\t\t\t// Fetch stock\n\t\t\t$json = $this->fetch( $atts['f'], $atts['t'] );\n\n\t\t\t// Convert JSON to data array\n\t\t\t$data = json_decode( $json, true );\n\n\t\t\t// If any error ocurred, return error message\n\t\t\tif ( ! is_array( $data ) ) {\n\t\t\t\treturn __( 'We are so sorry because Easy CryptoCurrency Ticker can not be displayed at the moment.', 'cc-ticker' );\n\t\t\t}\n\n\t\t\t// Prepare empty variables used for shortcode\n\t\t\t$html = $icon_style = $icon_class = '';\n\n\t\t\t// Open ticker table\n\t\t\t$html .= '<table class=\"cctw\"><tbody>';\n\t\t\t// Loop through all `from` currencies\n\t\t\tforeach ( $data['DISPLAY'] as $from_symbol => $to_symbols ) {\n\t\t\t\t$to_prices_html = array();\n\t\t\t\t// Loop through all `to` currencies\n\t\t\t\tforeach ( $to_symbols as $to_symbol => $to_data ) {\n\t\t\t\t\t// Get change dirrection\n\t\t\t\t\t$change_day = $data['RAW'][ $from_symbol ][ $to_symbol ]['CHANGEDAY'];\n\t\t\t\t\tif ( $change_day < 0 ) {\n\t\t\t\t\t\t$change_class = 'down';\n\t\t\t\t\t} else if ( $change_day > 0 ) {\n\t\t\t\t\t\t$change_class = 'up';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$change_class = 'unchanged';\n\t\t\t\t\t}\n\t\t\t\t\t// Get update timestamp from RAW\n\t\t\t\t\t$timestamp = $data['RAW'][ $from_symbol ][ $to_symbol ]['LASTUPDATE'];\n\n\t\t\t\t\t// Display change into?\n\t\t\t\t\t$change_info = '';\n\t\t\t\t\tif ( ! empty( $atts['showchange'] ) ) {\n\t\t\t\t\t\t$change_info = sprintf(\n\t\t\t\t\t\t\t'%1$s (%2$s%%)',\n\t\t\t\t\t\t\t$data['DISPLAY'][ $from_symbol ][ $to_symbol ]['CHANGEDAY'],\n\t\t\t\t\t\t\t$data['DISPLAY'][ $from_symbol ][ $to_symbol ]['CHANGEPCTDAY']\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Compose item for amount table cell\n\t\t\t\t\t$to_prices_html[] = sprintf(\n\t\t\t\t\t\t'<span class=\"amount %7$s\" title=\"Mkt. Cap. %5$s - Last update %4$s\"><span class=\"price\"><span class=\"currency\">%1$s</span> %2$s</span> <span class=\"change\">%6$s</span></span>',\n\t\t\t\t\t\t$to_data['TOSYMBOL'],                                            // 1\n\t\t\t\t\t\tstr_replace( \"{$to_data['TOSYMBOL']} \", '', $to_data['PRICE'] ), // 2\n\t\t\t\t\t\t$to_symbol,                                                      // 3\n\t\t\t\t\t\tdate( 'r', intval( $timestamp ) ),                               // 4\n\t\t\t\t\t\t$to_data['MKTCAP'],                                              // 5\n\t\t\t\t\t\t$change_info,                                                    // 6\n\t\t\t\t\t\t$change_class                                                    // 7\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t// Join all cell rows with linebreak separator\n\t\t\t\t$prices_html = implode( ' ', $to_prices_html );\n\n\t\t\t\t// Prepare currency name\n\t\t\t\t$currency_name = ! empty( self::$coinlist[ $from_symbol ] ) ? self::$coinlist[ $from_symbol ]['c'] : $from_symbol;\n\n\t\t\t\t// Define icon style and currency classes\n\t\t\t\tif ( empty( $atts['noicon'] ) && ! empty( self::$coinlist[ $from_symbol ]['i'] ) ) {\n\t\t\t\t\t// Try to get local image\n\t\t\t\t\t$icon_url = self::get_icon_url( self::$coinlist[ $from_symbol ]['i'] );\n\t\t\t\t\t$icon_style = sprintf(\n\t\t\t\t\t\t'style=\"background-image: url(%1$s);\"',\n\t\t\t\t\t\t$icon_url\n\t\t\t\t\t);\n\t\t\t\t\t$icon_class = 'ico';\n\t\t\t\t} else {\n\t\t\t\t\t$icon_class = 'noico';\n\t\t\t\t}\n\t\t\t\t$currency_class = \"currency $icon_class\";\n\n\t\t\t\t// Compose cryptocurrency cell\n\t\t\t\tif ( empty( $atts['nolink'] ) && ! empty( self::$coinlist[ $from_symbol ]['u'] ) ) {\n\t\t\t\t\t// Do we need to link currency to overview?\n\t\t\t\t\t$from_name = sprintf(\n\t\t\t\t\t\t'<a href=\"https://creaptomania.com/%3$s\" class=\"%6$s\" %5$s target=\"_blank\" title=\"%4$s\">%3$s</a>',\n\t\t\t\t\t\t'https://creaptomania.com/diagramm/',      // 1\n\t\t\t\t\t\tself::$coinlist[ $from_symbol ]['u'], // 2\n\t\t\t\t\t\t$from_symbol,                         // 3\n\t\t\t\t\t\t$currency_name,                       // 4\n\t\t\t\t\t\t$icon_style,                          // 5\n\t\t\t\t\t\t$currency_class                       // 6\n           \n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// Or just to print unlinked cryptocurrency?\n\t\t\t\t\t$from_name = sprintf(\n\t\t\t\t\t\t'<span class=\"%4$s\" %3$s title=\"%1$s\">%2$s</span>',\n\t\t\t\t\t\t$currency_name, // 1\n\t\t\t\t\t\t$from_symbol,   // 2\n\t\t\t\t\t\t$icon_style,    // 3\n\t\t\t\t\t\t$currency_class // 4\n\t\t\t\t\t);\n\t\t\t\t}\n<?php\necho strtolower( $from_symbol, $currency_name);\n?>\n\t\t\t\t// Join all details to table row\n\t\t\t\t$html .= sprintf(\n\t\t\t\t\t'<tr><th>%1$s</th><td>%2$s</td></tr>',\n\t\t\t\t\t$from_name,\n\t\t\t\t\t$prices_html\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Close ticker table\n\t\t\t$html .= '</tbody>';\n\n\t\t\t// Prepare coinbase referral link if exists\n\t\t\t$coinbase = '';\n\t\t\tif ( ! empty( $atts['coinbase'] ) ) {\n\t\t\t\t$coinbase_referral_id = self::sanitize_coinbase_id( $atts['coinbase'] );\n\t\t\t\tif ( ! empty( $coinbase_referral_id ) ) {\n\t\t\t\t\t$coinbase = sprintf(\n\t\t\t\t\t\t'<span class=\"coinbase\"><a href=\"https://www.coinbase.com/join/%s\" target=\"_blank\">Join coinbase.com community!</a></span>',\n\t\t\t\t\t\t$coinbase_referral_id\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Prepare attribution for CoinBase\n\t\t\t$attribution = '.';\n\t\t\tif ( ! empty( $atts['nolink'] ) ) {\n\t\t\t\t$attribution = ' ' . $this->messages['attribution'];\n\t\t\t}\n\t\t\t// Prepare Delay message\n\t\t\t$delay = sprintf(\n\t\t\t\t'<span class=\"delay\">%1$s%2$s</span>',\n\t\t\t\t$this->messages['delay'],\n\t\t\t\t$attribution\n\t\t\t);\n\t\t\t// Append CryptoCompare.com attribution\n\t\t\t$html .= sprintf(\n\t\t\t\t'<tfoot><tr><td colspan=\"2\">%1$s %2$s</td></tr></tfoot>',\n\t\t\t\t$delay,      // 1\n\t\t\t\t$coinbase     // 2\n\t\t\t);\n\n\t\t\t// Close table\n\t\t\t$html .= '</table>';\n\n\t\t\t// Return rendered HTML\n\t\t\treturn $html;\n\n\t\t} // END function shortcode( $atts )\n\n\t\t/**\n\t\t * Get data from cached transient or from live server and cache to transient\n\t\t * @param  string $from From currencies\n\t\t * @param  string $to   To currencies\n\t\t * @return string       JSON value\n\t\t */\n\t\tfunction fetch( $from = '', $to = '' ) {\n\n\t\t\t// If we don't know from what and to what to convert, escape\n\t\t\tif ( empty( $from ) || empty( $to ) ) {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\t// Sanitize symbols\n\t\t\t$from = self::sanitize_symbols( $from );\n\t\t\t$to = self::sanitize_symbols( $to );\n\n\t\t\t// Define transient key\n\t\t\t$transient_key = 'ccticker_a' . md5( \"f={$from}_t={$to}\" ) . $this->cache_timeout;\n\n\t\t\t// Get transient if exists and not expired\n\t\t\tif ( false === ( $json = get_transient( $transient_key ) ) ) {\n\n\t\t\t\t// Build request URL\n\t\t\t\t$url = \"https://min-api.cryptocompare.com/data/pricemultifull?fsyms={$from}&tsyms={$to}\";\n\n\t\t\t\t// Do API request\n\t\t\t\t$wparg = array(\n\t\t\t\t\t'timeout' => intval( 10 ),\n\t\t\t\t);\n\t\t\t\t$response = wp_remote_get( $url, $wparg );\n\n\t\t\t\t// Parse response\n\t\t\t\t// @TODO: Make compatible with all API responses\n\t\t\t\tif ( is_wp_error( $response ) ) {\n\t\t\t\t\treturn $response->get_error_message();\n\t\t\t\t} else {\n\t\t\t\t\t// Get response from body\n\t\t\t\t\t$json = wp_remote_retrieve_body( $response );\n\t\t\t\t\t// Save response JSON to transient\n\t\t\t\t\tset_transient( $transient_key, $json, $this->cache_timeout * MINUTE_IN_SECONDS );\n\t\t\t\t}\n\t\t\t} // END if ( false === ( $json = get_transient( $transient_key ) ) )\n\n\t\t\t// Return JSON content\n\t\t\treturn $json;\n\t\t} // END function fetch( $from, $to )\n\n\t\t/**\n\t\t * Strip from symbols string all except uppercase letters and comma\n\t\t * @param  string $symbols Raw content of symbols string\n\t\t * @return string          Sanitized content of symbols string\n\t\t */\n\t\tpublic static function sanitize_symbols( $symbols ) {\n\t\t\tif ( empty( $symbols ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn preg_replace( '/[^A-Z0-9\\,\\*]/', '', $symbols );\n\t\t} // END private static function sanitize_symbols( $symbols )\n\n\t\t/**\n\t\t * Sanizite Coinbase Referral ID\n\t\t * @param  string $coinbase_id Raw version of Coinbase referral ID\n\t\t * @return string              Sanitized Coinbase referral ID or empty value\n\t\t */\n\t\tpublic static function sanitize_coinbase_id( $coinbase_id ) {\n\t\t\t// If nothing provided, return empty value\n\t\t\tif ( empty( $coinbase_id ) ) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\t// Clean Coinbase referral ID\n\t\t\t$cleaned_id = preg_replace( '/a-z0-9/','', $coinbase_id );\n\t\t\t// Compare cleaned with trimmed value and return empty value if they are not same\n\t\t\tif ( trim( $coinbase_id ) !== $cleaned_id ) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\t// Return cleaned Coinbase Referral ID\n\t\t\treturn $cleaned_id;\n\t\t} // END public static function validate_coinbase_id( $coinbase_id )\n\n\t\t/**\n\t\t * Prepare Coinlist array\n\t\t * @return array Cryptocurrency Coinlist array\n\t\t */\n\t\tprivate static function coinlist() {\n\t\t\t// $coinlist = dirname( __FILE__ ) . '/coinlist.min.json';\n\t\t\t$coinlist = self::$upload_dir_path . '/coinlist.min.json';\n\t\t\t// If no coinlist file exists, call method to create new one\n\t\t\tif ( ! file_exists( $coinlist ) ) {\n\t\t\t\tself::parse_coinlist();\n\t\t\t}\n\t\t\t// Get content from coinlist file\n\t\t\t$json = file_get_contents( $coinlist );\n\t\t\t// Add decoded data array to $coinlist variable\n\t\t\tself::$coinlist = json_decode( $json, true );\n\t\t} // END private static function coinlist()\n\n\t\tstatic function ajax_get_coinlist() {\n\t\t\tself::get_coinlist();\n\t\t\tself::parse_coinlist();\n\t\t\t$result = array(\n\t\t\t\t'status'  => 'success',\n\t\t\t\t'message' => 'New coinlist has been fetched from CryptoCompare.com and prepared for local use. You can view updated coinlist.',\n\t\t\t);\n\t\t\t$result = json_encode( $result );\n\t\t\techo $result;\n\t\t\twp_die();\n\t\t} // END private static function ajax_get_coinlist()\n\n\t\t/**\n\t\t * Download coinlist from live server and store locally\n\t\t * @TODO: Move file to `res` directory\n\t\t */\n\t\tprivate static function get_coinlist() {\n\t\t\t$url = 'https://min-api.cryptocompare.com/data/all/coinlist';\n\t\t\t$wparg = array(\n\t\t\t\t'timeout' => intval( 10 ),\n\t\t\t);\n\t\t\t$response = wp_remote_get( $url, $wparg );\n\n\t\t\t// Parse response\n\t\t\tif ( is_wp_error( $response ) ) {\n\t\t\t\treturn $response->get_error_message();\n\t\t\t} else {\n\t\t\t\t// Get response from body\n\t\t\t\t$json = wp_remote_retrieve_body( $response );\n\t\t\t\t// Write to local file\n\t\t\t\t// file_put_contents( dirname( __FILE__ ) . '/coinlist.json', $json );\n\t\t\t\tfile_put_contents( self::$upload_dir_path . '/coinlist.json', $json );\n\t\t\t}\n\t\t} // END private static function get_coinlist()\n\n\t\tstatic function ajax_parse_coinlist() {\n\t\t\tself::parse_coinlist();\n\t\t\t$result = array(\n\t\t\t\t'status'  => 'success',\n\t\t\t\t'message' => 'Local coinlist has been prepared. You can view it now.',\n\t\t\t);\n\t\t\t$result = json_encode( $result );\n\t\t\techo $result;\n\t\t\twp_die();\n\t\t} // END private static function ajax_parse_coinlist()\n\n\t\t/**\n\t\t * Parse full coinlist and store only used data to minified coinlist for regular usage\n\t\t * @TODO: Move file to `res` directory\n\t\t */\n\t\tprivate static function parse_coinlist() {\n\t\t\t// $source_coinlist = dirname( __FILE__ ) . '/coinlist.json';\n\t\t\t// $coinlist = dirname( __FILE__ ) . '/coinlist.min.json';\n\t\t\t$source_coinlist = self::$upload_dir_path . '/coinlist.json';\n\t\t\t$coinlist = self::$upload_dir_path . '/coinlist.min.json';\n\n\t\t\t// Get new coinlist if file does not exists\n\t\t\tif ( ! file_exists( $source_coinlist ) ) {\n\t\t\t\tself::get_coinlist();\n\t\t\t}\n\t\t\t$json = file_get_contents( $source_coinlist );\n\t\t\t$data = json_decode( $json, true );\n\n\t\t\t// If response is success, go through Data array\n\t\t\tif ( ! empty( $data['Response'] ) && 'Success' == $data['Response'] ) {\n\t\t\t\t$new_data = array();\n\t\t\t\tforeach ( $data['Data'] as $curr => $curr_data ) {\n\t\t\t\t\t$new_data[ $curr ] = $curr_data['CoinName'];\n\t\t\t\t\t$new_data[ $curr ] = array(\n\t\t\t\t\t\t'u' => $curr_data['Url'],\n\t\t\t\t\t\t'c' => $curr_data['CoinName'],\n\t\t\t\t\t);\n\t\t\t\t\t// Append image if exists\n\t\t\t\t\tif ( ! empty( $curr_data['ImageUrl'] ) ) {\n\t\t\t\t\t\t$new_data[ $curr ]['i'] = $curr_data['ImageUrl'];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Pack PHP array to JSON\n\t\t\t\t$new_json = json_encode( $new_data );\n\t\t\t\t// Write JSON to local file\n\t\t\t\tfile_put_contents( $coinlist, $new_json );\n\t\t\t} // END if ( ! empty( $data['Response'] ) ...\n\t\t} // END private static function parse_coinlist()\n\n\t\t/**\n\t\t * Extract icon URL from local or remote URL as fallback\n\t\t * @param  string $path Cryptocurrency icon media path\n\t\t * @return string       URL from where icon will be pulled on page\n\t\t */\n\t\tprivate static function get_icon_url( $path ) {\n\n\t\t\t// If no $path provided, return empty value\n\t\t\tif ( empty( $path ) ) {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\t// Define remote file\n\t\t\t$remote_icon_url = \"https://www.cryptocompare.com{$path}\";\n\n\t\t\t// Prepare filename for new image\n\t\t\t$icon_filename = str_replace( '/media/', '', $path );\n\t\t\t$icon_filename = str_replace( '/', '-', $icon_filename );\n\t\t\t// Prepare target path for new image\n\t\t\t$icon_path = self::$upload_dir_path . '/ico/' . $icon_filename;\n\t\t\t$icon_url = self::$upload_dir_url . '/ico/' . $icon_filename;\n\n\t\t\t// If image file does not exists, download it\n\t\t\tif ( ! file_exists( $icon_path ) ) {\n\n\t\t\t\t// Include file.php\n\t\t\t\t@include_once( ABSPATH . '/wp-admin/includes/file.php' );\n\n\t\t\t\t// If download_url() function does not exists after including file, return fallback\n\t\t\t\tif ( ! function_exists( 'download_url' ) ) {\n\t\t\t\t\treturn $remote_icon_url;\n\t\t\t\t}\n\n\t\t\t\t// Download remote file\n\t\t\t\t$icon_tmp = download_url( $remote_icon_url );\n\t\t\t\tif ( is_wp_error( $icon_tmp ) ) {\n\t\t\t\t\t// If WP_Error ocurred, unlink temp file and return fallback\n\t\t\t\t\t@unlink( $icon_tmp );\n\t\t\t\t\treturn $remote_icon_url;\n\t\t\t\t} else {\n\t\t\t\t\t// Copy temp file to final destination\n\t\t\t\t\t$ret = copy( $icon_tmp, $icon_path );\n\t\t\t\t\t@unlink( $icon_tmp );\n\t\t\t\t\t// If file can not be copied, return fallback\n\t\t\t\t\tif ( false === $ret ) {\n\t\t\t\t\t\treturn $remote_icon_url;\n\t\t\t\t\t}\n\t\t\t\t\t// Now let we resize big image\n\t\t\t\t\t// @ref: https://developer.wordpress.org/reference/functions/wp_get_image_editor/\n\t\t\t\t\t$image = wp_get_image_editor( $icon_path );\n\t\t\t\t\tif ( ! is_wp_error( $image ) ) {\n\t\t\t\t\t\t// Resize to 20px\n\t\t\t\t\t\t$image->resize( 20, 20 );\n\t\t\t\t\t\t$image->save( $icon_path );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $icon_url;\n\t\t} // END private static function get_icon_url( $path )\n\n\t} // END class Wpau_Cryptocurrency_Ticker\n} // END if ( ! class_exists( 'Wpau_Cryptocurrency_Ticker' ) )\n\n// Initialize class\n$wpau_cryptocurrency_ticker = Wpau_Cryptocurrency_Ticker::instance();",
 "title": ""
}