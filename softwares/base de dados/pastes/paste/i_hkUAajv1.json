{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "lg_en"
 ],
 "key": "hkUAajv1",
 "pasteDate": "Feb 24, 2018, 7:18:26 PM",
 "relevancy": 0.0,
 "relevant": false,
 "text": "    while(changed)\n    {\n        for(int i = 0; i < tokenized_rules.size(); i++)\n        {\n            current_lhs = tokenized_rules[i].lhs;\n            for(int index_of_rhs = 0; index_of_rhs < tokenized_rules[i].rhs.size(); index_of_rhs++)\n            {\n                current_rhs_value = tokenized_rules[i].rhs[index_of_rhs];\n                for(int k = 0; k < ff_universe.size(); k++)\n                {\n                    //if current_rhs_value is in the ff_universe\n                    if(current_rhs_value == ff_universe[k])\n                    {\n                        //cout << current_rhs_value <<  \" / is in the ff_universe\";\n                        for(int p = 0; p < firsts.size(); p++)\n                        {\n                            if(current_rhs_value == firsts[p].symbol)\n                            {\n                                for(int z = 0; z < firsts.size(); z++)\n                                {\n                                    if(current_lhs == firsts[z].symbol)\n                                    {\n                                        firsts[z].first_set[k] = true;\n                                        in_first_universe = true;\n                                    }\n                                }\n                                if(in_first_universe)\n                                {\n                                    break;\n                                }\n                                //cout << \" / and is true \" << ff_universe[k] << endl;\n                                //cout << current_lhs << \" has \" << ff_universe[k] << \" in the first set: \" << endl;\n                                \n                            }\n                            if(in_first_universe)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if(in_first_universe)\n                    {\n                        break;\n                    }\n                }\n                if(in_first_universe)\n                {\n                    break;\n                }\n                //cout << \"NOT IN FIRST UNIVERSE: \" << current_rhs_value << endl;\n                for(int k = 0; k < nonterminals.size(); k++)\n                {\n                    if(current_rhs_value == nonterminals[k])\n                    {\n                        for(int p = 0; p < firsts.size(); p++)\n                        {\n                            if(current_rhs_value == firsts[p].symbol)\n                            {\n                                //find the nonterminal firsts vector\n                                for(int q = 0; q < firsts.size(); q++)\n                                {\n                                    if(current_lhs == firsts[q].symbol)\n                                    {\n                                        //FIRST(current_lhs_value) U FIRST(current_rhs_value)\n                                        firsts[q].first_set = v_union(firsts[q].first_set, firsts[p].first_set);\n                                    }\n                                }\n                                if(firsts[p].first_set[0] == false)\n                                {\n                                    contains_epsilon = false;\n                                }\n                            }\n                            \n                            if(contains_epsilon == false)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if(contains_epsilon == false)\n                    {\n                        break;\n                    }\n                }\n                if(contains_epsilon == false)\n                {\n                    break;\n                }\n            }\n            in_first_universe = false;\n            contains_epsilon = true;\n        }\n        if(check_equal(firsts, old_firsts))\n        {\n            changed = false;\n        }\n        else\n        {\n            old_firsts = firsts;\n        }\n    }",
 "title": ""
}