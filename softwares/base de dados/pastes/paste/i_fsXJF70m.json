{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "lg_en"
 ],
 "key": "fsXJF70m",
 "pasteDate": "Feb 12, 2018, 5:30:07 PM",
 "relevancy": 0.0,
 "relevant": false,
 "text": "## Helpful Git Shortcuts\nMost of the time when I'm using git I find I use short-lived feature branches and a single head, master. In order to help make some of the most repetitive functions go a little faster, I created some shortcuts in my `.bash_profile`. \n\nThe three most helpful are\n\n1. `gurb`: If you work in a team and want to make sure you have the latest changes from master you can simply run this command. You can run it on your feature branch and it will checkout master, pull the latest changes for master, checkout your feature branch again, and rebase on the updated local master branch. This allows you to grab the latest changes and never have to worry about switching branches \n2. `gfp`: A very simple git force push, but just shorter to type :)\n3. `gitrdone`: Will push and track your branch to the origin if it hasn't already happened. Then it will use the `gurb` command to grab the latest changes, and finally run `gfp` to push your changes. \n\nSo with one command `gitrdone` you can have the latest changes pushed to your feature branch. \n\n## Additional JIRA Shortcuts with Git \nAnother tool I often use when working in teams is JIRA. A lot of teams like the built in Git tracking it enables on a commit basis. However, it can often be annoying to remember your ticket tag and type it into each commit :( \n\nI've created a couple functions to help with this workflow. \n\n1. `gtc`: If you follow the branch naming convention `<ticket-number>_<ticket-description>` the `gtc` command will automatically parse this from your active branch and prepend the ticket number to your commit message. \n2. `gitready`: Performs a `git add -A` and then a `gtc`. So you can use this to stage all your changes and commit them with a JIRA tag in one command. \n\n## Example Usage\n```\n$ gitready \"Add the greatest, newest feature\"\n$ gitrdone\n```\n\n## Warnings\nThis may not follow the git conventions that your team uses. In particular, be warned that these functions are using `git rebase` and `git push --force` which can cause very terrible things to happen if you have multiple developers working on the same branch. Feel free to modify the usage of this script to replace these with alternatives like `git merge` and `git push` if that fits your workflow better. \n\n## Add to Bash Profile\nSimply add the following code to your bash profile and you will be able to use the commands as needed in your terminal. I am by no means a bash master so any feedback is welcome!\n\n```\n# ~~~~~~~~~~ GIT FUNCTIONS ~~~~~~~~~~\n\nexport CURRENT_BRANCH_NAME=\"\"\nexport CURRENT_JURA_TAG=\"\"\n\n# git - status\n# Git status\ngs() {\n  git status\n} \n\n# git - branch\n# Git branch\ngb() {\n  git branch\n}\n\n# git - update rebase branch\n# On the current branch, checkout out master and pull the latest changes. Then switch back to your branch and rebase on master. \ngurb() {\n  get_current_branch_name\n  echo $CURRENT_BRANCH_NAME\n\n  git checkout master\n  git pull\n  \n  git checkout $CURRENT_BRANCH_NAME\n  git rebase master\n}\n\n# git - commit\n# Commit current changes with a message\ngc() {\n  get_current_branch_name\n  git commit -m \"$1\"\n}\n\n#git - tagged commit\n# Commit with a JIRA tag pulled from the branch name\ngtc() {\n  get_jira_tag\n  gc \"$JIRA_TAG: $1\"\n} \n\n# git - force push\n# Force push commits\ngfp() {\n  git push --force\n}\n\n# git - add all\n# Add all staged files\nga() {\n  git add -A\n}\n\n# Add all changes and commit with message\ngitready() {\n  ga\n  gtc \"$1\"\n}\n\n# Push branch to origin (just in case it already isn't linked with your local branch\n# Pull the latest changes from master and rebase your branch against master\n# Force push your branch to the origin\ngitrdone() {\n  get_current_branch_name\n  git push --set-upstream origin $CURRENT_BRANCH_NAME\n  gurb\n  gfp\n}\n\nget_current_branch_name() {\n  # Get current branch name\n  branch_name=\"$(git symbolic-ref HEAD 2>/dev/null)\" ||\n  branch_name=\"(unnamed branch)\"     # detached HEAD\n  branch_name=${branch_name##refs/heads/}\n  CURRENT_BRANCH_NAME=$branch_name\n  echo $CURRENT_BRANCH_NAME\n}\n\nget_jira_tag() {\n  get_current_branch_name\n  JIRA_TAG=$( echo $CURRENT_BRANCH_NAME | cut -d_ -f1 )\n  echo $JIRA_TAG\n}\n```",
 "title": ""
}