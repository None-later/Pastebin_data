{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "lg_en"
 ],
 "key": "e3gcQKGu",
 "pasteDate": "Feb 17, 2018, 11:44:59 AM",
 "relevancy": 1.0,
 "relevant": false,
 "text": "using System;\nusing System.Drawing;\nusing System.Windows.Forms;\nusing System.IO;\n\nnamespace TPR1\n{\n    public partial class Form1 : Form\n    {\n        int StrategyCount = 3; //  \n        int N = 2;//  \n        int EpochCount = 3; //   \n        float[,,] myP; // //      \n        float[,,] myR; //       \n        float[,] myQ; //     \n        float[] KS;\n        int[,] vi;\n        float[,] vir;\n        int[,] di;\n        DataGridView[] myMatrixP;\n        DataGridView[] myMatrixR;\n        PictureBox[] myGraphs;\n\n\n        private void SaveToFile(String path)\n        {\n            if (ReadP() && ReadR())\n            {\n                StreamWriter myWriter = new StreamWriter(path);\n                myWriter.WriteLine(StrategyCount.ToString());\n                myWriter.WriteLine(N.ToString());\n                myWriter.WriteLine(EpochCount.ToString());\n                myWriter.Write(MatrixToString(myP));\n                myWriter.Write(MatrixToString(myR));\n                myWriter.Close();\n            }\n            else\n            {\n                return;\n            }\n        }\n\n        private void ReadFromFile(String path)\n        {\n            try\n            {\n                StreamReader myReader = new StreamReader(path);\n                StrategyCount = Convert.ToInt32(myReader.ReadLine());\n                textBox2.Text = StrategyCount.ToString();\n                N = Convert.ToInt32(myReader.ReadLine());\n                textBox1.Text = N.ToString();\n                EpochCount = Convert.ToInt32(myReader.ReadLine());\n                textBox3.Text = EpochCount.ToString();\n                myP = new float[StrategyCount, N, N];\n                myR = new float[StrategyCount, N, N];\n                ReadMatrix(myReader.ReadLine(), ref myP, StrategyCount, N, N);\n                ReadMatrix(myReader.ReadLine(), ref myR, StrategyCount, N, N);\n                button4_Click(null, null);\n                button3_Click(null, null);\n                button5_Click(null, null);\n                this.Invalidate();\n                myReader.Close();\n                FillDGRV();\n                for (int k = 0; k < StrategyCount; k++)\n                {\n                    WriteToDgrV(ref myMatrixP[k], myP, k);\n                    WriteToDgrV(ref myMatrixR[k], myR, k);\n                }\n\n                Solve();\n                button1_Click_1(null, null);\n            }\n            catch\n            {\n                MessageBox.Show(\"   !\");\n            }\n        }\n\n        private String MatrixToString(float[,,] matrix)\n        {\n            String str=\"\";\n            for(int k = 0; k < matrix.GetLength(0); k++)\n            {\n                for (int i = 0; i < matrix.GetLength(1); i++)\n                {\n                    for (int j = 0; j < matrix.GetLength(2); j++)\n                    {\n                        str += (matrix[k, i, j].ToString() + \" \");\n                    }\n                }\n            }    \n            return str + \"\\n\";\n        }\n\n        private String MatrixToString(float[,] matrix)\n        {\n            String str = \"\";\n                for (int i = 0; i < matrix.GetLength(0); i++)\n                {\n                    for (int j = 0; j < matrix.GetLength(1); j++)\n                    {\n                        str += (matrix[i, j].ToString() + \" \");\n                    }\n                }\n            return str+\"\\n\";\n        }\n\n        private String MatrixToString(float[] matrix)\n        {\n            String str = \"\";\n            for (int i = 0; i < matrix.GetLength(0); i++)\n            {\n                    str += (matrix[i].ToString() + \" \");\n            }\n            return str + \"\\n\";\n        }\n\n        private void ReadMatrix(String str, ref float[,,] matrix, int kF, int iF, int jF)\n        {\n            String[] strarray = str.Split(' ');\n            for(int k = 0; k < kF; k++)\n            {\n                for (int i = 0; i < iF; i++)\n                {\n                    for (int j = 0; j < jF; j++)\n                    {\n                        matrix[k, i, j] = Convert.ToSingle(strarray[iF*kF * k + iF * i + j]);\n                    }\n                }\n            }\n        }\n\n        private void ReadMatrix(String str, ref float[,] matrix, int iF, int jF)\n        {\n            String[] strarray = str.Split(' ');\n            for (int i = 0; i < iF; i++)\n            {\n                for (int j = 0; j < jF; j++)\n                {\n                    matrix[i, j] = Convert.ToSingle(strarray[iF * i + j]);\n                }\n            }\n        }\n\n        private void ReadMatrix(String str, ref float[] matrix, int iF)\n        {\n            String[] strarray = str.Split(' ');\n            for (int i = 0; i < iF; i++)\n            {\n                {\n                    matrix[i] = Convert.ToSingle(strarray[i]);\n                }\n            }\n        }\n\n        private void WriteToDgrV(ref DataGridView a, float[,] matrix)\n        {\n            a.Rows.Clear();\n            a.Columns.Clear();\n            for(int i = 0; i < matrix.GetLength(0); i++)\n            {\n                a.Rows.Add((i+1).ToString());\n                a.Rows[i].HeaderCell.Value = (i + 1).ToString();\n            }\n            for (int i = 0; i < matrix.GetLength(1); i++)\n            {\n                a.Columns.Add((i + 1).ToString(), (i + 1).ToString());\n            }\n\n            for (int i = 0; i < matrix.GetLength(0); i++)\n            {\n                for (int j = 0; j < matrix.GetLength(1); j++)\n                {\n                    a.Rows[i].Cells[j].Value = matrix[i, j].ToString();\n                }\n            }\n        }\n\n\n        private void WriteToDgrV(ref DataGridView a, float[,,] matrix, int k)\n        {\n            a.Rows.Clear();\n            a.Columns.Clear();\n\n            for (int i = 0; i < matrix.GetLength(1); i++)\n            {\n                a.Columns.Add((i + 1).ToString(), (i + 1).ToString());\n            }\n\n\n            for (int i = 0; i < matrix.GetLength(0); i++)\n            {\n                a.Rows.Add((i + 1).ToString());\n                a.Rows[i].HeaderCell.Value = (i + 1).ToString();\n            }\n            \n            for (int i = 0; i < matrix.GetLength(0); i++)\n            {\n                for (int j = 0; j < matrix.GetLength(1); j++)\n                {\n                    a.Rows[i].Cells[j].Value = matrix[k, i, j].ToString();\n                }\n            }\n        }\n\n        public Form1()\n        {\n            InitializeComponent();\n            this.BackColor = Color.AliceBlue;\n            textBox1.Text = \"3\";\n            textBox2.Text = \"3\";\n            textBox3.Text = \"3\";\n            button4_Click(null, null);\n            button3_Click(null, null);\n            button5_Click(null, null);\n            this.Invalidate();\n        }\n\n        public void Step1()\n        {\n            myQ = new float[StrategyCount, N];\n            for (int k = 0; k < StrategyCount; k++)\n            {\n                for (int i = 0; i < N; i++)\n                {\n                    float sum = 0;\n                    for (int j = 0; j<N; j++)\n                    {\n                        sum += myP[k, i, j] * myR[k, i, j];\n                    }\n                    myQ[k, i] = sum;\n  //                  MessageBox.Show(myQ[k, i].ToString());\n                }\n            }\n        }\n\n        public void Step2()\n        {\n            vi = new int[EpochCount + 1, N];\n            vir = new float[EpochCount+1, N];\n            for (int j = 0; j < N; j++)\n                vir[0, j] = 0;\n            for (int n = 1; n <= EpochCount; n++)\n            {\n                for (int i = 0; i < N; i++)\n                {\n                    KS = new float[StrategyCount];\n                    for (int k = 0; k < StrategyCount; k++)\n                    {\n                        float sum = 0;\n                        for (int j = 0; j < N; j++)\n                        {\n                            sum += myP[k, i, j] * vir[n - 1, j];\n                            \n                        }\n                        KS[k] = myQ[k,i]+sum;\n                    }\n                    int indmax = -1;\n                    float myMax = float.MinValue;\n                    String str = \"\";\n                    for (int myk = 0; myk < StrategyCount; myk++)\n                    {\n                        str += KS[myk].ToString() + \"  \";\n                        if (KS[myk] > myMax)\n                        {\n                            indmax = myk;\n                            myMax = KS[myk];\n                        }\n                    }\n                    vi[n, i] = indmax;\n                    vir[n, i] = myMax;\n\n                }\n            }\n            \n        }\n\n        public void Step3()\n        {\n            di = new int[EpochCount, N];\n            for(int n=1; n<=EpochCount; n++)\n            {\n                for (int i = 0; i < N; i++)\n                {\n                    int myMax = int.MinValue;\n                    for(int myindex = 0; myindex < N; myindex++)\n                    {\n                        if(vi[n,myindex] > myMax)\n                        {\n                            myMax = vi[n, myindex];\n                        }\n                    }\n                    di[n - 1, i] = myMax; \n                }\n            }\n        }\n\n        public void FindResh()\n        {\n            Step1();\n            Step2();\n            Step3();\n        }\n\n        private bool ReadP()\n        {\n            myP = new float[StrategyCount, N, N];\n            for (int k = 0; k < StrategyCount; k++)\n            {\n                for (int i = 0; i < N; i++)\n                {\n                    for (int j = 0; j < N; j++)\n                    {\n                        try\n                        {\n                            float.TryParse(myMatrixP[k].Rows[i].Cells[j].Value.ToString().Replace('.', ','), out myP[k, i, j]);\n                        }\n                        catch\n                        {\n                            MessageBox.Show(\"   P\" + k.ToString());\n                            return false;\n                        }\n                    }\n                }\n            }\n            return true;\n        }\n\n        private bool ReadR()\n        {\n            myR = new float[StrategyCount, N, N];\n\n            for (int k = 0; k < StrategyCount; k++)\n            {\n                for (int i = 0; i < N; i++)\n                {\n                    for (int j = 0; j < N; j++)\n                    {\n                        try\n                        {\n                            float.TryParse(myMatrixR[k].Rows[i].Cells[j].Value.ToString().Replace('.', ','), out myR[k, i, j]);\n                        }\n                        catch\n                        {\n                            MessageBox.Show(\"   R\" + k.ToString());\n                            return false;\n                        }\n                    }\n                }\n            }\n            return true;\n        }\n\n        private void Solve()\n        {\n            if (ReadP() && ReadR())\n            {\n                FindResh();\n                for (int i = 0; i <= EpochCount; i++)\n                {\n                    for (int j = 0; j < N; j++)\n                    {\n                        dataGridView1.Rows[j].Cells[i].Value = vir[i, j].ToString();\n                    }\n                }\n                for (int i = 0; i < EpochCount; i++)\n                {\n                    for (int j = 0; j < N; j++)\n                    {\n                        dataGridView1.Rows[N + j].Cells[i + 1].Value = (vi[i+1, j] + 1).ToString();\n                    }\n                }\n            }\n            else\n            {\n                return;\n            }\n        }\n        private void button1_Click(object sender, EventArgs e)\n        {\n            Solve();\n        }\n\n        private void button3_Click(object sender, EventArgs e)\n        {\n            try\n            {\n                Int32.TryParse(textBox1.Text, out N);\n                foreach(DataGridView dgrv in myMatrixP)\n                {\n                    dgrv.Columns.Clear();\n                    for(int i = 0; i < N; i++)\n                    {\n                        dgrv.Columns.Add(i.ToString(), (i+1).ToString());\n                        dgrv.Rows.Add();\n                    }\n                }\n                foreach (DataGridView dgrv in myMatrixR)\n                {\n                    dgrv.Columns.Clear();\n                    for (int i = 0; i < N; i++)\n                    {\n                        dgrv.Columns.Add(i.ToString(), (i+1).ToString());\n                        dgrv.Rows.Add();\n                    }\n                }\n                \n                for (int j = 0; j < StrategyCount; j++)\n                {\n                    for (int k = 0; k < N; k++)\n                    {\n                        myMatrixP[j].Rows[k].HeaderCell.Value = (k + 1).ToString();\n                        myMatrixR[j].Rows[k].HeaderCell.Value = (k + 1).ToString();\n                    }\n                }\n                FillDGRV();\n\n            }\n            catch\n            {\n                MessageBox.Show(\"  \");\n                return;\n            }\n\n        }\n\n\n        private void FillDGRV()\n        {\n\n            dataGridView1.Rows.Clear();\n            dataGridView1.Columns.Clear();\n            for (int i = 0; i <= EpochCount; i++)\n            {\n                dataGridView1.Columns.Add((i).ToString(), (i).ToString());\n            }\n            dataGridView1.RowHeadersWidth += 20;\n            for (int i = 0; i < N; i++)\n            {\n                dataGridView1.Rows.Add();\n                dataGridView1.Rows[i].HeaderCell.Value = \"v\" + (i + 1).ToString();\n                \n            }\n            for (int i = 0; i < N; i++)\n            {\n                dataGridView1.Rows.Add();\n                dataGridView1.Rows[N + i].HeaderCell.Value = \"d\" + (i + 1).ToString();\n            }\n        }\n        \n        private void button4_Click(object sender, EventArgs e)\n        {\n            try\n            {\n                Int32.TryParse(textBox2.Text, out StrategyCount);\n            }\n            catch\n            {\n                MessageBox.Show(\"  \");\n            }\n\n            myMatrixP = new DataGridView[StrategyCount];\n            for(int i = 0; i < StrategyCount; i++)\n            {\n                myMatrixP[i] = new DataGridView();\n            }\n            myMatrixR = new DataGridView[StrategyCount];\n            for (int i = 0; i < StrategyCount; i++)\n            {\n                myMatrixR[i] = new DataGridView();\n            }\n            tabControl1.TabPages.Clear();\n            for (int i = 0; i < StrategyCount; i++)\n                {\n                    tabControl1.TabPages.Add(\"P\" + (i + 1).ToString());\n                    myMatrixP[i].Width = 895;\n                    myMatrixP[i].Height = 315;\n                    myMatrixP[i].RowHeadersVisible = true;\n                    tabControl1.TabPages[i].Controls.Add(myMatrixP[i]);\n                }\n                for (int i = 0; i < StrategyCount; i++)\n                {\n                    tabControl1.TabPages.Add(\"R\" + (i + 1).ToString());\n                    myMatrixR[i].Width = 895;\n                    myMatrixR[i].Height = 315;\n                myMatrixR[i].RowHeadersVisible = true;\n                tabControl1.TabPages[StrategyCount + i].Controls.Add(myMatrixR[i]);\n                }\n                tabControl1.Invalidate();\n            tabControl2.TabPages.Clear();\n            myGraphs = new PictureBox[StrategyCount];\n            \n            for (int i = 0; i < StrategyCount; i++)\n            {\n                myGraphs[i] = new PictureBox();\n                tabControl2.TabPages.Add(\"\" + (i + 1).ToString());\n                myGraphs[i].Width = 760;\n                myGraphs[i].Height = 862;\n                \n                \n                tabControl2.TabPages[i].Controls.Add(myGraphs[i]);\n                myGraphs[i].Paint += pictureBox1_Paint;\n                myGraphs[i].Invalidate();\n            }\n            button3_Click(null, null);\n            tabControl2.Invalidate();\n\n\n        }\n\n        private void button5_Click(object sender, EventArgs e)\n        {\n            try\n            {\n                Int32.TryParse(textBox3.Text, out EpochCount);\n                FillDGRV();\n            }\n            catch\n            {\n                MessageBox.Show(\"  \");\n            }\n        }\n\n        private void pictureBox1_Paint(object sender, PaintEventArgs e)\n        {\n            //e.Graphics.Clear(Color.Black);\n       \n        }\n        private void ToolStripMenuItem_Click(object sender, EventArgs e)\n        {\n            SaveFileDialog myDialog = new SaveFileDialog();\n            myDialog.ShowDialog();\n            SaveToFile(myDialog.FileName);\n        }\n\n        private void ToolStripMenuItem_Click(object sender, EventArgs e)\n        {\n            OpenFileDialog myDialog = new OpenFileDialog();\n            myDialog.ShowDialog();\n            ReadFromFile(myDialog.FileName);\n        }\n\n        private void button1_Click_1(object sender, EventArgs e)\n        {\n            for(int k = 0; k < StrategyCount; k++)\n            {\n                int stepY = myGraphs[k].Height / N - 5;\n                int stepX = myGraphs[k].Width / 3;\n                int StartX = 10;\n                int startY = 30;\n                Bitmap mybitmap = new Bitmap(myGraphs[k].Width, myGraphs[k].Height);\n                Graphics g = Graphics.FromImage(mybitmap);\n                g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;\n                g.Clear(Color.Black);\n                StringFormat myFormat = new StringFormat();\n                \n                myFormat.Alignment = StringAlignment.Center;\n                Point[,] myArray = new Point[2, N];\n                for (int j = 0; j < 2; j++)\n                {\n                    \n                    for (int i = 0; i < N; i++)\n                    {\n                        //g.FillEllipse(new SolidBrush(Color.Red), StartX, startY, 40, 40);\n                        \n                       // g.DrawString((i + 1).ToString(), new Font(\"Arial\", 12), new SolidBrush(Color.White), StartX+20, startY+10, myFormat);\n                        \n                        myArray[j, i] = new Point(StartX + 20, startY + 20);\n                        startY += stepY;\n                    }\n                     \n                    StartX += Convert.ToInt32(2.5*stepX);\n                    startY = 30;\n                }\n\n                for(int i = 0; i < N; i++)\n                {\n                    Pen myPen = new Pen(Color.Aquamarine);\n                    myPen.CustomEndCap = new System.Drawing.Drawing2D.AdjustableArrowCap(3, 4);\n                    myPen.Width = 1;\n                    for (int j = 0; j < N; j++)\n                    {\n                        double t = 1 - (20 / Math.Sqrt((myArray[0, i].X - myArray[1, j].X) * (myArray[0, i].X - myArray[1, j].X) + (myArray[0, i].Y - myArray[1, j].Y) * (myArray[0, i].Y - myArray[1, j].Y)));\n                        float newX = Convert.ToSingle(myArray[0, i].X + (myArray[1, j].X - myArray[0, i].X) * t);\n                        float newY = Convert.ToSingle(myArray[0, i].Y + (myArray[1, j].Y - myArray[0, i].Y) * t);\n                        float t2 = 0.2f;\n                        float newTextX = Convert.ToSingle(myArray[0, i].X + (myArray[1, j].X - myArray[0, i].X) * t2);\n                        float newTextY = Convert.ToSingle(myArray[0, i].Y + (myArray[1, j].Y - myArray[0, i].Y) * t2);\n                        g.TranslateTransform(newTextX, newTextY);\n                        Double dy = newTextY - newY;\n                        Double dx = newTextX - newX;\n                        float angle = (Convert.ToSingle(Math.Atan(dy / dx)));\n                        angle = Convert.ToSingle(angle/Math.PI*180);\n                        //MessageBox.Show(angle.ToString());\n                        g.RotateTransform(angle);\n                        String DrawStr = \"\";\n                        try\n                        {\n                            float c = 0;\n                            float.TryParse(myMatrixP[k].Rows[i].Cells[j].Value.ToString(), out c);\n                            float.TryParse(myMatrixR[k].Rows[i].Cells[j].Value.ToString(), out c);\n                            \n                            DrawStr = \"(p = \" + myMatrixP[k].Rows[i].Cells[j].Value.ToString() + \", r = \" + myMatrixR[k].Rows[i].Cells[j].Value.ToString() + \")\";\n                        }\n                        catch\n                        {\n                            DrawStr = \"\";\n                        }\n                        g.DrawString(DrawStr, new Font(\"Arial\", 8), new SolidBrush(Color.Coral), new PointF(0, 0));\n                        g.ResetTransform();\n                        g.DrawLine(myPen, myArray[0, i], new PointF(newX, newY));\n                    }\n                }\n                for(int j = 0; j < 2; j++)\n                {\n                    for (int i = 0; i < N; i++) //    \n                    {\n                        g.FillEllipse(new SolidBrush(Color.Red), myArray[j, i].X-20, myArray[j,i].Y-20, 40, 40);\n                        g.DrawString((i + 1).ToString(), new Font(\"Arial\", 12), new SolidBrush(Color.White), myArray[j, i].X, myArray[j, i].Y - 10, myFormat);\n                     }\n                }\n                myGraphs[k].Image = mybitmap;\n                myGraphs[k].Invalidate();\n            }\n        }\n\n        private void ToolStripMenuItem_Click(object sender, EventArgs e)\n        {\n            this.Close();\n        }\n\n        private void label7_Click(object sender, EventArgs e)\n        {\n\n        }\n\n        private void label8_Click(object sender, EventArgs e)\n        {\n\n        }\n\n        private void label9_Click(object sender, EventArgs e)\n        {\n\n        }\n\n        private void label14_Click(object sender, EventArgs e)\n        {\n\n        }\n    }\n}",
 "title": ""
}