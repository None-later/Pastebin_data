{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "lg_en"
 ],
 "key": "9GGRVMDh",
 "pasteDate": "Feb 18, 2018, 5:01:50 PM",
 "relevancy": 0.0,
 "relevant": false,
 "text": "/*The name of this pgm can be CalConversion which takes number\n values for units as input and output as number for giving in othetr units\n**CalConversion \n**CalConversion(inunit(number),outunit(number))*/\n  \n/*Here in this pgm we have to calculate values in different required units*/\n\n/*Program examples:: CalConversion()-->*/\n\n/*Step1:declare the class\n  Step2:decalre the inputs for input units and output\n  Step3:declare the method for calculating the conversiobns according to the table.\n  step4:multiplication as required .\n  step5:return the output value for new units*/\n\n/*Dry run part\n  inunits= , outunits=*/\n\n/* program body*/\n\nclass CalConversion\n{\nstatic double inunit; \nstatic double outunit;\nstatic int swopt;\npublic static double units( double inunit, int swopt)\n{\n  switch(swopt)\n  {\n    case 0: outunit= 2.54 * inunit;   /*inch to cm*/\n    break;\n    case 1: outunit= 12 * inunit;     /*feet to inch*/\n    break;\n    case 3: outunit= 3 * inunit;      /*yard to feet*/\n    break;\n    case 4: outunit= 2.5 * inunit;    /*rod to yard*/ \n    break;\n    case 5: outunit= 40 * inunit;     /*furlong to rods*/\n    break;\n    case 6: outunit= 8 * inunit;      /*mile to furlong*/\n    break;\n    case 7: outunit=  12 * 2.54 * inunit;  /*feet to cm*/\n    break;\n    case 8: outunit= 3 * 12 * 2.54 * inunit;/*yard to cm*/\n    break;\n    case 9: outunit=  2.5 * 12 * 3 * inunit;  /*rods to inch*/\n    break;\n    case 10: outunit= 8 * 40 * 2.5 * 3 * inunit;/*miles to feet*/\n    break;}\nreturn outunit;\n}\n}\n\n/* testing values*/\n\n///////////////////////////////////////////////////////////////////////////////////////////\n\n/*The name of this pgm can be CalGcd which takes 2 diff numbers as\n input number and gives nth term as output..\n**CalOccur1 \n**CalOccur1(number(number),nof1(number))*/\n  \n/*Here in this pgm we have to calculate the number of times 1 occurs in a number*/\n\n/*Program examples:: CalOccur1(13141516)--> 4*/\n\n/*Step1:declare the class\n  Step2:decalre the inputs 3 three numbers and output\n  Step3:declare the method for calculating the number of 1s in given number.\n  step4:take the number and do its modulus with 10.\n        if its 1 then increment the 0 initialised flag.\n        then do change the input value by dividing it by 10.\n        do continue this until the number is greater than 0.\n  step5:return the nth term value*/\n\n/*Dry run part\n  n= 1316190 out=3\n  n= 1638121 out=3*/\n\n/* program body*/\nclass CalGcd\n{\nstatic int a,b; \npublic static int gcd(int a,int b)\n{\n  if(a==b)\n  {\n    return a;\n  }\n  else if(a>b)\n  {\n    return(gcd(a-b,b));\n  }\n  else\n  {\n    return(gcd(a,b-a));\n  }\n}\n}\n\n///////////////////////////////////////////////////////////////////////////////////////\n\n\n/*The name of this pgm can be CalGrosspay which takes float \nor double values for the no of hrs as input and \n  output as double for the giving grosspay of the employee\n**CalGrosspay \n**CalGrosspay(no of hrs(number),grosspay(number))*/\n  \n/*Here in this pgm we have to calculate the net pay of the \n * employee taking $12 per hr and then deduct the tax as 15%\n of the net pay and calculate the grosspay*/\n\n/*Program examples:: CalGrosspay(10 hrs)-->$102*/\n\n/*Step1:declare the class\n  Step2:decalre the input no of hrs as integer\n  Step3:declare the method for calculating the tax and then its grosspay.\n  step4:netpay=12 * 10, grosspay= netpay- 15% of the netpay.\n  step5:return the output value for groasspay*/\n\n/*Dry run part\n  nohrs= 10, net=120, gross=102\n  nohrs= 20, net=240, gross=204*/\n\n/* program body*/\n\nclass CalGrosspay\n{\nstatic double nohrs;\nstatic double intr;\npublic static double gross(double nohrs)\n{\n  intr=(12 * nohrs)-(0.15 * 12 * nohrs);\nreturn intr;\n}\n}\n\n/* testing values*/\n\n////////////////////////////////////////////////////////////////////////////////////\n\n\n/*The name of this pgm can be CalMax which takes number\n values for the three numbers as input and output as number for giving the largest.\n**CalMax \n**CalMax(3 numbers(number),largest(number))*/\n  \n/*Here in this pgm we have to calculate the largest of the 3 given numbers.*/\n\n/*Program examples:: CalMax()-->*/\n\n/*Step1:declare the class\n  Step2:decalre the inputs 3 three numbers and output\n  Step3:declare the method for calculating the largest of the 3 numbers.\n  step4:check for the largets of first two and then compare that with the 3rd.\n        this can be done using the if else statement.\n  step5:return the output value for largest*/\n\n/*Dry run part\n  3 inputs: 3, 6, 8 ,, output:8*/\n\n/* program body*/\n\nclass CalMax\n{\nstatic int a,b,c; \nstatic int z=0;\npublic static int max(int a, int b, int c)\n{\n  if(a>b)\n  {\n    z=a;}\n  else\n  {\n    z=b;\n  }\n  if(z>c) \n  {\n    return z;\n  }\n  else\n  {\n    return c;\n  }\n}\n}\n\n/* testing values*/\n\n///////////////////////////////////////////////////////////////////////////////////\n\n\n/*The name of this pgm can be CalOccur1 which takes n as\n input number and gives nth term as output..\n**CalOccur1 \n**CalOccur1(number(number),nof1(number))*/\n  \n/*Here in this pgm we have to calculate the number of times 1 occurs in a number*/\n\n/*Program examples:: CalOccur1(13141516)--> 4*/\n\n/*Step1:declare the class\n  Step2:decalre the inputs 3 three numbers and output\n  Step3:declare the method for calculating the number of 1s in given number.\n  step4:take the number and do its modulus with 10.\n        if its 1 then increment the 0 initialised flag.\n        then do change the input value by dividing it by 10.\n        do continue this until the number is greater than 0.\n  step5:return the nth term value*/\n\n/*Dry run part\n  n= 1316190 out=3\n  n= 1638121 out=3*/\n\n/* program body*/\n\nclass CalOccur1\n{\nstatic int n,a,i=0; \npublic static int occur1(int n)\n{\n  while(n>0)\n  {\n   a= n % 10;\n   if(a==1)\n   {\n     i++;\n   }\n   n= n/10;\n  }\n  return i;\n}\n}\n\n/* testing values*/\n\n///////////////////////////////////////////////////////////////////////////////////////\n\n/*The name of this pgm can be CalPayback which takes charges for a month as\n input and output as the payback amount.\n**CalPayback \n**CalPayback(chargesamt(number),payback(number))*/\n  \n/*Here in this pgm we have to calculate the payback amt the \n bank provides for the amt of charges amt a month.*/\n\n/*Program examples:: CalPayback(400)--> 1*/\n\n/*Step1:declare the class\n  Step2:decalre the inputs 3 three numbers and output\n  Step3:declare the method for calculating the payback amt for corresspondin charges.\n  step4:check for the rabge in wich the charges amt fall for each input \n        and calculate the percentage amt as shown in the table.\n  step5:return the payback value*/\n\n/*Dry run part\n  charges= 400 payback amt= 1\n  charges= 1400 payback amt= 5.75*/\n\n/* program body*/\n\nclass CalPayback\n{\nstatic int c; \nstatic double p;\npublic static double payback(int c)\n{\n  if(c<= 500)\n  {\n    p= 0.0025 * c;\n  }\n  else if (c>500 && c<=1500)\n  {\n    p=0.0050 * c;\n  }\n  else if (c>1500 && c<=2500)\n  {\n    p=0.0075 * c;\n  }\n  else if(c>2500)\n  {\n    p= 0.01 * c;\n  }\n  return p;\n}\n}\n\n/* testing values*/\n\n///////////////////////////////////////////////////////////////////////////////////////\n\n\n/*The name of this pgm can be CalPerimeter which takes float \nor double values for the area of the square as input and \n  output as double for the giving the perimeter of the square\n**CalPerimeter \n**CalPerimeter(area(number),Perimeter(number))*/\n  \n/*Here in this pgm we have to calculate the side of the square fromthe given area \n of the square and calculate its perimeter*/\n\n/*Program examples:: CalPerimeter(100)-->40*/\n\n/*Step1:declare the class\n  Step2:decalre the input area as integer\n  Step3:declare the method for calculating the same.\n  step4:area = a * a, perimeter is 4 * sqrt(area)\n  step5:return the output value for perimeter*/\n\n/*Dry run part\n area= 400 then a= side= sqrt(400)= 20 and perimetr is = 4*20=80\n area= 300 then a= side= sqrt(900)= 30 and perimetr is = 4*30=120*/\n\n/* program body*/\n\nclass CalPerimeter\n{\nstatic double area;\nstatic double intr1;\nstatic double intr2;\npublic static double peri(double area)\n{\n  intr1 =Math.sqrt(area);\n  intr2 = 4 * intr1;\nreturn intr2;\n}\n}\n\n/* testing values*/\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\n/*The name of this pgm can be CalPipearea which takes number\n values for radius and height of the pipe as input and \n  output as number for giving the pipe area\n**CalPipearea \n**CalPipearea(radius(number),height(number),area(number))*/\n  \n/*Here in this pgm we have to calculate the area of a\n pipe given the radius and the height*/\n\n/*Program examples:: CalPipearea(10,10)-->628*/\n\n/*Step1:declare the class\n  Step2:decalre the inputs for radius and height as integer\n  Step3:declare the method for calculating the area.\n  step4:r=10,h=10,pi=3.14, area= 10*10*3.24*2=628.\n  step5:return the output value for area*/\n\n/*Dry run part\n  r= 10, h=10, area= 628\n  r= 5,  h=5,  area= 157*/\n\n/* program body*/\n\nclass CalPipearea\n{\nstatic double r=0; \nstatic double h=0;\nstatic double intr=0;\nstatic double pi= 3.14;\npublic static double area(double r,double h)\n{\n  intr= 2 * pi * r * h;\nreturn intr;\n}\n}\n\n/* testing values*/\n\n///////////////////////////////////////////////////////////////////////////////\n\n/*The name of this pgm can be CalTribonacci which takes n as\n input number and gives nth term as output..\n**CalTribonacci \n**CalTribonacci(nth term(number),output(number))*/\n  \n/*Here in this pgm we have to calculate the nth term of a tribonacci series*/\n\n/*Program examples:: CalTribonacci(5)--> 4*/\n\n/*Step1:declare the class\n  Step2:decalre the inputs 3 three numbers and output\n  Step3:declare the method for calculating the nth term of the series.\n  step4:initialize the first 3 inputs in 3 variables. \n        the add all these to another 4th variable.\n        then interchange the values in the first three variables as indicated.\n        do the calculation till the value of n is greater than 3.\n  step5:return the nth term value*/\n\n/*Dry run part\n  n= 4 nth term= 4\n  n= 7 nth term= 13*/\n\n/* program body*/\n\nclass CalTribonacci\n{\nstatic int n,d=0; \nstatic int a=0, b= 1, c=1;\npublic static int tri(int n)\n{\n  while(n>3)\n  {\n    d=a+b+c;\n    a=b;\n    b=c;\n    c=d;\n    n--;\n  }\n  return d;\n}\n}\n\n/* testing values*/",
 "title": ""
}