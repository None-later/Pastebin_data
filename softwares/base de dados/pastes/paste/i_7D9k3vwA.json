{
 "espireDate": "N",
 "format": "lua",
 "jSonReasons": [
  "kw_pastebin",
  "re_sql",
  "lg_en",
  "re_ast1"
 ],
 "key": "7D9k3vwA",
 "pasteDate": "Feb 17, 2018, 11:11:13 AM",
 "relevancy": -2.0,
 "relevant": false,
 "text": "-- Setup paths\nlocal sPath = \".:/rom/programs\"\nif term.isColor() then\n\tsPath = sPath..\":/rom/programs/advanced\"\nend\nif turtle then\n\tsPath = sPath..\":/rom/programs/turtle\"\nelse\n    sPath = sPath..\":/rom/programs/rednet:/rom/programs/fun\"\n    if term.isColor() then\n    \tsPath = sPath..\":/rom/programs/fun/advanced\"\n    end\nend\nif pocket then\n    sPath = sPath..\":/rom/programs/pocket\"\nend\nif commands then\n    sPath = sPath..\":/rom/programs/command\"\nend\nif http then\n\tsPath = sPath..\":/rom/programs/http\"\nend\nshell.setPath( sPath )\nhelp.setPath( \"/rom/help\" )\n\n-- Setup aliases\nshell.setAlias( \"ls\", \"list\" )\nshell.setAlias( \"dir\", \"list\" )\nshell.setAlias( \"cp\", \"copy\" )\nshell.setAlias( \"mv\", \"move\" )\nshell.setAlias( \"rm\", \"delete\" )\nshell.setAlias( \"clr\", \"clear\" )\nshell.setAlias( \"rs\", \"redstone\" )\nshell.setAlias( \"sh\", \"shell\" )\nif term.isColor() then\n    shell.setAlias( \"background\", \"bg\" )\n    shell.setAlias( \"foreground\", \"fg\" )\nend\n\n-- Setup completion functions\nlocal function completeMultipleChoice( sText, tOptions, bAddSpaces )\n    local tResults = {}\n    for n=1,#tOptions do\n        local sOption = tOptions[n]\n        if #sOption + (bAddSpaces and 1 or 0) > #sText and string.sub( sOption, 1, #sText ) == sText then\n            local sResult = string.sub( sOption, #sText + 1 )\n            if bAddSpaces then\n                table.insert( tResults, sResult .. \" \" )\n            else\n                table.insert( tResults, sResult )\n            end\n        end\n    end\n    return tResults\nend\nlocal function completePeripheralName( sText, bAddSpaces )\n    return completeMultipleChoice( sText, peripheral.getNames(), bAddSpaces )\nend\nlocal tRedstoneSides = redstone.getSides()\nlocal function completeSide( sText, bAddSpaces )\n    return completeMultipleChoice( sText, tRedstoneSides, bAddSpaces )\nend\nlocal function completeFile( shell, nIndex, sText, tPreviousText )\n    if nIndex == 1 then\n        return fs.complete( sText, shell.dir(), true, false )\n    end\nend\nlocal function completeDir( shell, nIndex, sText, tPreviousText )\n    if nIndex == 1 then\n        return fs.complete( sText, shell.dir(), false, true )\n    end\nend\nlocal function completeEither( shell, nIndex, sText, tPreviousText )\n    if nIndex == 1 then\n        return fs.complete( sText, shell.dir(), true, true )\n    end\nend\nlocal function completeEitherEither( shell, nIndex, sText, tPreviousText )\n    if nIndex == 1 then\n        local tResults = fs.complete( sText, shell.dir(), true, true )\n        for n=1,#tResults do\n            local sResult = tResults[n]\n            if string.sub( sResult, #sResult, #sResult ) ~= \"/\" then\n                tResults[n] = sResult .. \" \"\n            end\n        end\n        return tResults\n    elseif nIndex == 2 then\n        return fs.complete( sText, shell.dir(), true, true )\n    end\nend\nlocal function completeProgram( shell, nIndex, sText, tPreviousText )\n    if nIndex == 1 then\n        return shell.completeProgram( sText )\n    end\nend\nlocal function completeHelp( shell, nIndex, sText, tPreviousText )\n    if nIndex == 1 then\n        return help.completeTopic( sText )\n    end\nend\nlocal function completeAlias( shell, nIndex, sText, tPreviousText )\n    if nIndex == 2 then\n        return shell.completeProgram( sText )\n    end\nend\nlocal function completePeripheral( shell, nIndex, sText, tPreviousText )\n    if nIndex == 1 then\n        return completePeripheralName( sText )\n    end\nend\nlocal tGPSOptions = { \"host\", \"host \", \"locate\" }\nlocal function completeGPS( shell, nIndex, sText, tPreviousText )\n    if nIndex == 1 then\n        return completeMultipleChoice( sText, tGPSOptions )\n    end\nend\nlocal tLabelOptions = { \"get\", \"get \", \"set \", \"clear\", \"clear \" }\nlocal function completeLabel( shell, nIndex, sText, tPreviousText )\n    if nIndex == 1 then\n        return completeMultipleChoice( sText, tLabelOptions )\n    elseif nIndex == 2 then\n        return completePeripheralName( sText )\n    end\nend\nlocal function completeMonitor( shell, nIndex, sText, tPreviousText )\n    if nIndex == 1 then\n        return completePeripheralName( sText, true )\n    elseif nIndex == 2 then\n        return shell.completeProgram( sText )\n    end\nend\nlocal tRedstoneOptions = { \"probe\", \"set \", \"pulse \" }\nlocal function completeRedstone( shell, nIndex, sText, tPreviousText )\n    if nIndex == 1 then\n        return completeMultipleChoice( sText, tRedstoneOptions )\n    elseif nIndex == 2 then\n        return completeSide( sText )\n    end\nend\nlocal tDJOptions = { \"play\", \"play \", \"stop \" }\nlocal function completeDJ( shell, nIndex, sText, tPreviousText )\n    if nIndex == 1 then\n        return completeMultipleChoice( sText, tDJOptions )\n    elseif nIndex == 2 then\n        return completePeripheralName( sText )\n    end\nend\nlocal tPastebinOptions = { \"put \", \"get \", \"run \" }\nlocal function completePastebin( shell, nIndex, sText, tPreviousText )\n    if nIndex == 1 then\n        return completeMultipleChoice( sText, tPastebinOptions )\n    elseif nIndex == 2 then\n        if tPreviousText[2] == \"put\" then\n            return fs.complete( sText, shell.dir(), true, false )\n        end\n    end\nend\nlocal tChatOptions = { \"host \", \"join \" }\nlocal function completeChat( shell, nIndex, sText, tPreviousText )\n    if nIndex == 1 then\n        return completeMultipleChoice( sText, tChatOptions )\n    end\nend\nshell.setCompletionFunction( \"rom/programs/alias\", completeAlias )\nshell.setCompletionFunction( \"rom/programs/cd\", completeDir )\nshell.setCompletionFunction( \"rom/programs/copy\", completeEitherEither )\nshell.setCompletionFunction( \"rom/programs/delete\", completeEither )\nshell.setCompletionFunction( \"rom/programs/drive\", completeDir )\nshell.setCompletionFunction( \"rom/programs/edit\", completeFile )\nshell.setCompletionFunction( \"rom/programs/eject\", completePeripheral )\nshell.setCompletionFunction( \"rom/programs/gps\", completeGPS )\nshell.setCompletionFunction( \"rom/programs/help\", completeHelp )\nshell.setCompletionFunction( \"rom/programs/id\", completePeripheral )\nshell.setCompletionFunction( \"rom/programs/label\", completeLabel )\nshell.setCompletionFunction( \"rom/programs/list\", completeDir )\nshell.setCompletionFunction( \"rom/programs/mkdir\", completeFile )\nshell.setCompletionFunction( \"rom/programs/monitor\", completeMonitor )\nshell.setCompletionFunction( \"rom/programs/move\", completeEitherEither )\nshell.setCompletionFunction( \"rom/programs/redstone\", completeRedstone )\nshell.setCompletionFunction( \"rom/programs/rename\", completeEitherEither )\nshell.setCompletionFunction( \"rom/programs/shell\", completeProgram )\nshell.setCompletionFunction( \"rom/programs/type\", completEither )\nshell.setCompletionFunction( \"rom/programs/advanced/bg\", completeProgram )\nshell.setCompletionFunction( \"rom/programs/advanced/fg\", completeProgram )\nshell.setCompletionFunction( \"rom/programs/fun/dj\", completeDJ )\nshell.setCompletionFunction( \"rom/programs/fun/advanced/paint\", completeFile )\nshell.setCompletionFunction( \"rom/programs/http/pastebin\", completePastebin )\nshell.setCompletionFunction( \"rom/programs/rednet/chat\", completeChat )\n\n-- Run autorun files\nif fs.exists( \"/rom/autorun\" ) and fs.isDir( \"/rom/autorun\" ) then\n\tlocal tFiles = fs.list( \"/rom/autorun\" )\n\ttable.sort( tFiles )\n\tfor n, sFile in ipairs( tFiles ) do\n\t\tif string.sub( sFile, 1, 1 ) ~= \".\" then\n\t\t\tlocal sPath = \"/rom/autorun/\"..sFile\n\t\t\tif not fs.isDir( sPath ) then\n\t\t\t\tshell.run( sPath )\n\t\t\tend\n\t\tend\n\tend\nend\n\n-- Run the user created startup, either from disk drives or the root\nlocal sUserStartup = shell.resolveProgram( \"/startup\" )\nlocal bEnableDiskStartup = (commands == nil)\nif bEnableDiskStartup then\n    for n,sName in pairs( peripheral.getNames() ) do\n        if disk.isPresent( sName ) and disk.hasData( sName ) then\n            local sDiskStartup = shell.resolveProgram( \"/\" .. disk.getMountPath( sName ) .. \"/startup\" )\n            if sDiskStartup then\n                sUserStartup = sDiskStartup\n                break\n            end\n        end\n    end\nend\nif sUserStartup then\n    shell.run( sUserStartup )\nend",
 "title": "startup"
}