{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "lg_en"
 ],
 "key": "Ezx6NUxA",
 "pasteDate": "Feb 26, 2018, 1:52:01 PM",
 "relevancy": 1.0,
 "relevant": false,
 "text": "using System;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing Cinema;\nusing System.Linq;\n\nnamespace UnitTestCinema2\n{\n\n    [TestClass()]\n    public class PlaybillTests\n    {\n        [TestMethod()]\n        public void PlaybillTest()\n        {\n            Playbill playbill = new Playbill();\n\n            Assert.IsNotNull(playbill);\n            Assert.IsTrue(playbill.movies.Count() > 0);\n        }\n\n        [TestMethod()]\n        public void SearchMovieSuccessTest() //  \n        {\n            //Arrange ()\n            string name = \"\";\n            DateTime date = new DateTime(2018, 01, 24, 09, 00, 00);\n            Playbill playbill = new Playbill();\n\n            //Act ()\n            Movie result = playbill.SearchMovie(date, name);\n\n            //Assert ()\n            Assert.IsNotNull(result); //    null, ..  \n            Assert.AreEqual(name, result.name); //   \n            Assert.AreEqual(date, result.datetime); //   \n\n            //!       \n            //   if (m.datetime.Date == date && m.name == name)\n            //   if (m.datetime == date && m.name == name)\n        }\n\n        [TestMethod()]\n        public void PrintMoviesTest()\n        {\n            Assert.Fail();\n        }\n    }\n}\n\t\nusing System;\n\nnamespace Cinema\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Playbill playbill = new Playbill();\n\n            // 1.  \n            playbill.PrintMovies();\n\n            // 2.   \n            DateTime dt;\n            Console.WriteLine(\" :\");\n            if (!DateTime.TryParse(Console.ReadLine(), out dt))\n            {\n                Console.WriteLine(\"   .  -  ...\");\n                Console.ReadKey(true);\n                return;\n            }\n\n            Console.WriteLine(\"  :\");\n            string filmname = Console.ReadLine();\n\n            Movie mov;\n            if ((mov = playbill.SearchMovie(dt, filmname)) == null)\n            {\n            }\n\n            // 3.1     \n            mov.PrintFreePlaces();\n\n            int answ;\n            // 3.2  \n            Console.WriteLine(\" : \");\n            if (!Int32.TryParse(Console.ReadLine(), out answ))\n            {\n                Console.WriteLine(\"   .  -  ...\");\n                Console.ReadKey(true);\n                return;\n            }\n\n            Console.ReadKey(true);\n        }\n    }\n\n    //  \"\"\n    public struct Place\n    {\n        public int row;// \n        public int place_number;//  \n        public Place(int r, int p)\n        {\n            row = r;\n            place_number = p;\n        }\n    }\n\n    //  \"\"\n    public class Movie\n    {\n        public readonly DateTime datetime;//  \n        public readonly string name;\n        public readonly int price;\n        public readonly string genre;\n        public readonly TimeSpan duration;//  \n        public Place[] free_places;\n        public int free_pl_count;// -  \n\n        public static readonly int fr_pl_MAX_cnt = 100;\n        public static readonly int rows_MAX_cnt = 10;\n\n        public static Random random = new Random(DateTime.Now.Millisecond);\n\n        public Movie(DateTime datetime, string name, int price, string genre, TimeSpan duration)\n        {\n            this.datetime = datetime;\n            this.name = name;\n            this.price = price;\n            this.genre = genre;\n            this.duration = duration;\n\n            free_pl_count = random.Next(1, fr_pl_MAX_cnt);\n            GenerateFreePlaces();\n        }\n        public void GenerateFreePlaces()\n        {\n            //    \n            free_places = new Place[random.Next(1, rows_MAX_cnt)];\n            for (int i = 0; i < free_places.Length; i++)\n                free_places[i] = new Place(random.Next(0, rows_MAX_cnt), random.Next(0, fr_pl_MAX_cnt));\n        }\n        public bool CheckForPlace(int row, int pnumber)\n        {\n            foreach (Place p in free_places)\n                if (row == p.row && pnumber == p.place_number)\n                    return true;\n            return false;\n    }\n        public void PrintFreePlaces()\n        {\n            Console.WriteLine(\"   |  | \");\n            Console.WriteLine(free_pl_count);\n            foreach (Place p in free_places)\n                Console.WriteLine(\"ttt     {0}t  {1}\", p.row, p.place_number);\n        }\n    }\n\n    //  \"\"\n    class Playbill\n    {\n        public Movie[] movies;\n        public Playbill()\n        {\n            movies = new Movie[3];\n            movies[0] = new Movie(new DateTime(2018, 01, 12, 14, 00, 00), \"\", 19, \"\", new TimeSpan(2, 0, 0));\n            movies[1] = new Movie(new DateTime(2018, 01, 15, 19, 00, 00), \"\", 13, \"\", new TimeSpan(1, 0, 0));\n            movies[2] = new Movie(new DateTime(2018, 01, 24, 09, 00, 00), \"\", 11, \"\", new TimeSpan(1, 30, 0));\n\n        }\n        public Movie SearchMovie(DateTime date, string name)\n        {\n            //       \n            foreach (Movie m in movies)\n                if (m.datetime.Date == date && m.name == name)\n                    return m;\n                else\n                    continue;\n\n            return null;\n        }\n        public void PrintMovies()\n        {\n            Console.WriteLine(\"  t  |t |   |   |t t   |  \");\n            foreach (Movie m in movies)\n                Console.WriteLine(\"{0}t{1:d2}:{2:d2}t{3}ttt{4}.tt{5}t{6} .\", m.datetime.Date.ToShortDateString(),\n                                       m.datetime.Hour, m.datetime.Minute, m.name, m.price, m.genre, m.duration.TotalMinutes);\n        }\n    }\n}",
 "title": ""
}