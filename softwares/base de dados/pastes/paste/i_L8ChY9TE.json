{
 "espireDate": "N",
 "format": "text",
 "jSonReasons": [
  "kw_firewalls",
  "lg_en",
  "kw_password",
  "kw_anonymous",
  "kw_security",
  "kw_anon",
  "re_ast1"
 ],
 "key": "L8ChY9TE",
 "pasteDate": "Feb 8, 2018, 8:01:30 AM",
 "relevancy": -2.0,
 "relevant": false,
 "text": "class ApiKeyAuthenticator implements SimplePreAuthenticatorInterface\n{\n    public function createToken(Request $request, $providerKey)\n    {\n        $apiKey = $request->query->get('apiKey');\n\n        return new PreAuthenticatedToken(\n            'anon.',\n            $apiKey,\n            $providerKey\n        );\n    }\n\n    public function authenticateToken(TokenInterface $token, UserProviderInterface $userProvider, $providerKey)\n    {\n        $apiKey = $token->getCredentials();\n        $username = $userProvider->getUsernameForApiKey($apiKey);\n\n        // The part where we try and keep the user in the session!\n        $user = $token->getUser();\n        if ($user instanceof ApiKeyUser) {\n            return new PreAuthenticatedToken(\n                $user,\n                $apiKey,\n                $providerKey,\n                $user->getRoles()\n            );\n        }\n\n\n        $user = $userProvider->loadUserByUsername($username);\n\n        return new PreAuthenticatedToken(\n            $user,\n            $apiKey,\n            $providerKey,\n            $user->getRoles()\n        );\n    }\n\n    public function supportsToken(TokenInterface $token, $providerKey)\n    {\n        return $token instanceof PreAuthenticatedToken && $token->getProviderKey() === $providerKey;\n    }\n}\n\t\nclass ApiKeyUserProvider implements UserProviderInterface\n{\n    protected $repo;\n\n    // I'm injecting the Repo here (docs don't help with this)\n    public function __construct(UserRepository $repo)\n    {\n        $this->repo = $repo;\n    }\n\n    public function getUsernameForApiKey($apiKey)\n    {\n        $data = $this->repo->findUsernameByApiKey($apiKey);\n\n        $username = (!is_null($data)) ? $data->getUsername() : null;\n\n        return $username;\n    }\n\n    public function loadUserByUsername($username)\n    {\n        return $this->repo->findOneBy(['username' => $username]);\n    }\n\n    public function refreshUser(UserInterface $user)\n    {\n        // docs state to return here if we don't want stateless\n        return $user;\n    }\n\n    public function supportsClass($class)\n    {\n        return 'SymfonyComponentSecurityCoreUserUser' === $class;\n    }\n}\n\t\nclass ApiKeyUser implements UserInterface\n{\n    private $id;\n    private $username;\n    private $password;\n    private $email;\n    private $salt;\n    private $apiKey;\n    private $isActive;\n\n    public function __construct($username, $password, $salt, $apiKey, $isActive = true)\n    {\n        $this->username = $username;\n        $this->password = $password;\n        $this->salt = $salt;\n        $this->apiKey = $apiKey;\n        $this->isActive = $isActive;\n    }\n\n    //-- SNIP getters --//\n}\n\t\n# Here is my custom user provider class from above\nproviders:\n    api_key_user_provider:\n        id: api_key_user_provider\n\nfirewalls:\n    # Authentication disabled for dev (default settings)\n    dev:\n        pattern: ^/(_(profiler|wdt)|css|images|js)/\n        security: false\n    # My new settings, with stateless set to false\n    secured_area:\n        pattern: ^/\n        stateless: false\n        simple_preauth:\n            authenticator: apikey_authenticator\n        provider:\n            api_key_user_provider\n\t\napi_key_user_repository:\n    class: DoctrineORMEntityRepository\n    factory: [\"@doctrine.orm.entity_manager\", getRepository]\n    arguments: [AppBundleSecurityApiKeyUser]\n\napi_key_user_provider:\n    class:  AppBundleSecurityApiKeyUserProvider\n    factory_service: doctrine.orm.default_entity_manager\n    factory_method: getRepository\n    arguments: [\"@api_key_user_repository\"]\n\napikey_authenticator:\n    class: AppBundleSecurityApiKeyAuthenticator\n    public: false\n\t\n/**\n * Returns the user.\n *\n * @return string|null\n */\npublic function getUser()\n{\n    return $this->headers->get('PHP_AUTH_USER');\n}\n\t\n$this->get('security.token_storage')->getToken()->getUser();\n\t\n$this->getUser();\n\t\nprotected function getUser()\n{\n    if (!$this->container->has('security.token_storage')) {\n        throw new LogicException('The SecurityBundle is not registered in your application. Try running \"composer require symfony/security-bundle\".');\n    }\n\n    if (null === $token = $this->container->get('security.token_storage')->getToken()) {\n        return;\n    }\n\n    if (!is_object($user = $token->getUser())) {\n        // e.g. anonymous authentication\n        return;\n    }\n\n    return $user;\n}",
 "title": ""
}